
BatDetectorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001dc  08004e38  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08004e38  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3f5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002401  00000000  00000000  0002f601  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176a2  00000000  00000000  00033450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b24b  00000000  00000000  0004aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e6d6  00000000  00000000  00055d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  000e4490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004420 	.word	0x08004420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004420 	.word	0x08004420

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


static inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fbb4 	bl	8001534 <LCD5110_refresh_ll>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

static inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f891 	bl	8000f12 <LCD5110_wprint>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db41      	blt.n	8000e96 <LCD5110_wputchar+0x9e>
 8000e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db3c      	blt.n	8000e96 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e22:	461a      	mov	r2, r3
 8000e24:	2306      	movs	r3, #6
 8000e26:	4413      	add	r3, r2
 8000e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d833      	bhi.n	8000e9a <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	4413      	add	r3, r2
 8000e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e40:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d828      	bhi.n	8000e9a <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <LCD5110_wputchar+0xac>)
 8000e4a:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	18d0      	adds	r0, r2, r3
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	18d1      	adds	r1, r2, r3
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2206      	movs	r2, #6
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	441a      	add	r2, r3
 8000e70:	2306      	movs	r3, #6
 8000e72:	461e      	mov	r6, r3
 8000e74:	2308      	movs	r3, #8
 8000e76:	461c      	mov	r4, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461d      	mov	r5, r3
 8000e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	9501      	str	r5, [sp, #4]
 8000e8c:	9400      	str	r4, [sp, #0]
 8000e8e:	4633      	mov	r3, r6
 8000e90:	f000 f94e 	bl	8001130 <LCD5110_drawBitmap>
 8000e94:	e002      	b.n	8000e9c <LCD5110_wputchar+0xa4>
		return;
 8000e96:	bf00      	nop
 8000e98:	e000      	b.n	8000e9c <LCD5110_wputchar+0xa4>
		return;
 8000e9a:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	0800448c 	.word	0x0800448c

08000ea8 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	815a      	strh	r2, [r3, #10]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3301      	adds	r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7b1b      	ldrb	r3, [r3, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f7ff ff59 	bl	8000dbc <LCD5110_refresh>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af02      	add	r7, sp, #8
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000f20:	e055      	b.n	8000fce <LCD5110_wprint+0xbc>
		if (*str != '\n') {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d010      	beq.n	8000f4c <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f30:	4618      	mov	r0, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f7ff ff56 	bl	8000df8 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	2306      	movs	r3, #6
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	4413      	add	r3, r2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d904      	bls.n	8000f82 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d103      	bne.n	8000f8a <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d113      	bne.n	8000fb2 <LCD5110_wprint+0xa0>
		{
			LCD5110_wendl(win, lcd_conf);
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffa0 	bl	8000ed2 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8000f92:	f002 fdef 	bl	8003b74 <__locale_ctype_ptr>
 8000f96:	4602      	mov	r2, r0
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <LCD5110_wprint+0xa0>
				++str;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2308      	movs	r3, #8
 8000fbc:	4413      	add	r3, r2
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d807      	bhi.n	8000fd8 <LCD5110_wprint+0xc6>
			break;
		str++;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1a5      	bne.n	8000f22 <LCD5110_wprint+0x10>

	}
}
 8000fd6:	e000      	b.n	8000fda <LCD5110_wprint+0xc8>
			break;
 8000fd8:	bf00      	nop
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 8000fe2:	b40c      	push	{r2, r3}
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09e      	sub	sp, #120	; 0x78
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000fee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ff2:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 8000ff4:	f107 0010 	add.w	r0, r7, #16
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000ffe:	2164      	movs	r1, #100	; 0x64
 8001000:	f002 fe0c 	bl	8003c1c <vsniprintf>
 8001004:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fee0 	bl	8000dd4 <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fecc 	bl	8000dbc <LCD5110_refresh>

	va_end(vargs);

	return res;
 8001024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001026:	4618      	mov	r0, r3
 8001028:	3778      	adds	r7, #120	; 0x78
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	10db      	asrs	r3, r3, #3
 8001044:	2254      	movs	r2, #84	; 0x54
 8001046:	fb02 f203 	mul.w	r2, r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	2201      	movs	r2, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	753b      	strb	r3, [r7, #20]

	return res;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	461a      	mov	r2, r3
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	e893 0003 	ldmia.w	r3, {r0, r1}
 800106c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e008      	b.n	800109c <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	331c      	adds	r3, #28
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80010a2:	dbf2      	blt.n	800108a <LCD5110_clrscr+0xe>
	}
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db31      	blt.n	8001128 <LCD5110_putpix+0x78>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db2e      	blt.n	8001128 <LCD5110_putpix+0x78>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b53      	cmp	r3, #83	; 0x53
 80010ce:	dc2b      	bgt.n	8001128 <LCD5110_putpix+0x78>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b2f      	cmp	r3, #47	; 0x2f
 80010d4:	dc28      	bgt.n	8001128 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffa8 	bl	8001034 <xy_to_pix>

	if (color)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00c      	beq.n	8001104 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	7f19      	ldrb	r1, [r3, #28]
 80010f2:	7d3a      	ldrb	r2, [r7, #20]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	b2d1      	uxtb	r1, r2
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	771a      	strb	r2, [r3, #28]
 8001102:	e012      	b.n	800112a <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	7f1b      	ldrb	r3, [r3, #28]
 800110c:	b25a      	sxtb	r2, r3
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	b25b      	sxtb	r3, r3
 8001116:	4013      	ands	r3, r2
 8001118:	b25a      	sxtb	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	b2d1      	uxtb	r1, r2
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	460a      	mov	r2, r1
 8001124:	771a      	strb	r2, [r3, #28]
 8001126:	e000      	b.n	800112a <LCD5110_putpix+0x7a>
		return;
 8001128:	bf00      	nop
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e042      	b.n	80011ca <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	e038      	b.n	80011bc <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da00      	bge.n	8001152 <LCD5110_drawBitmap+0x22>
 8001150:	3307      	adds	r3, #7
 8001152:	10db      	asrs	r3, r3, #3
 8001154:	461a      	mov	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	fb03 f202 	mul.w	r2, r3, r2
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	4413      	add	r3, r2
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	425a      	negs	r2, r3
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	f002 0207 	and.w	r2, r2, #7
 8001176:	bf58      	it	pl
 8001178:	4253      	negpl	r3, r2
 800117a:	2201      	movs	r2, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001186:	4013      	ands	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	18d0      	adds	r0, r2, r3
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	18d1      	adds	r1, r2, r3
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <LCD5110_drawBitmap+0x7e>
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	e000      	b.n	80011b0 <LCD5110_drawBitmap+0x80>
 80011ae:	7dfa      	ldrb	r2, [r7, #23]
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	f7ff ff7d 	bl	80010b0 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbc2      	blt.n	800114a <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	3301      	adds	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbb8      	blt.n	8001144 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <send_byte_to_LCD5110>:
#include "lcd5110_ll.h"

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	6039      	str	r1, [r7, #0]
 80011e4:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	2201      	movs	r2, #1
 80011f2:	f001 fed9 	bl	8002fa8 <HAL_SPI_Transmit>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	897a      	ldrh	r2, [r7, #10]
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	f001 fec5 	bl	8002fa8 <HAL_SPI_Transmit>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6898      	ldr	r0, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	f001 fa08 	bl	8002650 <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6998      	ldr	r0, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	8a9b      	ldrh	r3, [r3, #20]
 8001258:	2201      	movs	r2, #1
 800125a:	4619      	mov	r1, r3
 800125c:	f001 f9f8 	bl	8002650 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6998      	ldr	r0, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8a9b      	ldrh	r3, [r3, #20]
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	f001 f9e8 	bl	8002650 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6918      	ldr	r0, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	899b      	ldrh	r3, [r3, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	f001 f9d8 	bl	8002650 <HAL_GPIO_WritePin>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6918      	ldr	r0, [r3, #16]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	899b      	ldrh	r3, [r3, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	f001 f9c8 	bl	8002650 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f023 0320 	bic.w	r3, r3, #32
 80012da:	2b07      	cmp	r3, #7
 80012dc:	dd01      	ble.n	80012e2 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80012de:	2301      	movs	r3, #1
 80012e0:	e008      	b.n	80012f4 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff74 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f023 030d 	bic.w	r3, r3, #13
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001312:	2302      	movs	r3, #2
 8001314:	e005      	b.n	8001322 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff5d 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	6039      	str	r1, [r7, #0]
 8001334:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da01      	bge.n	8001342 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 800133e:	2303      	movs	r3, #3
 8001340:	e008      	b.n	8001354 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001348:	b2db      	uxtb	r3, r3
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff44 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d901      	bls.n	8001372 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff2c 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b07      	cmp	r3, #7
 800139c:	d901      	bls.n	80013a2 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff14 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db03      	blt.n	80013d8 <LCD5110_set_X_base+0x1c>
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d4:	2b53      	cmp	r3, #83	; 0x53
 80013d6:	dd01      	ble.n	80013dc <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80013d8:	2307      	movs	r3, #7
 80013da:	e00a      	b.n	80013f2 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fef5 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	6039      	str	r1, [r7, #0]
 8001404:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db03      	blt.n	8001416 <LCD5110_set_Y_base+0x1c>
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	2b05      	cmp	r3, #5
 8001414:	dd01      	ble.n	800141a <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8001416:	2307      	movs	r3, #7
 8001418:	e00a      	b.n	8001430 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001422:	b25b      	sxtb	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fed6 	bl	80011da <send_byte_to_LCD5110>
	return LCD5110_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	603a      	str	r2, [r7, #0]
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	460b      	mov	r3, r1
 8001446:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffb4 	bl	80013bc <LCD5110_set_X_base>
 8001454:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <LCD5110_set_XY_base+0x28>
		return res;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	e00c      	b.n	800147a <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8001460:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ffc7 	bl	80013fa <LCD5110_set_Y_base>
 800146c:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <LCD5110_set_XY_base+0x40>
		return res;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	e000      	b.n	800147a <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	4608      	mov	r0, r1
 80014b4:	4611      	mov	r1, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	460b      	mov	r3, r1
 80014be:	70bb      	strb	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffdc 	bl	8001482 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff feac 	bl	8001228 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fee9 	bl	80012a8 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80014da:	bf00      	nop
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3b01      	subs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1fa      	bne.n	80014dc <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fece 	bl	8001288 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff febb 	bl	8001268 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fee7 	bl	80012c8 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff13 	bl	800132a <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff27 	bl	800135c <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 800150e:	7e3b      	ldrb	r3, [r7, #24]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff3a 	bl	800138c <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fed4 	bl	80012c8 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fee9 	bl	80012fc <LCD5110_set_mode_base>

	return LCD5110_OK;
 800152a:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fe73 	bl	8001228 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fe90 	bl	8001268 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	2100      	movs	r1, #0
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff73 	bl	8001438 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe78 	bl	8001248 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	331c      	adds	r3, #28
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fe4c 	bl	8001200 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LCD5110_clear_scr>:
static inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fd7e 	bl	800107c <LCD5110_clrscr>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <LCD5110_set_cursor>:
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7ff fc82 	bl	8000ea8 <LCD5110_wset_cursor>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <LCD5110_print>:
static inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fca5 	bl	8000f12 <LCD5110_wprint>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f000 fcfb 	bl	8001fd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f8d1 	bl	8001780 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f000 f9bd 	bl	800195c <MX_GPIO_Init>
  MX_TIM1_Init();
 80015e2:	f000 f96b 	bl	80018bc <MX_TIM1_Init>
  MX_SPI2_Init();
 80015e6:	f000 f933 	bl	8001850 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80015ea:	485c      	ldr	r0, [pc, #368]	; (800175c <main+0x18c>)
 80015ec:	f001 fee7 	bl	80033be <HAL_TIM_Base_Start>
  initialise_LCD(&lcd1, &hspi2);
 80015f0:	495b      	ldr	r1, [pc, #364]	; (8001760 <main+0x190>)
 80015f2:	485c      	ldr	r0, [pc, #368]	; (8001764 <main+0x194>)
 80015f4:	f000 fb10 	bl	8001c18 <initialise_LCD>

  LCD5110_print("Starting!\n", BLACK, &lcd1);
 80015f8:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <main+0x194>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	485a      	ldr	r0, [pc, #360]	; (8001768 <main+0x198>)
 80015fe:	f7ff ffd5 	bl	80015ac <LCD5110_print>
  HAL_Delay(1000);
 8001602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001606:	f000 fd55 	bl	80020b4 <HAL_Delay>
  float impulse = impulse_time(&htim1);
 800160a:	4854      	ldr	r0, [pc, #336]	; (800175c <main+0x18c>)
 800160c:	f000 fa56 	bl	8001abc <impulse_time>
 8001610:	ee07 0a90 	vmov	s15, r0
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	edc7 7a01 	vstr	s15, [r7, #4]
  int distance = (int) distance_with_time(impulse);
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f000 fa92 	bl	8001b50 <distance_with_time>
 800162c:	eef0 7a40 	vmov.f32	s15, s0
 8001630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	603b      	str	r3, [r7, #0]
  LCD5110_clear_scr(&lcd1);
 800163a:	484a      	ldr	r0, [pc, #296]	; (8001764 <main+0x194>)
 800163c:	f7ff ff98 	bl	8001570 <LCD5110_clear_scr>
  LCD5110_set_cursor(0, 0, &lcd1);
 8001640:	4a48      	ldr	r2, [pc, #288]	; (8001764 <main+0x194>)
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff ff9f 	bl	8001588 <LCD5110_set_cursor>
  LCD5110_printf(&lcd1, BLACK, "Current dist.\n is %d cm\n", distance);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <main+0x19c>)
 800164e:	2101      	movs	r1, #1
 8001650:	4844      	ldr	r0, [pc, #272]	; (8001764 <main+0x194>)
 8001652:	f7ff fcc6 	bl	8000fe2 <LCD5110_printf>
  HAL_Delay(1000);
 8001656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165a:	f000 fd2b 	bl	80020b4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (check_ultrasound(impulse, &htim1)){
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001666:	493d      	ldr	r1, [pc, #244]	; (800175c <main+0x18c>)
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	f000 fa90 	bl	8001b90 <check_ultrasound>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d02d      	beq.n	80016d2 <main+0x102>
		HAL_GPIO_WritePin(LED_Port, Blue_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167c:	483c      	ldr	r0, [pc, #240]	; (8001770 <main+0x1a0>)
 800167e:	f000 ffe7 	bl	8002650 <HAL_GPIO_WritePin>
		LCD5110_clear_scr(&lcd1);
 8001682:	4838      	ldr	r0, [pc, #224]	; (8001764 <main+0x194>)
 8001684:	f7ff ff74 	bl	8001570 <LCD5110_clear_scr>
		LCD5110_set_cursor(0, 0, &lcd1);
 8001688:	4a36      	ldr	r2, [pc, #216]	; (8001764 <main+0x194>)
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ff7b 	bl	8001588 <LCD5110_set_cursor>
		LCD5110_printf(&lcd1, BLACK, "Current dist.\n is %d cm\n", distance);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	4a35      	ldr	r2, [pc, #212]	; (800176c <main+0x19c>)
 8001696:	2101      	movs	r1, #1
 8001698:	4832      	ldr	r0, [pc, #200]	; (8001764 <main+0x194>)
 800169a:	f7ff fca2 	bl	8000fe2 <LCD5110_printf>
		LCD5110_print("Ultrasound\n detected!\n", BLACK, &lcd1);
 800169e:	4a31      	ldr	r2, [pc, #196]	; (8001764 <main+0x194>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	4834      	ldr	r0, [pc, #208]	; (8001774 <main+0x1a4>)
 80016a4:	f7ff ff82 	bl	80015ac <LCD5110_print>
		HAL_Delay(500);
 80016a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ac:	f000 fd02 	bl	80020b4 <HAL_Delay>
		LCD5110_clear_scr(&lcd1);
 80016b0:	482c      	ldr	r0, [pc, #176]	; (8001764 <main+0x194>)
 80016b2:	f7ff ff5d 	bl	8001570 <LCD5110_clear_scr>
		LCD5110_set_cursor(0, 0, &lcd1);
 80016b6:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <main+0x194>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff ff64 	bl	8001588 <LCD5110_set_cursor>
		LCD5110_printf(&lcd1, BLACK, "Current dist.\n is %d cm\n", distance);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4a2a      	ldr	r2, [pc, #168]	; (800176c <main+0x19c>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	4827      	ldr	r0, [pc, #156]	; (8001764 <main+0x194>)
 80016c8:	f7ff fc8b 	bl	8000fe2 <LCD5110_printf>
		HAL_Delay(100);
 80016cc:	2064      	movs	r0, #100	; 0x64
 80016ce:	f000 fcf1 	bl	80020b4 <HAL_Delay>
	}

	if (HAL_GPIO_ReadPin(Button_Port, Button_Pin) == GPIO_PIN_SET){
 80016d2:	2101      	movs	r1, #1
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <main+0x1a8>)
 80016d6:	f000 ffa3 	bl	8002620 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d136      	bne.n	800174e <main+0x17e>
		LCD5110_clear_scr(&lcd1);
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <main+0x194>)
 80016e2:	f7ff ff45 	bl	8001570 <LCD5110_clear_scr>
		LCD5110_set_cursor(0, 0, &lcd1);
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <main+0x194>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ff4c 	bl	8001588 <LCD5110_set_cursor>
		LCD5110_print("Recalibrating...\n", BLACK, &lcd1);
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <main+0x194>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	4821      	ldr	r0, [pc, #132]	; (800177c <main+0x1ac>)
 80016f6:	f7ff ff59 	bl	80015ac <LCD5110_print>
		HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fe:	f000 fcd9 	bl	80020b4 <HAL_Delay>
		impulse = impulse_time(&htim1);
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <main+0x18c>)
 8001704:	f000 f9da 	bl	8001abc <impulse_time>
 8001708:	ee07 0a90 	vmov	s15, r0
 800170c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001710:	edc7 7a01 	vstr	s15, [r7, #4]
		distance = (int) distance_with_time(impulse);
 8001714:	edd7 7a01 	vldr	s15, [r7, #4]
 8001718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f000 fa16 	bl	8001b50 <distance_with_time>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172c:	ee17 3a90 	vmov	r3, s15
 8001730:	603b      	str	r3, [r7, #0]
		LCD5110_clear_scr(&lcd1);
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <main+0x194>)
 8001734:	f7ff ff1c 	bl	8001570 <LCD5110_clear_scr>
		LCD5110_set_cursor(0, 0, &lcd1);
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <main+0x194>)
 800173a:	2100      	movs	r1, #0
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ff23 	bl	8001588 <LCD5110_set_cursor>
		LCD5110_printf(&lcd1, BLACK, "Current dist.\n is %d cm\n", distance);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	4a09      	ldr	r2, [pc, #36]	; (800176c <main+0x19c>)
 8001746:	2101      	movs	r1, #1
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <main+0x194>)
 800174a:	f7ff fc4a 	bl	8000fe2 <LCD5110_printf>
	}
	HAL_GPIO_WritePin(LED_Port, Blue_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <main+0x1a0>)
 8001756:	f000 ff7b 	bl	8002650 <HAL_GPIO_WritePin>
	if (check_ultrasound(impulse, &htim1)){
 800175a:	e780      	b.n	800165e <main+0x8e>
 800175c:	20000480 	.word	0x20000480
 8001760:	20000204 	.word	0x20000204
 8001764:	2000025c 	.word	0x2000025c
 8001768:	08004438 	.word	0x08004438
 800176c:	08004444 	.word	0x08004444
 8001770:	40020c00 	.word	0x40020c00
 8001774:	08004460 	.word	0x08004460
 8001778:	40020000 	.word	0x40020000
 800177c:	08004478 	.word	0x08004478

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	; 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fa10 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <SystemClock_Config+0xc8>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <SystemClock_Config+0xc8>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <SystemClock_Config+0xc8>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <SystemClock_Config+0xcc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <SystemClock_Config+0xcc>)
 80017ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <SystemClock_Config+0xcc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2310      	movs	r3, #16
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f0:	2308      	movs	r3, #8
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017f4:	2364      	movs	r3, #100	; 0x64
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017fc:	2308      	movs	r3, #8
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4618      	mov	r0, r3
 8001806:	f000 ff3d 	bl	8002684 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001810:	f000 f94c 	bl	8001aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2103      	movs	r1, #3
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f997 	bl	8002b64 <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800183c:	f000 f936 	bl	8001aac <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000

08001850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <MX_SPI2_Init+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_SPI2_Init+0x64>)
 800185c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_SPI2_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_SPI2_Init+0x64>)
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001884:	2210      	movs	r2, #16
 8001886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_SPI2_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SPI2_Init+0x64>)
 800189c:	220a      	movs	r2, #10
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_SPI2_Init+0x64>)
 80018a2:	f001 fb1d 	bl	8002ee0 <HAL_SPI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018ac:	f000 f8fe 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000204 	.word	0x20000204
 80018b8:	40003800 	.word	0x40003800

080018bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_TIM1_Init+0x98>)
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <MX_TIM1_Init+0x9c>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_TIM1_Init+0x98>)
 80018e0:	2263      	movs	r2, #99	; 0x63
 80018e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_TIM1_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM1_Init+0x98>)
 80018ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_TIM1_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_TIM1_Init+0x98>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM1_Init+0x98>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001904:	4813      	ldr	r0, [pc, #76]	; (8001954 <MX_TIM1_Init+0x98>)
 8001906:	f001 fd2f 	bl	8003368 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001910:	f000 f8cc 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM1_Init+0x98>)
 8001922:	f001 fe78 	bl	8003616 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800192c:	f000 f8be 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM1_Init+0x98>)
 800193e:	f002 f86d 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001948:	f000 f8b0 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000480 	.word	0x20000480
 8001958:	40010000 	.word	0x40010000

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <MX_GPIO_Init+0x138>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <MX_GPIO_Init+0x138>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <MX_GPIO_Init+0x13c>)
 80019ea:	f000 fe31 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2102      	movs	r1, #2
 80019f2:	482a      	ldr	r0, [pc, #168]	; (8001a9c <MX_GPIO_Init+0x140>)
 80019f4:	f000 fe2c 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80019fe:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <MX_GPIO_Init+0x144>)
 8001a00:	f000 fe26 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CE_Pin|DC_Pin|RST_Pin;
 8001a04:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481e      	ldr	r0, [pc, #120]	; (8001a98 <MX_GPIO_Init+0x13c>)
 8001a1e:	f000 fc7d 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8001a22:	2301      	movs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_GPIO_Init+0x148>)
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <MX_GPIO_Init+0x14c>)
 8001a36:	f000 fc71 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4812      	ldr	r0, [pc, #72]	; (8001a9c <MX_GPIO_Init+0x140>)
 8001a52:	f000 fc63 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001a56:	2304      	movs	r3, #4
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_GPIO_Init+0x140>)
 8001a6a:	f000 fc57 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001a6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_GPIO_Init+0x144>)
 8001a88:	f000 fc48 	bl	800231c <HAL_GPIO_Init>

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	10120000 	.word	0x10120000
 8001aa8:	40020000 	.word	0x40020000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <impulse_time>:
 */

#include "range_finder.h"


int impulse_time(TIM_HandleTypeDef* timer){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    uint16_t start = HAL_GetTick();
 8001ac4:	f000 faea 	bl	800209c <HAL_GetTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(RangePort, TrigPin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2102      	movs	r1, #2
 8001ad0:	481d      	ldr	r0, [pc, #116]	; (8001b48 <impulse_time+0x8c>)
 8001ad2:	f000 fdbd 	bl	8002650 <HAL_GPIO_WritePin>
    mydelay(16, timer);
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	2010      	movs	r0, #16
 8001ada:	f000 fa1b 	bl	8001f14 <mydelay>
    HAL_GPIO_WritePin(RangePort, TrigPin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <impulse_time+0x8c>)
 8001ae4:	f000 fdb4 	bl	8002650 <HAL_GPIO_WritePin>
    while(HAL_GPIO_ReadPin(RangePort, EchoPin) == GPIO_PIN_RESET )
 8001ae8:	e009      	b.n	8001afe <impulse_time+0x42>
    {
    	if (HAL_GetTick() - start > MAX_DELAY){
 8001aea:	f000 fad7 	bl	800209c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b3a      	cmp	r3, #58	; 0x3a
 8001af6:	d902      	bls.n	8001afe <impulse_time+0x42>
    		return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afc:	e01f      	b.n	8001b3e <impulse_time+0x82>
    while(HAL_GPIO_ReadPin(RangePort, EchoPin) == GPIO_PIN_RESET )
 8001afe:	2104      	movs	r1, #4
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <impulse_time+0x8c>)
 8001b02:	f000 fd8d 	bl	8002620 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <impulse_time+0x2e>
    	}
    }
    restart_timer(timer);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fa18 	bl	8001f42 <restart_timer>
    while(HAL_GPIO_ReadPin(RangePort, EchoPin) == GPIO_PIN_SET )
 8001b12:	e009      	b.n	8001b28 <impulse_time+0x6c>
    {
    	if (HAL_GetTick() - start > MAX_DELAY){
 8001b14:	f000 fac2 	bl	800209c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b3a      	cmp	r3, #58	; 0x3a
 8001b20:	d902      	bls.n	8001b28 <impulse_time+0x6c>
    		return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	e00a      	b.n	8001b3e <impulse_time+0x82>
    while(HAL_GPIO_ReadPin(RangePort, EchoPin) == GPIO_PIN_SET )
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <impulse_time+0x8c>)
 8001b2c:	f000 fd78 	bl	8002620 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d0ee      	beq.n	8001b14 <impulse_time+0x58>
    	}
    }
    return get_timer(timer);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fa11 	bl	8001f5e <get_timer>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	00000000 	.word	0x00000000

08001b50 <distance_with_time>:

float distance_with_time(int time){
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	return (340. / 20000.) * time;
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7fe fce3 	bl	8000524 <__aeabi_i2d>
 8001b5e:	a30a      	add	r3, pc, #40	; (adr r3, 8001b88 <distance_with_time+0x38>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_dmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4621      	mov	r1, r4
 8001b70:	f7fe ff54 	bl	8000a1c <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	ee07 3a90 	vmov	s15, r3
}
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	f3af 8000 	nop.w
 8001b88:	b020c49c 	.word	0xb020c49c
 8001b8c:	3f916872 	.word	0x3f916872

08001b90 <check_ultrasound>:
	}
	return distance_with_time(time);
}


_Bool check_ultrasound(int impulse, TIM_HandleTypeDef* timer){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	int new_impulse = impulse_time(timer);
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f7ff ff8e 	bl	8001abc <impulse_time>
 8001ba0:	60f8      	str	r0, [r7, #12]
	if (new_impulse == -1){
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba8:	d101      	bne.n	8001bae <check_ultrasound+0x1e>
		return 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02f      	b.n	8001c0e <check_ultrasound+0x7e>
	}

	_Bool obstacle = ((new_impulse >= (2000 + impulse)) || ((new_impulse + 2000) <= impulse));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	da05      	bge.n	8001bc6 <check_ultrasound+0x36>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	db01      	blt.n	8001bca <check_ultrasound+0x3a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <check_ultrasound+0x3c>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	72fb      	strb	r3, [r7, #11]
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	72fb      	strb	r3, [r7, #11]
	new_impulse = impulse_time(timer);
 8001bd6:	6838      	ldr	r0, [r7, #0]
 8001bd8:	f7ff ff70 	bl	8001abc <impulse_time>
 8001bdc:	60f8      	str	r0, [r7, #12]
	obstacle = obstacle && ((new_impulse >= (2000 + impulse)) || ((new_impulse + 2000) <= impulse));
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <check_ultrasound+0x70>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	da05      	bge.n	8001bfc <check_ultrasound+0x6c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	db01      	blt.n	8001c00 <check_ultrasound+0x70>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <check_ultrasound+0x72>
 8001c00:	2300      	movs	r3, #0
 8001c02:	72fb      	strb	r3, [r7, #11]
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	72fb      	strb	r3, [r7, #11]

	return obstacle;
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <initialise_LCD>:
 */


#include "screen.h"

int initialise_LCD(LCD5110_display* lcd, SPI_HandleTypeDef* hspi){
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	if (!lcd || !hspi){
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <initialise_LCD+0x16>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <initialise_LCD+0x1c>
		return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c32:	e02b      	b.n	8001c8c <initialise_LCD+0x74>
	}
	lcd->hw_conf.spi_handle = hspi;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
	lcd->hw_conf.spi_cs_pin =  CS_Pin;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c40:	809a      	strh	r2, [r3, #4]
	lcd->hw_conf.spi_cs_port = CS_Port;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <initialise_LCD+0x7c>)
 8001c46:	609a      	str	r2, [r3, #8]
	lcd->hw_conf.rst_pin =  RST_Pin;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c4e:	819a      	strh	r2, [r3, #12]
	lcd->hw_conf.rst_port = RST_Port;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <initialise_LCD+0x7c>)
 8001c54:	611a      	str	r2, [r3, #16]
	lcd->hw_conf.dc_pin =  DC_Pin;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5c:	829a      	strh	r2, [r3, #20]
	lcd->hw_conf.dc_port = DC_Port;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <initialise_LCD+0x7c>)
 8001c62:	619a      	str	r2, [r3, #24]
	lcd->def_scr = lcd5110_def_scr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <initialise_LCD+0x80>)
 8001c68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	6861      	ldr	r1, [r4, #4]
 8001c72:	68a2      	ldr	r2, [r4, #8]
 8001c74:	c307      	stmia	r3!, {r0, r1, r2}
 8001c76:	89a2      	ldrh	r2, [r4, #12]
 8001c78:	801a      	strh	r2, [r3, #0]
	LCD5110_init(&(lcd->hw_conf), LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2302      	movs	r3, #2
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	210c      	movs	r1, #12
 8001c86:	f7ff fc10 	bl	80014aa <LCD5110_init>
	return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	40020800 	.word	0x40020800
 8001c98:	08004a8c 	.word	0x08004a8c

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cda:	2007      	movs	r0, #7
 8001cdc:	f000 fadc 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_SPI_MspInit+0xc0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d14a      	bne.n	8001da4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001d62:	2308      	movs	r3, #8
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d72:	2305      	movs	r3, #5
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <HAL_SPI_MspInit+0xc8>)
 8001d7e:	f000 facd 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d94:	2305      	movs	r3, #5
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_SPI_MspInit+0xcc>)
 8001da0:	f000 fabc 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40003800 	.word	0x40003800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d115      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_TIM_Base_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2019      	movs	r0, #25
 8001df0:	f000 fa5d 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001df4:	2019      	movs	r0, #25
 8001df6:	f000 fa76 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40023800 	.word	0x40023800

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f908 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e6e:	f001 faca 	bl	8003406 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000480 	.word	0x20000480

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f001 fe38 	bl	8003b20 <__errno>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20020000 	.word	0x20020000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	200001f8 	.word	0x200001f8
 8001ee4:	200004c8 	.word	0x200004c8

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x28>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <SystemInit+0x28>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SystemInit+0x28>)
 8001efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f02:	609a      	str	r2, [r3, #8]
#endif
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <mydelay>:
 *
 */
#include "timer.h"

void mydelay (uint16_t mcs, TIM_HandleTypeDef* timer)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(timer,0);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < mcs);
 8001f28:	bf00      	nop
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3f9      	bcc.n	8001f2a <mydelay+0x16>
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <restart_timer>:


void restart_timer (TIM_HandleTypeDef* timer){
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(timer,0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <get_timer>:


uint16_t get_timer (TIM_HandleTypeDef* timer)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	b29b      	uxth	r3, r3

}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr  r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fa6:	f7ff ff9f 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f001 fdbf 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fae:	f7ff fb0f 	bl	80015d0 <main>
  bx  lr    
 8001fb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb8:	08004c5c 	.word	0x08004c5c
  ldr  r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fc0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001fc4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001fc8:	200004c8 	.word	0x200004c8

08001fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC_IRQHandler>
	...

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_Init+0x40>)
 8001fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_Init+0x40>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x40>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f94d 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fe4a 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f965 	bl	8002302 <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002050:	f000 f92d 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000
 800206c:	20000008 	.word	0x20000008
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x20>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_IncTick+0x24>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008
 8002098:	200004c0 	.word	0x200004c0

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200004c0 	.word	0x200004c0

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_Delay+0x40>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffde 	bl	800209c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000008 	.word	0x20000008

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff29 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff3e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff31 	bl	800215c <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa2 	bl	8002254 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e159      	b.n	80025ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8148 	bne.w	80025e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d00b      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236a:	2b11      	cmp	r3, #17
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0xfc>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b12      	cmp	r3, #18
 8002416:	d123      	bne.n	8002460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a2 	beq.w	80025e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b56      	ldr	r3, [pc, #344]	; (8002600 <HAL_GPIO_Init+0x2e4>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a55      	ldr	r2, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x2e4>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_GPIO_Init+0x2e4>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024be:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_GPIO_Init+0x2ec>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x202>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x1fe>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_GPIO_Init+0x2f4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x1fa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_GPIO_Init+0x2f8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x1f6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a44      	ldr	r2, [pc, #272]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x1f2>
 800250a:	2304      	movs	r3, #4
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800250e:	2307      	movs	r3, #7
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x204>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x204>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x204>
 800251e:	2300      	movs	r3, #0
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	4934      	ldr	r1, [pc, #208]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_GPIO_Init+0x300>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002562:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_GPIO_Init+0x300>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_GPIO_Init+0x300>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_GPIO_Init+0x300>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_GPIO_Init+0x300>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_GPIO_Init+0x300>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_GPIO_Init+0x300>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_GPIO_Init+0x300>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	f67f aea2 	bls.w	8002338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3724      	adds	r7, #36	; 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40023800 	.word	0x40023800
 8002604:	40013800 	.word	0x40013800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e25b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	4ba3      	ldr	r3, [pc, #652]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4ba0      	ldr	r3, [pc, #640]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b9d      	ldr	r3, [pc, #628]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b99      	ldr	r3, [pc, #612]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e236      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b91      	ldr	r3, [pc, #580]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a90      	ldr	r2, [pc, #576]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b8b      	ldr	r3, [pc, #556]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8a      	ldr	r2, [pc, #552]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a87      	ldr	r2, [pc, #540]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b84      	ldr	r3, [pc, #528]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a83      	ldr	r2, [pc, #524]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b81      	ldr	r3, [pc, #516]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fcae 	bl	800209c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fcaa 	bl	800209c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1fb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fc9a 	bl	800209c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fc96 	bl	800209c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1e7      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1bb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4952      	ldr	r1, [pc, #328]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCC_OscConfig+0x2b0>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff fc4f 	bl	800209c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff fc4b 	bl	800209c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e19c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4940      	ldr	r1, [pc, #256]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_OscConfig+0x2b0>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fc2e 	bl	800209c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff fc2a 	bl	800209c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e17b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d030      	beq.n	80028d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCC_OscConfig+0x2b4>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fc0e 	bl	800209c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff fc0a 	bl	800209c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e15b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e015      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x2b4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7ff fbf7 	bl	800209c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7ff fbf3 	bl	800209c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e144      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a0 	beq.w	8002a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d121      	bne.n	800295e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7ff fbb9 	bl	800209c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e011      	b.n	8002952 <HAL_RCC_OscConfig+0x2ce>
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	42470000 	.word	0x42470000
 8002938:	42470e80 	.word	0x42470e80
 800293c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7ff fbac 	bl	800209c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0fd      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x4d4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x2f0>
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	e01c      	b.n	80029ae <HAL_RCC_OscConfig+0x32a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x312>
 800297c:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a76      	ldr	r2, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e00b      	b.n	80029ae <HAL_RCC_OscConfig+0x32a>
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a6d      	ldr	r2, [pc, #436]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7ff fb71 	bl	800209c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7ff fb6d 	bl	800209c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0bc      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCC_OscConfig+0x33a>
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fb5b 	bl	800209c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff fb57 	bl	800209c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0a6      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d105      	bne.n	8002a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8092 	beq.w	8002b4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d05c      	beq.n	8002aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d141      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff fb2b 	bl	800209c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff fb27 	bl	800209c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e078      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	019b      	lsls	r3, r3, #6
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	3b01      	subs	r3, #1
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	4933      	ldr	r1, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fb00 	bl	800209c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff fafc 	bl	800209c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04d      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
 8002abe:	e045      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fae9 	bl	800209c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7ff fae5 	bl	800209c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e036      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x44a>
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e029      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470060 	.word	0x42470060

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7ff fa22 	bl	800209c <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7ff fa1e 	bl	800209c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f982 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08004a9c 	.word	0x08004a9c
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d007      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x32>
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d008      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x38>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80b4 	bne.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d5e:	60bb      	str	r3, [r7, #8]
       break;
 8002d60:	e0b3      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b5e      	ldr	r3, [pc, #376]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d64:	60bb      	str	r3, [r7, #8]
      break;
 8002d66:	e0b0      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d72:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04a      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	ea03 0501 	and.w	r5, r3, r1
 8002d94:	ea04 0602 	and.w	r6, r4, r2
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4632      	mov	r2, r6
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	0154      	lsls	r4, r2, #5
 8002da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002daa:	014b      	lsls	r3, r1, #5
 8002dac:	4619      	mov	r1, r3
 8002dae:	4622      	mov	r2, r4
 8002db0:	1b49      	subs	r1, r1, r5
 8002db2:	eb62 0206 	sbc.w	r2, r2, r6
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	0194      	lsls	r4, r2, #6
 8002dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dc4:	018b      	lsls	r3, r1, #6
 8002dc6:	1a5b      	subs	r3, r3, r1
 8002dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	00e2      	lsls	r2, r4, #3
 8002dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dda:	00d9      	lsls	r1, r3, #3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	195b      	adds	r3, r3, r5
 8002de2:	eb44 0406 	adc.w	r4, r4, r6
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	0262      	lsls	r2, r4, #9
 8002df0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002df4:	0259      	lsls	r1, r3, #9
 8002df6:	460b      	mov	r3, r1
 8002df8:	4614      	mov	r4, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 0400 	mov.w	r4, #0
 8002e04:	461a      	mov	r2, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	f7fd fe58 	bl	8000abc <__aeabi_uldivmod>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460c      	mov	r4, r1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e049      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	f04f 0400 	mov.w	r4, #0
 8002e1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	ea03 0501 	and.w	r5, r3, r1
 8002e2a:	ea04 0602 	and.w	r6, r4, r2
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4632      	mov	r2, r6
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	0154      	lsls	r4, r2, #5
 8002e3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e40:	014b      	lsls	r3, r1, #5
 8002e42:	4619      	mov	r1, r3
 8002e44:	4622      	mov	r2, r4
 8002e46:	1b49      	subs	r1, r1, r5
 8002e48:	eb62 0206 	sbc.w	r2, r2, r6
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	0194      	lsls	r4, r2, #6
 8002e56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	1a5b      	subs	r3, r3, r1
 8002e5e:	eb64 0402 	sbc.w	r4, r4, r2
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	00e2      	lsls	r2, r4, #3
 8002e6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e70:	00d9      	lsls	r1, r3, #3
 8002e72:	460b      	mov	r3, r1
 8002e74:	4614      	mov	r4, r2
 8002e76:	195b      	adds	r3, r3, r5
 8002e78:	eb44 0406 	adc.w	r4, r4, r6
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	02a2      	lsls	r2, r4, #10
 8002e86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e8a:	0299      	lsls	r1, r3, #10
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4614      	mov	r4, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	4621      	mov	r1, r4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	f7fd fe0d 	bl	8000abc <__aeabi_uldivmod>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	60bb      	str	r3, [r7, #8]
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ec6:	60bb      	str	r3, [r7, #8]
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	68bb      	ldr	r3, [r7, #8]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e056      	b.n	8002fa0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe feed 	bl	8001cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	ea42 0103 	orr.w	r1, r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	f003 0104 	and.w	r1, r3, #4
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_SPI_Transmit+0x22>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e11e      	b.n	8003208 <HAL_SPI_Transmit+0x260>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd2:	f7ff f863 	bl	800209c <HAL_GetTick>
 8002fd6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fec:	e103      	b.n	80031f6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x52>
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ffe:	e0fa      	b.n	80031f6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003046:	d107      	bne.n	8003058 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d007      	beq.n	8003076 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d14b      	bne.n	8003118 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_SPI_Transmit+0xe6>
 8003088:	8afb      	ldrh	r3, [r7, #22]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d13e      	bne.n	800310c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b2:	e02b      	b.n	800310c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d112      	bne.n	80030e8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e6:	e011      	b.n	800310c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e8:	f7fe ffd8 	bl	800209c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <HAL_SPI_Transmit+0x158>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030fe:	d102      	bne.n	8003106 <HAL_SPI_Transmit+0x15e>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	77fb      	strb	r3, [r7, #31]
          goto error;
 800310a:	e074      	b.n	80031f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ce      	bne.n	80030b4 <HAL_SPI_Transmit+0x10c>
 8003116:	e04c      	b.n	80031b2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_Transmit+0x17e>
 8003120:	8afb      	ldrh	r3, [r7, #22]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d140      	bne.n	80031a8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800314c:	e02c      	b.n	80031a8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d113      	bne.n	8003184 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	; 0x36
 8003182:	e011      	b.n	80031a8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003184:	f7fe ff8a 	bl	800209c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d803      	bhi.n	800319c <HAL_SPI_Transmit+0x1f4>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x1fa>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a6:	e026      	b.n	80031f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1cd      	bne.n	800314e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f894 	bl	80032e4 <SPI_EndRxTxTransaction>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e000      	b.n	80031f6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80031f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003206:	7ffb      	ldrb	r3, [r7, #31]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003220:	e04c      	b.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003228:	d048      	beq.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800322a:	f7fe ff37 	bl	800209c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d902      	bls.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x30>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d13d      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800324e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003258:	d111      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003262:	d004      	beq.n	800326e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d107      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003286:	d10f      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e00f      	b.n	80032dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d1a3      	bne.n	8003222 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <SPI_EndRxTxTransaction+0x7c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <SPI_EndRxTxTransaction+0x80>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0d5b      	lsrs	r3, r3, #21
 80032fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330e:	d112      	bne.n	8003336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff ff78 	bl	8003210 <SPI_WaitFlagStateUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3b01      	subs	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d0f2      	beq.n	8003336 <SPI_EndRxTxTransaction+0x52>
 8003350:	e000      	b.n	8003354 <SPI_EndRxTxTransaction+0x70>
        break;
 8003352:	bf00      	nop
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000000 	.word	0x20000000
 8003364:	165e9f81 	.word	0x165e9f81

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01d      	b.n	80033b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fd14 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fa1e 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d007      	beq.n	80033f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d122      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0202 	mvn.w	r2, #2
 8003432:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f9af 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 800344e:	e005      	b.n	800345c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9a1 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9b2 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d122      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d11b      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0204 	mvn.w	r2, #4
 8003486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f985 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 80034a2:	e005      	b.n	80034b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f977 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f988 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d122      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0208 	mvn.w	r2, #8
 80034da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f95b 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 80034f6:	e005      	b.n	8003504 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f94d 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f95e 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0210 	mvn.w	r2, #16
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2208      	movs	r2, #8
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f931 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f923 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f934 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10e      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0201 	mvn.w	r2, #1
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8fd 	bl	8003784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d10e      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 faab 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d10e      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8f9 	bl	80037d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d10e      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d107      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0220 	mvn.w	r2, #32
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa75 	bl	8003af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_ConfigClockSource+0x18>
 800362a:	2302      	movs	r3, #2
 800362c:	e0a6      	b.n	800377c <HAL_TIM_ConfigClockSource+0x166>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003654:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d067      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x120>
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d80b      	bhi.n	8003682 <HAL_TIM_ConfigClockSource+0x6c>
 800366a:	2b10      	cmp	r3, #16
 800366c:	d073      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x140>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d802      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x62>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06f      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003676:	e078      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003678:	2b20      	cmp	r3, #32
 800367a:	d06c      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x140>
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d06a      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003680:	e073      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003682:	2b70      	cmp	r3, #112	; 0x70
 8003684:	d00d      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x8c>
 8003686:	2b70      	cmp	r3, #112	; 0x70
 8003688:	d804      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x7e>
 800368a:	2b50      	cmp	r3, #80	; 0x50
 800368c:	d033      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xe0>
 800368e:	2b60      	cmp	r3, #96	; 0x60
 8003690:	d041      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003692:	e06a      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003698:	d066      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x152>
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d017      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036a0:	e063      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f000 f993 	bl	80039dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
      break;
 80036ce:	e04c      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f000 f97c 	bl	80039dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f2:	609a      	str	r2, [r3, #8]
      break;
 80036f4:	e039      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	461a      	mov	r2, r3
 8003704:	f000 f8f0 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2150      	movs	r1, #80	; 0x50
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f949 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003714:	e029      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	461a      	mov	r2, r3
 8003724:	f000 f90f 	bl	8003946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2160      	movs	r1, #96	; 0x60
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f939 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003734:	e019      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 f8d0 	bl	80038e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f929 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003754:	e009      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f000 f920 	bl	80039a6 <TIM_ITRx_SetConfig>
      break;
 8003766:	e000      	b.n	800376a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003768:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a34      	ldr	r2, [pc, #208]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <TIM_Base_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <TIM_Base_SetConfig+0xec>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <TIM_Base_SetConfig+0xf0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <TIM_Base_SetConfig+0xe8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <TIM_Base_SetConfig+0xec>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <TIM_Base_SetConfig+0xf0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <TIM_Base_SetConfig+0xf4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <TIM_Base_SetConfig+0xf8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <TIM_Base_SetConfig+0xfc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 030a 	bic.w	r3, r3, #10
 8003924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003946:	b480      	push	{r7}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0210 	bic.w	r2, r3, #16
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f043 0307 	orr.w	r3, r3, #7
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e050      	b.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d013      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40014000 	.word	0x40014000

08003af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <__errno>:
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <__errno+0x8>)
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4e0d      	ldr	r6, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1ba4      	subs	r4, r4, r6
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2500      	movs	r5, #0
 8003b38:	42a5      	cmp	r5, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4e0b      	ldr	r6, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 fc6e 	bl	8004420 <_init>
 8003b44:	1ba4      	subs	r4, r4, r6
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2500      	movs	r5, #0
 8003b4a:	42a5      	cmp	r5, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b54:	4798      	blx	r3
 8003b56:	3501      	adds	r5, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b5e:	4798      	blx	r3
 8003b60:	3501      	adds	r5, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	08004c54 	.word	0x08004c54
 8003b68:	08004c54 	.word	0x08004c54
 8003b6c:	08004c54 	.word	0x08004c54
 8003b70:	08004c58 	.word	0x08004c58

08003b74 <__locale_ctype_ptr>:
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <__locale_ctype_ptr+0x14>)
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <__locale_ctype_ptr+0x18>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf08      	it	eq
 8003b80:	4613      	moveq	r3, r2
 8003b82:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003b86:	4770      	bx	lr
 8003b88:	2000000c 	.word	0x2000000c
 8003b8c:	20000070 	.word	0x20000070

08003b90 <__ascii_mbtowc>:
 8003b90:	b082      	sub	sp, #8
 8003b92:	b901      	cbnz	r1, 8003b96 <__ascii_mbtowc+0x6>
 8003b94:	a901      	add	r1, sp, #4
 8003b96:	b142      	cbz	r2, 8003baa <__ascii_mbtowc+0x1a>
 8003b98:	b14b      	cbz	r3, 8003bae <__ascii_mbtowc+0x1e>
 8003b9a:	7813      	ldrb	r3, [r2, #0]
 8003b9c:	600b      	str	r3, [r1, #0]
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	1c10      	adds	r0, r2, #0
 8003ba2:	bf18      	it	ne
 8003ba4:	2001      	movne	r0, #1
 8003ba6:	b002      	add	sp, #8
 8003ba8:	4770      	bx	lr
 8003baa:	4610      	mov	r0, r2
 8003bac:	e7fb      	b.n	8003ba6 <__ascii_mbtowc+0x16>
 8003bae:	f06f 0001 	mvn.w	r0, #1
 8003bb2:	e7f8      	b.n	8003ba6 <__ascii_mbtowc+0x16>

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_vsniprintf_r>:
 8003bc4:	b530      	push	{r4, r5, lr}
 8003bc6:	1e14      	subs	r4, r2, #0
 8003bc8:	4605      	mov	r5, r0
 8003bca:	b09b      	sub	sp, #108	; 0x6c
 8003bcc:	4618      	mov	r0, r3
 8003bce:	da05      	bge.n	8003bdc <_vsniprintf_r+0x18>
 8003bd0:	238b      	movs	r3, #139	; 0x8b
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd8:	b01b      	add	sp, #108	; 0x6c
 8003bda:	bd30      	pop	{r4, r5, pc}
 8003bdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003be0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003be4:	bf14      	ite	ne
 8003be6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003bea:	4623      	moveq	r3, r4
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	9305      	str	r3, [sp, #20]
 8003bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	9104      	str	r1, [sp, #16]
 8003bf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c00:	4669      	mov	r1, sp
 8003c02:	4628      	mov	r0, r5
 8003c04:	f000 f880 	bl	8003d08 <_svfiprintf_r>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	bfbc      	itt	lt
 8003c0c:	238b      	movlt	r3, #139	; 0x8b
 8003c0e:	602b      	strlt	r3, [r5, #0]
 8003c10:	2c00      	cmp	r4, #0
 8003c12:	d0e1      	beq.n	8003bd8 <_vsniprintf_r+0x14>
 8003c14:	9b00      	ldr	r3, [sp, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e7dd      	b.n	8003bd8 <_vsniprintf_r+0x14>

08003c1c <vsniprintf>:
 8003c1c:	b507      	push	{r0, r1, r2, lr}
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	460a      	mov	r2, r1
 8003c24:	4601      	mov	r1, r0
 8003c26:	4803      	ldr	r0, [pc, #12]	; (8003c34 <vsniprintf+0x18>)
 8003c28:	6800      	ldr	r0, [r0, #0]
 8003c2a:	f7ff ffcb 	bl	8003bc4 <_vsniprintf_r>
 8003c2e:	b003      	add	sp, #12
 8003c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <__ascii_wctomb>:
 8003c38:	b149      	cbz	r1, 8003c4e <__ascii_wctomb+0x16>
 8003c3a:	2aff      	cmp	r2, #255	; 0xff
 8003c3c:	bf85      	ittet	hi
 8003c3e:	238a      	movhi	r3, #138	; 0x8a
 8003c40:	6003      	strhi	r3, [r0, #0]
 8003c42:	700a      	strbls	r2, [r1, #0]
 8003c44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8003c48:	bf98      	it	ls
 8003c4a:	2001      	movls	r0, #1
 8003c4c:	4770      	bx	lr
 8003c4e:	4608      	mov	r0, r1
 8003c50:	4770      	bx	lr

08003c52 <__ssputs_r>:
 8003c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c56:	688e      	ldr	r6, [r1, #8]
 8003c58:	429e      	cmp	r6, r3
 8003c5a:	4682      	mov	sl, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	d837      	bhi.n	8003cd4 <__ssputs_r+0x82>
 8003c64:	898a      	ldrh	r2, [r1, #12]
 8003c66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c6a:	d031      	beq.n	8003cd0 <__ssputs_r+0x7e>
 8003c6c:	6825      	ldr	r5, [r4, #0]
 8003c6e:	6909      	ldr	r1, [r1, #16]
 8003c70:	1a6f      	subs	r7, r5, r1
 8003c72:	6965      	ldr	r5, [r4, #20]
 8003c74:	2302      	movs	r3, #2
 8003c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c7a:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c7e:	f109 0301 	add.w	r3, r9, #1
 8003c82:	443b      	add	r3, r7
 8003c84:	429d      	cmp	r5, r3
 8003c86:	bf38      	it	cc
 8003c88:	461d      	movcc	r5, r3
 8003c8a:	0553      	lsls	r3, r2, #21
 8003c8c:	d530      	bpl.n	8003cf0 <__ssputs_r+0x9e>
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f000 fb2c 	bl	80042ec <_malloc_r>
 8003c94:	4606      	mov	r6, r0
 8003c96:	b950      	cbnz	r0, 8003cae <__ssputs_r+0x5c>
 8003c98:	230c      	movs	r3, #12
 8003c9a:	f8ca 3000 	str.w	r3, [sl]
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	463a      	mov	r2, r7
 8003cb0:	6921      	ldr	r1, [r4, #16]
 8003cb2:	f000 faa9 	bl	8004208 <memcpy>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	6126      	str	r6, [r4, #16]
 8003cc4:	6165      	str	r5, [r4, #20]
 8003cc6:	443e      	add	r6, r7
 8003cc8:	1bed      	subs	r5, r5, r7
 8003cca:	6026      	str	r6, [r4, #0]
 8003ccc:	60a5      	str	r5, [r4, #8]
 8003cce:	464e      	mov	r6, r9
 8003cd0:	454e      	cmp	r6, r9
 8003cd2:	d900      	bls.n	8003cd6 <__ssputs_r+0x84>
 8003cd4:	464e      	mov	r6, r9
 8003cd6:	4632      	mov	r2, r6
 8003cd8:	4641      	mov	r1, r8
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	f000 fa9f 	bl	800421e <memmove>
 8003ce0:	68a3      	ldr	r3, [r4, #8]
 8003ce2:	1b9b      	subs	r3, r3, r6
 8003ce4:	60a3      	str	r3, [r4, #8]
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	441e      	add	r6, r3
 8003cea:	6026      	str	r6, [r4, #0]
 8003cec:	2000      	movs	r0, #0
 8003cee:	e7dc      	b.n	8003caa <__ssputs_r+0x58>
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	f000 fb55 	bl	80043a0 <_realloc_r>
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1e2      	bne.n	8003cc2 <__ssputs_r+0x70>
 8003cfc:	6921      	ldr	r1, [r4, #16]
 8003cfe:	4650      	mov	r0, sl
 8003d00:	f000 faa6 	bl	8004250 <_free_r>
 8003d04:	e7c8      	b.n	8003c98 <__ssputs_r+0x46>
	...

08003d08 <_svfiprintf_r>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	461d      	mov	r5, r3
 8003d0e:	898b      	ldrh	r3, [r1, #12]
 8003d10:	061f      	lsls	r7, r3, #24
 8003d12:	b09d      	sub	sp, #116	; 0x74
 8003d14:	4680      	mov	r8, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	4616      	mov	r6, r2
 8003d1a:	d50f      	bpl.n	8003d3c <_svfiprintf_r+0x34>
 8003d1c:	690b      	ldr	r3, [r1, #16]
 8003d1e:	b96b      	cbnz	r3, 8003d3c <_svfiprintf_r+0x34>
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	f000 fae3 	bl	80042ec <_malloc_r>
 8003d26:	6020      	str	r0, [r4, #0]
 8003d28:	6120      	str	r0, [r4, #16]
 8003d2a:	b928      	cbnz	r0, 8003d38 <_svfiprintf_r+0x30>
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	f8c8 3000 	str.w	r3, [r8]
 8003d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d36:	e0c8      	b.n	8003eca <_svfiprintf_r+0x1c2>
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	6163      	str	r3, [r4, #20]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d40:	2320      	movs	r3, #32
 8003d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d46:	2330      	movs	r3, #48	; 0x30
 8003d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d4c:	9503      	str	r5, [sp, #12]
 8003d4e:	f04f 0b01 	mov.w	fp, #1
 8003d52:	4637      	mov	r7, r6
 8003d54:	463d      	mov	r5, r7
 8003d56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d5a:	b10b      	cbz	r3, 8003d60 <_svfiprintf_r+0x58>
 8003d5c:	2b25      	cmp	r3, #37	; 0x25
 8003d5e:	d13e      	bne.n	8003dde <_svfiprintf_r+0xd6>
 8003d60:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d64:	d00b      	beq.n	8003d7e <_svfiprintf_r+0x76>
 8003d66:	4653      	mov	r3, sl
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	f7ff ff70 	bl	8003c52 <__ssputs_r>
 8003d72:	3001      	adds	r0, #1
 8003d74:	f000 80a4 	beq.w	8003ec0 <_svfiprintf_r+0x1b8>
 8003d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d7a:	4453      	add	r3, sl
 8003d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d7e:	783b      	ldrb	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 809d 	beq.w	8003ec0 <_svfiprintf_r+0x1b8>
 8003d86:	2300      	movs	r3, #0
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d90:	9304      	str	r3, [sp, #16]
 8003d92:	9307      	str	r3, [sp, #28]
 8003d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d98:	931a      	str	r3, [sp, #104]	; 0x68
 8003d9a:	462f      	mov	r7, r5
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003da2:	4850      	ldr	r0, [pc, #320]	; (8003ee4 <_svfiprintf_r+0x1dc>)
 8003da4:	f7fc fa1c 	bl	80001e0 <memchr>
 8003da8:	9b04      	ldr	r3, [sp, #16]
 8003daa:	b9d0      	cbnz	r0, 8003de2 <_svfiprintf_r+0xda>
 8003dac:	06d9      	lsls	r1, r3, #27
 8003dae:	bf44      	itt	mi
 8003db0:	2220      	movmi	r2, #32
 8003db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003db6:	071a      	lsls	r2, r3, #28
 8003db8:	bf44      	itt	mi
 8003dba:	222b      	movmi	r2, #43	; 0x2b
 8003dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dc0:	782a      	ldrb	r2, [r5, #0]
 8003dc2:	2a2a      	cmp	r2, #42	; 0x2a
 8003dc4:	d015      	beq.n	8003df2 <_svfiprintf_r+0xea>
 8003dc6:	9a07      	ldr	r2, [sp, #28]
 8003dc8:	462f      	mov	r7, r5
 8003dca:	2000      	movs	r0, #0
 8003dcc:	250a      	movs	r5, #10
 8003dce:	4639      	mov	r1, r7
 8003dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dd4:	3b30      	subs	r3, #48	; 0x30
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d94d      	bls.n	8003e76 <_svfiprintf_r+0x16e>
 8003dda:	b1b8      	cbz	r0, 8003e0c <_svfiprintf_r+0x104>
 8003ddc:	e00f      	b.n	8003dfe <_svfiprintf_r+0xf6>
 8003dde:	462f      	mov	r7, r5
 8003de0:	e7b8      	b.n	8003d54 <_svfiprintf_r+0x4c>
 8003de2:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <_svfiprintf_r+0x1dc>)
 8003de4:	1a80      	subs	r0, r0, r2
 8003de6:	fa0b f000 	lsl.w	r0, fp, r0
 8003dea:	4318      	orrs	r0, r3
 8003dec:	9004      	str	r0, [sp, #16]
 8003dee:	463d      	mov	r5, r7
 8003df0:	e7d3      	b.n	8003d9a <_svfiprintf_r+0x92>
 8003df2:	9a03      	ldr	r2, [sp, #12]
 8003df4:	1d11      	adds	r1, r2, #4
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	9103      	str	r1, [sp, #12]
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	db01      	blt.n	8003e02 <_svfiprintf_r+0xfa>
 8003dfe:	9207      	str	r2, [sp, #28]
 8003e00:	e004      	b.n	8003e0c <_svfiprintf_r+0x104>
 8003e02:	4252      	negs	r2, r2
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	9207      	str	r2, [sp, #28]
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	783b      	ldrb	r3, [r7, #0]
 8003e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e10:	d10c      	bne.n	8003e2c <_svfiprintf_r+0x124>
 8003e12:	787b      	ldrb	r3, [r7, #1]
 8003e14:	2b2a      	cmp	r3, #42	; 0x2a
 8003e16:	d133      	bne.n	8003e80 <_svfiprintf_r+0x178>
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	1d1a      	adds	r2, r3, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	9203      	str	r2, [sp, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bfb8      	it	lt
 8003e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e28:	3702      	adds	r7, #2
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	4d2e      	ldr	r5, [pc, #184]	; (8003ee8 <_svfiprintf_r+0x1e0>)
 8003e2e:	7839      	ldrb	r1, [r7, #0]
 8003e30:	2203      	movs	r2, #3
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7fc f9d4 	bl	80001e0 <memchr>
 8003e38:	b138      	cbz	r0, 8003e4a <_svfiprintf_r+0x142>
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	1b40      	subs	r0, r0, r5
 8003e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e42:	9b04      	ldr	r3, [sp, #16]
 8003e44:	4303      	orrs	r3, r0
 8003e46:	3701      	adds	r7, #1
 8003e48:	9304      	str	r3, [sp, #16]
 8003e4a:	7839      	ldrb	r1, [r7, #0]
 8003e4c:	4827      	ldr	r0, [pc, #156]	; (8003eec <_svfiprintf_r+0x1e4>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	2206      	movs	r2, #6
 8003e54:	1c7e      	adds	r6, r7, #1
 8003e56:	f7fc f9c3 	bl	80001e0 <memchr>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d038      	beq.n	8003ed0 <_svfiprintf_r+0x1c8>
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <_svfiprintf_r+0x1e8>)
 8003e60:	bb13      	cbnz	r3, 8003ea8 <_svfiprintf_r+0x1a0>
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	3307      	adds	r3, #7
 8003e66:	f023 0307 	bic.w	r3, r3, #7
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	9303      	str	r3, [sp, #12]
 8003e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e70:	444b      	add	r3, r9
 8003e72:	9309      	str	r3, [sp, #36]	; 0x24
 8003e74:	e76d      	b.n	8003d52 <_svfiprintf_r+0x4a>
 8003e76:	fb05 3202 	mla	r2, r5, r2, r3
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	460f      	mov	r7, r1
 8003e7e:	e7a6      	b.n	8003dce <_svfiprintf_r+0xc6>
 8003e80:	2300      	movs	r3, #0
 8003e82:	3701      	adds	r7, #1
 8003e84:	9305      	str	r3, [sp, #20]
 8003e86:	4619      	mov	r1, r3
 8003e88:	250a      	movs	r5, #10
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e90:	3a30      	subs	r2, #48	; 0x30
 8003e92:	2a09      	cmp	r2, #9
 8003e94:	d903      	bls.n	8003e9e <_svfiprintf_r+0x196>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c8      	beq.n	8003e2c <_svfiprintf_r+0x124>
 8003e9a:	9105      	str	r1, [sp, #20]
 8003e9c:	e7c6      	b.n	8003e2c <_svfiprintf_r+0x124>
 8003e9e:	fb05 2101 	mla	r1, r5, r1, r2
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	e7f0      	b.n	8003e8a <_svfiprintf_r+0x182>
 8003ea8:	ab03      	add	r3, sp, #12
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4622      	mov	r2, r4
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <_svfiprintf_r+0x1ec>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ebc:	4681      	mov	r9, r0
 8003ebe:	d1d6      	bne.n	8003e6e <_svfiprintf_r+0x166>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	065b      	lsls	r3, r3, #25
 8003ec4:	f53f af35 	bmi.w	8003d32 <_svfiprintf_r+0x2a>
 8003ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eca:	b01d      	add	sp, #116	; 0x74
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <_svfiprintf_r+0x1ec>)
 8003ed8:	a904      	add	r1, sp, #16
 8003eda:	4640      	mov	r0, r8
 8003edc:	f000 f882 	bl	8003fe4 <_printf_i>
 8003ee0:	e7ea      	b.n	8003eb8 <_svfiprintf_r+0x1b0>
 8003ee2:	bf00      	nop
 8003ee4:	08004bb7 	.word	0x08004bb7
 8003ee8:	08004bbd 	.word	0x08004bbd
 8003eec:	08004bc1 	.word	0x08004bc1
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	08003c53 	.word	0x08003c53

08003ef8 <_printf_common>:
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	4691      	mov	r9, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfb8      	it	lt
 8003f0c:	4613      	movlt	r3, r2
 8003f0e:	f8c9 3000 	str.w	r3, [r9]
 8003f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f16:	4606      	mov	r6, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	b112      	cbz	r2, 8003f22 <_printf_common+0x2a>
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f8c9 3000 	str.w	r3, [r9]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f2c:	3302      	addmi	r3, #2
 8003f2e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f015 0506 	ands.w	r5, r5, #6
 8003f38:	d107      	bne.n	8003f4a <_printf_common+0x52>
 8003f3a:	f104 0a19 	add.w	sl, r4, #25
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	f8d9 2000 	ldr.w	r2, [r9]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	dc28      	bgt.n	8003f9c <_printf_common+0xa4>
 8003f4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	3300      	adds	r3, #0
 8003f52:	bf18      	it	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	0692      	lsls	r2, r2, #26
 8003f58:	d42d      	bmi.n	8003fb6 <_printf_common+0xbe>
 8003f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f5e:	4639      	mov	r1, r7
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	3001      	adds	r0, #1
 8003f66:	d020      	beq.n	8003faa <_printf_common+0xb2>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	68e5      	ldr	r5, [r4, #12]
 8003f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f70:	f003 0306 	and.w	r3, r3, #6
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	bf08      	it	eq
 8003f78:	1aad      	subeq	r5, r5, r2
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	bf0c      	ite	eq
 8003f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f84:	2500      	movne	r5, #0
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bfc4      	itt	gt
 8003f8a:	1a9b      	subgt	r3, r3, r2
 8003f8c:	18ed      	addgt	r5, r5, r3
 8003f8e:	f04f 0900 	mov.w	r9, #0
 8003f92:	341a      	adds	r4, #26
 8003f94:	454d      	cmp	r5, r9
 8003f96:	d11a      	bne.n	8003fce <_printf_common+0xd6>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e008      	b.n	8003fae <_printf_common+0xb6>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <_printf_common+0xba>
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	e7c3      	b.n	8003f3e <_printf_common+0x46>
 8003fb6:	18e1      	adds	r1, r4, r3
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	2030      	movs	r0, #48	; 0x30
 8003fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc0:	4422      	add	r2, r4
 8003fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fca:	3302      	adds	r3, #2
 8003fcc:	e7c5      	b.n	8003f5a <_printf_common+0x62>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	47c0      	blx	r8
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d0e6      	beq.n	8003faa <_printf_common+0xb2>
 8003fdc:	f109 0901 	add.w	r9, r9, #1
 8003fe0:	e7d8      	b.n	8003f94 <_printf_common+0x9c>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fec:	460c      	mov	r4, r1
 8003fee:	7e09      	ldrb	r1, [r1, #24]
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	296e      	cmp	r1, #110	; 0x6e
 8003ff4:	4617      	mov	r7, r2
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	4698      	mov	r8, r3
 8003ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ffc:	f000 80b3 	beq.w	8004166 <_printf_i+0x182>
 8004000:	d822      	bhi.n	8004048 <_printf_i+0x64>
 8004002:	2963      	cmp	r1, #99	; 0x63
 8004004:	d036      	beq.n	8004074 <_printf_i+0x90>
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x3a>
 8004008:	2900      	cmp	r1, #0
 800400a:	f000 80b9 	beq.w	8004180 <_printf_i+0x19c>
 800400e:	2958      	cmp	r1, #88	; 0x58
 8004010:	f000 8083 	beq.w	800411a <_printf_i+0x136>
 8004014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800401c:	e032      	b.n	8004084 <_printf_i+0xa0>
 800401e:	2964      	cmp	r1, #100	; 0x64
 8004020:	d001      	beq.n	8004026 <_printf_i+0x42>
 8004022:	2969      	cmp	r1, #105	; 0x69
 8004024:	d1f6      	bne.n	8004014 <_printf_i+0x30>
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	0605      	lsls	r5, r0, #24
 800402c:	f103 0104 	add.w	r1, r3, #4
 8004030:	d52a      	bpl.n	8004088 <_printf_i+0xa4>
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da03      	bge.n	8004042 <_printf_i+0x5e>
 800403a:	222d      	movs	r2, #45	; 0x2d
 800403c:	425b      	negs	r3, r3
 800403e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004042:	486f      	ldr	r0, [pc, #444]	; (8004200 <_printf_i+0x21c>)
 8004044:	220a      	movs	r2, #10
 8004046:	e039      	b.n	80040bc <_printf_i+0xd8>
 8004048:	2973      	cmp	r1, #115	; 0x73
 800404a:	f000 809d 	beq.w	8004188 <_printf_i+0x1a4>
 800404e:	d808      	bhi.n	8004062 <_printf_i+0x7e>
 8004050:	296f      	cmp	r1, #111	; 0x6f
 8004052:	d020      	beq.n	8004096 <_printf_i+0xb2>
 8004054:	2970      	cmp	r1, #112	; 0x70
 8004056:	d1dd      	bne.n	8004014 <_printf_i+0x30>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	e003      	b.n	800406a <_printf_i+0x86>
 8004062:	2975      	cmp	r1, #117	; 0x75
 8004064:	d017      	beq.n	8004096 <_printf_i+0xb2>
 8004066:	2978      	cmp	r1, #120	; 0x78
 8004068:	d1d4      	bne.n	8004014 <_printf_i+0x30>
 800406a:	2378      	movs	r3, #120	; 0x78
 800406c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004070:	4864      	ldr	r0, [pc, #400]	; (8004204 <_printf_i+0x220>)
 8004072:	e055      	b.n	8004120 <_printf_i+0x13c>
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6011      	str	r1, [r2, #0]
 800407c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004084:	2301      	movs	r3, #1
 8004086:	e08c      	b.n	80041a2 <_printf_i+0x1be>
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6011      	str	r1, [r2, #0]
 800408c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004090:	bf18      	it	ne
 8004092:	b21b      	sxthne	r3, r3
 8004094:	e7cf      	b.n	8004036 <_printf_i+0x52>
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	6010      	str	r0, [r2, #0]
 800409e:	0628      	lsls	r0, r5, #24
 80040a0:	d501      	bpl.n	80040a6 <_printf_i+0xc2>
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	e002      	b.n	80040ac <_printf_i+0xc8>
 80040a6:	0668      	lsls	r0, r5, #25
 80040a8:	d5fb      	bpl.n	80040a2 <_printf_i+0xbe>
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	4854      	ldr	r0, [pc, #336]	; (8004200 <_printf_i+0x21c>)
 80040ae:	296f      	cmp	r1, #111	; 0x6f
 80040b0:	bf14      	ite	ne
 80040b2:	220a      	movne	r2, #10
 80040b4:	2208      	moveq	r2, #8
 80040b6:	2100      	movs	r1, #0
 80040b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040bc:	6865      	ldr	r5, [r4, #4]
 80040be:	60a5      	str	r5, [r4, #8]
 80040c0:	2d00      	cmp	r5, #0
 80040c2:	f2c0 8095 	blt.w	80041f0 <_printf_i+0x20c>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	f021 0104 	bic.w	r1, r1, #4
 80040cc:	6021      	str	r1, [r4, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d13d      	bne.n	800414e <_printf_i+0x16a>
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	f040 808e 	bne.w	80041f4 <_printf_i+0x210>
 80040d8:	4665      	mov	r5, ip
 80040da:	2a08      	cmp	r2, #8
 80040dc:	d10b      	bne.n	80040f6 <_printf_i+0x112>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	07db      	lsls	r3, r3, #31
 80040e2:	d508      	bpl.n	80040f6 <_printf_i+0x112>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6862      	ldr	r2, [r4, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bfde      	ittt	le
 80040ec:	2330      	movle	r3, #48	; 0x30
 80040ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040f6:	ebac 0305 	sub.w	r3, ip, r5
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	f8cd 8000 	str.w	r8, [sp]
 8004100:	463b      	mov	r3, r7
 8004102:	aa03      	add	r2, sp, #12
 8004104:	4621      	mov	r1, r4
 8004106:	4630      	mov	r0, r6
 8004108:	f7ff fef6 	bl	8003ef8 <_printf_common>
 800410c:	3001      	adds	r0, #1
 800410e:	d14d      	bne.n	80041ac <_printf_i+0x1c8>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004114:	b005      	add	sp, #20
 8004116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800411a:	4839      	ldr	r0, [pc, #228]	; (8004200 <_printf_i+0x21c>)
 800411c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	1d1d      	adds	r5, r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6015      	str	r5, [r2, #0]
 800412a:	060a      	lsls	r2, r1, #24
 800412c:	d50b      	bpl.n	8004146 <_printf_i+0x162>
 800412e:	07ca      	lsls	r2, r1, #31
 8004130:	bf44      	itt	mi
 8004132:	f041 0120 	orrmi.w	r1, r1, #32
 8004136:	6021      	strmi	r1, [r4, #0]
 8004138:	b91b      	cbnz	r3, 8004142 <_printf_i+0x15e>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	f022 0220 	bic.w	r2, r2, #32
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	e7b7      	b.n	80040b6 <_printf_i+0xd2>
 8004146:	064d      	lsls	r5, r1, #25
 8004148:	bf48      	it	mi
 800414a:	b29b      	uxthmi	r3, r3
 800414c:	e7ef      	b.n	800412e <_printf_i+0x14a>
 800414e:	4665      	mov	r5, ip
 8004150:	fbb3 f1f2 	udiv	r1, r3, r2
 8004154:	fb02 3311 	mls	r3, r2, r1, r3
 8004158:	5cc3      	ldrb	r3, [r0, r3]
 800415a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800415e:	460b      	mov	r3, r1
 8004160:	2900      	cmp	r1, #0
 8004162:	d1f5      	bne.n	8004150 <_printf_i+0x16c>
 8004164:	e7b9      	b.n	80040da <_printf_i+0xf6>
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	6961      	ldr	r1, [r4, #20]
 800416c:	1d18      	adds	r0, r3, #4
 800416e:	6010      	str	r0, [r2, #0]
 8004170:	0628      	lsls	r0, r5, #24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	d501      	bpl.n	800417a <_printf_i+0x196>
 8004176:	6019      	str	r1, [r3, #0]
 8004178:	e002      	b.n	8004180 <_printf_i+0x19c>
 800417a:	066a      	lsls	r2, r5, #25
 800417c:	d5fb      	bpl.n	8004176 <_printf_i+0x192>
 800417e:	8019      	strh	r1, [r3, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	4665      	mov	r5, ip
 8004186:	e7b9      	b.n	80040fc <_printf_i+0x118>
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	1d19      	adds	r1, r3, #4
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	681d      	ldr	r5, [r3, #0]
 8004190:	6862      	ldr	r2, [r4, #4]
 8004192:	2100      	movs	r1, #0
 8004194:	4628      	mov	r0, r5
 8004196:	f7fc f823 	bl	80001e0 <memchr>
 800419a:	b108      	cbz	r0, 80041a0 <_printf_i+0x1bc>
 800419c:	1b40      	subs	r0, r0, r5
 800419e:	6060      	str	r0, [r4, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	e7a7      	b.n	80040fc <_printf_i+0x118>
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	462a      	mov	r2, r5
 80041b0:	4639      	mov	r1, r7
 80041b2:	4630      	mov	r0, r6
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0aa      	beq.n	8004110 <_printf_i+0x12c>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d413      	bmi.n	80041e8 <_printf_i+0x204>
 80041c0:	68e0      	ldr	r0, [r4, #12]
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	4298      	cmp	r0, r3
 80041c6:	bfb8      	it	lt
 80041c8:	4618      	movlt	r0, r3
 80041ca:	e7a3      	b.n	8004114 <_printf_i+0x130>
 80041cc:	2301      	movs	r3, #1
 80041ce:	464a      	mov	r2, r9
 80041d0:	4639      	mov	r1, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d09a      	beq.n	8004110 <_printf_i+0x12c>
 80041da:	3501      	adds	r5, #1
 80041dc:	68e3      	ldr	r3, [r4, #12]
 80041de:	9a03      	ldr	r2, [sp, #12]
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	42ab      	cmp	r3, r5
 80041e4:	dcf2      	bgt.n	80041cc <_printf_i+0x1e8>
 80041e6:	e7eb      	b.n	80041c0 <_printf_i+0x1dc>
 80041e8:	2500      	movs	r5, #0
 80041ea:	f104 0919 	add.w	r9, r4, #25
 80041ee:	e7f5      	b.n	80041dc <_printf_i+0x1f8>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ac      	bne.n	800414e <_printf_i+0x16a>
 80041f4:	7803      	ldrb	r3, [r0, #0]
 80041f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fe:	e76c      	b.n	80040da <_printf_i+0xf6>
 8004200:	08004bc8 	.word	0x08004bc8
 8004204:	08004bd9 	.word	0x08004bd9

08004208 <memcpy>:
 8004208:	b510      	push	{r4, lr}
 800420a:	1e43      	subs	r3, r0, #1
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	d100      	bne.n	8004214 <memcpy+0xc>
 8004212:	bd10      	pop	{r4, pc}
 8004214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421c:	e7f7      	b.n	800420e <memcpy+0x6>

0800421e <memmove>:
 800421e:	4288      	cmp	r0, r1
 8004220:	b510      	push	{r4, lr}
 8004222:	eb01 0302 	add.w	r3, r1, r2
 8004226:	d807      	bhi.n	8004238 <memmove+0x1a>
 8004228:	1e42      	subs	r2, r0, #1
 800422a:	4299      	cmp	r1, r3
 800422c:	d00a      	beq.n	8004244 <memmove+0x26>
 800422e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004232:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004236:	e7f8      	b.n	800422a <memmove+0xc>
 8004238:	4283      	cmp	r3, r0
 800423a:	d9f5      	bls.n	8004228 <memmove+0xa>
 800423c:	1881      	adds	r1, r0, r2
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	42d3      	cmn	r3, r2
 8004242:	d100      	bne.n	8004246 <memmove+0x28>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800424a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800424e:	e7f7      	b.n	8004240 <memmove+0x22>

08004250 <_free_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4605      	mov	r5, r0
 8004254:	2900      	cmp	r1, #0
 8004256:	d045      	beq.n	80042e4 <_free_r+0x94>
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f0c      	subs	r4, r1, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfb8      	it	lt
 8004262:	18e4      	addlt	r4, r4, r3
 8004264:	f000 f8d2 	bl	800440c <__malloc_lock>
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <_free_r+0x98>)
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	4610      	mov	r0, r2
 800426e:	b933      	cbnz	r3, 800427e <_free_r+0x2e>
 8004270:	6063      	str	r3, [r4, #4]
 8004272:	6014      	str	r4, [r2, #0]
 8004274:	4628      	mov	r0, r5
 8004276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800427a:	f000 b8c8 	b.w	800440e <__malloc_unlock>
 800427e:	42a3      	cmp	r3, r4
 8004280:	d90c      	bls.n	800429c <_free_r+0x4c>
 8004282:	6821      	ldr	r1, [r4, #0]
 8004284:	1862      	adds	r2, r4, r1
 8004286:	4293      	cmp	r3, r2
 8004288:	bf04      	itt	eq
 800428a:	681a      	ldreq	r2, [r3, #0]
 800428c:	685b      	ldreq	r3, [r3, #4]
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	bf04      	itt	eq
 8004292:	1852      	addeq	r2, r2, r1
 8004294:	6022      	streq	r2, [r4, #0]
 8004296:	6004      	str	r4, [r0, #0]
 8004298:	e7ec      	b.n	8004274 <_free_r+0x24>
 800429a:	4613      	mov	r3, r2
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	b10a      	cbz	r2, 80042a4 <_free_r+0x54>
 80042a0:	42a2      	cmp	r2, r4
 80042a2:	d9fa      	bls.n	800429a <_free_r+0x4a>
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	1858      	adds	r0, r3, r1
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	d10b      	bne.n	80042c4 <_free_r+0x74>
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	4401      	add	r1, r0
 80042b0:	1858      	adds	r0, r3, r1
 80042b2:	4282      	cmp	r2, r0
 80042b4:	6019      	str	r1, [r3, #0]
 80042b6:	d1dd      	bne.n	8004274 <_free_r+0x24>
 80042b8:	6810      	ldr	r0, [r2, #0]
 80042ba:	6852      	ldr	r2, [r2, #4]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	4401      	add	r1, r0
 80042c0:	6019      	str	r1, [r3, #0]
 80042c2:	e7d7      	b.n	8004274 <_free_r+0x24>
 80042c4:	d902      	bls.n	80042cc <_free_r+0x7c>
 80042c6:	230c      	movs	r3, #12
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	e7d3      	b.n	8004274 <_free_r+0x24>
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	1821      	adds	r1, r4, r0
 80042d0:	428a      	cmp	r2, r1
 80042d2:	bf04      	itt	eq
 80042d4:	6811      	ldreq	r1, [r2, #0]
 80042d6:	6852      	ldreq	r2, [r2, #4]
 80042d8:	6062      	str	r2, [r4, #4]
 80042da:	bf04      	itt	eq
 80042dc:	1809      	addeq	r1, r1, r0
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	605c      	str	r4, [r3, #4]
 80042e2:	e7c7      	b.n	8004274 <_free_r+0x24>
 80042e4:	bd38      	pop	{r3, r4, r5, pc}
 80042e6:	bf00      	nop
 80042e8:	200001fc 	.word	0x200001fc

080042ec <_malloc_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	1ccd      	adds	r5, r1, #3
 80042f0:	f025 0503 	bic.w	r5, r5, #3
 80042f4:	3508      	adds	r5, #8
 80042f6:	2d0c      	cmp	r5, #12
 80042f8:	bf38      	it	cc
 80042fa:	250c      	movcc	r5, #12
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	4606      	mov	r6, r0
 8004300:	db01      	blt.n	8004306 <_malloc_r+0x1a>
 8004302:	42a9      	cmp	r1, r5
 8004304:	d903      	bls.n	800430e <_malloc_r+0x22>
 8004306:	230c      	movs	r3, #12
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	2000      	movs	r0, #0
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	f000 f87d 	bl	800440c <__malloc_lock>
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <_malloc_r+0xac>)
 8004314:	6814      	ldr	r4, [r2, #0]
 8004316:	4621      	mov	r1, r4
 8004318:	b991      	cbnz	r1, 8004340 <_malloc_r+0x54>
 800431a:	4c20      	ldr	r4, [pc, #128]	; (800439c <_malloc_r+0xb0>)
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b91b      	cbnz	r3, 8004328 <_malloc_r+0x3c>
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f863 	bl	80043ec <_sbrk_r>
 8004326:	6020      	str	r0, [r4, #0]
 8004328:	4629      	mov	r1, r5
 800432a:	4630      	mov	r0, r6
 800432c:	f000 f85e 	bl	80043ec <_sbrk_r>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d124      	bne.n	800437e <_malloc_r+0x92>
 8004334:	230c      	movs	r3, #12
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	4630      	mov	r0, r6
 800433a:	f000 f868 	bl	800440e <__malloc_unlock>
 800433e:	e7e4      	b.n	800430a <_malloc_r+0x1e>
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	1b5b      	subs	r3, r3, r5
 8004344:	d418      	bmi.n	8004378 <_malloc_r+0x8c>
 8004346:	2b0b      	cmp	r3, #11
 8004348:	d90f      	bls.n	800436a <_malloc_r+0x7e>
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	50cd      	str	r5, [r1, r3]
 800434e:	18cc      	adds	r4, r1, r3
 8004350:	4630      	mov	r0, r6
 8004352:	f000 f85c 	bl	800440e <__malloc_unlock>
 8004356:	f104 000b 	add.w	r0, r4, #11
 800435a:	1d23      	adds	r3, r4, #4
 800435c:	f020 0007 	bic.w	r0, r0, #7
 8004360:	1ac3      	subs	r3, r0, r3
 8004362:	d0d3      	beq.n	800430c <_malloc_r+0x20>
 8004364:	425a      	negs	r2, r3
 8004366:	50e2      	str	r2, [r4, r3]
 8004368:	e7d0      	b.n	800430c <_malloc_r+0x20>
 800436a:	428c      	cmp	r4, r1
 800436c:	684b      	ldr	r3, [r1, #4]
 800436e:	bf16      	itet	ne
 8004370:	6063      	strne	r3, [r4, #4]
 8004372:	6013      	streq	r3, [r2, #0]
 8004374:	460c      	movne	r4, r1
 8004376:	e7eb      	b.n	8004350 <_malloc_r+0x64>
 8004378:	460c      	mov	r4, r1
 800437a:	6849      	ldr	r1, [r1, #4]
 800437c:	e7cc      	b.n	8004318 <_malloc_r+0x2c>
 800437e:	1cc4      	adds	r4, r0, #3
 8004380:	f024 0403 	bic.w	r4, r4, #3
 8004384:	42a0      	cmp	r0, r4
 8004386:	d005      	beq.n	8004394 <_malloc_r+0xa8>
 8004388:	1a21      	subs	r1, r4, r0
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f82e 	bl	80043ec <_sbrk_r>
 8004390:	3001      	adds	r0, #1
 8004392:	d0cf      	beq.n	8004334 <_malloc_r+0x48>
 8004394:	6025      	str	r5, [r4, #0]
 8004396:	e7db      	b.n	8004350 <_malloc_r+0x64>
 8004398:	200001fc 	.word	0x200001fc
 800439c:	20000200 	.word	0x20000200

080043a0 <_realloc_r>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	4607      	mov	r7, r0
 80043a4:	4614      	mov	r4, r2
 80043a6:	460e      	mov	r6, r1
 80043a8:	b921      	cbnz	r1, 80043b4 <_realloc_r+0x14>
 80043aa:	4611      	mov	r1, r2
 80043ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043b0:	f7ff bf9c 	b.w	80042ec <_malloc_r>
 80043b4:	b922      	cbnz	r2, 80043c0 <_realloc_r+0x20>
 80043b6:	f7ff ff4b 	bl	8004250 <_free_r>
 80043ba:	4625      	mov	r5, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c0:	f000 f826 	bl	8004410 <_malloc_usable_size_r>
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	d20f      	bcs.n	80043e8 <_realloc_r+0x48>
 80043c8:	4621      	mov	r1, r4
 80043ca:	4638      	mov	r0, r7
 80043cc:	f7ff ff8e 	bl	80042ec <_malloc_r>
 80043d0:	4605      	mov	r5, r0
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d0f2      	beq.n	80043bc <_realloc_r+0x1c>
 80043d6:	4631      	mov	r1, r6
 80043d8:	4622      	mov	r2, r4
 80043da:	f7ff ff15 	bl	8004208 <memcpy>
 80043de:	4631      	mov	r1, r6
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7ff ff35 	bl	8004250 <_free_r>
 80043e6:	e7e9      	b.n	80043bc <_realloc_r+0x1c>
 80043e8:	4635      	mov	r5, r6
 80043ea:	e7e7      	b.n	80043bc <_realloc_r+0x1c>

080043ec <_sbrk_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4c06      	ldr	r4, [pc, #24]	; (8004408 <_sbrk_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4605      	mov	r5, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	f7fd fd40 	bl	8001e7c <_sbrk>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_sbrk_r+0x1a>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_sbrk_r+0x1a>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	200004c4 	.word	0x200004c4

0800440c <__malloc_lock>:
 800440c:	4770      	bx	lr

0800440e <__malloc_unlock>:
 800440e:	4770      	bx	lr

08004410 <_malloc_usable_size_r>:
 8004410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004414:	1f18      	subs	r0, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfbc      	itt	lt
 800441a:	580b      	ldrlt	r3, [r1, r0]
 800441c:	18c0      	addlt	r0, r0, r3
 800441e:	4770      	bx	lr

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
