
Bat_Detector_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba4  08012200  08012200  00022200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013da4  08013da4  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013da4  08013da4  00023da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013dac  08013dac  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013dac  08013dac  00023dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013db0  08013db0  00023db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08013db4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a64  200000f8  08013eac  000300f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20003b5c  08013eac  00033b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033a49  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000650f  00000000  00000000  00063b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d58  00000000  00000000  0006a080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ad8  00000000  00000000  0006bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a7a9  00000000  00000000  0006d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025eca  00000000  00000000  00098059  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df59b  00000000  00000000  000bdf23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0019d4be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bac  00000000  00000000  0019d5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000034e1  00000000  00000000  001a5158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080121e8 	.word	0x080121e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080121e8 	.word	0x080121e8

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800046e:	f1a4 0401 	sub.w	r4, r4, #1
 8000472:	d1e9      	bne.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_ADC1_Init+0xa0>)
 8000e82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ed2:	f001 fcdd 	bl	8002890 <HAL_ADC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000edc:	f001 f950 	bl	8002180 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000ef2:	f001 ff5d 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000efc:	f001 f940 	bl	8002180 <Error_Handler>
  }

}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000388 	.word	0x20000388
 8000f0c:	40012000 	.word	0x40012000

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <HAL_ADC_MspInit+0xdc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d157      	bne.n	8000fe2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <HAL_ADC_MspInit+0xe4>)
 8000f7e:	f003 f82b 	bl	8003fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_ADC_MspInit+0xec>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fc8:	f002 fb1c 	bl	8003604 <HAL_DMA_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fd2:	f001 f8d5 	bl	8002180 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_ADC_MspInit+0xe8>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	200003d0 	.word	0x200003d0
 8000ffc:	40026410 	.word	0x40026410

08001000 <send_signal>:
 *      Author: mprotsyk
 */

#include "debug.h"

void send_signal(FRESULT op_res){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if (op_res != FR_OK){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <send_signal+0x2a>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <send_signal+0x34>)
 8001016:	f003 fafd 	bl	8004614 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f001 fc16 	bl	800284c <HAL_Delay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001020:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <send_signal+0x34>)
 8001026:	f003 faf5 	bl	8004614 <HAL_GPIO_TogglePin>
		//clear_print("Error!!!");
	}

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020c00 	.word	0x40020c00

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_DMA_Init+0x3c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <MX_DMA_Init+0x3c>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_DMA_Init+0x3c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2038      	movs	r0, #56	; 0x38
 8001060:	f002 fa80 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001064:	2038      	movs	r0, #56	; 0x38
 8001066:	f002 faa9 	bl	80035bc <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a75      	ldr	r2, [pc, #468]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b73      	ldr	r3, [pc, #460]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a6e      	ldr	r2, [pc, #440]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b68      	ldr	r3, [pc, #416]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a67      	ldr	r2, [pc, #412]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b61      	ldr	r3, [pc, #388]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a60      	ldr	r2, [pc, #384]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b5e      	ldr	r3, [pc, #376]	; (800126c <MX_GPIO_Init+0x1f4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b5a      	ldr	r3, [pc, #360]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a59      	ldr	r2, [pc, #356]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b57      	ldr	r3, [pc, #348]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a52      	ldr	r2, [pc, #328]	; (800126c <MX_GPIO_Init+0x1f4>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <MX_GPIO_Init+0x1f4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f640 6108 	movw	r1, #3592	; 0xe08
 800113c:	484c      	ldr	r0, [pc, #304]	; (8001270 <MX_GPIO_Init+0x1f8>)
 800113e:	f003 fa37 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2101      	movs	r1, #1
 8001146:	484b      	ldr	r0, [pc, #300]	; (8001274 <MX_GPIO_Init+0x1fc>)
 8001148:	f003 fa32 	bl	80045b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800114c:	2200      	movs	r2, #0
 800114e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001152:	4849      	ldr	r0, [pc, #292]	; (8001278 <MX_GPIO_Init+0x200>)
 8001154:	f003 fa2c 	bl	80045b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001158:	f640 6308 	movw	r3, #3592	; 0xe08
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	483f      	ldr	r0, [pc, #252]	; (8001270 <MX_GPIO_Init+0x1f8>)
 8001172:	f002 ff31 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4839      	ldr	r0, [pc, #228]	; (8001274 <MX_GPIO_Init+0x1fc>)
 800118e:	f002 ff23 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_GPIO_Init+0x204>)
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4836      	ldr	r0, [pc, #216]	; (8001280 <MX_GPIO_Init+0x208>)
 80011a6:	f002 ff17 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011aa:	2310      	movs	r3, #16
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ba:	2306      	movs	r3, #6
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	482e      	ldr	r0, [pc, #184]	; (8001280 <MX_GPIO_Init+0x208>)
 80011c6:	f002 ff07 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011ca:	2304      	movs	r3, #4
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x20c>)
 80011de:	f002 fefb 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481f      	ldr	r0, [pc, #124]	; (8001278 <MX_GPIO_Init+0x200>)
 80011fc:	f002 feec 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001200:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001212:	2306      	movs	r3, #6
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0x1fc>)
 800121e:	f002 fedb 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001222:	2320      	movs	r3, #32
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4810      	ldr	r0, [pc, #64]	; (8001278 <MX_GPIO_Init+0x200>)
 8001236:	f002 fecf 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_GPIO_Init+0x210>)
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_GPIO_Init+0x1f8>)
 800124e:	f002 fec3 	bl	8003fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2006      	movs	r0, #6
 8001258:	f002 f984 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800125c:	2006      	movs	r0, #6
 800125e:	f002 f9ad 	bl	80035bc <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40021000 	.word	0x40021000
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	10110000 	.word	0x10110000
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	10120000 	.word	0x10120000

0800128c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_I2C1_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_I2C1_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2C1_Init+0x50>)
 80012ca:	f004 fee7 	bl	800609c <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 ff54 	bl	8002180 <Error_Handler>
  }

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000430 	.word	0x20000430
 80012e0:	40005400 	.word	0x40005400
 80012e4:	000186a0 	.word	0x000186a0

080012e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_I2C_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12c      	bne.n	8001364 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001326:	f44f 7310 	mov.w	r3, #576	; 0x240
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132c:	2312      	movs	r3, #18
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001338:	2304      	movs	r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_I2C_MspInit+0x8c>)
 8001344:	f002 fe48 	bl	8003fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <reverse_bytes>:
// generates title using template and current time
void generate_title(char* title , const char* template, uint16_t title_size);



uint16_t reverse_bytes(uint16_t num) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	return ((num & 0x00FF) << 8) | (num >> 8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21a      	sxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	b29b      	uxth	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <get_byte>:


uint8_t get_byte(uint32_t num, uint8_t byte_num) {
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (num >> (8 * byte_num));
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	b2db      	uxtb	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <create_header>:


void create_header(usb_file_t* wav_file, uint32_t frequency, uint32_t duration, uint32_t slowdown) {
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]

	// sample size is 2 bytes
	uint32_t data_size = 2 * duration * frequency;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48

	uint32_t full_size = data_size + HEADER_SIZE;
 80013e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013e4:	332c      	adds	r3, #44	; 0x2c
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t byte_rate = 2 * frequency / slowdown;
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	005a      	lsls	r2, r3, #1
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40

	frequency /= slowdown;
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	60bb      	str	r3, [r7, #8]

	// creating header with 0 on unfilled indices
	uint8_t header[HEADER_SIZE] = {
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <create_header+0x12c>)
 8001400:	f107 0414 	add.w	r4, r7, #20
 8001404:	461d      	mov	r5, r3
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			'd', 'a', 't', 'a',
			0, 0, 0, 0
	};


	for (uint8_t i = 0; i < 4; i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800141c:	e047      	b.n	80014ae <create_header+0xe6>
		header[4+i] = get_byte(full_size, i);
 800141e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001422:	1d1c      	adds	r4, r3, #4
 8001424:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001428:	4619      	mov	r1, r3
 800142a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800142c:	f7ff ffb9 	bl	80013a2 <get_byte>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001438:	4423      	add	r3, r4
 800143a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[24+i] = get_byte(frequency, i);
 800143e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001442:	f103 0418 	add.w	r4, r3, #24
 8001446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800144a:	4619      	mov	r1, r3
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f7ff ffa8 	bl	80013a2 <get_byte>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800145a:	4423      	add	r3, r4
 800145c:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[28+i] = get_byte(byte_rate, i);
 8001460:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001464:	f103 041c 	add.w	r4, r3, #28
 8001468:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800146c:	4619      	mov	r1, r3
 800146e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001470:	f7ff ff97 	bl	80013a2 <get_byte>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800147c:	4423      	add	r3, r4
 800147e:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[40+i] = get_byte(data_size, i);
 8001482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001486:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800148a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800148e:	4619      	mov	r1, r3
 8001490:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001492:	f7ff ff86 	bl	80013a2 <get_byte>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	4423      	add	r3, r4
 80014a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (uint8_t i = 0; i < 4; i++) {
 80014a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014a8:	3301      	adds	r3, #1
 80014aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d9b3      	bls.n	800141e <create_header+0x56>

	}
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80014bc:	e012      	b.n	80014e4 <create_header+0x11c>
		wav_file->header[i] = header[i];
 80014be:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80014c2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014ca:	440a      	add	r2, r1
 80014cc:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	460a      	mov	r2, r1
 80014d6:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 80014da:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014de:	3301      	adds	r3, #1
 80014e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80014e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014e8:	2b2b      	cmp	r3, #43	; 0x2b
 80014ea:	d9e8      	bls.n	80014be <create_header+0xf6>
	}

}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bdb0      	pop	{r4, r5, r7, pc}
 80014f4:	08012200 	.word	0x08012200

080014f8 <create_file>:


void create_file(usb_file_t* usb_file) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	send_signal(
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1d18      	adds	r0, r3, #4
			f_open(&usb_file->file,
					usb_file->title,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
	send_signal(
 8001508:	220a      	movs	r2, #10
 800150a:	4619      	mov	r1, r3
 800150c:	f00d fdee 	bl	800f0ec <f_open>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fd74 	bl	8001000 <send_signal>
				  FA_CREATE_ALWAYS | FA_WRITE)
				  );
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <write_header>:

UINT write_header(usb_file_t* usb_file) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	UINT bytes_written;
	send_signal(
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1d18      	adds	r0, r3, #4
			f_write(
					&usb_file->file,
					usb_file->header,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 710d 	add.w	r1, r3, #564	; 0x234
	send_signal(
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	222c      	movs	r2, #44	; 0x2c
 8001538:	f00e f8d5 	bl	800f6e6 <f_write>
 800153c:	4603      	mov	r3, r0
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd5e 	bl	8001000 <send_signal>
					HEADER_SIZE,
					&bytes_written)
					);
	return bytes_written;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <write_data>:


UINT write_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	4613      	mov	r3, r2
 800155a:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	send_signal(
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1d18      	adds	r0, r3, #4
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	005a      	lsls	r2, r3, #1
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	f00e f8bc 	bl	800f6e6 <f_write>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd45 	bl	8001000 <send_signal>
					&usb_file->file,
					data,
					sizeof(uint16_t) * size,
					&bytes_written)
					);
	return bytes_written;
 8001576:	697b      	ldr	r3, [r7, #20]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <write_little_endian_data>:


UINT write_little_endian_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	3b0c      	subs	r3, #12
 8001590:	6018      	str	r0, [r3, #0]
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	3b10      	subs	r3, #16
 8001598:	6019      	str	r1, [r3, #0]
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	3b12      	subs	r3, #18
 80015a0:	801a      	strh	r2, [r3, #0]
	uint16_t little_endian_data[MAX_LITTLE_ENDIAN_SIZE];
	for (uint16_t i = 0; i < size; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015a8:	f102 0216 	add.w	r2, r2, #22
 80015ac:	8013      	strh	r3, [r2, #0]
 80015ae:	e025      	b.n	80015fc <write_little_endian_data+0x7c>
		little_endian_data[i] = reverse_bytes(data[i]);
 80015b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015b4:	f103 0316 	add.w	r3, r3, #22
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	005a      	lsls	r2, r3, #1
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	3b10      	subs	r3, #16
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015cc:	f102 0216 	add.w	r2, r2, #22
 80015d0:	8814      	ldrh	r4, [r2, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fed0 	bl	8001378 <reverse_bytes>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	3b04      	subs	r3, #4
 80015e2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint16_t i = 0; i < size; i++) {
 80015e6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015ea:	f103 0316 	add.w	r3, r3, #22
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80015f6:	f102 0216 	add.w	r2, r2, #22
 80015fa:	8013      	strh	r3, [r2, #0]
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	3b12      	subs	r3, #18
 8001602:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001606:	f102 0216 	add.w	r2, r2, #22
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d3ce      	bcc.n	80015b0 <write_little_endian_data+0x30>
	}
	return write_data(usb_file, little_endian_data, size);
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	3b12      	subs	r3, #18
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	f107 0118 	add.w	r1, r7, #24
 800161e:	3904      	subs	r1, #4
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	3b0c      	subs	r3, #12
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	f7ff ff91 	bl	800154e <write_data>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}

0800163a <close_file>:



void close_file(usb_file_t* usb_file) {
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	send_signal(f_close(&usb_file->file));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	4618      	mov	r0, r3
 8001648:	f00e fa40 	bl	800facc <f_close>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fcd6 	bl	8001000 <send_signal>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <read_file>:


void read_file(usb_file_t* usb_file) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	send_signal(
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1d18      	adds	r0, r3, #4
				f_open(&usb_file->file,
						usb_file->title,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
	send_signal(
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	f00d fd3c 	bl	800f0ec <f_open>
 8001674:	4603      	mov	r3, r0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fcc2 	bl	8001000 <send_signal>
						FA_OPEN_EXISTING | FA_READ)
				);
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <write_array>:
			);
	return bytes_written;
}


void write_array(usb_file_t* info_file, float32_t* data, uint16_t size) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	for (uint16_t i = 0; i < size; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	e01d      	b.n	80016d4 <write_array+0x50>
		snprintf(message, ONE_MESSAGE, "%ld ", (int32_t) data[i]);
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a8:	ee17 3a90 	vmov	r3, s15
 80016ac:	4a13      	ldr	r2, [pc, #76]	; (80016fc <write_array+0x78>)
 80016ae:	2128      	movs	r1, #40	; 0x28
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <write_array+0x7c>)
 80016b2:	f010 f9eb 	bl	8011a8c <sniprintf>
		send_signal(
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1d18      	adds	r0, r3, #4
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	490f      	ldr	r1, [pc, #60]	; (8001700 <write_array+0x7c>)
 80016c2:	f00e f810 	bl	800f6e6 <f_write>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc99 	bl	8001000 <send_signal>
	for (uint16_t i = 0; i < size; i++) {
 80016ce:	8afb      	ldrh	r3, [r7, #22]
 80016d0:	3301      	adds	r3, #1
 80016d2:	82fb      	strh	r3, [r7, #22]
 80016d4:	8afa      	ldrh	r2, [r7, #22]
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3dd      	bcc.n	8001698 <write_array+0x14>
							sizeof(message),
							&bytes_written)
							);
	}

	send_signal(
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1d18      	adds	r0, r3, #4
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2201      	movs	r2, #1
 80016e6:	4907      	ldr	r1, [pc, #28]	; (8001704 <write_array+0x80>)
 80016e8:	f00d fffd 	bl	800f6e6 <f_write>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fc86 	bl	8001000 <send_signal>
					    "\n",
						1,
						&bytes_written)
						);

}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0801222c 	.word	0x0801222c
 8001700:	200026b4 	.word	0x200026b4
 8001704:	08012234 	.word	0x08012234

08001708 <read_buffer>:

UINT read_buffer(usb_file_t* info_file, uint16_t* buffer,  uint16_t size) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
	UINT bytes_read;
	send_signal(
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1d18      	adds	r0, r3, #4
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	005a      	lsls	r2, r3, #1
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	f00d fea0 	bl	800f468 <f_read>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fc68 	bl	8001000 <send_signal>
					buffer,
					sizeof(uint16_t) * size,
					&bytes_read)
					);

	return bytes_read;
 8001730:	697b      	ldr	r3, [r7, #20]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <generate_title>:

void generate_title(char* title , const char* template, uint16_t title_size) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800174a:	2200      	movs	r2, #0
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <generate_title+0x4c>)
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <generate_title+0x50>)
 8001750:	f006 f854 	bl	80077fc <HAL_RTC_GetTime>
	snprintf(title, title_size, template, current_time.Hours,
 8001754:	88f9      	ldrh	r1, [r7, #6]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <generate_title+0x4c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
           	 current_time.Minutes, current_time.Seconds);
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <generate_title+0x4c>)
 800175e:	785b      	ldrb	r3, [r3, #1]
	snprintf(title, title_size, template, current_time.Hours,
 8001760:	461a      	mov	r2, r3
           	 current_time.Minutes, current_time.Seconds);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <generate_title+0x4c>)
 8001764:	789b      	ldrb	r3, [r3, #2]
	snprintf(title, title_size, template, current_time.Hours,
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	9200      	str	r2, [sp, #0]
 800176a:	4603      	mov	r3, r0
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f010 f98c 	bl	8011a8c <sniprintf>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8001774:	2200      	movs	r2, #0
 8001776:	4906      	ldr	r1, [pc, #24]	; (8001790 <generate_title+0x54>)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <generate_title+0x50>)
 800177a:	f006 f9db 	bl	8007b34 <HAL_RTC_GetDate>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000114 	.word	0x20000114
 800178c:	20002f3c 	.word	0x20002f3c
 8001790:	20000128 	.word	0x20000128

08001794 <perform_fft>:
// prev - last got filtered value (if == FIRST_SIGNAL, is not used)
void linear_filter(uint16_t* buffer, uint16_t prev, uint16_t size, uint16_t* result);



void perform_fft(uint16_t* data_buffer, uint32_t start,  float32_t* fft_buffer) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	float32_t mean;
	calculate_mean(data_buffer, &mean);
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f832 	bl	8001810 <calculate_mean>

	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	82fb      	strh	r3, [r7, #22]
 80017b0:	e01e      	b.n	80017f0 <perform_fft+0x5c>
		fft_buffer[2 * i] = (float32_t)data_buffer[i] - mean;
 80017b2:	8afb      	ldrh	r3, [r7, #22]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d6:	edc3 7a00 	vstr	s15, [r3]
		fft_buffer[2 * i + 1] = 0;
 80017da:	8afb      	ldrh	r3, [r7, #22]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	3304      	adds	r3, #4
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80017ea:	8afb      	ldrh	r3, [r7, #22]
 80017ec:	3301      	adds	r3, #1
 80017ee:	82fb      	strh	r3, [r7, #22]
 80017f0:	8afb      	ldrh	r3, [r7, #22]
 80017f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f6:	d3dc      	bcc.n	80017b2 <perform_fft+0x1e>
	}
	arm_cfft_f32(&arm_cfft_sR_f32_len512, fft_buffer, 0, 1);
 80017f8:	2301      	movs	r3, #1
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <perform_fft+0x78>)
 8001800:	f00f f984 	bl	8010b0c <arm_cfft_f32>

}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	080129d8 	.word	0x080129d8

08001810 <calculate_mean>:


void calculate_mean(uint16_t* data_buffer, float32_t* mean) {
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	e00b      	b.n	800183c <calculate_mean+0x2c>
		sum += data_buffer[i];
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001842:	dbef      	blt.n	8001824 <calculate_mean+0x14>
	}
	*mean = ((float32_t) sum) / FFT_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800184e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001868 <calculate_mean+0x58>
 8001852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	edc3 7a00 	vstr	s15, [r3]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	44000000 	.word	0x44000000

0800186c <calculate_magnitudes>:


void calculate_magnitudes(float32_t* fft_buffer, float32_t* magnitude, uint32_t* index){
 800186c:	b580      	push	{r7, lr}
 800186e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8001872:	af00      	add	r7, sp, #0
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	6018      	str	r0, [r3, #0]
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	6019      	str	r1, [r3, #0]
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	601a      	str	r2, [r3, #0]
	float32_t magnitudes[FFT_SIZE];
	arm_cmplx_mag_f32(fft_buffer, magnitudes, FFT_SIZE);
 8001884:	f107 0110 	add.w	r1, r7, #16
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f00f fc2b 	bl	80110ec <arm_cmplx_mag_f32>
	arm_max_f32(magnitudes, FFT_SIZE, magnitude, index);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	f107 0010 	add.w	r0, r7, #16
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a8:	f00e fd98 	bl	80103dc <arm_max_f32>
}
 80018ac:	bf00      	nop
 80018ae:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <get_frequency>:


float32_t get_frequency(uint32_t index, uint32_t frequency) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	if (index > (FFT_SIZE / 2)) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c8:	d903      	bls.n	80018d2 <get_frequency+0x1a>
		index = FFT_SIZE - index;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80018d0:	607b      	str	r3, [r7, #4]
	}
	return frequency * ((float32_t) index) / FFT_SIZE;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001904 <get_frequency+0x4c>
 80018ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	44000000 	.word	0x44000000

08001908 <init_filter>:



void init_filter() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af02      	add	r7, sp, #8
	arm_fir_init_f32(
 800190e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <init_filter+0x20>)
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <init_filter+0x24>)
 8001918:	2119      	movs	r1, #25
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <init_filter+0x28>)
 800191c:	f00f f970 	bl	8010c00 <arm_fir_init_f32>
			&FILTER, COEFFICIENTS,
			FILTER_COEFFICIENTS,
			FILTER_STATES, FFT_SIZE
			);
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200026dc 	.word	0x200026dc
 800192c:	20000000 	.word	0x20000000
 8001930:	200026a8 	.word	0x200026a8

08001934 <fir_filter>:


void fir_filter(uint16_t* buffer) {
 8001934:	b580      	push	{r7, lr}
 8001936:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	3b0c      	subs	r3, #12
 8001944:	6018      	str	r0, [r3, #0]
	float32_t float_buffer[FFT_SIZE];
	float32_t float_result[FFT_SIZE];
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800194c:	f102 020e 	add.w	r2, r2, #14
 8001950:	8013      	strh	r3, [r2, #0]
 8001952:	e029      	b.n	80019a8 <fir_filter+0x74>
		float_buffer[i] = (float32_t)buffer[i] - MEDIAN;
 8001954:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001958:	f103 030e 	add.w	r3, r3, #14
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	005a      	lsls	r2, r3, #1
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	3b0c      	subs	r3, #12
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001974:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001978:	f103 030e 	add.w	r3, r3, #14
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a4c <fir_filter+0x118>
 8001982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001986:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001992:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001996:	f103 030e 	add.w	r3, r3, #14
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019a2:	f102 020e 	add.w	r2, r2, #14
 80019a6:	8013      	strh	r3, [r2, #0]
 80019a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80019ac:	f103 030e 	add.w	r3, r3, #14
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b6:	d3cd      	bcc.n	8001954 <fir_filter+0x20>
	}
	arm_fir_f32(&FILTER, float_buffer, float_result, FFT_SIZE);
 80019b8:	f107 0210 	add.w	r2, r7, #16
 80019bc:	3a04      	subs	r2, #4
 80019be:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	4822      	ldr	r0, [pc, #136]	; (8001a50 <fir_filter+0x11c>)
 80019c8:	f00f f92c 	bl	8010c24 <arm_fir_f32>
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019d2:	f102 020c 	add.w	r2, r2, #12
 80019d6:	8013      	strh	r3, [r2, #0]
 80019d8:	e02a      	b.n	8001a30 <fir_filter+0xfc>
			buffer[i] = (uint16_t) float_result[i] + MEDIAN;
 80019da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80019de:	f103 030c 	add.w	r3, r3, #12
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	3b04      	subs	r3, #4
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f6:	ee17 3a90 	vmov	r3, s15
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a00:	f103 030c 	add.w	r3, r3, #12
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	0059      	lsls	r1, r3, #1
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	3b0c      	subs	r3, #12
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	440b      	add	r3, r1
 8001a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a16:	b292      	uxth	r2, r2
 8001a18:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001a1a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a1e:	f103 030c 	add.w	r3, r3, #12
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a2a:	f102 020c 	add.w	r2, r2, #12
 8001a2e:	8013      	strh	r3, [r2, #0]
 8001a30:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a34:	f103 030c 	add.w	r3, r3, #12
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3e:	d3cc      	bcc.n	80019da <fir_filter+0xa6>
		}
}
 8001a40:	bf00      	nop
 8001a42:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	45000000 	.word	0x45000000
 8001a50:	200026a8 	.word	0x200026a8

08001a54 <linear_filter>:

void linear_filter(uint16_t* buffer, uint16_t prev, uint16_t size, uint16_t* result) {
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	817b      	strh	r3, [r7, #10]
 8001a62:	4613      	mov	r3, r2
 8001a64:	813b      	strh	r3, [r7, #8]
	if (prev == FIRST_SIGNAL) {
 8001a66:	897b      	ldrh	r3, [r7, #10]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <linear_filter+0x1e>
		prev = buffer[0];
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	817b      	strh	r3, [r7, #10]
	}
	result[0] = (15 * prev + buffer[0]) >> 4;
 8001a72:	897a      	ldrh	r2, [r7, #10]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	111b      	asrs	r3, r3, #4
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e01b      	b.n	8001ac6 <linear_filter+0x72>
		result[i] = (15 * result[i-1] + buffer[i]) >> 4;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001a94:	3b01      	subs	r3, #1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	440a      	add	r2, r1
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	1119      	asrs	r1, r3, #4
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	b28a      	uxth	r2, r1
 8001abe:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	893b      	ldrh	r3, [r7, #8]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	dbdf      	blt.n	8001a8e <linear_filter+0x3a>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001ae2:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS flashdrive;
	usb_file_t wav_file;
	usb_file_t info_file;
	usb_file_t raw_data_file;
	uint32_t written = 0;
 8001ae4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001ae8:	f103 031c 	add.w	r3, r3, #28
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f000 fe3a 	bl	8002768 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f9cc 	bl	8001e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f7ff fabe 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 8001afc:	f7ff fa9c 	bl	8001038 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b00:	f7ff fbc4 	bl	800128c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b04:	f000 fbbe 	bl	8002284 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001b08:	f00e f92c 	bl	800fd64 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8001b0c:	f000 fb4a 	bl	80021a4 <MX_RTC_Init>
  MX_TIM3_Init();
 8001b10:	f000 fd8a 	bl	8002628 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b14:	f7ff f9aa 	bl	8000e6c <MX_ADC1_Init>
  MX_FATFS_Init();
 8001b18:	f008 f980 	bl	8009e1c <MX_FATFS_Init>
  MX_SPI2_Init();
 8001b1c:	f000 fbe8 	bl	80022f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001b20:	48d1      	ldr	r0, [pc, #836]	; (8001e68 <main+0x38c>)
 8001b22:	f006 fadf 	bl	80080e4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buffer, BUFF_SIZE);
 8001b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2a:	49d0      	ldr	r1, [pc, #832]	; (8001e6c <main+0x390>)
 8001b2c:	48d0      	ldr	r0, [pc, #832]	; (8001e70 <main+0x394>)
 8001b2e:	f001 f81b 	bl	8002b68 <HAL_ADC_Start_DMA>


  create_header(&wav_file, FREQUENCY, TIME, 4);
 8001b32:	f507 50e9 	add.w	r0, r7, #7456	; 0x1d20
 8001b36:	2304      	movs	r3, #4
 8001b38:	2203      	movs	r2, #3
 8001b3a:	49ce      	ldr	r1, [pc, #824]	; (8001e74 <main+0x398>)
 8001b3c:	f7ff fc44 	bl	80013c8 <create_header>
  raw_data_file.title = "raw_data.wav";
 8001b40:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001b44:	4acc      	ldr	r2, [pc, #816]	; (8001e78 <main+0x39c>)
 8001b46:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b48:	f00e f932 	bl	800fdb0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(state) {
 8001b4c:	4bcb      	ldr	r3, [pc, #812]	; (8001e7c <main+0x3a0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	2b07      	cmp	r3, #7
 8001b56:	f200 8185 	bhi.w	8001e64 <main+0x388>
 8001b5a:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <main+0x84>)
 8001b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b60:	08001b81 	.word	0x08001b81
 8001b64:	08001e65 	.word	0x08001e65
 8001b68:	08001ba7 	.word	0x08001ba7
 8001b6c:	08001e65 	.word	0x08001e65
 8001b70:	08001bc5 	.word	0x08001bc5
 8001b74:	08001be7 	.word	0x08001be7
 8001b78:	08001c0b 	.word	0x08001c0b
 8001b7c:	08001c27 	.word	0x08001c27
    case MOUNTING:
    	//HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    	//clear_print("MOUNTING USB\n FLASHDRIVE...");
    	send_signal(f_mount(&flashdrive, USBHPath, 1));
 8001b80:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001b84:	2201      	movs	r2, #1
 8001b86:	49be      	ldr	r1, [pc, #760]	; (8001e80 <main+0x3a4>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00d fa69 	bl	800f060 <f_mount>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fa35 	bl	8001000 <send_signal>
    	//println("MOUNTED");
    	HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9a:	f000 fe57 	bl	800284c <HAL_Delay>

    	state = MOUNTED;
 8001b9e:	4bb7      	ldr	r3, [pc, #732]	; (8001e7c <main+0x3a0>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	701a      	strb	r2, [r3, #0]
    	break;
 8001ba4:	e15f      	b.n	8001e66 <main+0x38a>

    case RECORDING_START:
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bac:	48b5      	ldr	r0, [pc, #724]	; (8001e84 <main+0x3a8>)
 8001bae:	f002 fcff 	bl	80045b0 <HAL_GPIO_WritePin>
    	create_file(&raw_data_file);
 8001bb2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc9e 	bl	80014f8 <create_file>
    	state = RECORDING;
 8001bbc:	4baf      	ldr	r3, [pc, #700]	; (8001e7c <main+0x3a0>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	701a      	strb	r2, [r3, #0]
    	break;
 8001bc2:	e150      	b.n	8001e66 <main+0x38a>

    case COPY_FIRST_HALF:
    	state = RECORDING;
 8001bc4:	4bad      	ldr	r3, [pc, #692]	; (8001e7c <main+0x3a0>)
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	701a      	strb	r2, [r3, #0]
    	write_buffer(&raw_data_file, ADC_Buffer, 0, BUFF_HALF, &written);
 8001bca:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001bce:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001bd2:	f103 031c 	add.w	r3, r3, #28
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bdc:	2200      	movs	r2, #0
 8001bde:	49a3      	ldr	r1, [pc, #652]	; (8001e6c <main+0x390>)
 8001be0:	f000 fa8e 	bl	8002100 <write_buffer>
    	break;
 8001be4:	e13f      	b.n	8001e66 <main+0x38a>

    case COPY_SECOND_HALF:
    	state = RECORDING;
 8001be6:	4ba5      	ldr	r3, [pc, #660]	; (8001e7c <main+0x3a0>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	701a      	strb	r2, [r3, #0]
    	write_buffer(&raw_data_file, ADC_Buffer, BUFF_HALF, BUFF_HALF, &written);
 8001bec:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001bf0:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001bf4:	f103 031c 	add.w	r3, r3, #28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c02:	499a      	ldr	r1, [pc, #616]	; (8001e6c <main+0x390>)
 8001c04:	f000 fa7c 	bl	8002100 <write_buffer>
    	break;
 8001c08:	e12d      	b.n	8001e66 <main+0x38a>

    case RECORDING_STOP:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	489d      	ldr	r0, [pc, #628]	; (8001e84 <main+0x3a8>)
 8001c10:	f002 fd00 	bl	8004614 <HAL_GPIO_TogglePin>
    	close_file(&raw_data_file);
 8001c14:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd0e 	bl	800163a <close_file>
    	state = PROCESSING;
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <main+0x3a0>)
 8001c20:	2208      	movs	r2, #8
 8001c22:	701a      	strb	r2, [r3, #0]
    	//clear_print("RECORDED TO");
    	//println(title);
    	//println("WAITING FOR\n COMMANDS");
    	break;
 8001c24:	e11f      	b.n	8001e66 <main+0x38a>

    case PROCESSING:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2a:	4896      	ldr	r0, [pc, #600]	; (8001e84 <main+0x3a8>)
 8001c2c:	f002 fcf2 	bl	8004614 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c34:	4893      	ldr	r0, [pc, #588]	; (8001e84 <main+0x3a8>)
 8001c36:	f002 fced 	bl	8004614 <HAL_GPIO_TogglePin>

    	generate_title(title, "%dh%dm%ds.wav", TITLE_SIZE);
 8001c3a:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001c3e:	f103 0314 	add.w	r3, r3, #20
 8001c42:	2228      	movs	r2, #40	; 0x28
 8001c44:	4990      	ldr	r1, [pc, #576]	; (8001e88 <main+0x3ac>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd78 	bl	800173c <generate_title>
    	wav_file.title = title;
 8001c4c:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001c50:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001c54:	f102 0214 	add.w	r2, r2, #20
 8001c58:	601a      	str	r2, [r3, #0]
    	create_file(&wav_file);
 8001c5a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc4a 	bl	80014f8 <create_file>
    	write_header(&wav_file);
 8001c64:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fc59 	bl	8001520 <write_header>



    	generate_title(info_title, "%dh%dm%ds.txt", TITLE_SIZE);
 8001c6e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001c72:	f103 030c 	add.w	r3, r3, #12
 8001c76:	2228      	movs	r2, #40	; 0x28
 8001c78:	4984      	ldr	r1, [pc, #528]	; (8001e8c <main+0x3b0>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd5e 	bl	800173c <generate_title>
    	info_file.title = info_title;
 8001c80:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001c84:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8001c88:	f102 020c 	add.w	r2, r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    	create_file(&info_file);
 8001c8e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc30 	bl	80014f8 <create_file>


    	read_file(&raw_data_file);
 8001c98:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fcdd 	bl	800165c <read_file>

    	init_filter();
 8001ca2:	f7ff fe31 	bl	8001908 <init_filter>

    	prev = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001cac:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8001cb0:	8013      	strh	r3, [r2, #0]

    	while (written > 0) {
 8001cb2:	e0b0      	b.n	8001e16 <main+0x33a>
    		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb8:	4872      	ldr	r0, [pc, #456]	; (8001e84 <main+0x3a8>)
 8001cba:	f002 fcab 	bl	8004614 <HAL_GPIO_TogglePin>
    		if (written >= READ_BUFFER_SIZE) {
 8001cbe:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001cc2:	f103 031c 	add.w	r3, r3, #28
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ccc:	d307      	bcc.n	8001cde <main+0x202>
    			to_read = READ_BUFFER_SIZE;
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001cd6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001cda:	8013      	strh	r3, [r2, #0]
 8001cdc:	e009      	b.n	8001cf2 <main+0x216>
    		}
    		else {
    			to_read = written;
 8001cde:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001ce2:	f103 031c 	add.w	r3, r3, #28
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001cec:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001cf0:	8013      	strh	r3, [r2, #0]
    		}
    		written -= to_read;
 8001cf2:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001cf6:	f103 031c 	add.w	r3, r3, #28
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001d00:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	1ad2      	subs	r2, r2, r3
 8001d08:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001d0c:	f103 031c 	add.w	r3, r3, #28
 8001d10:	601a      	str	r2, [r3, #0]

    		read_buffer(&raw_data_file, Read_Buffer, to_read);
 8001d12:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001d16:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001d20:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fcef 	bl	8001708 <read_buffer>
    		linear_filter(Read_Buffer, prev, READ_BUFFER_SIZE, Temporary_Buffer);
 8001d2a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001d2e:	f103 0318 	add.w	r3, r3, #24
 8001d32:	3b18      	subs	r3, #24
 8001d34:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001d38:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8001d3c:	8811      	ldrh	r1, [r2, #0]
 8001d3e:	f507 50a0 	add.w	r0, r7, #5120	; 0x1400
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	f7ff fe85 	bl	8001a54 <linear_filter>

    		fir_filter(Read_Buffer);
 8001d4a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fdf0 	bl	8001934 <fir_filter>
    		write_little_endian_data(&wav_file, Read_Buffer, to_read);
 8001d54:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001d58:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001d62:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fc0a 	bl	8001580 <write_little_endian_data>

    		perform_fft(Temporary_Buffer, 0, FFT_Buffer);
 8001d6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d70:	3a38      	subs	r2, #56	; 0x38
 8001d72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001d76:	f103 0318 	add.w	r3, r3, #24
 8001d7a:	3b18      	subs	r3, #24
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fd08 	bl	8001794 <perform_fft>
    		calculate_magnitudes(FFT_Buffer, &magnitude, &index);
 8001d84:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8001d88:	f102 0204 	add.w	r2, r2, #4
 8001d8c:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 8001d90:	f101 0108 	add.w	r1, r1, #8
 8001d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d98:	3b38      	subs	r3, #56	; 0x38
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd66 	bl	800186c <calculate_magnitudes>
    		frequency = get_frequency(index, FREQUENCY);
 8001da0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001da4:	f103 0304 	add.w	r3, r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4932      	ldr	r1, [pc, #200]	; (8001e74 <main+0x398>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fd83 	bl	80018b8 <get_frequency>
 8001db2:	eef0 7a40 	vmov.f32	s15, s0
 8001db6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001dba:	edc3 7a00 	vstr	s15, [r3]
    		write_array(&info_file, &frequency, 1);
 8001dbe:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 8001dc2:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fc5b 	bl	8001684 <write_array>

    		if (written == 0) {
 8001dce:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001dd2:	f103 031c 	add.w	r3, r3, #28
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d025      	beq.n	8001e28 <main+0x34c>
    			break;
    		}

    		if (prev == 0) {
 8001ddc:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001de0:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <main+0x322>
    			write_array(&info_file, FFT_Buffer, FFT_BUFFER_SIZE);
 8001dea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dee:	3b38      	subs	r3, #56	; 0x38
 8001df0:	f507 50d6 	add.w	r0, r7, #6848	; 0x1ac0
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fc43 	bl	8001684 <write_array>
    		}

    		prev = Temporary_Buffer[READ_BUFFER_SIZE - 1];
 8001dfe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e02:	f103 0318 	add.w	r3, r3, #24
 8001e06:	3b18      	subs	r3, #24
 8001e08:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	; 0x3fe
 8001e0c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001e10:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8001e14:	8013      	strh	r3, [r2, #0]
    	while (written > 0) {
 8001e16:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001e1a:	f103 031c 	add.w	r3, r3, #28
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f af47 	bne.w	8001cb4 <main+0x1d8>
 8001e26:	e000      	b.n	8001e2a <main+0x34e>
    			break;
 8001e28:	bf00      	nop


    	}
    	close_file(&raw_data_file);
 8001e2a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc03 	bl	800163a <close_file>
    	close_file(&wav_file);
 8001e34:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fbfe 	bl	800163a <close_file>
    	close_file(&info_file);
 8001e3e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fbf9 	bl	800163a <close_file>
    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <main+0x3a8>)
 8001e4e:	f002 fbe1 	bl	8004614 <HAL_GPIO_TogglePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e58:	480a      	ldr	r0, [pc, #40]	; (8001e84 <main+0x3a8>)
 8001e5a:	f002 fba9 	bl	80045b0 <HAL_GPIO_WritePin>
    	state = MOUNTED;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <main+0x3a0>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	701a      	strb	r2, [r3, #0]
    default:
    	break;
 8001e64:	bf00      	nop
    MX_USB_HOST_Process();
 8001e66:	e66f      	b.n	8001b48 <main+0x6c>
 8001e68:	2000300c 	.word	0x2000300c
 8001e6c:	20000484 	.word	0x20000484
 8001e70:	20000388 	.word	0x20000388
 8001e74:	00017700 	.word	0x00017700
 8001e78:	08012238 	.word	0x08012238
 8001e7c:	2000012c 	.word	0x2000012c
 8001e80:	20003050 	.word	0x20003050
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	08012248 	.word	0x08012248
 8001e8c:	08012258 	.word	0x08012258

08001e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b098      	sub	sp, #96	; 0x60
 8001e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e9a:	2230      	movs	r2, #48	; 0x30
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00f fd33 	bl	801190a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <SystemClock_Config+0xfc>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <SystemClock_Config+0xfc>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <SystemClock_Config+0xfc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <SystemClock_Config+0x100>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <SystemClock_Config+0x100>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <SystemClock_Config+0x100>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001efa:	2309      	movs	r3, #9
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f04:	2301      	movs	r3, #1
 8001f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f12:	2304      	movs	r3, #4
 8001f14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f16:	23a8      	movs	r3, #168	; 0xa8
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fa78 	bl	800641c <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f32:	f000 f925 	bl	8002180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f36:	230f      	movs	r3, #15
 8001f38:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	2105      	movs	r1, #5
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 fd81 	bl	8006a5c <HAL_RCC_ClockConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f60:	f000 f90e 	bl	8002180 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fff8 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001f7e:	f000 f8ff 	bl	8002180 <Error_Handler>
  }
}
 8001f82:	bf00      	nop
 8001f84:	3760      	adds	r7, #96	; 0x60
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000

08001f94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == BUTTON_Pin){
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_EXTI_Callback+0x58>

		switch(state) {
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_GPIO_EXTI_Callback+0x20>
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			state = RECORDING_START;
			break;

		default:
			break;
 8001fb2:	e01c      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x5a>
			if (Appli_state == APPLICATION_READY) {
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x68>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d108      	bne.n	8001fce <HAL_GPIO_EXTI_Callback+0x3a>
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	480f      	ldr	r0, [pc, #60]	; (8002000 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fc2:	f002 fb27 	bl	8004614 <HAL_GPIO_TogglePin>
			    state = MOUNTING;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
			break;
 8001fcc:	e00f      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x5a>
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001fce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fd4:	f002 fb1e 	bl	8004614 <HAL_GPIO_TogglePin>
			break;
 8001fd8:	e009      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fde:	4808      	ldr	r0, [pc, #32]	; (8002000 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fe0:	f002 fb18 	bl	8004614 <HAL_GPIO_TogglePin>
			state = RECORDING_START;
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	701a      	strb	r2, [r3, #0]
			break;
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x5a>
		}

	}
 8001fec:	bf00      	nop
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000012c 	.word	0x2000012c
 8001ffc:	2000037c 	.word	0x2000037c
 8002000:	40020c00 	.word	0x40020c00

08002004 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d131      	bne.n	800207a <HAL_TIM_PeriodElapsedCallback+0x76>
		if (current_index >= BUFF_SIZE){
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	d302      	bcc.n	8002028 <HAL_TIM_PeriodElapsedCallback+0x24>
			current_index = 0;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002024:	2200      	movs	r2, #0
 8002026:	801a      	strh	r2, [r3, #0]
		}
		if (
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
		if (
 800202e:	2b02      	cmp	r3, #2
 8002030:	d11c      	bne.n	800206c <HAL_TIM_PeriodElapsedCallback+0x68>
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800203c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002040:	f240 52db 	movw	r2, #1499	; 0x5db
 8002044:	4293      	cmp	r3, r2
 8002046:	d809      	bhi.n	800205c <HAL_TIM_PeriodElapsedCallback+0x58>
			|| ADC_Buffer[current_index] <= RECORD_MIN_LIM)
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002052:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002056:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800205a:	d807      	bhi.n	800206c <HAL_TIM_PeriodElapsedCallback+0x68>

		) {
			state = RECORDING_START;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002068:	f002 fad4 	bl	8004614 <HAL_GPIO_TogglePin>
		}
		current_index += 1;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002078:	801a      	strh	r2, [r3, #0]
	}
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40000400 	.word	0x40000400
 8002088:	2000012e 	.word	0x2000012e
 800208c:	2000012c 	.word	0x2000012c
 8002090:	20000484 	.word	0x20000484
 8002094:	40020c00 	.word	0x40020c00

08002098 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_ConvHalfCpltCallback+0x18>
		state = COPY_FIRST_HALF;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80020ac:	2205      	movs	r2, #5
 80020ae:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80020b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80020b6:	f002 faad 	bl	8004614 <HAL_GPIO_TogglePin>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000012c 	.word	0x2000012c
 80020c8:	40020c00 	.word	0x40020c00

080020cc <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d102      	bne.n	80020e4 <HAL_ADC_ConvCpltCallback+0x18>
		state = COPY_SECOND_HALF;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80020e0:	2206      	movs	r2, #6
 80020e2:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80020e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <HAL_ADC_ConvCpltCallback+0x30>)
 80020ea:	f002 fa93 	bl	8004614 <HAL_GPIO_TogglePin>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000012c 	.word	0x2000012c
 80020fc:	40020c00 	.word	0x40020c00

08002100 <write_buffer>:


void write_buffer(
		usb_file_t* usb_file, uint16_t* buffer,
		uint16_t start, uint16_t amount, uint32_t* written)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	460b      	mov	r3, r1
 8002110:	80fb      	strh	r3, [r7, #6]
 8002112:	4613      	mov	r3, r2
 8002114:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211c:	4815      	ldr	r0, [pc, #84]	; (8002174 <write_buffer+0x74>)
 800211e:	f002 fa47 	bl	80045b0 <HAL_GPIO_WritePin>

	if (*written + amount > SAMPLES_NUM) {
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <write_buffer+0x78>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d908      	bls.n	8002142 <write_buffer+0x42>
		amount = SAMPLES_NUM - *written;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f5c3 43ca 	rsb	r3, r3, #25856	; 0x6500
 800213a:	80bb      	strh	r3, [r7, #4]
		state = RECORDING_STOP;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <write_buffer+0x7c>)
 800213e:	2207      	movs	r2, #7
 8002140:	701a      	strb	r2, [r3, #0]
	}

	write_data(usb_file, buffer + start, amount);
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	88ba      	ldrh	r2, [r7, #4]
 800214c:	4619      	mov	r1, r3
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff f9fd 	bl	800154e <write_data>
	*written += amount;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	88bb      	ldrh	r3, [r7, #4]
 800215a:	441a      	add	r2, r3
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <write_buffer+0x74>)
 8002168:	f002 fa22 	bl	80045b0 <HAL_GPIO_WritePin>

}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40020c00 	.word	0x40020c00
 8002178:	00046500 	.word	0x00046500
 800217c:	2000012c 	.word	0x2000012c

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <MX_RTC_Init+0xac>)
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <MX_RTC_Init+0xb0>)
 80021c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <MX_RTC_Init+0xac>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_RTC_Init+0xac>)
 80021ca:	227f      	movs	r2, #127	; 0x7f
 80021cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <MX_RTC_Init+0xac>)
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_RTC_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_RTC_Init+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_RTC_Init+0xac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021e6:	481a      	ldr	r0, [pc, #104]	; (8002250 <MX_RTC_Init+0xac>)
 80021e8:	f005 f8b6 	bl	8007358 <HAL_RTC_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80021f2:	f7ff ffc5 	bl	8002180 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021fe:	2300      	movs	r3, #0
 8002200:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	; (8002250 <MX_RTC_Init+0xac>)
 8002212:	f005 f987 	bl	8007524 <HAL_RTC_SetTime>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800221c:	f7ff ffb0 	bl	8002180 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002220:	2301      	movs	r3, #1
 8002222:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002224:	2301      	movs	r3, #1
 8002226:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002228:	2301      	movs	r3, #1
 800222a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800222c:	2300      	movs	r3, #0
 800222e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002230:	463b      	mov	r3, r7
 8002232:	2201      	movs	r2, #1
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <MX_RTC_Init+0xac>)
 8002238:	f005 fb4c 	bl	80078d4 <HAL_RTC_SetDate>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002242:	f7ff ff9d 	bl	8002180 <Error_Handler>
  }

}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20002f3c 	.word	0x20002f3c
 8002254:	40002800 	.word	0x40002800

08002258 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_RTC_MspInit+0x24>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d102      	bne.n	8002270 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RTC_MspInit+0x28>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40002800 	.word	0x40002800
 8002280:	42470e3c 	.word	0x42470e3c

08002284 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_SPI1_Init+0x64>)
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <MX_SPI1_Init+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_SPI1_Init+0x64>)
 8002290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_SPI1_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_SPI1_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022d0:	220a      	movs	r2, #10
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022d6:	f005 fd19 	bl	8007d0c <HAL_SPI_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022e0:	f7ff ff4e 	bl	8002180 <Error_Handler>
  }

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20002fb4 	.word	0x20002fb4
 80022ec:	40013000 	.word	0x40013000

080022f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_SPI2_Init+0x64>)
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <MX_SPI2_Init+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_SPI2_Init+0x64>)
 80022fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002300:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <MX_SPI2_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <MX_SPI2_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_SPI2_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_SPI2_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_SPI2_Init+0x64>)
 800231c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002320:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_SPI2_Init+0x64>)
 8002324:	2210      	movs	r2, #16
 8002326:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <MX_SPI2_Init+0x64>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_SPI2_Init+0x64>)
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <MX_SPI2_Init+0x64>)
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_SPI2_Init+0x64>)
 800233c:	220a      	movs	r2, #10
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <MX_SPI2_Init+0x64>)
 8002342:	f005 fce3 	bl	8007d0c <HAL_SPI_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800234c:	f7ff ff18 	bl	8002180 <Error_Handler>
  }

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20002f5c 	.word	0x20002f5c
 8002358:	40003800 	.word	0x40003800

0800235c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_SPI_MspInit+0x124>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12c      	bne.n	80023d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a38      	ldr	r2, [pc, #224]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023b6:	23e0      	movs	r3, #224	; 0xe0
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023c6:	2305      	movs	r3, #5
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	482d      	ldr	r0, [pc, #180]	; (8002488 <HAL_SPI_MspInit+0x12c>)
 80023d2:	f001 fe01 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023d6:	e04f      	b.n	8002478 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2b      	ldr	r2, [pc, #172]	; (800248c <HAL_SPI_MspInit+0x130>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d14a      	bne.n	8002478 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a26      	ldr	r2, [pc, #152]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_SPI_MspInit+0x128>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_SPI_MspInit+0x128>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_SPI_MspInit+0x128>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DATA_Pin;
 8002436:	2308      	movs	r3, #8
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002446:	2305      	movs	r3, #5
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	480f      	ldr	r0, [pc, #60]	; (8002490 <HAL_SPI_MspInit+0x134>)
 8002452:	f001 fdc1 	bl	8003fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CLK_Pin;
 8002456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002468:	2305      	movs	r3, #5
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4808      	ldr	r0, [pc, #32]	; (8002494 <HAL_SPI_MspInit+0x138>)
 8002474:	f001 fdb0 	bl	8003fd8 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013000 	.word	0x40013000
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	40003800 	.word	0x40003800
 8002490:	40020800 	.word	0x40020800
 8002494:	40020400 	.word	0x40020400

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_MspInit+0x4c>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_MspInit+0x4c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x4c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_MspInit+0x4c>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_MspInit+0x4c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024d6:	2007      	movs	r0, #7
 80024d8:	f001 f824 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f966 	bl	800280c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002548:	2001      	movs	r0, #1
 800254a:	f002 f88b 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM3_IRQHandler+0x10>)
 800255a:	f005 fe4d 	bl	80081f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000300c 	.word	0x2000300c

08002568 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <DMA2_Stream0_IRQHandler+0x10>)
 800256e:	f001 facb 	bl	8003b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200003d0 	.word	0x200003d0

0800257c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <OTG_FS_IRQHandler+0x10>)
 8002582:	f002 fb29 	bl	8004bd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20003894 	.word	0x20003894

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f00f f95e 	bl	8011880 <__errno>
 80025c4:	4602      	mov	r2, r0
 80025c6:	230c      	movs	r3, #12
 80025c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20020000 	.word	0x20020000
 80025f0:	00000800 	.word	0x00000800
 80025f4:	20000130 	.word	0x20000130
 80025f8:	20003b60 	.word	0x20003b60

080025fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <SystemInit+0x28>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <SystemInit+0x28>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SystemInit+0x28>)
 8002612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002616:	609a      	str	r2, [r3, #8]
#endif
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <MX_TIM3_Init+0x94>)
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <MX_TIM3_Init+0x98>)
 8002648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_TIM3_Init+0x94>)
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <MX_TIM3_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 874;
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <MX_TIM3_Init+0x94>)
 8002658:	f240 326a 	movw	r2, #874	; 0x36a
 800265c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <MX_TIM3_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <MX_TIM3_Init+0x94>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800266a:	4814      	ldr	r0, [pc, #80]	; (80026bc <MX_TIM3_Init+0x94>)
 800266c:	f005 fc6e 	bl	8007f4c <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002676:	f7ff fd83 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4619      	mov	r1, r3
 8002686:	480d      	ldr	r0, [pc, #52]	; (80026bc <MX_TIM3_Init+0x94>)
 8002688:	f005 febe 	bl	8008408 <HAL_TIM_ConfigClockSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002692:	f7ff fd75 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002696:	2320      	movs	r3, #32
 8002698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269e:	463b      	mov	r3, r7
 80026a0:	4619      	mov	r1, r3
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <MX_TIM3_Init+0x94>)
 80026a4:	f006 fb7a 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026ae:	f7ff fd67 	bl	8002180 <Error_Handler>
  }

}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000300c 	.word	0x2000300c
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_TIM_Base_MspInit+0x48>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d115      	bne.n	8002702 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_TIM_Base_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_TIM_Base_MspInit+0x4c>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_Base_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	201d      	movs	r0, #29
 80026f8:	f000 ff34 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026fc:	201d      	movs	r0, #29
 80026fe:	f000 ff5d 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40000400 	.word	0x40000400
 8002710:	40023800 	.word	0x40023800

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800274c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800271a:	e003      	b.n	8002724 <LoopCopyDataInit>

0800271c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800271e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002722:	3104      	adds	r1, #4

08002724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800272c:	d3f6      	bcc.n	800271c <CopyDataInit>
  ldr  r2, =_sbss
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002730:	e002      	b.n	8002738 <LoopFillZerobss>

08002732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002734:	f842 3b04 	str.w	r3, [r2], #4

08002738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800273c:	d3f9      	bcc.n	8002732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800273e:	f7ff ff5d 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002742:	f00f f8a3 	bl	801188c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002746:	f7ff f9c9 	bl	8001adc <main>
  bx  lr    
 800274a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800274c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002750:	08013db4 	.word	0x08013db4
  ldr  r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002758:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 800275c:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8002760:	20003b5c 	.word	0x20003b5c

08002764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_Init+0x40>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_Init+0x40>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_Init+0x40>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002790:	2003      	movs	r0, #3
 8002792:	f000 fec7 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f808 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800279c:	f7ff fe7c 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_InitTick+0x54>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_InitTick+0x58>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ff0e 	bl	80035ec <HAL_SYSTICK_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00e      	b.n	80027f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d80a      	bhi.n	80027f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e8:	f000 febc 	bl	8003564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_InitTick+0x5c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000064 	.word	0x20000064
 8002804:	2000006c 	.word	0x2000006c
 8002808:	20000068 	.word	0x20000068

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000006c 	.word	0x2000006c
 8002830:	2000304c 	.word	0x2000304c

08002834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_GetTick+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000304c 	.word	0x2000304c

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ffee 	bl	8002834 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_Delay+0x40>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffde 	bl	8002834 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2000006c 	.word	0x2000006c

08002890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e15b      	b.n	8002b5e <HAL_ADC_Init+0x2ce>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4aa4      	ldr	r2, [pc, #656]	; (8002b3c <HAL_ADC_Init+0x2ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00e      	beq.n	80028ce <HAL_ADC_Init+0x3e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aa2      	ldr	r2, [pc, #648]	; (8002b40 <HAL_ADC_Init+0x2b0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_ADC_Init+0x3e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4aa1      	ldr	r2, [pc, #644]	; (8002b44 <HAL_ADC_Init+0x2b4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_Init+0x3e>
 80028c4:	f240 1143 	movw	r1, #323	; 0x143
 80028c8:	489f      	ldr	r0, [pc, #636]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 80028ca:	f7ff fc60 	bl	800218e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_ADC_Init+0x6e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d00e      	beq.n	80028fe <HAL_ADC_Init+0x6e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e8:	d009      	beq.n	80028fe <HAL_ADC_Init+0x6e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028f2:	d004      	beq.n	80028fe <HAL_ADC_Init+0x6e>
 80028f4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80028f8:	4893      	ldr	r0, [pc, #588]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 80028fa:	f7ff fc48 	bl	800218e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d013      	beq.n	800292e <HAL_ADC_Init+0x9e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290e:	d00e      	beq.n	800292e <HAL_ADC_Init+0x9e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002918:	d009      	beq.n	800292e <HAL_ADC_Init+0x9e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002922:	d004      	beq.n	800292e <HAL_ADC_Init+0x9e>
 8002924:	f240 1145 	movw	r1, #325	; 0x145
 8002928:	4887      	ldr	r0, [pc, #540]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 800292a:	f7ff fc30 	bl	800218e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_ADC_Init+0xb8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d004      	beq.n	8002948 <HAL_ADC_Init+0xb8>
 800293e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002942:	4881      	ldr	r0, [pc, #516]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002944:	f7ff fc23 	bl	800218e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7e1b      	ldrb	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_ADC_Init+0xd2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7e1b      	ldrb	r3, [r3, #24]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d004      	beq.n	8002962 <HAL_ADC_Init+0xd2>
 8002958:	f240 1147 	movw	r1, #327	; 0x147
 800295c:	487a      	ldr	r0, [pc, #488]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 800295e:	f7ff fc16 	bl	800218e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d054      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002972:	d04f      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800297c:	d04a      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002986:	d045      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002990:	d040      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800299a:	d03b      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80029a4:	d036      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80029ae:	d031      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b8:	d02c      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80029c2:	d027      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80029cc:	d022      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80029d6:	d01d      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80029e0:	d018      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80029ea:	d013      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80029f4:	d00e      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80029fe:	d009      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_ADC_Init+0x2bc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_Init+0x184>
 8002a0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a0e:	484e      	ldr	r0, [pc, #312]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002a10:	f7ff fbbd 	bl	800218e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_ADC_Init+0x1a0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_Init+0x1a0>
 8002a26:	f240 1149 	movw	r1, #329	; 0x149
 8002a2a:	4847      	ldr	r0, [pc, #284]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002a2c:	f7ff fbaf 	bl	800218e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_ADC_Init+0x1b0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d904      	bls.n	8002a4a <HAL_ADC_Init+0x1ba>
 8002a40:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002a44:	4840      	ldr	r0, [pc, #256]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002a46:	f7ff fba2 	bl	800218e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_ADC_Init+0x1d8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d004      	beq.n	8002a68 <HAL_ADC_Init+0x1d8>
 8002a5e:	f240 114b 	movw	r1, #331	; 0x14b
 8002a62:	4839      	ldr	r0, [pc, #228]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002a64:	f7ff fb93 	bl	800218e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d00c      	beq.n	8002a8a <HAL_ADC_Init+0x1fa>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_ADC_Init+0x1fa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_Init+0x1fa>
 8002a80:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002a84:	4830      	ldr	r0, [pc, #192]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002a86:	f7ff fb82 	bl	800218e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_ADC_Init+0x218>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_Init+0x218>
 8002a9e:	f240 114d 	movw	r1, #333	; 0x14d
 8002aa2:	4829      	ldr	r0, [pc, #164]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002aa4:	f7ff fb73 	bl	800218e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <HAL_ADC_Init+0x2bc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d017      	beq.n	8002ae2 <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d013      	beq.n	8002ae2 <HAL_ADC_Init+0x252>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_ADC_Init+0x252>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d009      	beq.n	8002ae2 <HAL_ADC_Init+0x252>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADC_Init+0x252>
 8002ad8:	f240 1151 	movw	r1, #337	; 0x151
 8002adc:	481a      	ldr	r0, [pc, #104]	; (8002b48 <HAL_ADC_Init+0x2b8>)
 8002ade:	f7ff fb56 	bl	800218e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_ADC_Init+0x26e>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fa10 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d122      	bne.n	8002b50 <HAL_ADC_Init+0x2c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b12:	f023 0302 	bic.w	r3, r3, #2
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 faa4 	bl	800306c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3a:	e00b      	b.n	8002b54 <HAL_ADC_Init+0x2c4>
 8002b3c:	40012000 	.word	0x40012000
 8002b40:	40012100 	.word	0x40012100
 8002b44:	40012200 	.word	0x40012200
 8002b48:	08012268 	.word	0x08012268
 8002b4c:	0f000001 	.word	0x0f000001
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop

08002b68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	7e1b      	ldrb	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x2a>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7e1b      	ldrb	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x2a>
 8002b88:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8002b8c:	4879      	ldr	r0, [pc, #484]	; (8002d74 <HAL_ADC_Start_DMA+0x20c>)
 8002b8e:	f7ff fafe 	bl	800218e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d013      	beq.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d009      	beq.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
 8002bb8:	f240 5141 	movw	r1, #1345	; 0x541
 8002bbc:	486d      	ldr	r0, [pc, #436]	; (8002d74 <HAL_ADC_Start_DMA+0x20c>)
 8002bbe:	f7ff fae6 	bl	800218e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x68>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0cc      	b.n	8002d6a <HAL_ADC_Start_DMA+0x202>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d018      	beq.n	8002c18 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_ADC_Start_DMA+0x210>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a60      	ldr	r2, [pc, #384]	; (8002d7c <HAL_ADC_Start_DMA+0x214>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	0c9a      	lsrs	r2, r3, #18
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c0a:	e002      	b.n	8002c12 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f9      	bne.n	8002c0c <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 80a0 	bne.w	8002d68 <HAL_ADC_Start_DMA+0x200>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_ADC_Start_DMA+0xf2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d106      	bne.n	8002c76 <HAL_ADC_Start_DMA+0x10e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f023 0206 	bic.w	r2, r3, #6
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
 8002c74:	e002      	b.n	8002c7c <HAL_ADC_Start_DMA+0x114>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_ADC_Start_DMA+0x218>)
 8002c86:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	4a3d      	ldr	r2, [pc, #244]	; (8002d84 <HAL_ADC_Start_DMA+0x21c>)
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	4a3c      	ldr	r2, [pc, #240]	; (8002d88 <HAL_ADC_Start_DMA+0x220>)
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_ADC_Start_DMA+0x224>)
 8002c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cb8:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	334c      	adds	r3, #76	; 0x4c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f000 feaf 	bl	8003a3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d12a      	bne.n	8002d40 <HAL_ADC_Start_DMA+0x1d8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_ADC_Start_DMA+0x228>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d015      	beq.n	8002d20 <HAL_ADC_Start_DMA+0x1b8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_ADC_Start_DMA+0x22c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d105      	bne.n	8002d0a <HAL_ADC_Start_DMA+0x1a2>
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_ADC_Start_DMA+0x218>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_ADC_Start_DMA+0x1b8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_ADC_Start_DMA+0x230>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d129      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x200>
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_ADC_Start_DMA+0x218>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d823      	bhi.n	8002d68 <HAL_ADC_Start_DMA+0x200>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11c      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x200>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	e013      	b.n	8002d68 <HAL_ADC_Start_DMA+0x200>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <HAL_ADC_Start_DMA+0x228>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10e      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x200>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x200>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d66:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08012268 	.word	0x08012268
 8002d78:	20000064 	.word	0x20000064
 8002d7c:	431bde83 	.word	0x431bde83
 8002d80:	40012300 	.word	0x40012300
 8002d84:	08003281 	.word	0x08003281
 8002d88:	0800333b 	.word	0x0800333b
 8002d8c:	08003357 	.word	0x08003357
 8002d90:	40012000 	.word	0x40012000
 8002d94:	40012100 	.word	0x40012100
 8002d98:	40012200 	.word	0x40012200

08002d9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d904      	bls.n	8002dd0 <HAL_ADC_ConfigChannel+0x20>
 8002dc6:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 8002dca:	489b      	ldr	r0, [pc, #620]	; (8003038 <HAL_ADC_ConfigChannel+0x288>)
 8002dcc:	f7ff f9df 	bl	800218e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x30>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d904      	bls.n	8002dea <HAL_ADC_ConfigChannel+0x3a>
 8002de0:	f240 6159 	movw	r1, #1625	; 0x659
 8002de4:	4894      	ldr	r0, [pc, #592]	; (8003038 <HAL_ADC_ConfigChannel+0x288>)
 8002de6:	f7ff f9d2 	bl	800218e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d01c      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d018      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d014      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d010      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d00c      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d008      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b07      	cmp	r3, #7
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x84>
 8002e2a:	f240 615a 	movw	r1, #1626	; 0x65a
 8002e2e:	4882      	ldr	r0, [pc, #520]	; (8003038 <HAL_ADC_ConfigChannel+0x288>)
 8002e30:	f7ff f9ad 	bl	800218e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x92>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e10f      	b.n	8003062 <HAL_ADC_ConfigChannel+0x2b2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b09      	cmp	r3, #9
 8002e50:	d925      	bls.n	8002e9e <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68d9      	ldr	r1, [r3, #12]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	3b1e      	subs	r3, #30
 8002e68:	2207      	movs	r2, #7
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	400a      	ands	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4403      	add	r3, r0
 8002e90:	3b1e      	subs	r3, #30
 8002e92:	409a      	lsls	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	e022      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6919      	ldr	r1, [r3, #16]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4403      	add	r3, r0
 8002eda:	409a      	lsls	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d824      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b05      	subs	r3, #5
 8002efe:	221f      	movs	r2, #31
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43da      	mvns	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	3b05      	subs	r3, #5
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34
 8002f34:	e04c      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d824      	bhi.n	8002f88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b23      	subs	r3, #35	; 0x23
 8002f50:	221f      	movs	r2, #31
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43da      	mvns	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	3b23      	subs	r3, #35	; 0x23
 8002f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
 8002f86:	e023      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b41      	subs	r3, #65	; 0x41
 8002f9a:	221f      	movs	r2, #31
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b41      	subs	r3, #65	; 0x41
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_ADC_ConfigChannel+0x28c>)
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_ADC_ConfigChannel+0x290>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d109      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x242>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x242>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_ADC_ConfigChannel+0x290>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d12d      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x2a8>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b10      	cmp	r3, #16
 8003002:	d003      	beq.n	800300c <HAL_ADC_ConfigChannel+0x25c>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b11      	cmp	r3, #17
 800300a:	d125      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x2a8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b10      	cmp	r3, #16
 800301e:	d11b      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x2a8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_ADC_ConfigChannel+0x294>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_ADC_ConfigChannel+0x298>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9a      	lsrs	r2, r3, #18
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003036:	e00c      	b.n	8003052 <HAL_ADC_ConfigChannel+0x2a2>
 8003038:	08012268 	.word	0x08012268
 800303c:	40012300 	.word	0x40012300
 8003040:	40012000 	.word	0x40012000
 8003044:	20000064 	.word	0x20000064
 8003048:	431bde83 	.word	0x431bde83
      {
        counter--;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3b01      	subs	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <HAL_ADC_ConfigChannel+0x29c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4b7f      	ldr	r3, [pc, #508]	; (8003274 <ADC_Init+0x208>)
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <ADC_Init+0x20c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00f      	b.n	800316a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0202 	bic.w	r2, r2, #2
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d028      	beq.n	80031ea <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <ADC_Init+0x13c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d904      	bls.n	80031b2 <ADC_Init+0x146>
 80031a8:	f240 7175 	movw	r1, #1909	; 0x775
 80031ac:	4833      	ldr	r0, [pc, #204]	; (800327c <ADC_Init+0x210>)
 80031ae:	f7fe ffee 	bl	800218e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	3b01      	subs	r3, #1
 80031de:	035a      	lsls	r2, r3, #13
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	e007      	b.n	80031fa <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	3b01      	subs	r3, #1
 8003216:	051a      	lsls	r2, r3, #20
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800322e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323c:	025a      	lsls	r2, r3, #9
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	029a      	lsls	r2, r3, #10
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40012300 	.word	0x40012300
 8003278:	0f000001 	.word	0x0f000001
 800327c:	08012268 	.word	0x08012268

08003280 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d13c      	bne.n	8003314 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12b      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d127      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d119      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0220 	bic.w	r2, r2, #32
 80032e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fe fedd 	bl	80020cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003312:	e00e      	b.n	8003332 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fd3b 	bl	8002d9c <HAL_ADC_ErrorCallback>
}
 8003326:	e004      	b.n	8003332 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7fe fea5 	bl	8002098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0204 	orr.w	r2, r3, #4
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff fd10 	bl	8002d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b07      	cmp	r3, #7
 8003530:	d00f      	beq.n	8003552 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d00c      	beq.n	8003552 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d009      	beq.n	8003552 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d006      	beq.n	8003552 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d003      	beq.n	8003552 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800354a:	2192      	movs	r1, #146	; 0x92
 800354c:	4804      	ldr	r0, [pc, #16]	; (8003560 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800354e:	f7fe fe1e 	bl	800218e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff16 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	080122a0 	.word	0x080122a0

08003564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d903      	bls.n	8003584 <HAL_NVIC_SetPriority+0x20>
 800357c:	21aa      	movs	r1, #170	; 0xaa
 800357e:	480e      	ldr	r0, [pc, #56]	; (80035b8 <HAL_NVIC_SetPriority+0x54>)
 8003580:	f7fe fe05 	bl	800218e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d903      	bls.n	8003592 <HAL_NVIC_SetPriority+0x2e>
 800358a:	21ab      	movs	r1, #171	; 0xab
 800358c:	480a      	ldr	r0, [pc, #40]	; (80035b8 <HAL_NVIC_SetPriority+0x54>)
 800358e:	f7fe fdfe 	bl	800218e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003592:	f7ff ff1b 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	6978      	ldr	r0, [r7, #20]
 800359e:	f7ff ff6b 	bl	8003478 <NVIC_EncodePriority>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff3a 	bl	8003424 <__NVIC_SetPriority>
}
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	080122a0 	.word	0x080122a0

080035bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da03      	bge.n	80035d6 <HAL_NVIC_EnableIRQ+0x1a>
 80035ce:	21be      	movs	r1, #190	; 0xbe
 80035d0:	4805      	ldr	r0, [pc, #20]	; (80035e8 <HAL_NVIC_EnableIRQ+0x2c>)
 80035d2:	f7fe fddc 	bl	800218e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff04 	bl	80033e8 <__NVIC_EnableIRQ>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	080122a0 	.word	0x080122a0

080035ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ff73 	bl	80034e0 <SysTick_Config>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7ff f910 	bl	8002834 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e204      	b.n	8003a2a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a97      	ldr	r2, [pc, #604]	; (8003884 <HAL_DMA_Init+0x280>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04e      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a96      	ldr	r2, [pc, #600]	; (8003888 <HAL_DMA_Init+0x284>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d049      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a94      	ldr	r2, [pc, #592]	; (800388c <HAL_DMA_Init+0x288>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d044      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a93      	ldr	r2, [pc, #588]	; (8003890 <HAL_DMA_Init+0x28c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03f      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a91      	ldr	r2, [pc, #580]	; (8003894 <HAL_DMA_Init+0x290>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d03a      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a90      	ldr	r2, [pc, #576]	; (8003898 <HAL_DMA_Init+0x294>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d035      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a8e      	ldr	r2, [pc, #568]	; (800389c <HAL_DMA_Init+0x298>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d030      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a8d      	ldr	r2, [pc, #564]	; (80038a0 <HAL_DMA_Init+0x29c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d02b      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8b      	ldr	r2, [pc, #556]	; (80038a4 <HAL_DMA_Init+0x2a0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d026      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a8a      	ldr	r2, [pc, #552]	; (80038a8 <HAL_DMA_Init+0x2a4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d021      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a88      	ldr	r2, [pc, #544]	; (80038ac <HAL_DMA_Init+0x2a8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01c      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a87      	ldr	r2, [pc, #540]	; (80038b0 <HAL_DMA_Init+0x2ac>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d017      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a85      	ldr	r2, [pc, #532]	; (80038b4 <HAL_DMA_Init+0x2b0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d012      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a84      	ldr	r2, [pc, #528]	; (80038b8 <HAL_DMA_Init+0x2b4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00d      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a82      	ldr	r2, [pc, #520]	; (80038bc <HAL_DMA_Init+0x2b8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d008      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a81      	ldr	r2, [pc, #516]	; (80038c0 <HAL_DMA_Init+0x2bc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <HAL_DMA_Init+0xc4>
 80036c0:	21b8      	movs	r1, #184	; 0xb8
 80036c2:	4880      	ldr	r0, [pc, #512]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 80036c4:	f7fe fd63 	bl	800218e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d026      	beq.n	800371e <HAL_DMA_Init+0x11a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d8:	d021      	beq.n	800371e <HAL_DMA_Init+0x11a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e2:	d01c      	beq.n	800371e <HAL_DMA_Init+0x11a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80036ec:	d017      	beq.n	800371e <HAL_DMA_Init+0x11a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d012      	beq.n	800371e <HAL_DMA_Init+0x11a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003700:	d00d      	beq.n	800371e <HAL_DMA_Init+0x11a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800370a:	d008      	beq.n	800371e <HAL_DMA_Init+0x11a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003714:	d003      	beq.n	800371e <HAL_DMA_Init+0x11a>
 8003716:	21b9      	movs	r1, #185	; 0xb9
 8003718:	486a      	ldr	r0, [pc, #424]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800371a:	f7fe fd38 	bl	800218e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_DMA_Init+0x13a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_DMA_Init+0x13a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d003      	beq.n	800373e <HAL_DMA_Init+0x13a>
 8003736:	21ba      	movs	r1, #186	; 0xba
 8003738:	4862      	ldr	r0, [pc, #392]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800373a:	f7fe fd28 	bl	800218e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003746:	d007      	beq.n	8003758 <HAL_DMA_Init+0x154>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_Init+0x154>
 8003750:	21bb      	movs	r1, #187	; 0xbb
 8003752:	485c      	ldr	r0, [pc, #368]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 8003754:	f7fe fd1b 	bl	800218e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d007      	beq.n	8003772 <HAL_DMA_Init+0x16e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_DMA_Init+0x16e>
 800376a:	21bc      	movs	r1, #188	; 0xbc
 800376c:	4855      	ldr	r0, [pc, #340]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800376e:	f7fe fd0e 	bl	800218e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_DMA_Init+0x192>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003782:	d008      	beq.n	8003796 <HAL_DMA_Init+0x192>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d003      	beq.n	8003796 <HAL_DMA_Init+0x192>
 800378e:	21bd      	movs	r1, #189	; 0xbd
 8003790:	484c      	ldr	r0, [pc, #304]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 8003792:	f7fe fcfc 	bl	800218e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_DMA_Init+0x1b6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Init+0x1b6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b0:	d003      	beq.n	80037ba <HAL_DMA_Init+0x1b6>
 80037b2:	21be      	movs	r1, #190	; 0xbe
 80037b4:	4843      	ldr	r0, [pc, #268]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 80037b6:	f7fe fcea 	bl	800218e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_DMA_Init+0x1d8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d007      	beq.n	80037dc <HAL_DMA_Init+0x1d8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Init+0x1d8>
 80037d4:	21bf      	movs	r1, #191	; 0xbf
 80037d6:	483b      	ldr	r0, [pc, #236]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 80037d8:	f7fe fcd9 	bl	800218e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_DMA_Init+0x206>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d00d      	beq.n	800380a <HAL_DMA_Init+0x206>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f6:	d008      	beq.n	800380a <HAL_DMA_Init+0x206>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003800:	d003      	beq.n	800380a <HAL_DMA_Init+0x206>
 8003802:	21c0      	movs	r1, #192	; 0xc0
 8003804:	482f      	ldr	r0, [pc, #188]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 8003806:	f7fe fcc2 	bl	800218e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Init+0x21e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b04      	cmp	r3, #4
 8003818:	d003      	beq.n	8003822 <HAL_DMA_Init+0x21e>
 800381a:	21c1      	movs	r1, #193	; 0xc1
 800381c:	4829      	ldr	r0, [pc, #164]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800381e:	f7fe fcb6 	bl	800218e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d065      	beq.n	80038f6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00f      	beq.n	8003852 <HAL_DMA_Init+0x24e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	2b01      	cmp	r3, #1
 8003838:	d00b      	beq.n	8003852 <HAL_DMA_Init+0x24e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	2b02      	cmp	r3, #2
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Init+0x24e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	2b03      	cmp	r3, #3
 8003848:	d003      	beq.n	8003852 <HAL_DMA_Init+0x24e>
 800384a:	21c6      	movs	r1, #198	; 0xc6
 800384c:	481d      	ldr	r0, [pc, #116]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800384e:	f7fe fc9e 	bl	800218e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d036      	beq.n	80038c8 <HAL_DMA_Init+0x2c4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_Init+0x2c4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386c:	d02c      	beq.n	80038c8 <HAL_DMA_Init+0x2c4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003876:	d027      	beq.n	80038c8 <HAL_DMA_Init+0x2c4>
 8003878:	21c7      	movs	r1, #199	; 0xc7
 800387a:	4812      	ldr	r0, [pc, #72]	; (80038c4 <HAL_DMA_Init+0x2c0>)
 800387c:	f7fe fc87 	bl	800218e <assert_failed>
 8003880:	e022      	b.n	80038c8 <HAL_DMA_Init+0x2c4>
 8003882:	bf00      	nop
 8003884:	40026010 	.word	0x40026010
 8003888:	40026028 	.word	0x40026028
 800388c:	40026040 	.word	0x40026040
 8003890:	40026058 	.word	0x40026058
 8003894:	40026070 	.word	0x40026070
 8003898:	40026088 	.word	0x40026088
 800389c:	400260a0 	.word	0x400260a0
 80038a0:	400260b8 	.word	0x400260b8
 80038a4:	40026410 	.word	0x40026410
 80038a8:	40026428 	.word	0x40026428
 80038ac:	40026440 	.word	0x40026440
 80038b0:	40026458 	.word	0x40026458
 80038b4:	40026470 	.word	0x40026470
 80038b8:	40026488 	.word	0x40026488
 80038bc:	400264a0 	.word	0x400264a0
 80038c0:	400264b8 	.word	0x400264b8
 80038c4:	080122dc 	.word	0x080122dc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_DMA_Init+0x2f2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d8:	d00d      	beq.n	80038f6 <HAL_DMA_Init+0x2f2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Init+0x2f2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ec:	d003      	beq.n	80038f6 <HAL_DMA_Init+0x2f2>
 80038ee:	21c8      	movs	r1, #200	; 0xc8
 80038f0:	4850      	ldr	r0, [pc, #320]	; (8003a34 <HAL_DMA_Init+0x430>)
 80038f2:	f7fe fc4c 	bl	800218e <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003916:	e00f      	b.n	8003938 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003918:	f7fe ff8c 	bl	8002834 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d908      	bls.n	8003938 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e078      	b.n	8003a2a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e8      	bne.n	8003918 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <HAL_DMA_Init+0x434>)
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b04      	cmp	r3, #4
 8003990:	d107      	bne.n	80039a2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4313      	orrs	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0307 	bic.w	r3, r3, #7
 80039b8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d117      	bne.n	80039fc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa80 	bl	8003ee4 <DMA_CheckFifoParam>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039f8:	2301      	movs	r3, #1
 80039fa:	e016      	b.n	8003a2a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa37 	bl	8003e78 <DMA_CalcBaseAndBitshift>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	223f      	movs	r2, #63	; 0x3f
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	080122dc 	.word	0x080122dc
 8003a38:	f010803f 	.word	0xf010803f

08003a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_DMA_Start_IT+0x26>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d304      	bcc.n	8003a6c <HAL_DMA_Start_IT+0x30>
 8003a62:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003a66:	4827      	ldr	r0, [pc, #156]	; (8003b04 <HAL_DMA_Start_IT+0xc8>)
 8003a68:	f7fe fb91 	bl	800218e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_Start_IT+0x3e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e040      	b.n	8003afc <HAL_DMA_Start_IT+0xc0>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d12f      	bne.n	8003aee <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f9ba 	bl	8003e1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	223f      	movs	r2, #63	; 0x3f
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0216 	orr.w	r2, r2, #22
 8003ac2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e005      	b.n	8003afa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
 8003af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	080122dc 	.word	0x080122dc

08003b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_DMA_IRQHandler+0x258>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a92      	ldr	r2, [pc, #584]	; (8003d64 <HAL_DMA_IRQHandler+0x25c>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	2208      	movs	r2, #8
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01a      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0204 	bic.w	r2, r2, #4
 8003b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	2208      	movs	r2, #8
 8003b62:	409a      	lsls	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2201      	movs	r2, #1
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2204      	movs	r2, #4
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d012      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00b      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2204      	movs	r2, #4
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	2210      	movs	r2, #16
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d03c      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	2210      	movs	r2, #16
 8003c04:	409a      	lsls	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d024      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
 8003c36:	e01f      	b.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e016      	b.n	8003c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0208 	bic.w	r2, r2, #8
 8003c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 808e 	beq.w	8003da6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8086 	beq.w	8003da6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d136      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0216 	bic.w	r2, r2, #22
 8003cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x1da>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0208 	bic.w	r2, r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	223f      	movs	r2, #63	; 0x3f
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d07d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
        }
        return;
 8003d1e:	e078      	b.n	8003e12 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d108      	bne.n	8003d4e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d030      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
 8003d4c:	e02b      	b.n	8003da6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d027      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
 8003d5e:	e022      	b.n	8003da6 <HAL_DMA_IRQHandler+0x29e>
 8003d60:	20000064 	.word	0x20000064
 8003d64:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0210 	bic.w	r2, r2, #16
 8003d84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d032      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d307      	bcc.n	8003dee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x2ca>
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e000      	b.n	8003e14 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e12:	bf00      	nop
    }
  }
}
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop

08003e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d108      	bne.n	8003e5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e5a:	e007      	b.n	8003e6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	3b10      	subs	r3, #16
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <DMA_CalcBaseAndBitshift+0x64>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d909      	bls.n	8003eba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb8:	e007      	b.n	8003eca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	aaaaaaab 	.word	0xaaaaaaab
 8003ee0:	0801257c 	.word	0x0801257c

08003ee4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11f      	bne.n	8003f3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d855      	bhi.n	8003fb0 <DMA_CheckFifoParam+0xcc>
 8003f04:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <DMA_CheckFifoParam+0x28>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f2f 	.word	0x08003f2f
 8003f14:	08003f1d 	.word	0x08003f1d
 8003f18:	08003fb1 	.word	0x08003fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d045      	beq.n	8003fb4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2c:	e042      	b.n	8003fb4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f36:	d13f      	bne.n	8003fb8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e03c      	b.n	8003fb8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f46:	d121      	bne.n	8003f8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d836      	bhi.n	8003fbc <DMA_CheckFifoParam+0xd8>
 8003f4e:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <DMA_CheckFifoParam+0x70>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f6b 	.word	0x08003f6b
 8003f5c:	08003f65 	.word	0x08003f65
 8003f60:	08003f7d 	.word	0x08003f7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e02f      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d024      	beq.n	8003fc0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7a:	e021      	b.n	8003fc0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f84:	d11e      	bne.n	8003fc4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f8a:	e01b      	b.n	8003fc4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <DMA_CheckFifoParam+0xb4>
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d003      	beq.n	8003f9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f96:	e018      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e015      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00e      	beq.n	8003fc8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      break;
 8003fae:	e00b      	b.n	8003fc8 <DMA_CheckFifoParam+0xe4>
      break;
 8003fb0:	bf00      	nop
 8003fb2:	e00a      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fb4:	bf00      	nop
 8003fb6:	e008      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fb8:	bf00      	nop
 8003fba:	e006      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;   
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <DMA_CheckFifoParam+0xe6>
      break;
 8003fc8:	bf00      	nop
    }
  } 
  
  return status; 
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <HAL_GPIO_Init+0x120>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d023      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a40      	ldr	r2, [pc, #256]	; (80040fc <HAL_GPIO_Init+0x124>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01f      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <HAL_GPIO_Init+0x128>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01b      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a3e      	ldr	r2, [pc, #248]	; (8004104 <HAL_GPIO_Init+0x12c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d017      	beq.n	800403e <HAL_GPIO_Init+0x66>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <HAL_GPIO_Init+0x130>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_GPIO_Init+0x134>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <HAL_GPIO_Init+0x66>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <HAL_GPIO_Init+0x138>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <HAL_GPIO_Init+0x13c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <HAL_GPIO_Init+0x66>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a39      	ldr	r2, [pc, #228]	; (8004118 <HAL_GPIO_Init+0x140>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x66>
 8004036:	21b3      	movs	r1, #179	; 0xb3
 8004038:	4838      	ldr	r0, [pc, #224]	; (800411c <HAL_GPIO_Init+0x144>)
 800403a:	f7fe f8a8 	bl	800218e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_GPIO_Init+0x7c>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x84>
 8004054:	21b4      	movs	r1, #180	; 0xb4
 8004056:	4831      	ldr	r0, [pc, #196]	; (800411c <HAL_GPIO_Init+0x144>)
 8004058:	f7fe f899 	bl	800218e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d035      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d031      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b11      	cmp	r3, #17
 8004072:	d02d      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d029      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b12      	cmp	r3, #18
 8004082:	d025      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <HAL_GPIO_Init+0x148>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d020      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_GPIO_Init+0x14c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01b      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_GPIO_Init+0x150>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d016      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_GPIO_Init+0x154>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d011      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_GPIO_Init+0x158>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00c      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <HAL_GPIO_Init+0x15c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0xf8>
 80040c8:	21b5      	movs	r1, #181	; 0xb5
 80040ca:	4814      	ldr	r0, [pc, #80]	; (800411c <HAL_GPIO_Init+0x144>)
 80040cc:	f7fe f85f 	bl	800218e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_GPIO_Init+0x118>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d007      	beq.n	80040f0 <HAL_GPIO_Init+0x118>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x118>
 80040e8:	21b6      	movs	r1, #182	; 0xb6
 80040ea:	480c      	ldr	r0, [pc, #48]	; (800411c <HAL_GPIO_Init+0x144>)
 80040ec:	f7fe f84f 	bl	800218e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	e23f      	b.n	8004576 <HAL_GPIO_Init+0x59e>
 80040f6:	bf00      	nop
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020400 	.word	0x40020400
 8004100:	40020800 	.word	0x40020800
 8004104:	40020c00 	.word	0x40020c00
 8004108:	40021000 	.word	0x40021000
 800410c:	40021400 	.word	0x40021400
 8004110:	40021800 	.word	0x40021800
 8004114:	40021c00 	.word	0x40021c00
 8004118:	40022000 	.word	0x40022000
 800411c:	08012314 	.word	0x08012314
 8004120:	10110000 	.word	0x10110000
 8004124:	10210000 	.word	0x10210000
 8004128:	10310000 	.word	0x10310000
 800412c:	10120000 	.word	0x10120000
 8004130:	10220000 	.word	0x10220000
 8004134:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004138:	2201      	movs	r2, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	429a      	cmp	r2, r3
 8004152:	f040 820d 	bne.w	8004570 <HAL_GPIO_Init+0x598>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d00b      	beq.n	8004176 <HAL_GPIO_Init+0x19e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800416a:	2b11      	cmp	r3, #17
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b12      	cmp	r3, #18
 8004174:	d144      	bne.n	8004200 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00f      	beq.n	800419e <HAL_GPIO_Init+0x1c6>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d00b      	beq.n	800419e <HAL_GPIO_Init+0x1c6>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d007      	beq.n	800419e <HAL_GPIO_Init+0x1c6>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x1c6>
 8004196:	21c8      	movs	r1, #200	; 0xc8
 8004198:	489f      	ldr	r0, [pc, #636]	; (8004418 <HAL_GPIO_Init+0x440>)
 800419a:	f7fd fff8 	bl	800218e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0201 	and.w	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	2203      	movs	r2, #3
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d004      	beq.n	8004242 <HAL_GPIO_Init+0x26a>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b12      	cmp	r3, #18
 800423e:	f040 80bc 	bne.w	80043ba <HAL_GPIO_Init+0x3e2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8093 	beq.w	8004372 <HAL_GPIO_Init+0x39a>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b09      	cmp	r3, #9
 8004252:	f000 808e 	beq.w	8004372 <HAL_GPIO_Init+0x39a>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8089 	beq.w	8004372 <HAL_GPIO_Init+0x39a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8084 	beq.w	8004372 <HAL_GPIO_Init+0x39a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d07f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d07b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d077      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d073      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d06f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d06b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d067      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d063      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d05f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d05b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d057      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d053      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d04f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b09      	cmp	r3, #9
 80042d8:	d04b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d047      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	d043      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	d03f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b07      	cmp	r3, #7
 80042f8:	d03b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b07      	cmp	r3, #7
 8004300:	d037      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b08      	cmp	r3, #8
 8004308:	d033      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d02f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d02b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b09      	cmp	r3, #9
 8004320:	d027      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b09      	cmp	r3, #9
 8004328:	d023      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b0a      	cmp	r3, #10
 8004330:	d01f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b0a      	cmp	r3, #10
 8004338:	d01b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b0b      	cmp	r3, #11
 8004340:	d017      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d013      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d00f      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b0d      	cmp	r3, #13
 8004358:	d00b      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d007      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x39a>
 800436a:	21e0      	movs	r1, #224	; 0xe0
 800436c:	482a      	ldr	r0, [pc, #168]	; (8004418 <HAL_GPIO_Init+0x440>)
 800436e:	f7fd ff0e 	bl	800218e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3208      	adds	r2, #8
 800437a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	220f      	movs	r2, #15
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	08da      	lsrs	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3208      	adds	r2, #8
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 0203 	and.w	r2, r3, #3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80ba 	beq.w	8004570 <HAL_GPIO_Init+0x598>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_GPIO_Init+0x444>)
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <HAL_GPIO_Init+0x444>)
 8004406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440a:	6453      	str	r3, [r2, #68]	; 0x44
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_GPIO_Init+0x444>)
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004414:	e004      	b.n	8004420 <HAL_GPIO_Init+0x448>
 8004416:	bf00      	nop
 8004418:	08012314 	.word	0x08012314
 800441c:	40023800 	.word	0x40023800
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004424:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_GPIO_Init+0x5b0>)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	3302      	adds	r3, #2
 800442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	220f      	movs	r2, #15
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_GPIO_Init+0x5b4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d02b      	beq.n	80044a8 <HAL_GPIO_Init+0x4d0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a4f      	ldr	r2, [pc, #316]	; (8004590 <HAL_GPIO_Init+0x5b8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d025      	beq.n	80044a4 <HAL_GPIO_Init+0x4cc>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <HAL_GPIO_Init+0x5bc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d01f      	beq.n	80044a0 <HAL_GPIO_Init+0x4c8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <HAL_GPIO_Init+0x5c0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d019      	beq.n	800449c <HAL_GPIO_Init+0x4c4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a4c      	ldr	r2, [pc, #304]	; (800459c <HAL_GPIO_Init+0x5c4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_GPIO_Init+0x4c0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <HAL_GPIO_Init+0x5c8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00d      	beq.n	8004494 <HAL_GPIO_Init+0x4bc>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a4a      	ldr	r2, [pc, #296]	; (80045a4 <HAL_GPIO_Init+0x5cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_Init+0x4b8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a49      	ldr	r2, [pc, #292]	; (80045a8 <HAL_GPIO_Init+0x5d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_GPIO_Init+0x4b4>
 8004488:	2307      	movs	r3, #7
 800448a:	e00e      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 800448c:	2308      	movs	r3, #8
 800448e:	e00c      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 8004490:	2306      	movs	r3, #6
 8004492:	e00a      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 8004494:	2305      	movs	r3, #5
 8004496:	e008      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 8004498:	2304      	movs	r3, #4
 800449a:	e006      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 800449c:	2303      	movs	r3, #3
 800449e:	e004      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e002      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_GPIO_Init+0x4d2>
 80044a8:	2300      	movs	r3, #0
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	f002 0203 	and.w	r2, r2, #3
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	4093      	lsls	r3, r2
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ba:	4933      	ldr	r1, [pc, #204]	; (8004588 <HAL_GPIO_Init+0x5b0>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044c8:	4b38      	ldr	r3, [pc, #224]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x514>
        {
          temp |= iocurrent;
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x53e>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004516:	4a25      	ldr	r2, [pc, #148]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x568>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x592>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <HAL_GPIO_Init+0x5d4>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3301      	adds	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	f67f addd 	bls.w	8004138 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 800457e:	bf00      	nop
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40013800 	.word	0x40013800
 800458c:	40020000 	.word	0x40020000
 8004590:	40020400 	.word	0x40020400
 8004594:	40020800 	.word	0x40020800
 8004598:	40020c00 	.word	0x40020c00
 800459c:	40021000 	.word	0x40021000
 80045a0:	40021400 	.word	0x40021400
 80045a4:	40021800 	.word	0x40021800
 80045a8:	40021c00 	.word	0x40021c00
 80045ac:	40013c00 	.word	0x40013c00

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_GPIO_WritePin+0x20>
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_GPIO_WritePin+0x2a>
 80045d0:	f240 119f 	movw	r1, #415	; 0x19f
 80045d4:	480e      	ldr	r0, [pc, #56]	; (8004610 <HAL_GPIO_WritePin+0x60>)
 80045d6:	f7fd fdda 	bl	800218e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80045da:	787b      	ldrb	r3, [r7, #1]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_GPIO_WritePin+0x40>
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d004      	beq.n	80045f0 <HAL_GPIO_WritePin+0x40>
 80045e6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80045ea:	4809      	ldr	r0, [pc, #36]	; (8004610 <HAL_GPIO_WritePin+0x60>)
 80045ec:	f7fd fdcf 	bl	800218e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80045f0:	787b      	ldrb	r3, [r7, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f6:	887a      	ldrh	r2, [r7, #2]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045fc:	e003      	b.n	8004606 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	041a      	lsls	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	619a      	str	r2, [r3, #24]
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	08012314 	.word	0x08012314

08004614 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_GPIO_TogglePin+0x1c>
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_GPIO_TogglePin+0x26>
 8004630:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004634:	480a      	ldr	r0, [pc, #40]	; (8004660 <HAL_GPIO_TogglePin+0x4c>)
 8004636:	f7fd fdaa 	bl	800218e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	401a      	ands	r2, r3
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	429a      	cmp	r2, r3
 8004646:	d104      	bne.n	8004652 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004648:	887b      	ldrh	r3, [r7, #2]
 800464a:	041a      	lsls	r2, r3, #16
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004650:	e002      	b.n	8004658 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08012314 	.word	0x08012314

08004664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fc86 	bl	8001f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40013c00 	.word	0x40013c00

08004694 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004696:	b08f      	sub	sp, #60	; 0x3c
 8004698:	af0a      	add	r7, sp, #40	; 0x28
 800469a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e062      	b.n	800476c <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ae:	d008      	beq.n	80046c2 <HAL_HCD_Init+0x2e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <HAL_HCD_Init+0xe0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <HAL_HCD_Init+0x2e>
 80046ba:	217a      	movs	r1, #122	; 0x7a
 80046bc:	482e      	ldr	r0, [pc, #184]	; (8004778 <HAL_HCD_Init+0xe4>)
 80046be:	f7fd fd66 	bl	800218e <assert_failed>

  USBx = hhcd->Instance;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_HCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f00b fb9f 	bl	800fe20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_HCD_Init+0x68>
  {
    hhcd->Init.dma_enable = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f004 fcaf 	bl	8009064 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	687e      	ldr	r6, [r7, #4]
 800470e:	466d      	mov	r5, sp
 8004710:	f106 0410 	add.w	r4, r6, #16
 8004714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004720:	e885 0003 	stmia.w	r5, {r0, r1}
 8004724:	1d33      	adds	r3, r6, #4
 8004726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f004 fc29 	bl	8008f80 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f004 fca6 	bl	8009086 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	687e      	ldr	r6, [r7, #4]
 8004742:	466d      	mov	r5, sp
 8004744:	f106 0410 	add.w	r4, r6, #16
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004754:	e885 0003 	stmia.w	r5, {r0, r1}
 8004758:	1d33      	adds	r3, r6, #4
 800475a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f004 fdb9 	bl	80092d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004774:	40040000 	.word	0x40040000
 8004778:	08012350 	.word	0x08012350

0800477c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af04      	add	r7, sp, #16
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	70fb      	strb	r3, [r7, #3]
 800478e:	460b      	mov	r3, r1
 8004790:	70bb      	strb	r3, [r7, #2]
 8004792:	4613      	mov	r3, r2
 8004794:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_HCD_HC_Init+0x28>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e07f      	b.n	80048a4 <HAL_HCD_HC_Init+0x128>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	333d      	adds	r3, #61	; 0x3d
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	3338      	adds	r3, #56	; 0x38
 80047d0:	787a      	ldrb	r2, [r7, #1]
 80047d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	440b      	add	r3, r1
 80047e2:	3340      	adds	r3, #64	; 0x40
 80047e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80047e6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	3339      	adds	r3, #57	; 0x39
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	333f      	adds	r3, #63	; 0x3f
 800480c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004810:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	78bb      	ldrb	r3, [r7, #2]
 8004816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481a:	b2d8      	uxtb	r0, r3
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	333a      	adds	r3, #58	; 0x3a
 800482a:	4602      	mov	r2, r0
 800482c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800482e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	da0a      	bge.n	800484c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	333b      	adds	r3, #59	; 0x3b
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e009      	b.n	8004860 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	333b      	adds	r3, #59	; 0x3b
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	333c      	adds	r3, #60	; 0x3c
 8004870:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004874:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	787c      	ldrb	r4, [r7, #1]
 800487c:	78ba      	ldrb	r2, [r7, #2]
 800487e:	78f9      	ldrb	r1, [r7, #3]
 8004880:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4623      	mov	r3, r4
 8004892:	f004 fea1 	bl	80095d8 <USB_HC_Init>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd90      	pop	{r4, r7, pc}

080048ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_HCD_HC_Halt+0x1e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e00f      	b.n	80048ea <HAL_HCD_HC_Halt+0x3e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f005 f8dd 	bl	8009a9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	70fb      	strb	r3, [r7, #3]
 8004906:	460b      	mov	r3, r1
 8004908:	70bb      	strb	r3, [r7, #2]
 800490a:	4613      	mov	r3, r2
 800490c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	333b      	adds	r3, #59	; 0x3b
 800491e:	78ba      	ldrb	r2, [r7, #2]
 8004920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	333f      	adds	r3, #63	; 0x3f
 8004932:	787a      	ldrb	r2, [r7, #1]
 8004934:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004936:	7c3b      	ldrb	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	3342      	adds	r3, #66	; 0x42
 800494c:	2203      	movs	r2, #3
 800494e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	333d      	adds	r3, #61	; 0x3d
 8004960:	7f3a      	ldrb	r2, [r7, #28]
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e009      	b.n	800497a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	3342      	adds	r3, #66	; 0x42
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800497a:	787b      	ldrb	r3, [r7, #1]
 800497c:	2b03      	cmp	r3, #3
 800497e:	f200 80d6 	bhi.w	8004b2e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004999 	.word	0x08004999
 800498c:	08004b19 	.word	0x08004b19
 8004990:	08004a05 	.word	0x08004a05
 8004994:	08004a8f 	.word	0x08004a8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004998:	7c3b      	ldrb	r3, [r7, #16]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 80c9 	bne.w	8004b32 <HAL_HCD_HC_SubmitRequest+0x23e>
 80049a0:	78bb      	ldrb	r3, [r7, #2]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 80c5 	bne.w	8004b32 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80049a8:	8b3b      	ldrh	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3351      	adds	r3, #81	; 0x51
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	3351      	adds	r3, #81	; 0x51
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	440b      	add	r3, r1
 80049e6:	3342      	adds	r3, #66	; 0x42
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049ec:	e0a1      	b.n	8004b32 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	440b      	add	r3, r1
 80049fc:	3342      	adds	r3, #66	; 0x42
 80049fe:	2202      	movs	r2, #2
 8004a00:	701a      	strb	r2, [r3, #0]
      break;
 8004a02:	e096      	b.n	8004b32 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a04:	78bb      	ldrb	r3, [r7, #2]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d120      	bne.n	8004a4c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	3351      	adds	r3, #81	; 0x51
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3342      	adds	r3, #66	; 0x42
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a34:	e07e      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	3342      	adds	r3, #66	; 0x42
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
      break;
 8004a4a:	e073      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	440b      	add	r3, r1
 8004a5a:	3350      	adds	r3, #80	; 0x50
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	3342      	adds	r3, #66	; 0x42
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
      break;
 8004a76:	e05d      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3342      	adds	r3, #66	; 0x42
 8004a88:	2202      	movs	r2, #2
 8004a8a:	701a      	strb	r2, [r3, #0]
      break;
 8004a8c:	e052      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a8e:	78bb      	ldrb	r3, [r7, #2]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d120      	bne.n	8004ad6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3351      	adds	r3, #81	; 0x51
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3342      	adds	r3, #66	; 0x42
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004abe:	e039      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3342      	adds	r3, #66	; 0x42
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]
      break;
 8004ad4:	e02e      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3350      	adds	r3, #80	; 0x50
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	3342      	adds	r3, #66	; 0x42
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
      break;
 8004b00:	e018      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	3342      	adds	r3, #66	; 0x42
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
      break;
 8004b16:	e00d      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	3342      	adds	r3, #66	; 0x42
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
      break;
 8004b2c:	e002      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004b32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3344      	adds	r3, #68	; 0x44
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	8b39      	ldrh	r1, [r7, #24]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4403      	add	r3, r0
 8004b58:	3348      	adds	r3, #72	; 0x48
 8004b5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	335c      	adds	r3, #92	; 0x5c
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334c      	adds	r3, #76	; 0x4c
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	440b      	add	r3, r1
 8004b92:	3339      	adds	r3, #57	; 0x39
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	440b      	add	r3, r1
 8004ba6:	335d      	adds	r3, #93	; 0x5d
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	3338      	adds	r3, #56	; 0x38
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	18d1      	adds	r1, r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f004 fe10 	bl	80097ec <USB_HC_StartXfer>
 8004bcc:	4603      	mov	r3, r0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 fb2d 	bl	800924e <USB_GetMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 80ef 	bne.w	8004dda <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f004 fb11 	bl	8009228 <USB_ReadInterrupts>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80e5 	beq.w	8004dd8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f004 fb08 	bl	8009228 <USB_ReadInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c22:	d104      	bne.n	8004c2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 faf8 	bl	8009228 <USB_ReadInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d104      	bne.n	8004c4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f004 fae8 	bl	8009228 <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c62:	d104      	bne.n	8004c6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fad8 	bl	8009228 <USB_ReadInterrupts>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d103      	bne.n	8004c8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2202      	movs	r2, #2
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 faca 	bl	8009228 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9e:	d115      	bne.n	8004ccc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ca8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f00b f92e 	bl	800ff1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fbc0 	bl	800944c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 faa9 	bl	8009228 <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce0:	d102      	bne.n	8004ce8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f001 f966 	bl	8005fb4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 fa9b 	bl	8009228 <USB_ReadInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d106      	bne.n	8004d0a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f00b f8f1 	bl	800fee4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2208      	movs	r2, #8
 8004d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 fa8a 	bl	8009228 <USB_ReadInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d1e:	d138      	bne.n	8004d92 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f004 fea7 	bl	8009a78 <USB_HC_ReadInterrupt>
 8004d2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e025      	b.n	8004d7e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5c:	d106      	bne.n	8004d6c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8cf 	bl	8004f08 <HCD_HC_IN_IRQHandler>
 8004d6a:	e005      	b.n	8004d78 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fcfd 	bl	8005772 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3d4      	bcc.n	8004d32 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f004 fa46 	bl	8009228 <USB_ReadInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d101      	bne.n	8004daa <HAL_HCD_IRQHandler+0x1d2>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_HCD_IRQHandler+0x1d4>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d014      	beq.n	8004dda <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0210 	bic.w	r2, r2, #16
 8004dbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 f84b 	bl	8005e5c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0210 	orr.w	r2, r2, #16
 8004dd4:	619a      	str	r2, [r3, #24]
 8004dd6:	e000      	b.n	8004dda <HAL_HCD_IRQHandler+0x202>
      return;
 8004dd8:	bf00      	nop
    }
  }
}
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_HCD_Start+0x16>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e013      	b.n	8004e1e <HAL_HCD_Start+0x3e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f004 f91d 	bl	8009042 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f004 fb80 	bl	8009514 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_HCD_Stop+0x16>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e00d      	b.n	8004e58 <HAL_HCD_Stop+0x32>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f004 ff61 	bl	8009d10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 fb27 	bl	80094c0 <USB_ResetPort>
 8004e72:	4603      	mov	r3, r0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	335c      	adds	r3, #92	; 0x5c
 8004e98:	781b      	ldrb	r3, [r3, #0]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	334c      	adds	r3, #76	; 0x4c
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f004 fb69 	bl	80095b4 <USB_GetCurrentFrame>
 8004ee2:	4603      	mov	r3, r0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f004 fb44 	bl	8009586 <USB_GetHostSpeed>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d119      	bne.n	8004f6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	2304      	movs	r3, #4
 8004f48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	60d3      	str	r3, [r2, #12]
 8004f6a:	e0ce      	b.n	800510a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d12c      	bne.n	8004fde <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	461a      	mov	r2, r3
 8004f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	335d      	adds	r3, #93	; 0x5d
 8004fa8:	2207      	movs	r2, #7
 8004faa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f004 fd5f 	bl	8009a9a <USB_HC_Halt>
 8004fdc:	e095      	b.n	800510a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d109      	bne.n	8005008 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	461a      	mov	r2, r3
 8005002:	2320      	movs	r3, #32
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	e080      	b.n	800510a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d134      	bne.n	8005088 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	440a      	add	r2, r1
 8005034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	440b      	add	r3, r1
 800504c:	335d      	adds	r3, #93	; 0x5d
 800504e:	2205      	movs	r2, #5
 8005050:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505e:	461a      	mov	r2, r3
 8005060:	2310      	movs	r3, #16
 8005062:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	461a      	mov	r2, r3
 8005072:	2308      	movs	r3, #8
 8005074:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f004 fd0a 	bl	8009a9a <USB_HC_Halt>
 8005086:	e040      	b.n	800510a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d134      	bne.n	800510a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ba:	f043 0302 	orr.w	r3, r3, #2
 80050be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 fce5 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	461a      	mov	r2, r3
 80050de:	2310      	movs	r3, #16
 80050e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	335d      	adds	r3, #93	; 0x5d
 80050f2:	2208      	movs	r2, #8
 80050f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	461a      	mov	r2, r3
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d122      	bne.n	8005168 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	440a      	add	r2, r1
 8005138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f004 fca4 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	461a      	mov	r2, r3
 8005160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005164:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005166:	e300      	b.n	800576a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	f040 80fd 	bne.w	800537a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	440b      	add	r3, r1
 8005196:	3348      	adds	r3, #72	; 0x48
 8005198:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80051ac:	1ad1      	subs	r1, r2, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4403      	add	r3, r0
 80051bc:	334c      	adds	r3, #76	; 0x4c
 80051be:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	440b      	add	r3, r1
 80051ce:	335d      	adds	r3, #93	; 0x5d
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	440b      	add	r3, r1
 80051e2:	3358      	adds	r3, #88	; 0x58
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2301      	movs	r3, #1
 80051f8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	440b      	add	r3, r1
 8005208:	333f      	adds	r3, #63	; 0x3f
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	440b      	add	r3, r1
 800521e:	333f      	adds	r3, #63	; 0x3f
 8005220:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005222:	2b02      	cmp	r3, #2
 8005224:	d121      	bne.n	800526a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	440a      	add	r2, r1
 800523c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005240:	f043 0302 	orr.w	r3, r3, #2
 8005244:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f004 fc22 	bl	8009a9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	461a      	mov	r2, r3
 8005264:	2310      	movs	r3, #16
 8005266:	6093      	str	r3, [r2, #8]
 8005268:	e070      	b.n	800534c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	440b      	add	r3, r1
 8005278:	333f      	adds	r3, #63	; 0x3f
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d12a      	bne.n	80052d6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800529e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	335c      	adds	r3, #92	; 0x5c
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	b2d8      	uxtb	r0, r3
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	335c      	adds	r3, #92	; 0x5c
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	4601      	mov	r1, r0
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f00a fe32 	bl	800ff38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052d4:	e03a      	b.n	800534c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	333f      	adds	r3, #63	; 0x3f
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d12f      	bne.n	800534c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	335c      	adds	r3, #92	; 0x5c
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3350      	adds	r3, #80	; 0x50
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2d8      	uxtb	r0, r3
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	3350      	adds	r3, #80	; 0x50
 8005328:	4602      	mov	r2, r0
 800532a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	b2d8      	uxtb	r0, r3
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	335c      	adds	r3, #92	; 0x5c
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	4601      	mov	r1, r0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f00a fdf6 	bl	800ff38 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	440b      	add	r3, r1
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f083 0301 	eor.w	r3, r3, #1
 8005362:	b2d8      	uxtb	r0, r3
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	3350      	adds	r3, #80	; 0x50
 8005374:	4602      	mov	r2, r0
 8005376:	701a      	strb	r2, [r3, #0]
}
 8005378:	e1f7      	b.n	800576a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	f040 811a 	bne.w	80055c6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ac:	f023 0302 	bic.w	r3, r3, #2
 80053b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	335d      	adds	r3, #93	; 0x5d
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10a      	bne.n	80053de <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	335c      	adds	r3, #92	; 0x5c
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e0d9      	b.n	8005592 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	335d      	adds	r3, #93	; 0x5d
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d10a      	bne.n	800540a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	335c      	adds	r3, #92	; 0x5c
 8005404:	2205      	movs	r2, #5
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	e0c3      	b.n	8005592 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	440b      	add	r3, r1
 8005418:	335d      	adds	r3, #93	; 0x5d
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b06      	cmp	r3, #6
 800541e:	d00a      	beq.n	8005436 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	335d      	adds	r3, #93	; 0x5d
 8005430:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005432:	2b08      	cmp	r3, #8
 8005434:	d156      	bne.n	80054e4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3358      	adds	r3, #88	; 0x58
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4403      	add	r3, r0
 8005458:	3358      	adds	r3, #88	; 0x58
 800545a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	3358      	adds	r3, #88	; 0x58
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d914      	bls.n	800549c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	440b      	add	r3, r1
 8005480:	3358      	adds	r3, #88	; 0x58
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	335c      	adds	r3, #92	; 0x5c
 8005496:	2204      	movs	r2, #4
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e009      	b.n	80054b0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	335c      	adds	r3, #92	; 0x5c
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e056      	b.n	8005592 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	440b      	add	r3, r1
 80054f2:	335d      	adds	r3, #93	; 0x5d
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d123      	bne.n	8005542 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	335c      	adds	r3, #92	; 0x5c
 800550a:	2202      	movs	r2, #2
 800550c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005524:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e027      	b.n	8005592 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	440b      	add	r3, r1
 8005550:	335d      	adds	r3, #93	; 0x5d
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b07      	cmp	r3, #7
 8005556:	d11c      	bne.n	8005592 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	3358      	adds	r3, #88	; 0x58
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4403      	add	r3, r0
 800557a:	3358      	adds	r3, #88	; 0x58
 800557c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	335c      	adds	r3, #92	; 0x5c
 800558e:	2204      	movs	r2, #4
 8005590:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559e:	461a      	mov	r2, r3
 80055a0:	2302      	movs	r3, #2
 80055a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	b2d8      	uxtb	r0, r3
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	440b      	add	r3, r1
 80055b6:	335c      	adds	r3, #92	; 0x5c
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4601      	mov	r1, r0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f00a fcba 	bl	800ff38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055c4:	e0d1      	b.n	800576a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d8:	2b80      	cmp	r3, #128	; 0x80
 80055da:	d13e      	bne.n	800565a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f6:	f043 0302 	orr.w	r3, r3, #2
 80055fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	440b      	add	r3, r1
 800560a:	3358      	adds	r3, #88	; 0x58
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4403      	add	r3, r0
 800561e:	3358      	adds	r3, #88	; 0x58
 8005620:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	335d      	adds	r3, #93	; 0x5d
 8005632:	2206      	movs	r2, #6
 8005634:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f004 fa2a 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005652:	461a      	mov	r2, r3
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	6093      	str	r3, [r2, #8]
}
 8005658:	e087      	b.n	800576a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d17c      	bne.n	800576a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	333f      	adds	r3, #63	; 0x3f
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d122      	bne.n	80056cc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	3358      	adds	r3, #88	; 0x58
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f004 f9e8 	bl	8009a9a <USB_HC_Halt>
 80056ca:	e045      	b.n	8005758 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	440b      	add	r3, r1
 80056da:	333f      	adds	r3, #63	; 0x3f
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	333f      	adds	r3, #63	; 0x3f
 80056f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d12f      	bne.n	8005758 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	3358      	adds	r3, #88	; 0x58
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d121      	bne.n	8005758 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	335d      	adds	r3, #93	; 0x5d
 8005724:	2203      	movs	r2, #3
 8005726:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	440a      	add	r2, r1
 800573e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f004 f9a1 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	2310      	movs	r3, #16
 8005768:	6093      	str	r3, [r2, #8]
}
 800576a:	bf00      	nop
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d119      	bne.n	80057d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	2304      	movs	r3, #4
 80057b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80057d4:	e33e      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d141      	bne.n	8005870 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	461a      	mov	r2, r3
 80057fa:	2320      	movs	r3, #32
 80057fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	333d      	adds	r3, #61	; 0x3d
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 831f 	bne.w	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	333d      	adds	r3, #61	; 0x3d
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	335c      	adds	r3, #92	; 0x5c
 800583a:	2202      	movs	r2, #2
 800583c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	440a      	add	r2, r1
 8005854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f004 f916 	bl	8009a9a <USB_HC_Halt>
}
 800586e:	e2f1      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d13f      	bne.n	8005906 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	335d      	adds	r3, #93	; 0x5d
 8005896:	2204      	movs	r2, #4
 8005898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	333d      	adds	r3, #61	; 0x3d
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	3358      	adds	r3, #88	; 0x58
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	4611      	mov	r1, r2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f004 f8d4 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	461a      	mov	r2, r3
 8005900:	2340      	movs	r3, #64	; 0x40
 8005902:	6093      	str	r3, [r2, #8]
}
 8005904:	e2a6      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d122      	bne.n	8005964 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	440a      	add	r2, r1
 8005934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f004 f8a6 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	461a      	mov	r2, r3
 800595c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005960:	6093      	str	r3, [r2, #8]
}
 8005962:	e277      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d135      	bne.n	80059e6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	440b      	add	r3, r1
 8005988:	3358      	adds	r3, #88	; 0x58
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f004 f86e 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	461a      	mov	r2, r3
 80059cc:	2301      	movs	r3, #1
 80059ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	440b      	add	r3, r1
 80059de:	335d      	adds	r3, #93	; 0x5d
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
}
 80059e4:	e236      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d12b      	bne.n	8005a54 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f004 f82e 	bl	8009a9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	335d      	adds	r3, #93	; 0x5d
 8005a4e:	2205      	movs	r2, #5
 8005a50:	701a      	strb	r2, [r3, #0]
}
 8005a52:	e1ff      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d155      	bne.n	8005b16 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	3358      	adds	r3, #88	; 0x58
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	335d      	adds	r3, #93	; 0x5d
 8005a8e:	2203      	movs	r2, #3
 8005a90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	333d      	adds	r3, #61	; 0x3d
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d114      	bne.n	8005ad2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	333c      	adds	r3, #60	; 0x3c
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	440b      	add	r3, r1
 8005acc:	333d      	adds	r3, #61	; 0x3d
 8005ace:	2201      	movs	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f003 ffcc 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2310      	movs	r3, #16
 8005b12:	6093      	str	r3, [r2, #8]
}
 8005b14:	e19e      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d12b      	bne.n	8005b84 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b46:	f043 0302 	orr.w	r3, r3, #2
 8005b4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f003 ff9f 	bl	8009a9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	440b      	add	r3, r1
 8005b6a:	335d      	adds	r3, #93	; 0x5d
 8005b6c:	2206      	movs	r2, #6
 8005b6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	6093      	str	r3, [r2, #8]
}
 8005b82:	e167      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9a:	d135      	bne.n	8005c08 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb6:	f043 0302 	orr.w	r3, r3, #2
 8005bba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 ff67 	bl	8009a9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2310      	movs	r3, #16
 8005bdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	461a      	mov	r2, r3
 8005bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	440b      	add	r3, r1
 8005c00:	335d      	adds	r3, #93	; 0x5d
 8005c02:	2208      	movs	r2, #8
 8005c04:	701a      	strb	r2, [r3, #0]
}
 8005c06:	e125      	b.n	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	f040 811a 	bne.w	8005e54 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	f023 0302 	bic.w	r3, r3, #2
 8005c3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	335d      	adds	r3, #93	; 0x5d
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d137      	bne.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	335c      	adds	r3, #92	; 0x5c
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	333f      	adds	r3, #63	; 0x3f
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d00b      	beq.n	8005c98 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	333f      	adds	r3, #63	; 0x3f
 8005c90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	f040 80c5 	bne.w	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3351      	adds	r3, #81	; 0x51
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2d8      	uxtb	r0, r3
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3351      	adds	r3, #81	; 0x51
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	e0ad      	b.n	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	335d      	adds	r3, #93	; 0x5d
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d10a      	bne.n	8005cf2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	440b      	add	r3, r1
 8005cea:	335c      	adds	r3, #92	; 0x5c
 8005cec:	2202      	movs	r2, #2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	e097      	b.n	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	440b      	add	r3, r1
 8005d00:	335d      	adds	r3, #93	; 0x5d
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d10a      	bne.n	8005d1e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	440b      	add	r3, r1
 8005d16:	335c      	adds	r3, #92	; 0x5c
 8005d18:	2202      	movs	r2, #2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e081      	b.n	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	335d      	adds	r3, #93	; 0x5d
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d10a      	bne.n	8005d4a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	440b      	add	r3, r1
 8005d42:	335c      	adds	r3, #92	; 0x5c
 8005d44:	2205      	movs	r2, #5
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e06b      	b.n	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	335d      	adds	r3, #93	; 0x5d
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d00a      	beq.n	8005d76 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	440b      	add	r3, r1
 8005d6e:	335d      	adds	r3, #93	; 0x5d
 8005d70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d155      	bne.n	8005e22 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	440b      	add	r3, r1
 8005d84:	3358      	adds	r3, #88	; 0x58
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4403      	add	r3, r0
 8005d98:	3358      	adds	r3, #88	; 0x58
 8005d9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3358      	adds	r3, #88	; 0x58
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d914      	bls.n	8005ddc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3358      	adds	r3, #88	; 0x58
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	335c      	adds	r3, #92	; 0x5c
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e009      	b.n	8005df0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	440b      	add	r3, r1
 8005dea:	335c      	adds	r3, #92	; 0x5c
 8005dec:	2202      	movs	r2, #2
 8005dee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e06:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e0e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2302      	movs	r3, #2
 8005e32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	b2d8      	uxtb	r0, r3
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	440b      	add	r3, r1
 8005e46:	335c      	adds	r3, #92	; 0x5c
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f00a f872 	bl	800ff38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	0c5b      	lsrs	r3, r3, #17
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e90:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d003      	beq.n	8005ea0 <HCD_RXQLVL_IRQHandler+0x44>
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	f000 8082 	beq.w	8005fa2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005e9e:	e083      	b.n	8005fa8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d07f      	beq.n	8005fa6 <HCD_RXQLVL_IRQHandler+0x14a>
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3344      	adds	r3, #68	; 0x44
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d074      	beq.n	8005fa6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	3344      	adds	r3, #68	; 0x44
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f003 f97d 	bl	80091d6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	440b      	add	r3, r1
 8005eea:	3344      	adds	r3, #68	; 0x44
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	18d1      	adds	r1, r2, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4403      	add	r3, r0
 8005f00:	3344      	adds	r3, #68	; 0x44
 8005f02:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	334c      	adds	r3, #76	; 0x4c
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	18d1      	adds	r1, r2, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4403      	add	r3, r0
 8005f28:	334c      	adds	r3, #76	; 0x4c
 8005f2a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HCD_RXQLVL_IRQHandler+0x154>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d031      	beq.n	8005fa6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	440b      	add	r3, r1
 8005f82:	3350      	adds	r3, #80	; 0x50
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f083 0301 	eor.w	r3, r3, #1
 8005f8a:	b2d8      	uxtb	r0, r3
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	3350      	adds	r3, #80	; 0x50
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	701a      	strb	r2, [r3, #0]
      break;
 8005fa0:	e001      	b.n	8005fa6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005fa6:	bf00      	nop
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3728      	adds	r7, #40	; 0x28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	1ff80000 	.word	0x1ff80000

08005fb4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fe0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d10b      	bne.n	8006004 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d102      	bne.n	8005ffc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f009 ff82 	bl	800ff00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d132      	bne.n	8006074 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f043 0308 	orr.w	r3, r3, #8
 8006014:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b04      	cmp	r3, #4
 800601e:	d126      	bne.n	800606e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d113      	bne.n	8006050 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800602e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006032:	d106      	bne.n	8006042 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2102      	movs	r1, #2
 800603a:	4618      	mov	r0, r3
 800603c:	f003 fa06 	bl	800944c <USB_InitFSLSPClkSel>
 8006040:	e011      	b.n	8006066 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f003 f9ff 	bl	800944c <USB_InitFSLSPClkSel>
 800604e:	e00a      	b.n	8006066 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d106      	bne.n	8006066 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605e:	461a      	mov	r2, r3
 8006060:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006064:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f009 ff74 	bl	800ff54 <HAL_HCD_PortEnabled_Callback>
 800606c:	e002      	b.n	8006074 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f009 ff7e 	bl	800ff70 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b20      	cmp	r3, #32
 800607c:	d103      	bne.n	8006086 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f043 0320 	orr.w	r3, r3, #32
 8006084:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6013      	str	r3, [r2, #0]
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e1b1      	b.n	8006412 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4aa2      	ldr	r2, [pc, #648]	; (800633c <HAL_I2C_Init+0x2a0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_I2C_Init+0x3a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4aa0      	ldr	r2, [pc, #640]	; (8006340 <HAL_I2C_Init+0x2a4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_I2C_Init+0x3a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a9f      	ldr	r2, [pc, #636]	; (8006344 <HAL_I2C_Init+0x2a8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_I2C_Init+0x3a>
 80060cc:	f240 11bf 	movw	r1, #447	; 0x1bf
 80060d0:	489d      	ldr	r0, [pc, #628]	; (8006348 <HAL_I2C_Init+0x2ac>)
 80060d2:	f7fc f85c 	bl	800218e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_I2C_Init+0x4c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a9a      	ldr	r2, [pc, #616]	; (800634c <HAL_I2C_Init+0x2b0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d904      	bls.n	80060f2 <HAL_I2C_Init+0x56>
 80060e8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80060ec:	4896      	ldr	r0, [pc, #600]	; (8006348 <HAL_I2C_Init+0x2ac>)
 80060ee:	f7fc f84e 	bl	800218e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_I2C_Init+0x72>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006102:	d004      	beq.n	800610e <HAL_I2C_Init+0x72>
 8006104:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006108:	488f      	ldr	r0, [pc, #572]	; (8006348 <HAL_I2C_Init+0x2ac>)
 800610a:	f7fc f840 	bl	800218e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_I2C_Init+0x8c>
 800611e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006122:	4889      	ldr	r0, [pc, #548]	; (8006348 <HAL_I2C_Init+0x2ac>)
 8006124:	f7fc f833 	bl	800218e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006130:	d009      	beq.n	8006146 <HAL_I2C_Init+0xaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800613a:	d004      	beq.n	8006146 <HAL_I2C_Init+0xaa>
 800613c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006140:	4881      	ldr	r0, [pc, #516]	; (8006348 <HAL_I2C_Init+0x2ac>)
 8006142:	f7fc f824 	bl	800218e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_I2C_Init+0xc4>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d004      	beq.n	8006160 <HAL_I2C_Init+0xc4>
 8006156:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800615a:	487b      	ldr	r0, [pc, #492]	; (8006348 <HAL_I2C_Init+0x2ac>)
 800615c:	f7fc f817 	bl	800218e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <HAL_I2C_Init+0xda>
 800616c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006170:	4875      	ldr	r0, [pc, #468]	; (8006348 <HAL_I2C_Init+0x2ac>)
 8006172:	f7fc f80c 	bl	800218e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_I2C_Init+0xf4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d004      	beq.n	8006190 <HAL_I2C_Init+0xf4>
 8006186:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800618a:	486f      	ldr	r0, [pc, #444]	; (8006348 <HAL_I2C_Init+0x2ac>)
 800618c:	f7fb ffff 	bl	800218e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_I2C_Init+0x10e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d004      	beq.n	80061aa <HAL_I2C_Init+0x10e>
 80061a0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80061a4:	4868      	ldr	r0, [pc, #416]	; (8006348 <HAL_I2C_Init+0x2ac>)
 80061a6:	f7fb fff2 	bl	800218e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb f892 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061fc:	f000 fea0 	bl	8006f40 <HAL_RCC_GetPCLK1Freq>
 8006200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4a52      	ldr	r2, [pc, #328]	; (8006350 <HAL_I2C_Init+0x2b4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d807      	bhi.n	800621c <HAL_I2C_Init+0x180>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a51      	ldr	r2, [pc, #324]	; (8006354 <HAL_I2C_Init+0x2b8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	bf94      	ite	ls
 8006214:	2301      	movls	r3, #1
 8006216:	2300      	movhi	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e006      	b.n	800622a <HAL_I2C_Init+0x18e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a4e      	ldr	r2, [pc, #312]	; (8006358 <HAL_I2C_Init+0x2bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	bf94      	ite	ls
 8006224:	2301      	movls	r3, #1
 8006226:	2300      	movhi	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0ef      	b.n	8006412 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a49      	ldr	r2, [pc, #292]	; (800635c <HAL_I2C_Init+0x2c0>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	0c9b      	lsrs	r3, r3, #18
 800623c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <HAL_I2C_Init+0x2b4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d802      	bhi.n	800626c <HAL_I2C_Init+0x1d0>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	3301      	adds	r3, #1
 800626a:	e009      	b.n	8006280 <HAL_I2C_Init+0x1e4>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	4a3a      	ldr	r2, [pc, #232]	; (8006360 <HAL_I2C_Init+0x2c4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	099b      	lsrs	r3, r3, #6
 800627e:	3301      	adds	r3, #1
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	430b      	orrs	r3, r1
 8006286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	492d      	ldr	r1, [pc, #180]	; (8006350 <HAL_I2C_Init+0x2b4>)
 800629c:	428b      	cmp	r3, r1
 800629e:	d80d      	bhi.n	80062bc <HAL_I2C_Init+0x220>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1e59      	subs	r1, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80062ae:	3301      	adds	r3, #1
 80062b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	bf38      	it	cc
 80062b8:	2304      	movcc	r3, #4
 80062ba:	e063      	b.n	8006384 <HAL_I2C_Init+0x2e8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d111      	bne.n	80062e8 <HAL_I2C_Init+0x24c>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1e58      	subs	r0, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	e012      	b.n	800630e <HAL_I2C_Init+0x272>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1e58      	subs	r0, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	0099      	lsls	r1, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf0c      	ite	eq
 8006308:	2301      	moveq	r3, #1
 800630a:	2300      	movne	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_I2C_Init+0x27a>
 8006312:	2301      	movs	r3, #1
 8006314:	e036      	b.n	8006384 <HAL_I2C_Init+0x2e8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d122      	bne.n	8006364 <HAL_I2C_Init+0x2c8>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1e58      	subs	r0, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	440b      	add	r3, r1
 800632c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006330:	3301      	adds	r3, #1
 8006332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	e023      	b.n	8006384 <HAL_I2C_Init+0x2e8>
 800633c:	40005400 	.word	0x40005400
 8006340:	40005800 	.word	0x40005800
 8006344:	40005c00 	.word	0x40005c00
 8006348:	08012388 	.word	0x08012388
 800634c:	00061a80 	.word	0x00061a80
 8006350:	000186a0 	.word	0x000186a0
 8006354:	001e847f 	.word	0x001e847f
 8006358:	003d08ff 	.word	0x003d08ff
 800635c:	431bde83 	.word	0x431bde83
 8006360:	10624dd3 	.word	0x10624dd3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e58      	subs	r0, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	0099      	lsls	r1, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	fbb0 f3f3 	udiv	r3, r0, r3
 800637a:	3301      	adds	r3, #1
 800637c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	6809      	ldr	r1, [r1, #0]
 8006388:	4313      	orrs	r3, r2
 800638a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6911      	ldr	r1, [r2, #16]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68d2      	ldr	r2, [r2, #12]
 80063be:	4311      	orrs	r1, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e30d      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b0f      	cmp	r3, #15
 8006434:	d903      	bls.n	800643e <HAL_RCC_OscConfig+0x22>
 8006436:	21e8      	movs	r1, #232	; 0xe8
 8006438:	48a3      	ldr	r0, [pc, #652]	; (80066c8 <HAL_RCC_OscConfig+0x2ac>)
 800643a:	f7fb fea8 	bl	800218e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8088 	beq.w	800655c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <HAL_RCC_OscConfig+0x54>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645c:	d008      	beq.n	8006470 <HAL_RCC_OscConfig+0x54>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006466:	d003      	beq.n	8006470 <HAL_RCC_OscConfig+0x54>
 8006468:	21ed      	movs	r1, #237	; 0xed
 800646a:	4897      	ldr	r0, [pc, #604]	; (80066c8 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	f7fb fe8f 	bl	800218e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006470:	4b96      	ldr	r3, [pc, #600]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	2b04      	cmp	r3, #4
 800647a:	d00c      	beq.n	8006496 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800647c:	4b93      	ldr	r3, [pc, #588]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006484:	2b08      	cmp	r3, #8
 8006486:	d112      	bne.n	80064ae <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006488:	4b90      	ldr	r3, [pc, #576]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006494:	d10b      	bne.n	80064ae <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006496:	4b8d      	ldr	r3, [pc, #564]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d05b      	beq.n	800655a <HAL_RCC_OscConfig+0x13e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d157      	bne.n	800655a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e2cd      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b6:	d106      	bne.n	80064c6 <HAL_RCC_OscConfig+0xaa>
 80064b8:	4b84      	ldr	r3, [pc, #528]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a83      	ldr	r2, [pc, #524]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e01d      	b.n	8006502 <HAL_RCC_OscConfig+0xe6>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ce:	d10c      	bne.n	80064ea <HAL_RCC_OscConfig+0xce>
 80064d0:	4b7e      	ldr	r3, [pc, #504]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a7d      	ldr	r2, [pc, #500]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	4b7b      	ldr	r3, [pc, #492]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a7a      	ldr	r2, [pc, #488]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e00b      	b.n	8006502 <HAL_RCC_OscConfig+0xe6>
 80064ea:	4b78      	ldr	r3, [pc, #480]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a77      	ldr	r2, [pc, #476]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b75      	ldr	r3, [pc, #468]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a74      	ldr	r2, [pc, #464]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006500:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d013      	beq.n	8006532 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650a:	f7fc f993 	bl	8002834 <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006512:	f7fc f98f 	bl	8002834 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b64      	cmp	r3, #100	; 0x64
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e292      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006524:	4b69      	ldr	r3, [pc, #420]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0f0      	beq.n	8006512 <HAL_RCC_OscConfig+0xf6>
 8006530:	e014      	b.n	800655c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006532:	f7fc f97f 	bl	8002834 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800653a:	f7fc f97b 	bl	8002834 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b64      	cmp	r3, #100	; 0x64
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e27e      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654c:	4b5f      	ldr	r3, [pc, #380]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f0      	bne.n	800653a <HAL_RCC_OscConfig+0x11e>
 8006558:	e000      	b.n	800655c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d079      	beq.n	800665c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_RCC_OscConfig+0x166>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d004      	beq.n	8006582 <HAL_RCC_OscConfig+0x166>
 8006578:	f240 111f 	movw	r1, #287	; 0x11f
 800657c:	4852      	ldr	r0, [pc, #328]	; (80066c8 <HAL_RCC_OscConfig+0x2ac>)
 800657e:	f7fb fe06 	bl	800218e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b1f      	cmp	r3, #31
 8006588:	d904      	bls.n	8006594 <HAL_RCC_OscConfig+0x178>
 800658a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800658e:	484e      	ldr	r0, [pc, #312]	; (80066c8 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	f7fb fdfd 	bl	800218e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006594:	4b4d      	ldr	r3, [pc, #308]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065a0:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d11c      	bne.n	80065e6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ac:	4b47      	ldr	r3, [pc, #284]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d116      	bne.n	80065e6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b8:	4b44      	ldr	r3, [pc, #272]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_OscConfig+0x1b4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e23c      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d0:	4b3e      	ldr	r3, [pc, #248]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	493b      	ldr	r1, [pc, #236]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e4:	e03a      	b.n	800665c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d020      	beq.n	8006630 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ee:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <HAL_RCC_OscConfig+0x2b4>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fc f91e 	bl	8002834 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fc f91a 	bl	8002834 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e21d      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660e:	4b2f      	ldr	r3, [pc, #188]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661a:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4928      	ldr	r1, [pc, #160]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	e015      	b.n	800665c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <HAL_RCC_OscConfig+0x2b4>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fc f8fd 	bl	8002834 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800663e:	f7fc f8f9 	bl	8002834 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e1fc      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006650:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d046      	beq.n	80066f6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_RCC_OscConfig+0x266>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d004      	beq.n	8006682 <HAL_RCC_OscConfig+0x266>
 8006678:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800667c:	4812      	ldr	r0, [pc, #72]	; (80066c8 <HAL_RCC_OscConfig+0x2ac>)
 800667e:	f7fb fd86 	bl	800218e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <HAL_RCC_OscConfig+0x2b8>)
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7fc f8d0 	bl	8002834 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006698:	f7fc f8cc 	bl	8002834 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1cf      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80066ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x27c>
 80066b6:	e01e      	b.n	80066f6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <HAL_RCC_OscConfig+0x2b8>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fc f8b9 	bl	8002834 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c4:	e011      	b.n	80066ea <HAL_RCC_OscConfig+0x2ce>
 80066c6:	bf00      	nop
 80066c8:	080123c0 	.word	0x080123c0
 80066cc:	40023800 	.word	0x40023800
 80066d0:	42470000 	.word	0x42470000
 80066d4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d8:	f7fc f8ac 	bl	8002834 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e1af      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ea:	4b97      	ldr	r3, [pc, #604]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80066ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80a8 	beq.w	8006854 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00c      	beq.n	800672a <HAL_RCC_OscConfig+0x30e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d008      	beq.n	800672a <HAL_RCC_OscConfig+0x30e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b05      	cmp	r3, #5
 800671e:	d004      	beq.n	800672a <HAL_RCC_OscConfig+0x30e>
 8006720:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006724:	4889      	ldr	r0, [pc, #548]	; (800694c <HAL_RCC_OscConfig+0x530>)
 8006726:	f7fb fd32 	bl	800218e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672a:	4b87      	ldr	r3, [pc, #540]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10f      	bne.n	8006756 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	4a82      	ldr	r2, [pc, #520]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6413      	str	r3, [r2, #64]	; 0x40
 8006746:	4b80      	ldr	r3, [pc, #512]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006756:	4b7e      	ldr	r3, [pc, #504]	; (8006950 <HAL_RCC_OscConfig+0x534>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d118      	bne.n	8006794 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006762:	4b7b      	ldr	r3, [pc, #492]	; (8006950 <HAL_RCC_OscConfig+0x534>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a7a      	ldr	r2, [pc, #488]	; (8006950 <HAL_RCC_OscConfig+0x534>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800676e:	f7fc f861 	bl	8002834 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006776:	f7fc f85d 	bl	8002834 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e160      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <HAL_RCC_OscConfig+0x534>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d106      	bne.n	80067aa <HAL_RCC_OscConfig+0x38e>
 800679c:	4b6a      	ldr	r3, [pc, #424]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	4a69      	ldr	r2, [pc, #420]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6713      	str	r3, [r2, #112]	; 0x70
 80067a8:	e01c      	b.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d10c      	bne.n	80067cc <HAL_RCC_OscConfig+0x3b0>
 80067b2:	4b65      	ldr	r3, [pc, #404]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	4a64      	ldr	r2, [pc, #400]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067b8:	f043 0304 	orr.w	r3, r3, #4
 80067bc:	6713      	str	r3, [r2, #112]	; 0x70
 80067be:	4b62      	ldr	r3, [pc, #392]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	4a61      	ldr	r2, [pc, #388]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ca:	e00b      	b.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
 80067cc:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	4a5d      	ldr	r2, [pc, #372]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	6713      	str	r3, [r2, #112]	; 0x70
 80067d8:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	4a5a      	ldr	r2, [pc, #360]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 80067de:	f023 0304 	bic.w	r3, r3, #4
 80067e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d015      	beq.n	8006818 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fc f822 	bl	8002834 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f2:	e00a      	b.n	800680a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f4:	f7fc f81e 	bl	8002834 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e11f      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680a:	4b4f      	ldr	r3, [pc, #316]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0ee      	beq.n	80067f4 <HAL_RCC_OscConfig+0x3d8>
 8006816:	e014      	b.n	8006842 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006818:	f7fc f80c 	bl	8002834 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800681e:	e00a      	b.n	8006836 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006820:	f7fc f808 	bl	8002834 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	; 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e109      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1ee      	bne.n	8006820 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d105      	bne.n	8006854 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006848:	4b3f      	ldr	r3, [pc, #252]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	4a3e      	ldr	r2, [pc, #248]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 800684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <HAL_RCC_OscConfig+0x45a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d008      	beq.n	8006876 <HAL_RCC_OscConfig+0x45a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d004      	beq.n	8006876 <HAL_RCC_OscConfig+0x45a>
 800686c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006870:	4836      	ldr	r0, [pc, #216]	; (800694c <HAL_RCC_OscConfig+0x530>)
 8006872:	f7fb fc8c 	bl	800218e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80e4 	beq.w	8006a48 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <HAL_RCC_OscConfig+0x52c>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	f000 80ae 	beq.w	80069ea <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b02      	cmp	r3, #2
 8006894:	f040 8092 	bne.w	80069bc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <HAL_RCC_OscConfig+0x498>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a8:	d004      	beq.n	80068b4 <HAL_RCC_OscConfig+0x498>
 80068aa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80068ae:	4827      	ldr	r0, [pc, #156]	; (800694c <HAL_RCC_OscConfig+0x530>)
 80068b0:	f7fb fc6d 	bl	800218e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	2b3f      	cmp	r3, #63	; 0x3f
 80068ba:	d904      	bls.n	80068c6 <HAL_RCC_OscConfig+0x4aa>
 80068bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068c0:	4822      	ldr	r0, [pc, #136]	; (800694c <HAL_RCC_OscConfig+0x530>)
 80068c2:	f7fb fc64 	bl	800218e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	2b31      	cmp	r3, #49	; 0x31
 80068cc:	d904      	bls.n	80068d8 <HAL_RCC_OscConfig+0x4bc>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80068d6:	d904      	bls.n	80068e2 <HAL_RCC_OscConfig+0x4c6>
 80068d8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80068dc:	481b      	ldr	r0, [pc, #108]	; (800694c <HAL_RCC_OscConfig+0x530>)
 80068de:	f7fb fc56 	bl	800218e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d010      	beq.n	800690c <HAL_RCC_OscConfig+0x4f0>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00c      	beq.n	800690c <HAL_RCC_OscConfig+0x4f0>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d008      	beq.n	800690c <HAL_RCC_OscConfig+0x4f0>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d004      	beq.n	800690c <HAL_RCC_OscConfig+0x4f0>
 8006902:	f240 11db 	movw	r1, #475	; 0x1db
 8006906:	4811      	ldr	r0, [pc, #68]	; (800694c <HAL_RCC_OscConfig+0x530>)
 8006908:	f7fb fc41 	bl	800218e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d903      	bls.n	800691c <HAL_RCC_OscConfig+0x500>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	2b0f      	cmp	r3, #15
 800691a:	d904      	bls.n	8006926 <HAL_RCC_OscConfig+0x50a>
 800691c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8006920:	480a      	ldr	r0, [pc, #40]	; (800694c <HAL_RCC_OscConfig+0x530>)
 8006922:	f7fb fc34 	bl	800218e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_OscConfig+0x538>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fb ff82 	bl	8002834 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	e011      	b.n	8006958 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006934:	f7fb ff7e 	bl	8002834 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d90a      	bls.n	8006958 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e081      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
 8006946:	bf00      	nop
 8006948:	40023800 	.word	0x40023800
 800694c:	080123c0 	.word	0x080123c0
 8006950:	40007000 	.word	0x40007000
 8006954:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006958:	4b3e      	ldr	r3, [pc, #248]	; (8006a54 <HAL_RCC_OscConfig+0x638>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e7      	bne.n	8006934 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	019b      	lsls	r3, r3, #6
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	3b01      	subs	r3, #1
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	061b      	lsls	r3, r3, #24
 8006988:	4932      	ldr	r1, [pc, #200]	; (8006a54 <HAL_RCC_OscConfig+0x638>)
 800698a:	4313      	orrs	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800698e:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <HAL_RCC_OscConfig+0x63c>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fb ff4e 	bl	8002834 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800699c:	f7fb ff4a 	bl	8002834 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e04d      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_RCC_OscConfig+0x638>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x580>
 80069ba:	e045      	b.n	8006a48 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069bc:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x63c>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fb ff37 	bl	8002834 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fb ff33 	bl	8002834 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e036      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <HAL_RCC_OscConfig+0x638>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1f0      	bne.n	80069ca <HAL_RCC_OscConfig+0x5ae>
 80069e8:	e02e      	b.n	8006a48 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e029      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069f6:	4b17      	ldr	r3, [pc, #92]	; (8006a54 <HAL_RCC_OscConfig+0x638>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d115      	bne.n	8006a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a1e:	4013      	ands	r3, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10d      	bne.n	8006a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d106      	bne.n	8006a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40023800 	.word	0x40023800
 8006a58:	42470060 	.word	0x42470060

08006a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e174      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_RCC_ClockConfig+0x24>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b0f      	cmp	r3, #15
 8006a7e:	d904      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x2e>
 8006a80:	f240 2151 	movw	r1, #593	; 0x251
 8006a84:	487b      	ldr	r0, [pc, #492]	; (8006c74 <HAL_RCC_ClockConfig+0x218>)
 8006a86:	f7fb fb82 	bl	800218e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d019      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d016      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d013      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d010      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d00d      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d007      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b07      	cmp	r3, #7
 8006ab8:	d004      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x68>
 8006aba:	f240 2152 	movw	r1, #594	; 0x252
 8006abe:	486d      	ldr	r0, [pc, #436]	; (8006c74 <HAL_RCC_ClockConfig+0x218>)
 8006ac0:	f7fb fb65 	bl	800218e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac4:	4b6c      	ldr	r3, [pc, #432]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d90c      	bls.n	8006aec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad2:	4b69      	ldr	r3, [pc, #420]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b67      	ldr	r3, [pc, #412]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d001      	beq.n	8006aec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e136      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d049      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b04:	4b5d      	ldr	r3, [pc, #372]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4a5c      	ldr	r2, [pc, #368]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b1c:	4b57      	ldr	r3, [pc, #348]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4a56      	ldr	r2, [pc, #344]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d024      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b80      	cmp	r3, #128	; 0x80
 8006b36:	d020      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b90      	cmp	r3, #144	; 0x90
 8006b3e:	d01c      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2ba0      	cmp	r3, #160	; 0xa0
 8006b46:	d018      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2bb0      	cmp	r3, #176	; 0xb0
 8006b4e:	d014      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2bc0      	cmp	r3, #192	; 0xc0
 8006b56:	d010      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2bd0      	cmp	r3, #208	; 0xd0
 8006b5e:	d00c      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2be0      	cmp	r3, #224	; 0xe0
 8006b66:	d008      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2bf0      	cmp	r3, #240	; 0xf0
 8006b6e:	d004      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x11e>
 8006b70:	f240 2175 	movw	r1, #629	; 0x275
 8006b74:	483f      	ldr	r0, [pc, #252]	; (8006c74 <HAL_RCC_ClockConfig+0x218>)
 8006b76:	f7fb fb0a 	bl	800218e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b7a:	4b40      	ldr	r3, [pc, #256]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	493d      	ldr	r1, [pc, #244]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d059      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d00c      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d008      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d004      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
 8006bb8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8006bbc:	482d      	ldr	r0, [pc, #180]	; (8006c74 <HAL_RCC_ClockConfig+0x218>)
 8006bbe:	f7fb fae6 	bl	800218e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d107      	bne.n	8006bda <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bca:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d119      	bne.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e0bf      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d003      	beq.n	8006bea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0af      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfa:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e0a7      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f023 0203 	bic.w	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4919      	ldr	r1, [pc, #100]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c1c:	f7fb fe0a 	bl	8002834 <HAL_GetTick>
 8006c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	e00a      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c24:	f7fb fe06 	bl	8002834 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e08f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <HAL_RCC_ClockConfig+0x220>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 020c 	and.w	r2, r3, #12
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d1eb      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d212      	bcs.n	8006c80 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_ClockConfig+0x21c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d007      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e072      	b.n	8006d5a <HAL_RCC_ClockConfig+0x2fe>
 8006c74:	080123c0 	.word	0x080123c0
 8006c78:	40023c00 	.word	0x40023c00
 8006c7c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d025      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d018      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x26a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9c:	d013      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x26a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x26a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006cb0:	d009      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x26a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006cba:	d004      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x26a>
 8006cbc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8006cc0:	4828      	ldr	r0, [pc, #160]	; (8006d64 <HAL_RCC_ClockConfig+0x308>)
 8006cc2:	f7fb fa64 	bl	800218e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc6:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <HAL_RCC_ClockConfig+0x30c>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	4925      	ldr	r1, [pc, #148]	; (8006d68 <HAL_RCC_ClockConfig+0x30c>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d026      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d018      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2c2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d013      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2c2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cfe:	d00e      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2c2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006d08:	d009      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2c2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006d12:	d004      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2c2>
 8006d14:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006d18:	4812      	ldr	r0, [pc, #72]	; (8006d64 <HAL_RCC_ClockConfig+0x308>)
 8006d1a:	f7fb fa38 	bl	800218e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <HAL_RCC_ClockConfig+0x30c>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	490e      	ldr	r1, [pc, #56]	; (8006d68 <HAL_RCC_ClockConfig+0x30c>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d32:	f000 f821 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8006d36:	4601      	mov	r1, r0
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCC_ClockConfig+0x30c>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <HAL_RCC_ClockConfig+0x310>)
 8006d44:	5cd3      	ldrb	r3, [r2, r3]
 8006d46:	fa21 f303 	lsr.w	r3, r1, r3
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_RCC_ClockConfig+0x314>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <HAL_RCC_ClockConfig+0x318>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fb fd2a 	bl	80027ac <HAL_InitTick>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	080123c0 	.word	0x080123c0
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	08012564 	.word	0x08012564
 8006d70:	20000064 	.word	0x20000064
 8006d74:	20000068 	.word	0x20000068

08006d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d8e:	4b63      	ldr	r3, [pc, #396]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d007      	beq.n	8006daa <HAL_RCC_GetSysClockFreq+0x32>
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d008      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0x38>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f040 80b4 	bne.w	8006f0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006da4:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006da6:	60bb      	str	r3, [r7, #8]
       break;
 8006da8:	e0b3      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006daa:	4b5e      	ldr	r3, [pc, #376]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006dac:	60bb      	str	r3, [r7, #8]
      break;
 8006dae:	e0b0      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db0:	4b5a      	ldr	r3, [pc, #360]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dba:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d04a      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dc6:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	099b      	lsrs	r3, r3, #6
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	ea03 0501 	and.w	r5, r3, r1
 8006ddc:	ea04 0602 	and.w	r6, r4, r2
 8006de0:	4629      	mov	r1, r5
 8006de2:	4632      	mov	r2, r6
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	f04f 0400 	mov.w	r4, #0
 8006dec:	0154      	lsls	r4, r2, #5
 8006dee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006df2:	014b      	lsls	r3, r1, #5
 8006df4:	4619      	mov	r1, r3
 8006df6:	4622      	mov	r2, r4
 8006df8:	1b49      	subs	r1, r1, r5
 8006dfa:	eb62 0206 	sbc.w	r2, r2, r6
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f04f 0400 	mov.w	r4, #0
 8006e06:	0194      	lsls	r4, r2, #6
 8006e08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e0c:	018b      	lsls	r3, r1, #6
 8006e0e:	1a5b      	subs	r3, r3, r1
 8006e10:	eb64 0402 	sbc.w	r4, r4, r2
 8006e14:	f04f 0100 	mov.w	r1, #0
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	00e2      	lsls	r2, r4, #3
 8006e1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e22:	00d9      	lsls	r1, r3, #3
 8006e24:	460b      	mov	r3, r1
 8006e26:	4614      	mov	r4, r2
 8006e28:	195b      	adds	r3, r3, r5
 8006e2a:	eb44 0406 	adc.w	r4, r4, r6
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	0262      	lsls	r2, r4, #9
 8006e38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006e3c:	0259      	lsls	r1, r3, #9
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	4618      	mov	r0, r3
 8006e44:	4621      	mov	r1, r4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f04f 0400 	mov.w	r4, #0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	f7f9 fe8c 	bl	8000b6c <__aeabi_uldivmod>
 8006e54:	4603      	mov	r3, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e049      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e5c:	4b2f      	ldr	r3, [pc, #188]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	099b      	lsrs	r3, r3, #6
 8006e62:	f04f 0400 	mov.w	r4, #0
 8006e66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	ea03 0501 	and.w	r5, r3, r1
 8006e72:	ea04 0602 	and.w	r6, r4, r2
 8006e76:	4629      	mov	r1, r5
 8006e78:	4632      	mov	r2, r6
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	f04f 0400 	mov.w	r4, #0
 8006e82:	0154      	lsls	r4, r2, #5
 8006e84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e88:	014b      	lsls	r3, r1, #5
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	1b49      	subs	r1, r1, r5
 8006e90:	eb62 0206 	sbc.w	r2, r2, r6
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	f04f 0400 	mov.w	r4, #0
 8006e9c:	0194      	lsls	r4, r2, #6
 8006e9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ea2:	018b      	lsls	r3, r1, #6
 8006ea4:	1a5b      	subs	r3, r3, r1
 8006ea6:	eb64 0402 	sbc.w	r4, r4, r2
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	00e2      	lsls	r2, r4, #3
 8006eb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006eb8:	00d9      	lsls	r1, r3, #3
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	195b      	adds	r3, r3, r5
 8006ec0:	eb44 0406 	adc.w	r4, r4, r6
 8006ec4:	f04f 0100 	mov.w	r1, #0
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	02a2      	lsls	r2, r4, #10
 8006ece:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ed2:	0299      	lsls	r1, r3, #10
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	4621      	mov	r1, r4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f04f 0400 	mov.w	r4, #0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	f7f9 fe41 	bl	8000b6c <__aeabi_uldivmod>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	3301      	adds	r3, #1
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	60bb      	str	r3, [r7, #8]
      break;
 8006f0a:	e002      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f0e:	60bb      	str	r3, [r7, #8]
      break;
 8006f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f12:	68bb      	ldr	r3, [r7, #8]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	00f42400 	.word	0x00f42400
 8006f24:	007a1200 	.word	0x007a1200

08006f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f2c:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000064 	.word	0x20000064

08006f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f44:	f7ff fff0 	bl	8006f28 <HAL_RCC_GetHCLKFreq>
 8006f48:	4601      	mov	r1, r0
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	0a9b      	lsrs	r3, r3, #10
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	4a03      	ldr	r2, [pc, #12]	; (8006f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f56:	5cd3      	ldrb	r3, [r2, r3]
 8006f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40023800 	.word	0x40023800
 8006f64:	08012574 	.word	0x08012574

08006f68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b07      	cmp	r3, #7
 8006f86:	d904      	bls.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006f88:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8006f8c:	4899      	ldr	r0, [pc, #612]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006f8e:	f7fb f8fe 	bl	800218e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d050      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d903      	bls.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b07      	cmp	r3, #7
 8006fb8:	d904      	bls.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006fba:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8006fbe:	488d      	ldr	r0, [pc, #564]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006fc0:	f7fb f8e5 	bl	800218e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b31      	cmp	r3, #49	; 0x31
 8006fca:	d904      	bls.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006fd4:	d904      	bls.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006fd6:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006fda:	4886      	ldr	r0, [pc, #536]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006fdc:	f7fb f8d7 	bl	800218e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fe0:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fe6:	f7fb fc25 	bl	8002834 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fec:	e008      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fee:	f7fb fc21 	bl	8002834 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e1a0      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007000:	4b7e      	ldr	r3, [pc, #504]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f0      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	019a      	lsls	r2, r3, #6
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	071b      	lsls	r3, r3, #28
 8007018:	4978      	ldr	r1, [pc, #480]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007020:	4b75      	ldr	r3, [pc, #468]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fb fc05 	bl	8002834 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fb fc01 	bl	8002834 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e180      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007040:	4b6e      	ldr	r3, [pc, #440]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8173 	beq.w	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007062:	f000 80a6 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706e:	f000 80a0 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	4a62      	ldr	r2, [pc, #392]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8007078:	4293      	cmp	r3, r2
 800707a:	f000 809a 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	4a60      	ldr	r2, [pc, #384]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	f000 8094 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4a5e      	ldr	r2, [pc, #376]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	f000 808e 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4a5c      	ldr	r2, [pc, #368]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	f000 8088 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	4a5a      	ldr	r2, [pc, #360]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	f000 8082 	beq.w	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	4a58      	ldr	r2, [pc, #352]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d07c      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a56      	ldr	r2, [pc, #344]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d077      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4a55      	ldr	r2, [pc, #340]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d072      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a53      	ldr	r2, [pc, #332]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d06d      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4a52      	ldr	r2, [pc, #328]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d068      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4a50      	ldr	r2, [pc, #320]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d063      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4a4f      	ldr	r2, [pc, #316]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d05e      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4a4d      	ldr	r2, [pc, #308]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d059      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4a4c      	ldr	r2, [pc, #304]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d054      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4a4a      	ldr	r2, [pc, #296]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d04f      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	4a49      	ldr	r2, [pc, #292]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d04a      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a47      	ldr	r2, [pc, #284]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d045      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	4a46      	ldr	r2, [pc, #280]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d040      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a44      	ldr	r2, [pc, #272]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d03b      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4a43      	ldr	r2, [pc, #268]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d036      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a41      	ldr	r2, [pc, #260]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d031      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4a40      	ldr	r2, [pc, #256]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d02c      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4a3e      	ldr	r2, [pc, #248]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d027      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	4a3d      	ldr	r2, [pc, #244]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d01d      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	4a3a      	ldr	r2, [pc, #232]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4a38      	ldr	r2, [pc, #224]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	4a37      	ldr	r2, [pc, #220]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4a35      	ldr	r2, [pc, #212]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4a34      	ldr	r2, [pc, #208]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80071a8:	f640 2112 	movw	r1, #2578	; 0xa12
 80071ac:	4811      	ldr	r0, [pc, #68]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80071ae:	f7fa ffee 	bl	800218e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	4a10      	ldr	r2, [pc, #64]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c0:	6413      	str	r3, [r2, #64]	; 0x40
 80071c2:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ce:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071da:	f7fb fb2b 	bl	8002834 <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e0:	e04c      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x314>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fb fb27 	bl	8002834 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d945      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e0a6      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80071f4:	080123f8 	.word	0x080123f8
 80071f8:	42470068 	.word	0x42470068
 80071fc:	40023800 	.word	0x40023800
 8007200:	00020300 	.word	0x00020300
 8007204:	00030300 	.word	0x00030300
 8007208:	00040300 	.word	0x00040300
 800720c:	00050300 	.word	0x00050300
 8007210:	00060300 	.word	0x00060300
 8007214:	00070300 	.word	0x00070300
 8007218:	00080300 	.word	0x00080300
 800721c:	00090300 	.word	0x00090300
 8007220:	000a0300 	.word	0x000a0300
 8007224:	000b0300 	.word	0x000b0300
 8007228:	000c0300 	.word	0x000c0300
 800722c:	000d0300 	.word	0x000d0300
 8007230:	000e0300 	.word	0x000e0300
 8007234:	000f0300 	.word	0x000f0300
 8007238:	00100300 	.word	0x00100300
 800723c:	00110300 	.word	0x00110300
 8007240:	00120300 	.word	0x00120300
 8007244:	00130300 	.word	0x00130300
 8007248:	00140300 	.word	0x00140300
 800724c:	00150300 	.word	0x00150300
 8007250:	00160300 	.word	0x00160300
 8007254:	00170300 	.word	0x00170300
 8007258:	00180300 	.word	0x00180300
 800725c:	00190300 	.word	0x00190300
 8007260:	001a0300 	.word	0x001a0300
 8007264:	001b0300 	.word	0x001b0300
 8007268:	001c0300 	.word	0x001c0300
 800726c:	001d0300 	.word	0x001d0300
 8007270:	001e0300 	.word	0x001e0300
 8007274:	001f0300 	.word	0x001f0300
 8007278:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800727c:	4b33      	ldr	r3, [pc, #204]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0ac      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007288:	4b31      	ldr	r3, [pc, #196]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007290:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02f      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d028      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072b0:	4b28      	ldr	r3, [pc, #160]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b6:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072bc:	4a24      	ldr	r2, [pc, #144]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d114      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072ce:	f7fb fab1 	bl	8002834 <HAL_GetTick>
 80072d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d4:	e00a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d6:	f7fb faad 	bl	8002834 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d901      	bls.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x384>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e02a      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ec:	4b18      	ldr	r3, [pc, #96]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0ee      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007304:	d10d      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731a:	490d      	ldr	r1, [pc, #52]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800731c:	4313      	orrs	r3, r2
 800731e:	608b      	str	r3, [r1, #8]
 8007320:	e005      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007328:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800732c:	6093      	str	r3, [r2, #8]
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733a:	4905      	ldr	r1, [pc, #20]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733c:	4313      	orrs	r3, r2
 800733e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40007000 	.word	0x40007000
 8007350:	40023800 	.word	0x40023800
 8007354:	42470e40 	.word	0x42470e40

08007358 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0d6      	b.n	8007518 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d007      	beq.n	8007382 <HAL_RTC_Init+0x2a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RTC_Init+0x2a>
 800737a:	21ff      	movs	r1, #255	; 0xff
 800737c:	4868      	ldr	r0, [pc, #416]	; (8007520 <HAL_RTC_Init+0x1c8>)
 800737e:	f7fa ff06 	bl	800218e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b7f      	cmp	r3, #127	; 0x7f
 8007388:	d904      	bls.n	8007394 <HAL_RTC_Init+0x3c>
 800738a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800738e:	4864      	ldr	r0, [pc, #400]	; (8007520 <HAL_RTC_Init+0x1c8>)
 8007390:	f7fa fefd 	bl	800218e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739c:	d304      	bcc.n	80073a8 <HAL_RTC_Init+0x50>
 800739e:	f240 1101 	movw	r1, #257	; 0x101
 80073a2:	485f      	ldr	r0, [pc, #380]	; (8007520 <HAL_RTC_Init+0x1c8>)
 80073a4:	f7fa fef3 	bl	800218e <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d013      	beq.n	80073d8 <HAL_RTC_Init+0x80>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073b8:	d00e      	beq.n	80073d8 <HAL_RTC_Init+0x80>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c2:	d009      	beq.n	80073d8 <HAL_RTC_Init+0x80>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073cc:	d004      	beq.n	80073d8 <HAL_RTC_Init+0x80>
 80073ce:	f44f 7181 	mov.w	r1, #258	; 0x102
 80073d2:	4853      	ldr	r0, [pc, #332]	; (8007520 <HAL_RTC_Init+0x1c8>)
 80073d4:	f7fa fedb 	bl	800218e <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <HAL_RTC_Init+0x9c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e8:	d004      	beq.n	80073f4 <HAL_RTC_Init+0x9c>
 80073ea:	f240 1103 	movw	r1, #259	; 0x103
 80073ee:	484c      	ldr	r0, [pc, #304]	; (8007520 <HAL_RTC_Init+0x1c8>)
 80073f0:	f7fa fecd 	bl	800218e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <HAL_RTC_Init+0xb8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007404:	d004      	beq.n	8007410 <HAL_RTC_Init+0xb8>
 8007406:	f44f 7182 	mov.w	r1, #260	; 0x104
 800740a:	4845      	ldr	r0, [pc, #276]	; (8007520 <HAL_RTC_Init+0x1c8>)
 800740c:	f7fa febf 	bl	800218e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7f5b      	ldrb	r3, [r3, #29]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7fa ff19 	bl	8002258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	22ca      	movs	r2, #202	; 0xca
 8007432:	625a      	str	r2, [r3, #36]	; 0x24
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2253      	movs	r2, #83	; 0x53
 800743a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fbfd 	bl	8007c3c <RTC_EnterInitMode>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	22ff      	movs	r2, #255	; 0xff
 800744e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2204      	movs	r2, #4
 8007454:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e05e      	b.n	8007518 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6899      	ldr	r1, [r3, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68d2      	ldr	r2, [r2, #12]
 8007494:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6919      	ldr	r1, [r3, #16]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	041a      	lsls	r2, r3, #16
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10e      	bne.n	80074e6 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fb8f 	bl	8007bec <HAL_RTC_WaitForSynchro>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e018      	b.n	8007518 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699a      	ldr	r2, [r3, #24]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	22ff      	movs	r2, #255	; 0xff
 800750e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007516:	2300      	movs	r3, #0
  }
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	08012434 	.word	0x08012434

08007524 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <HAL_RTC_SetTime+0x26>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d004      	beq.n	800754a <HAL_RTC_SetTime+0x26>
 8007540:	f240 21da 	movw	r1, #730	; 0x2da
 8007544:	48a4      	ldr	r0, [pc, #656]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007546:	f7fa fe22 	bl	800218e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007552:	d00d      	beq.n	8007570 <HAL_RTC_SetTime+0x4c>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755c:	d008      	beq.n	8007570 <HAL_RTC_SetTime+0x4c>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <HAL_RTC_SetTime+0x4c>
 8007566:	f240 21db 	movw	r1, #731	; 0x2db
 800756a:	489b      	ldr	r0, [pc, #620]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 800756c:	f7fa fe0f 	bl	800218e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_RTC_SetTime+0x68>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007580:	d004      	beq.n	800758c <HAL_RTC_SetTime+0x68>
 8007582:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8007586:	4894      	ldr	r0, [pc, #592]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007588:	f7fa fe01 	bl	800218e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	7f1b      	ldrb	r3, [r3, #28]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_RTC_SetTime+0x74>
 8007594:	2302      	movs	r3, #2
 8007596:	e12c      	b.n	80077f2 <HAL_RTC_SetTime+0x2ce>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2202      	movs	r2, #2
 80075a2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d15c      	bne.n	8007664 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01a      	beq.n	80075ee <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_RTC_SetTime+0xa4>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d904      	bls.n	80075d2 <HAL_RTC_SetTime+0xae>
 80075c8:	f240 21e7 	movw	r1, #743	; 0x2e7
 80075cc:	4882      	ldr	r0, [pc, #520]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 80075ce:	f7fa fdde 	bl	800218e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d015      	beq.n	8007606 <HAL_RTC_SetTime+0xe2>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	78db      	ldrb	r3, [r3, #3]
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d011      	beq.n	8007606 <HAL_RTC_SetTime+0xe2>
 80075e2:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80075e6:	487c      	ldr	r0, [pc, #496]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 80075e8:	f7fa fdd1 	bl	800218e <assert_failed>
 80075ec:	e00b      	b.n	8007606 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b17      	cmp	r3, #23
 80075fa:	d904      	bls.n	8007606 <HAL_RTC_SetTime+0xe2>
 80075fc:	f240 21ed 	movw	r1, #749	; 0x2ed
 8007600:	4875      	ldr	r0, [pc, #468]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007602:	f7fa fdc4 	bl	800218e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b3b      	cmp	r3, #59	; 0x3b
 800760c:	d904      	bls.n	8007618 <HAL_RTC_SetTime+0xf4>
 800760e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007612:	4871      	ldr	r0, [pc, #452]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007614:	f7fa fdbb 	bl	800218e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	789b      	ldrb	r3, [r3, #2]
 800761c:	2b3b      	cmp	r3, #59	; 0x3b
 800761e:	d904      	bls.n	800762a <HAL_RTC_SetTime+0x106>
 8007620:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8007624:	486c      	ldr	r0, [pc, #432]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007626:	f7fa fdb2 	bl	800218e <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fb30 	bl	8007c94 <RTC_ByteToBcd2>
 8007634:	4603      	mov	r3, r0
 8007636:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fb29 	bl	8007c94 <RTC_ByteToBcd2>
 8007642:	4603      	mov	r3, r0
 8007644:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007646:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	789b      	ldrb	r3, [r3, #2]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb21 	bl	8007c94 <RTC_ByteToBcd2>
 8007652:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007654:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e062      	b.n	800772a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fb2a 	bl	8007cd0 <RTC_Bcd2ToByte>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_RTC_SetTime+0x16e>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fb22 	bl	8007cd0 <RTC_Bcd2ToByte>
 800768c:	4603      	mov	r3, r0
 800768e:	2b0c      	cmp	r3, #12
 8007690:	d904      	bls.n	800769c <HAL_RTC_SetTime+0x178>
 8007692:	f240 21fb 	movw	r1, #763	; 0x2fb
 8007696:	4850      	ldr	r0, [pc, #320]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007698:	f7fa fd79 	bl	800218e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	78db      	ldrb	r3, [r3, #3]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d019      	beq.n	80076d8 <HAL_RTC_SetTime+0x1b4>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d015      	beq.n	80076d8 <HAL_RTC_SetTime+0x1b4>
 80076ac:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80076b0:	4849      	ldr	r0, [pc, #292]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 80076b2:	f7fa fd6c 	bl	800218e <assert_failed>
 80076b6:	e00f      	b.n	80076d8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fb04 	bl	8007cd0 <RTC_Bcd2ToByte>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b17      	cmp	r3, #23
 80076cc:	d904      	bls.n	80076d8 <HAL_RTC_SetTime+0x1b4>
 80076ce:	f240 3101 	movw	r1, #769	; 0x301
 80076d2:	4841      	ldr	r0, [pc, #260]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 80076d4:	f7fa fd5b 	bl	800218e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 faf7 	bl	8007cd0 <RTC_Bcd2ToByte>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b3b      	cmp	r3, #59	; 0x3b
 80076e6:	d904      	bls.n	80076f2 <HAL_RTC_SetTime+0x1ce>
 80076e8:	f240 3103 	movw	r1, #771	; 0x303
 80076ec:	483a      	ldr	r0, [pc, #232]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 80076ee:	f7fa fd4e 	bl	800218e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 faea 	bl	8007cd0 <RTC_Bcd2ToByte>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b3b      	cmp	r3, #59	; 0x3b
 8007700:	d904      	bls.n	800770c <HAL_RTC_SetTime+0x1e8>
 8007702:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007706:	4834      	ldr	r0, [pc, #208]	; (80077d8 <HAL_RTC_SetTime+0x2b4>)
 8007708:	f7fa fd41 	bl	800218e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007718:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800771e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	22ca      	movs	r2, #202	; 0xca
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2253      	movs	r2, #83	; 0x53
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fa7e 	bl	8007c3c <RTC_EnterInitMode>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	22ff      	movs	r2, #255	; 0xff
 800774c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2204      	movs	r2, #4
 8007752:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e049      	b.n	80077f2 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007768:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800777c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6899      	ldr	r1, [r3, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	431a      	orrs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d113      	bne.n	80077dc <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fa19 	bl	8007bec <HAL_RTC_WaitForSynchro>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2204      	movs	r2, #4
 80077cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e00c      	b.n	80077f2 <HAL_RTC_SetTime+0x2ce>
 80077d8:	08012434 	.word	0x08012434
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	22ff      	movs	r2, #255	; 0xff
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80077f0:	2300      	movs	r3, #0
  }
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd90      	pop	{r4, r7, pc}
 80077fa:	bf00      	nop

080077fc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_RTC_GetTime+0x26>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d004      	beq.n	8007822 <HAL_RTC_GetTime+0x26>
 8007818:	f240 315d 	movw	r1, #861	; 0x35d
 800781c:	482c      	ldr	r0, [pc, #176]	; (80078d0 <HAL_RTC_GetTime+0xd4>)
 800781e:	f7fa fcb6 	bl	800218e <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007844:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007848:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007854:	b2da      	uxtb	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	0a1b      	lsrs	r3, r3, #8
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	0c1b      	lsrs	r3, r3, #16
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	b2da      	uxtb	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d11a      	bne.n	80078c4 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fa1c 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fa13 	bl	8007cd0 <RTC_Bcd2ToByte>
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	789b      	ldrb	r3, [r3, #2]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fa0a 	bl	8007cd0 <RTC_Bcd2ToByte>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08012434 	.word	0x08012434

080078d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_RTC_SetDate+0x26>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d004      	beq.n	80078fa <HAL_RTC_SetDate+0x26>
 80078f0:	f240 318a 	movw	r1, #906	; 0x38a
 80078f4:	488e      	ldr	r0, [pc, #568]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 80078f6:	f7fa fc4a 	bl	800218e <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	7f1b      	ldrb	r3, [r3, #28]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_RTC_SetDate+0x32>
 8007902:	2302      	movs	r3, #2
 8007904:	e10f      	b.n	8007b26 <HAL_RTC_SetDate+0x252>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2202      	movs	r2, #2
 8007910:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10e      	bne.n	8007936 <HAL_RTC_SetDate+0x62>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	b2db      	uxtb	r3, r3
 800792e:	330a      	adds	r3, #10
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d01c      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d018      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d014      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b04      	cmp	r3, #4
 8007954:	d010      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b05      	cmp	r3, #5
 800795c:	d00c      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b06      	cmp	r3, #6
 8007964:	d008      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b07      	cmp	r3, #7
 800796c:	d004      	beq.n	8007978 <HAL_RTC_SetDate+0xa4>
 800796e:	f240 3196 	movw	r1, #918	; 0x396
 8007972:	486f      	ldr	r0, [pc, #444]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 8007974:	f7fa fc0b 	bl	800218e <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d13f      	bne.n	80079fe <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	78db      	ldrb	r3, [r3, #3]
 8007982:	2b63      	cmp	r3, #99	; 0x63
 8007984:	d904      	bls.n	8007990 <HAL_RTC_SetDate+0xbc>
 8007986:	f240 319a 	movw	r1, #922	; 0x39a
 800798a:	4869      	ldr	r0, [pc, #420]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 800798c:	f7fa fbff 	bl	800218e <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_RTC_SetDate+0xcc>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d904      	bls.n	80079aa <HAL_RTC_SetDate+0xd6>
 80079a0:	f240 319b 	movw	r1, #923	; 0x39b
 80079a4:	4862      	ldr	r0, [pc, #392]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 80079a6:	f7fa fbf2 	bl	800218e <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	789b      	ldrb	r3, [r3, #2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_RTC_SetDate+0xe6>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	789b      	ldrb	r3, [r3, #2]
 80079b6:	2b1f      	cmp	r3, #31
 80079b8:	d904      	bls.n	80079c4 <HAL_RTC_SetDate+0xf0>
 80079ba:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80079be:	485c      	ldr	r0, [pc, #368]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 80079c0:	f7fa fbe5 	bl	800218e <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	78db      	ldrb	r3, [r3, #3]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f963 	bl	8007c94 <RTC_ByteToBcd2>
 80079ce:	4603      	mov	r3, r0
 80079d0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f95c 	bl	8007c94 <RTC_ByteToBcd2>
 80079dc:	4603      	mov	r3, r0
 80079de:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079e0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	789b      	ldrb	r3, [r3, #2]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f954 	bl	8007c94 <RTC_ByteToBcd2>
 80079ec:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80079ee:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e045      	b.n	8007a8a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f964 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b63      	cmp	r3, #99	; 0x63
 8007a0c:	d904      	bls.n	8007a18 <HAL_RTC_SetDate+0x144>
 8007a0e:	f240 31a5 	movw	r1, #933	; 0x3a5
 8007a12:	4847      	ldr	r0, [pc, #284]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 8007a14:	f7fa fbbb 	bl	800218e <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 f957 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <HAL_RTC_SetDate+0x164>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f94f 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	d904      	bls.n	8007a42 <HAL_RTC_SetDate+0x16e>
 8007a38:	f240 31a6 	movw	r1, #934	; 0x3a6
 8007a3c:	483c      	ldr	r0, [pc, #240]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 8007a3e:	f7fa fba6 	bl	800218e <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	789b      	ldrb	r3, [r3, #2]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f942 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HAL_RTC_SetDate+0x18e>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f93a 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b1f      	cmp	r3, #31
 8007a60:	d904      	bls.n	8007a6c <HAL_RTC_SetDate+0x198>
 8007a62:	f240 31a7 	movw	r1, #935	; 0x3a7
 8007a66:	4832      	ldr	r0, [pc, #200]	; (8007b30 <HAL_RTC_SetDate+0x25c>)
 8007a68:	f7fa fb91 	bl	800218e <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a78:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a7e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	22ca      	movs	r2, #202	; 0xca
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2253      	movs	r2, #83	; 0x53
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f8ce 	bl	8007c3c <RTC_EnterInitMode>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	22ff      	movs	r2, #255	; 0xff
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e033      	b.n	8007b26 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ac8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007acc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007adc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d111      	bne.n	8007b10 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f87d 	bl	8007bec <HAL_RTC_WaitForSynchro>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2204      	movs	r2, #4
 8007b04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e00a      	b.n	8007b26 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd90      	pop	{r4, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	08012434 	.word	0x08012434

08007b34 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_RTC_GetDate+0x26>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d004      	beq.n	8007b5a <HAL_RTC_GetDate+0x26>
 8007b50:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007b54:	4824      	ldr	r0, [pc, #144]	; (8007be8 <HAL_RTC_GetDate+0xb4>)
 8007b56:	f7fa fb1a 	bl	800218e <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b68:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	0b5b      	lsrs	r3, r3, #13
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11a      	bne.n	8007bde <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f88f 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f886 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	789b      	ldrb	r3, [r3, #2]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f87d 	bl	8007cd0 <RTC_Bcd2ToByte>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	08012434 	.word	0x08012434

08007bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c08:	f7fa fe14 	bl	8002834 <HAL_GetTick>
 8007c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c0e:	e009      	b.n	8007c24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c10:	f7fa fe10 	bl	8002834 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c1e:	d901      	bls.n	8007c24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e007      	b.n	8007c34 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ee      	beq.n	8007c10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d119      	bne.n	8007c8a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c60:	f7fa fde8 	bl	8002834 <HAL_GetTick>
 8007c64:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c66:	e009      	b.n	8007c7c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c68:	f7fa fde4 	bl	8002834 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c76:	d901      	bls.n	8007c7c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e007      	b.n	8007c8c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ee      	beq.n	8007c68 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007ca2:	e005      	b.n	8007cb0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	3b0a      	subs	r3, #10
 8007cae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d8f6      	bhi.n	8007ca4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b2db      	uxtb	r3, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	b2db      	uxtb	r3, r3
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e109      	b.n	8007f32 <HAL_SPI_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a86      	ldr	r2, [pc, #536]	; (8007f3c <HAL_SPI_Init+0x230>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00e      	beq.n	8007d46 <HAL_SPI_Init+0x3a>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a84      	ldr	r2, [pc, #528]	; (8007f40 <HAL_SPI_Init+0x234>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_SPI_Init+0x3a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a83      	ldr	r2, [pc, #524]	; (8007f44 <HAL_SPI_Init+0x238>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_SPI_Init+0x3a>
 8007d3c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007d40:	4881      	ldr	r0, [pc, #516]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007d42:	f7fa fa24 	bl	800218e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <HAL_SPI_Init+0x56>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d56:	d004      	beq.n	8007d62 <HAL_SPI_Init+0x56>
 8007d58:	f240 1143 	movw	r1, #323	; 0x143
 8007d5c:	487a      	ldr	r0, [pc, #488]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007d5e:	f7fa fa16 	bl	800218e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00e      	beq.n	8007d88 <HAL_SPI_Init+0x7c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d72:	d009      	beq.n	8007d88 <HAL_SPI_Init+0x7c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d7c:	d004      	beq.n	8007d88 <HAL_SPI_Init+0x7c>
 8007d7e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007d82:	4871      	ldr	r0, [pc, #452]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007d84:	f7fa fa03 	bl	800218e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d90:	d008      	beq.n	8007da4 <HAL_SPI_Init+0x98>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <HAL_SPI_Init+0x98>
 8007d9a:	f240 1145 	movw	r1, #325	; 0x145
 8007d9e:	486a      	ldr	r0, [pc, #424]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007da0:	f7fa f9f5 	bl	800218e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dac:	d00d      	beq.n	8007dca <HAL_SPI_Init+0xbe>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_SPI_Init+0xbe>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dbe:	d004      	beq.n	8007dca <HAL_SPI_Init+0xbe>
 8007dc0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007dc4:	4860      	ldr	r0, [pc, #384]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007dc6:	f7fa f9e2 	bl	800218e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d020      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d01c      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d018      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b18      	cmp	r3, #24
 8007de8:	d014      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d010      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	2b28      	cmp	r3, #40	; 0x28
 8007df8:	d00c      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	2b30      	cmp	r3, #48	; 0x30
 8007e00:	d008      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	2b38      	cmp	r3, #56	; 0x38
 8007e08:	d004      	beq.n	8007e14 <HAL_SPI_Init+0x108>
 8007e0a:	f240 1147 	movw	r1, #327	; 0x147
 8007e0e:	484e      	ldr	r0, [pc, #312]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007e10:	f7fa f9bd 	bl	800218e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_SPI_Init+0x122>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d004      	beq.n	8007e2e <HAL_SPI_Init+0x122>
 8007e24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e28:	4847      	ldr	r0, [pc, #284]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007e2a:	f7fa f9b0 	bl	800218e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_SPI_Init+0x13c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d004      	beq.n	8007e48 <HAL_SPI_Init+0x13c>
 8007e3e:	f240 1149 	movw	r1, #329	; 0x149
 8007e42:	4841      	ldr	r0, [pc, #260]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007e44:	f7fa f9a3 	bl	800218e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d119      	bne.n	8007e84 <HAL_SPI_Init+0x178>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_SPI_Init+0x15e>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d004      	beq.n	8007e6a <HAL_SPI_Init+0x15e>
 8007e60:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007e64:	4838      	ldr	r0, [pc, #224]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007e66:	f7fa f992 	bl	800218e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_SPI_Init+0x178>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d004      	beq.n	8007e84 <HAL_SPI_Init+0x178>
 8007e7a:	f240 114d 	movw	r1, #333	; 0x14d
 8007e7e:	4832      	ldr	r0, [pc, #200]	; (8007f48 <HAL_SPI_Init+0x23c>)
 8007e80:	f7fa f985 	bl	800218e <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_SPI_Init+0x198>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fa fa5c 	bl	800235c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	ea42 0103 	orr.w	r1, r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f003 0104 	and.w	r1, r3, #4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40013000 	.word	0x40013000
 8007f40:	40003800 	.word	0x40003800
 8007f44:	40003c00 	.word	0x40003c00
 8007f48:	0801246c 	.word	0x0801246c

08007f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0a1      	b.n	80080a2 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a52      	ldr	r2, [pc, #328]	; (80080ac <HAL_TIM_Base_Init+0x160>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d045      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f70:	d040      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a4e      	ldr	r2, [pc, #312]	; (80080b0 <HAL_TIM_Base_Init+0x164>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d03b      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a4c      	ldr	r2, [pc, #304]	; (80080b4 <HAL_TIM_Base_Init+0x168>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d036      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a4b      	ldr	r2, [pc, #300]	; (80080b8 <HAL_TIM_Base_Init+0x16c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d031      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a49      	ldr	r2, [pc, #292]	; (80080bc <HAL_TIM_Base_Init+0x170>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d02c      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a48      	ldr	r2, [pc, #288]	; (80080c0 <HAL_TIM_Base_Init+0x174>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d027      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a46      	ldr	r2, [pc, #280]	; (80080c4 <HAL_TIM_Base_Init+0x178>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d022      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a45      	ldr	r2, [pc, #276]	; (80080c8 <HAL_TIM_Base_Init+0x17c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d01d      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a43      	ldr	r2, [pc, #268]	; (80080cc <HAL_TIM_Base_Init+0x180>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d018      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a42      	ldr	r2, [pc, #264]	; (80080d0 <HAL_TIM_Base_Init+0x184>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d013      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a40      	ldr	r2, [pc, #256]	; (80080d4 <HAL_TIM_Base_Init+0x188>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3f      	ldr	r2, [pc, #252]	; (80080d8 <HAL_TIM_Base_Init+0x18c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d009      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a3d      	ldr	r2, [pc, #244]	; (80080dc <HAL_TIM_Base_Init+0x190>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <HAL_TIM_Base_Init+0xa8>
 8007fea:	f44f 7189 	mov.w	r1, #274	; 0x112
 8007fee:	483c      	ldr	r0, [pc, #240]	; (80080e0 <HAL_TIM_Base_Init+0x194>)
 8007ff0:	f7fa f8cd 	bl	800218e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d014      	beq.n	8008026 <HAL_TIM_Base_Init+0xda>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b10      	cmp	r3, #16
 8008002:	d010      	beq.n	8008026 <HAL_TIM_Base_Init+0xda>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b20      	cmp	r3, #32
 800800a:	d00c      	beq.n	8008026 <HAL_TIM_Base_Init+0xda>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d008      	beq.n	8008026 <HAL_TIM_Base_Init+0xda>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b60      	cmp	r3, #96	; 0x60
 800801a:	d004      	beq.n	8008026 <HAL_TIM_Base_Init+0xda>
 800801c:	f240 1113 	movw	r1, #275	; 0x113
 8008020:	482f      	ldr	r0, [pc, #188]	; (80080e0 <HAL_TIM_Base_Init+0x194>)
 8008022:	f7fa f8b4 	bl	800218e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00e      	beq.n	800804c <HAL_TIM_Base_Init+0x100>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008036:	d009      	beq.n	800804c <HAL_TIM_Base_Init+0x100>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008040:	d004      	beq.n	800804c <HAL_TIM_Base_Init+0x100>
 8008042:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008046:	4826      	ldr	r0, [pc, #152]	; (80080e0 <HAL_TIM_Base_Init+0x194>)
 8008048:	f7fa f8a1 	bl	800218e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <HAL_TIM_Base_Init+0x11a>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d004      	beq.n	8008066 <HAL_TIM_Base_Init+0x11a>
 800805c:	f240 1115 	movw	r1, #277	; 0x115
 8008060:	481f      	ldr	r0, [pc, #124]	; (80080e0 <HAL_TIM_Base_Init+0x194>)
 8008062:	f7fa f894 	bl	800218e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fa fb22 	bl	80026c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3304      	adds	r3, #4
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f000 fd48 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800
 80080b8:	40000c00 	.word	0x40000c00
 80080bc:	40001000 	.word	0x40001000
 80080c0:	40001400 	.word	0x40001400
 80080c4:	40010400 	.word	0x40010400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800
 80080d4:	40001800 	.word	0x40001800
 80080d8:	40001c00 	.word	0x40001c00
 80080dc:	40002000 	.word	0x40002000
 80080e0:	080124a4 	.word	0x080124a4

080080e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a33      	ldr	r2, [pc, #204]	; (80081c0 <HAL_TIM_Base_Start_IT+0xdc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d045      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fe:	d040      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2f      	ldr	r2, [pc, #188]	; (80081c4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d03b      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a2e      	ldr	r2, [pc, #184]	; (80081c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d036      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a2c      	ldr	r2, [pc, #176]	; (80081cc <HAL_TIM_Base_Start_IT+0xe8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d031      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a2b      	ldr	r2, [pc, #172]	; (80081d0 <HAL_TIM_Base_Start_IT+0xec>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d02c      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a29      	ldr	r2, [pc, #164]	; (80081d4 <HAL_TIM_Base_Start_IT+0xf0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d027      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a28      	ldr	r2, [pc, #160]	; (80081d8 <HAL_TIM_Base_Start_IT+0xf4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d022      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a26      	ldr	r2, [pc, #152]	; (80081dc <HAL_TIM_Base_Start_IT+0xf8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d01d      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a25      	ldr	r2, [pc, #148]	; (80081e0 <HAL_TIM_Base_Start_IT+0xfc>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d018      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a23      	ldr	r2, [pc, #140]	; (80081e4 <HAL_TIM_Base_Start_IT+0x100>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a22      	ldr	r2, [pc, #136]	; (80081e8 <HAL_TIM_Base_Start_IT+0x104>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00e      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a20      	ldr	r2, [pc, #128]	; (80081ec <HAL_TIM_Base_Start_IT+0x108>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d009      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <HAL_TIM_Base_Start_IT+0x10c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d004      	beq.n	8008182 <HAL_TIM_Base_Start_IT+0x9e>
 8008178:	f240 11b9 	movw	r1, #441	; 0x1b9
 800817c:	481d      	ldr	r0, [pc, #116]	; (80081f4 <HAL_TIM_Base_Start_IT+0x110>)
 800817e:	f7fa f806 	bl	800218e <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0201 	orr.w	r2, r2, #1
 8008190:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b06      	cmp	r3, #6
 80081a2:	d007      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0xd0>
  {
    __HAL_TIM_ENABLE(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0201 	orr.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40000400 	.word	0x40000400
 80081c8:	40000800 	.word	0x40000800
 80081cc:	40000c00 	.word	0x40000c00
 80081d0:	40001000 	.word	0x40001000
 80081d4:	40001400 	.word	0x40001400
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	40014800 	.word	0x40014800
 80081e8:	40001800 	.word	0x40001800
 80081ec:	40001c00 	.word	0x40001c00
 80081f0:	40002000 	.word	0x40002000
 80081f4:	080124a4 	.word	0x080124a4

080081f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b02      	cmp	r3, #2
 800820c:	d122      	bne.n	8008254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b02      	cmp	r3, #2
 800821a:	d11b      	bne.n	8008254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0202 	mvn.w	r2, #2
 8008224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc56 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 8008240:	e005      	b.n	800824e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fc48 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc59 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b04      	cmp	r3, #4
 8008260:	d122      	bne.n	80082a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b04      	cmp	r3, #4
 800826e:	d11b      	bne.n	80082a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0204 	mvn.w	r2, #4
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc2c 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc1e 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc2f 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d122      	bne.n	80082fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d11b      	bne.n	80082fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0208 	mvn.w	r2, #8
 80082cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc02 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 80082e8:	e005      	b.n	80082f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fbf4 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc05 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0310 	and.w	r3, r3, #16
 8008306:	2b10      	cmp	r3, #16
 8008308:	d122      	bne.n	8008350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0310 	and.w	r3, r3, #16
 8008314:	2b10      	cmp	r3, #16
 8008316:	d11b      	bne.n	8008350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0210 	mvn.w	r2, #16
 8008320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2208      	movs	r2, #8
 8008326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fbd8 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 800833c:	e005      	b.n	800834a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fbca 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fbdb 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10e      	bne.n	800837c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b01      	cmp	r3, #1
 800836a:	d107      	bne.n	800837c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0201 	mvn.w	r2, #1
 8008374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f9 fe44 	bl	8002004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008386:	2b80      	cmp	r3, #128	; 0x80
 8008388:	d10e      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d107      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fde2 	bl	8008f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d10e      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b40      	cmp	r3, #64	; 0x40
 80083c2:	d107      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fba0 	bl	8008b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d10e      	bne.n	8008400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d107      	bne.n	8008400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0220 	mvn.w	r2, #32
 80083f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fdac 	bl	8008f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIM_ConfigClockSource+0x18>
 800841c:	2302      	movs	r3, #2
 800841e:	e347      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x6a8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008438:	d029      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008442:	d024      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d020      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b10      	cmp	r3, #16
 8008452:	d01c      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b20      	cmp	r3, #32
 800845a:	d018      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d014      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b40      	cmp	r3, #64	; 0x40
 800846a:	d010      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b50      	cmp	r3, #80	; 0x50
 8008472:	d00c      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b60      	cmp	r3, #96	; 0x60
 800847a:	d008      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b70      	cmp	r3, #112	; 0x70
 8008482:	d004      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x86>
 8008484:	f241 118b 	movw	r1, #4491	; 0x118b
 8008488:	488a      	ldr	r0, [pc, #552]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800848a:	f7f9 fe80 	bl	800218e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800849c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	f000 825c 	beq.w	8008970 <HAL_TIM_ConfigClockSource+0x568>
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d80f      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0xd4>
 80084bc:	2b10      	cmp	r3, #16
 80084be:	f000 82b7 	beq.w	8008a30 <HAL_TIM_ConfigClockSource+0x628>
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d803      	bhi.n	80084ce <HAL_TIM_ConfigClockSource+0xc6>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 82b2 	beq.w	8008a30 <HAL_TIM_ConfigClockSource+0x628>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80084cc:	e2e7      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	f000 82ae 	beq.w	8008a30 <HAL_TIM_ConfigClockSource+0x628>
 80084d4:	2b30      	cmp	r3, #48	; 0x30
 80084d6:	f000 82ab 	beq.w	8008a30 <HAL_TIM_ConfigClockSource+0x628>
      break;
 80084da:	e2e0      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 80084dc:	2b70      	cmp	r3, #112	; 0x70
 80084de:	d06a      	beq.n	80085b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80084e0:	2b70      	cmp	r3, #112	; 0x70
 80084e2:	d806      	bhi.n	80084f2 <HAL_TIM_ConfigClockSource+0xea>
 80084e4:	2b50      	cmp	r3, #80	; 0x50
 80084e6:	f000 8172 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x3c6>
 80084ea:	2b60      	cmp	r3, #96	; 0x60
 80084ec:	f000 81cf 	beq.w	800888e <HAL_TIM_ConfigClockSource+0x486>
      break;
 80084f0:	e2d5      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f6:	d004      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0xfa>
 80084f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fc:	f000 80f6 	beq.w	80086ec <HAL_TIM_ConfigClockSource+0x2e4>
      break;
 8008500:	e2cd      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a6c      	ldr	r2, [pc, #432]	; (80086b8 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	f000 82c7 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008516:	f000 82c1 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a67      	ldr	r2, [pc, #412]	; (80086bc <HAL_TIM_ConfigClockSource+0x2b4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	f000 82bb 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a65      	ldr	r2, [pc, #404]	; (80086c0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	f000 82b5 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a63      	ldr	r2, [pc, #396]	; (80086c4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	f000 82af 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a61      	ldr	r2, [pc, #388]	; (80086c8 <HAL_TIM_ConfigClockSource+0x2c0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	f000 82a9 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a5f      	ldr	r2, [pc, #380]	; (80086cc <HAL_TIM_ConfigClockSource+0x2c4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	f000 82a3 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a5d      	ldr	r2, [pc, #372]	; (80086d0 <HAL_TIM_ConfigClockSource+0x2c8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	f000 829d 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a5b      	ldr	r2, [pc, #364]	; (80086d4 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008568:	4293      	cmp	r3, r2
 800856a:	f000 8297 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a59      	ldr	r2, [pc, #356]	; (80086d8 <HAL_TIM_ConfigClockSource+0x2d0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	f000 8291 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a57      	ldr	r2, [pc, #348]	; (80086dc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	f000 828b 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a55      	ldr	r2, [pc, #340]	; (80086e0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	f000 8285 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a53      	ldr	r2, [pc, #332]	; (80086e4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	f000 827f 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a51      	ldr	r2, [pc, #324]	; (80086e8 <HAL_TIM_ConfigClockSource+0x2e0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	f000 8279 	beq.w	8008a9c <HAL_TIM_ConfigClockSource+0x694>
 80085aa:	f241 1197 	movw	r1, #4503	; 0x1197
 80085ae:	4841      	ldr	r0, [pc, #260]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80085b0:	f7f9 fded 	bl	800218e <assert_failed>
      break;
 80085b4:	e272      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x694>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <HAL_TIM_ConfigClockSource+0x2b0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d027      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d022      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a3b      	ldr	r2, [pc, #236]	; (80086bc <HAL_TIM_ConfigClockSource+0x2b4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d01d      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a39      	ldr	r2, [pc, #228]	; (80086c0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a38      	ldr	r2, [pc, #224]	; (80086c4 <HAL_TIM_ConfigClockSource+0x2bc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a38      	ldr	r2, [pc, #224]	; (80086d0 <HAL_TIM_ConfigClockSource+0x2c8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a37      	ldr	r2, [pc, #220]	; (80086d4 <HAL_TIM_ConfigClockSource+0x2cc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a37      	ldr	r2, [pc, #220]	; (80086e0 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x208>
 8008606:	f241 119e 	movw	r1, #4510	; 0x119e
 800860a:	482a      	ldr	r0, [pc, #168]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800860c:	f7f9 fdbf 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d013      	beq.n	8008640 <HAL_TIM_ConfigClockSource+0x238>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008620:	d00e      	beq.n	8008640 <HAL_TIM_ConfigClockSource+0x238>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862a:	d009      	beq.n	8008640 <HAL_TIM_ConfigClockSource+0x238>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008634:	d004      	beq.n	8008640 <HAL_TIM_ConfigClockSource+0x238>
 8008636:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800863a:	481e      	ldr	r0, [pc, #120]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800863c:	f7f9 fda7 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008648:	d014      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x26c>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d010      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x26c>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00c      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x26c>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d008      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x26c>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b0a      	cmp	r3, #10
 8008668:	d004      	beq.n	8008674 <HAL_TIM_ConfigClockSource+0x26c>
 800866a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800866e:	4811      	ldr	r0, [pc, #68]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008670:	f7f9 fd8d 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b0f      	cmp	r3, #15
 800867a:	d904      	bls.n	8008686 <HAL_TIM_ConfigClockSource+0x27e>
 800867c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008680:	480c      	ldr	r0, [pc, #48]	; (80086b4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008682:	f7f9 fd84 	bl	800218e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6899      	ldr	r1, [r3, #8]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f000 fb61 	bl	8008d5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	609a      	str	r2, [r3, #8]
      break;
 80086b2:	e1f4      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
 80086b4:	080124a4 	.word	0x080124a4
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40000c00 	.word	0x40000c00
 80086c8:	40001000 	.word	0x40001000
 80086cc:	40001400 	.word	0x40001400
 80086d0:	40010400 	.word	0x40010400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800
 80086e0:	40001800 	.word	0x40001800
 80086e4:	40001c00 	.word	0x40001c00
 80086e8:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a97      	ldr	r2, [pc, #604]	; (8008950 <HAL_TIM_ConfigClockSource+0x548>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01d      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d018      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a93      	ldr	r2, [pc, #588]	; (8008954 <HAL_TIM_ConfigClockSource+0x54c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a92      	ldr	r2, [pc, #584]	; (8008958 <HAL_TIM_ConfigClockSource+0x550>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a90      	ldr	r2, [pc, #576]	; (800895c <HAL_TIM_ConfigClockSource+0x554>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a8f      	ldr	r2, [pc, #572]	; (8008960 <HAL_TIM_ConfigClockSource+0x558>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x32a>
 8008728:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800872c:	488d      	ldr	r0, [pc, #564]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 800872e:	f7f9 fd2e 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d013      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x35a>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008742:	d00e      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x35a>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874c:	d009      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x35a>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008756:	d004      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x35a>
 8008758:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800875c:	4881      	ldr	r0, [pc, #516]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 800875e:	f7f9 fd16 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876a:	d014      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x38e>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x38e>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00c      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x38e>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d008      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x38e>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b0a      	cmp	r3, #10
 800878a:	d004      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x38e>
 800878c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008790:	4874      	ldr	r0, [pc, #464]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 8008792:	f7f9 fcfc 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	2b0f      	cmp	r3, #15
 800879c:	d904      	bls.n	80087a8 <HAL_TIM_ConfigClockSource+0x3a0>
 800879e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 80087a2:	4870      	ldr	r0, [pc, #448]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 80087a4:	f7f9 fcf3 	bl	800218e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6899      	ldr	r1, [r3, #8]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f000 fad0 	bl	8008d5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ca:	609a      	str	r2, [r3, #8]
      break;
 80087cc:	e167      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a5f      	ldr	r2, [pc, #380]	; (8008950 <HAL_TIM_ConfigClockSource+0x548>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d027      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e0:	d022      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a5b      	ldr	r2, [pc, #364]	; (8008954 <HAL_TIM_ConfigClockSource+0x54c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d01d      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a59      	ldr	r2, [pc, #356]	; (8008958 <HAL_TIM_ConfigClockSource+0x550>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d018      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a58      	ldr	r2, [pc, #352]	; (800895c <HAL_TIM_ConfigClockSource+0x554>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a56      	ldr	r2, [pc, #344]	; (8008960 <HAL_TIM_ConfigClockSource+0x558>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00e      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a56      	ldr	r2, [pc, #344]	; (8008968 <HAL_TIM_ConfigClockSource+0x560>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d009      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a54      	ldr	r2, [pc, #336]	; (800896c <HAL_TIM_ConfigClockSource+0x564>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d004      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x420>
 800881e:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8008822:	4850      	ldr	r0, [pc, #320]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 8008824:	f7f9 fcb3 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008830:	d014      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x454>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d010      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x454>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00c      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x454>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d008      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x454>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b0a      	cmp	r3, #10
 8008850:	d004      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x454>
 8008852:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8008856:	4843      	ldr	r0, [pc, #268]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 8008858:	f7f9 fc99 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d904      	bls.n	800886e <HAL_TIM_ConfigClockSource+0x466>
 8008864:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8008868:	483e      	ldr	r0, [pc, #248]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 800886a:	f7f9 fc90 	bl	800218e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6859      	ldr	r1, [r3, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	461a      	mov	r2, r3
 800887c:	f000 f9f4 	bl	8008c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2150      	movs	r1, #80	; 0x50
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fa4d 	bl	8008d26 <TIM_ITRx_SetConfig>
      break;
 800888c:	e107      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2f      	ldr	r2, [pc, #188]	; (8008950 <HAL_TIM_ConfigClockSource+0x548>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d027      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a0:	d022      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a2b      	ldr	r2, [pc, #172]	; (8008954 <HAL_TIM_ConfigClockSource+0x54c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d01d      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a29      	ldr	r2, [pc, #164]	; (8008958 <HAL_TIM_ConfigClockSource+0x550>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d018      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a28      	ldr	r2, [pc, #160]	; (800895c <HAL_TIM_ConfigClockSource+0x554>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d013      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a26      	ldr	r2, [pc, #152]	; (8008960 <HAL_TIM_ConfigClockSource+0x558>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00e      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a26      	ldr	r2, [pc, #152]	; (8008968 <HAL_TIM_ConfigClockSource+0x560>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d009      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a24      	ldr	r2, [pc, #144]	; (800896c <HAL_TIM_ConfigClockSource+0x564>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80088de:	f241 11da 	movw	r1, #4570	; 0x11da
 80088e2:	4820      	ldr	r0, [pc, #128]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 80088e4:	f7f9 fc53 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f0:	d014      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x514>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d010      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x514>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00c      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x514>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d008      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x514>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b0a      	cmp	r3, #10
 8008910:	d004      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x514>
 8008912:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8008916:	4813      	ldr	r0, [pc, #76]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 8008918:	f7f9 fc39 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b0f      	cmp	r3, #15
 8008922:	d904      	bls.n	800892e <HAL_TIM_ConfigClockSource+0x526>
 8008924:	f241 11de 	movw	r1, #4574	; 0x11de
 8008928:	480e      	ldr	r0, [pc, #56]	; (8008964 <HAL_TIM_ConfigClockSource+0x55c>)
 800892a:	f7f9 fc30 	bl	800218e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6859      	ldr	r1, [r3, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	461a      	mov	r2, r3
 800893c:	f000 f9c3 	bl	8008cc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2160      	movs	r1, #96	; 0x60
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f9ed 	bl	8008d26 <TIM_ITRx_SetConfig>
      break;
 800894c:	e0a7      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
 800894e:	bf00      	nop
 8008950:	40010000 	.word	0x40010000
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800
 800895c:	40000c00 	.word	0x40000c00
 8008960:	40010400 	.word	0x40010400
 8008964:	080124a4 	.word	0x080124a4
 8008968:	40014000 	.word	0x40014000
 800896c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a50      	ldr	r2, [pc, #320]	; (8008ab8 <HAL_TIM_ConfigClockSource+0x6b0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d027      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008982:	d022      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a4c      	ldr	r2, [pc, #304]	; (8008abc <HAL_TIM_ConfigClockSource+0x6b4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d01d      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a4b      	ldr	r2, [pc, #300]	; (8008ac0 <HAL_TIM_ConfigClockSource+0x6b8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d018      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a49      	ldr	r2, [pc, #292]	; (8008ac4 <HAL_TIM_ConfigClockSource+0x6bc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d013      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a48      	ldr	r2, [pc, #288]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x6c0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00e      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a46      	ldr	r2, [pc, #280]	; (8008acc <HAL_TIM_ConfigClockSource+0x6c4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d009      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a45      	ldr	r2, [pc, #276]	; (8008ad0 <HAL_TIM_ConfigClockSource+0x6c8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d004      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x5c2>
 80089c0:	f241 11ea 	movw	r1, #4586	; 0x11ea
 80089c4:	4843      	ldr	r0, [pc, #268]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x6cc>)
 80089c6:	f7f9 fbe2 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d2:	d014      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x5f6>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d010      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x5f6>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00c      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x5f6>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d008      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x5f6>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b0a      	cmp	r3, #10
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x5f6>
 80089f4:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80089f8:	4836      	ldr	r0, [pc, #216]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x6cc>)
 80089fa:	f7f9 fbc8 	bl	800218e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b0f      	cmp	r3, #15
 8008a04:	d904      	bls.n	8008a10 <HAL_TIM_ConfigClockSource+0x608>
 8008a06:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8008a0a:	4832      	ldr	r0, [pc, #200]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x6cc>)
 8008a0c:	f7f9 fbbf 	bl	800218e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6859      	ldr	r1, [r3, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f000 f923 	bl	8008c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2140      	movs	r1, #64	; 0x40
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f97c 	bl	8008d26 <TIM_ITRx_SetConfig>
      break;
 8008a2e:	e036      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <HAL_TIM_ConfigClockSource+0x6b0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d027      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a42:	d022      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <HAL_TIM_ConfigClockSource+0x6b4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d01d      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <HAL_TIM_ConfigClockSource+0x6b8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d018      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a19      	ldr	r2, [pc, #100]	; (8008ac4 <HAL_TIM_ConfigClockSource+0x6bc>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x6c0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00e      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a16      	ldr	r2, [pc, #88]	; (8008acc <HAL_TIM_ConfigClockSource+0x6c4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <HAL_TIM_ConfigClockSource+0x6c8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x682>
 8008a80:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8008a84:	4813      	ldr	r0, [pc, #76]	; (8008ad4 <HAL_TIM_ConfigClockSource+0x6cc>)
 8008a86:	f7f9 fb82 	bl	800218e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 f946 	bl	8008d26 <TIM_ITRx_SetConfig>
      break;
 8008a9a:	e000      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x696>
      break;
 8008a9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	40001800 	.word	0x40001800
 8008ad4:	080124a4 	.word	0x080124a4

08008ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a40      	ldr	r2, [pc, #256]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b46:	d00f      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a3d      	ldr	r2, [pc, #244]	; (8008c40 <TIM_Base_SetConfig+0x118>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a3c      	ldr	r2, [pc, #240]	; (8008c44 <TIM_Base_SetConfig+0x11c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a3b      	ldr	r2, [pc, #236]	; (8008c48 <TIM_Base_SetConfig+0x120>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a3a      	ldr	r2, [pc, #232]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d108      	bne.n	8008b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2f      	ldr	r2, [pc, #188]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d02b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d027      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a2c      	ldr	r2, [pc, #176]	; (8008c40 <TIM_Base_SetConfig+0x118>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d023      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a2b      	ldr	r2, [pc, #172]	; (8008c44 <TIM_Base_SetConfig+0x11c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a2a      	ldr	r2, [pc, #168]	; (8008c48 <TIM_Base_SetConfig+0x120>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d01b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a29      	ldr	r2, [pc, #164]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d017      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a28      	ldr	r2, [pc, #160]	; (8008c50 <TIM_Base_SetConfig+0x128>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a27      	ldr	r2, [pc, #156]	; (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a26      	ldr	r2, [pc, #152]	; (8008c58 <TIM_Base_SetConfig+0x130>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a25      	ldr	r2, [pc, #148]	; (8008c5c <TIM_Base_SetConfig+0x134>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a24      	ldr	r2, [pc, #144]	; (8008c60 <TIM_Base_SetConfig+0x138>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a23      	ldr	r2, [pc, #140]	; (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d108      	bne.n	8008bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0xf8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a0c      	ldr	r2, [pc, #48]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d103      	bne.n	8008c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	615a      	str	r2, [r3, #20]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40010400 	.word	0x40010400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40014400 	.word	0x40014400
 8008c58:	40014800 	.word	0x40014800
 8008c5c:	40001800 	.word	0x40001800
 8008c60:	40001c00 	.word	0x40001c00
 8008c64:	40002000 	.word	0x40002000

08008c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f023 030a 	bic.w	r3, r3, #10
 8008ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0210 	bic.w	r2, r3, #16
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	031b      	lsls	r3, r3, #12
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b085      	sub	sp, #20
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f043 0307 	orr.w	r3, r3, #7
 8008d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	609a      	str	r2, [r3, #8]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	609a      	str	r2, [r3, #8]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a61      	ldr	r2, [pc, #388]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d027      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db8:	d022      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a5d      	ldr	r2, [pc, #372]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d01d      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a5b      	ldr	r2, [pc, #364]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d018      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a5a      	ldr	r2, [pc, #360]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a58      	ldr	r2, [pc, #352]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00e      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a57      	ldr	r2, [pc, #348]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d009      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a55      	ldr	r2, [pc, #340]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008df6:	f240 6164 	movw	r1, #1636	; 0x664
 8008dfa:	4854      	ldr	r0, [pc, #336]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008dfc:	f7f9 f9c7 	bl	800218e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d020      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b10      	cmp	r3, #16
 8008e0e:	d01c      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d018      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d014      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d010      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b50      	cmp	r3, #80	; 0x50
 8008e2e:	d00c      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b60      	cmp	r3, #96	; 0x60
 8008e36:	d008      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b70      	cmp	r3, #112	; 0x70
 8008e3e:	d004      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008e40:	f240 6165 	movw	r1, #1637	; 0x665
 8008e44:	4841      	ldr	r0, [pc, #260]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008e46:	f7f9 f9a2 	bl	800218e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b80      	cmp	r3, #128	; 0x80
 8008e50:	d008      	beq.n	8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e5a:	f240 6166 	movw	r1, #1638	; 0x666
 8008e5e:	483b      	ldr	r0, [pc, #236]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008e60:	f7f9 f995 	bl	800218e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e05a      	b.n	8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d022      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebe:	d01d      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d018      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1a      	ldr	r2, [pc, #104]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00e      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d009      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10c      	bne.n	8008f16 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40000400 	.word	0x40000400
 8008f38:	40000800 	.word	0x40000800
 8008f3c:	40000c00 	.word	0x40000c00
 8008f40:	40001000 	.word	0x40001000
 8008f44:	40001400 	.word	0x40001400
 8008f48:	40010400 	.word	0x40010400
 8008f4c:	080124dc 	.word	0x080124dc
 8008f50:	40014000 	.word	0x40014000
 8008f54:	40001800 	.word	0x40001800

08008f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 001c 	add.w	r0, r7, #28
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d122      	bne.n	8008fde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d105      	bne.n	8008fd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f94a 	bl	800926c <USB_CoreReset>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e01a      	b.n	8009014 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f93e 	bl	800926c <USB_CoreReset>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
 8009006:	e005      	b.n	8009014 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	2b01      	cmp	r3, #1
 8009018:	d10b      	bne.n	8009032 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f043 0206 	orr.w	r2, r3, #6
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800903e:	b004      	add	sp, #16
 8009040:	4770      	bx	lr

08009042 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f043 0201 	orr.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f023 0201 	bic.w	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d106      	bne.n	80090b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60da      	str	r2, [r3, #12]
 80090b0:	e00b      	b.n	80090ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]
 80090c4:	e001      	b.n	80090ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e003      	b.n	80090d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80090ca:	2032      	movs	r0, #50	; 0x32
 80090cc:	f7f9 fbbe 	bl	800284c <HAL_Delay>

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	019b      	lsls	r3, r3, #6
 80090ee:	f043 0220 	orr.w	r2, r3, #32
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <USB_FlushTxFifo+0x48>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d901      	bls.n	8009108 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e006      	b.n	8009116 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b20      	cmp	r3, #32
 8009112:	d0f0      	beq.n	80090f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	00030d40 	.word	0x00030d40

08009128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2210      	movs	r2, #16
 8009138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3301      	adds	r3, #1
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a09      	ldr	r2, [pc, #36]	; (8009168 <USB_FlushRxFifo+0x40>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d901      	bls.n	800914c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e006      	b.n	800915a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b10      	cmp	r3, #16
 8009156:	d0f0      	beq.n	800913a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	00030d40 	.word	0x00030d40

0800916c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800916c:	b480      	push	{r7}
 800916e:	b089      	sub	sp, #36	; 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4611      	mov	r1, r2
 8009178:	461a      	mov	r2, r3
 800917a:	460b      	mov	r3, r1
 800917c:	71fb      	strb	r3, [r7, #7]
 800917e:	4613      	mov	r3, r2
 8009180:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800918a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d11a      	bne.n	80091c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009192:	88bb      	ldrh	r3, [r7, #4]
 8009194:	3303      	adds	r3, #3
 8009196:	089b      	lsrs	r3, r3, #2
 8009198:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	e00f      	b.n	80091c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	031a      	lsls	r2, r3, #12
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ac:	461a      	mov	r2, r3
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	3304      	adds	r3, #4
 80091b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	3301      	adds	r3, #1
 80091be:	61bb      	str	r3, [r7, #24]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3eb      	bcc.n	80091a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3724      	adds	r7, #36	; 0x24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b089      	sub	sp, #36	; 0x24
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	4613      	mov	r3, r2
 80091e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	3303      	adds	r3, #3
 80091f0:	089b      	lsrs	r3, r3, #2
 80091f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80091f4:	2300      	movs	r3, #0
 80091f6:	61bb      	str	r3, [r7, #24]
 80091f8:	e00b      	b.n	8009212 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	601a      	str	r2, [r3, #0]
    pDest++;
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	3304      	adds	r3, #4
 800920a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	3301      	adds	r3, #1
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3ef      	bcc.n	80091fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800921a:	69fb      	ldr	r3, [r7, #28]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3724      	adds	r7, #36	; 0x24
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4013      	ands	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009240:	68fb      	ldr	r3, [r7, #12]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0301 	and.w	r3, r3, #1
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <USB_CoreReset+0x64>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d901      	bls.n	800928a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e01b      	b.n	80092c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	daf2      	bge.n	8009278 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f043 0201 	orr.w	r2, r3, #1
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3301      	adds	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <USB_CoreReset+0x64>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e006      	b.n	80092c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d0f0      	beq.n	80092a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	00030d40 	.word	0x00030d40

080092d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092d4:	b084      	sub	sp, #16
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	f107 001c 	add.w	r0, r7, #28
 80092e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092f0:	461a      	mov	r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d018      	beq.n	8009358 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	2b01      	cmp	r3, #1
 800932a:	d10a      	bne.n	8009342 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800933a:	f043 0304 	orr.w	r3, r3, #4
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	e014      	b.n	800936c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009350:	f023 0304 	bic.w	r3, r3, #4
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	e009      	b.n	800936c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009366:	f023 0304 	bic.w	r3, r3, #4
 800936a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800936c:	2110      	movs	r1, #16
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff feb4 	bl	80090dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff fed7 	bl	8009128 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e015      	b.n	80093ac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	4413      	add	r3, r2
 8009388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800938c:	461a      	mov	r2, r3
 800938e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009392:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4413      	add	r3, r2
 800939c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a0:	461a      	mov	r2, r3
 80093a2:	2300      	movs	r3, #0
 80093a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d3e5      	bcc.n	8009380 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80093b4:	2101      	movs	r1, #1
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8ac 	bl	8009514 <USB_DriveVbus>

  HAL_Delay(200U);
 80093bc:	20c8      	movs	r0, #200	; 0xc8
 80093be:	f7f9 fa45 	bl	800284c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a14      	ldr	r2, [pc, #80]	; (8009438 <USB_HostInit+0x164>)
 80093e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a13      	ldr	r2, [pc, #76]	; (800943c <USB_HostInit+0x168>)
 80093ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80093f2:	e009      	b.n	8009408 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2280      	movs	r2, #128	; 0x80
 80093f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a10      	ldr	r2, [pc, #64]	; (8009440 <USB_HostInit+0x16c>)
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a10      	ldr	r2, [pc, #64]	; (8009444 <USB_HostInit+0x170>)
 8009404:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f043 0210 	orr.w	r2, r3, #16
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <USB_HostInit+0x174>)
 8009420:	4313      	orrs	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009432:	b004      	add	sp, #16
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	01000200 	.word	0x01000200
 800943c:	00e00300 	.word	0x00e00300
 8009440:	00600080 	.word	0x00600080
 8009444:	004000e0 	.word	0x004000e0
 8009448:	a3200008 	.word	0xa3200008

0800944c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009484:	4313      	orrs	r3, r2
 8009486:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d107      	bne.n	800949e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009494:	461a      	mov	r2, r3
 8009496:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800949a:	6053      	str	r3, [r2, #4]
 800949c:	e009      	b.n	80094b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d106      	bne.n	80094b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094aa:	461a      	mov	r2, r3
 80094ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80094b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80094e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80094f0:	2064      	movs	r0, #100	; 0x64
 80094f2:	f7f9 f9ab 	bl	800284c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009502:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009504:	200a      	movs	r0, #10
 8009506:	f7f9 f9a1 	bl	800284c <HAL_Delay>

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009538:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d109      	bne.n	8009558 <USB_DriveVbus+0x44>
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d106      	bne.n	8009558 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009556:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800955e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009562:	d109      	bne.n	8009578 <USB_DriveVbus+0x64>
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009576:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009586:	b480      	push	{r7}
 8009588:	b085      	sub	sp, #20
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	0c5b      	lsrs	r3, r3, #17
 80095a4:	f003 0303 	and.w	r3, r3, #3
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	b29b      	uxth	r3, r3
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	4608      	mov	r0, r1
 80095e2:	4611      	mov	r1, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	70fb      	strb	r3, [r7, #3]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70bb      	strb	r3, [r7, #2]
 80095ee:	4613      	mov	r3, r2
 80095f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009606:	461a      	mov	r2, r3
 8009608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800960c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800960e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009612:	2b03      	cmp	r3, #3
 8009614:	d87e      	bhi.n	8009714 <USB_HC_Init+0x13c>
 8009616:	a201      	add	r2, pc, #4	; (adr r2, 800961c <USB_HC_Init+0x44>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	0800962d 	.word	0x0800962d
 8009620:	080096d7 	.word	0x080096d7
 8009624:	0800962d 	.word	0x0800962d
 8009628:	08009699 	.word	0x08009699
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4413      	add	r3, r2
 8009634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009638:	461a      	mov	r2, r3
 800963a:	f240 439d 	movw	r3, #1181	; 0x49d
 800963e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009640:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da10      	bge.n	800966a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4413      	add	r3, r2
 8009650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	440a      	add	r2, r1
 800965e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009666:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009668:	e057      	b.n	800971a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d051      	beq.n	800971a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4413      	add	r3, r2
 800967e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	440a      	add	r2, r1
 800968c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009690:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009694:	60d3      	str	r3, [r2, #12]
      break;
 8009696:	e040      	b.n	800971a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a4:	461a      	mov	r2, r3
 80096a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80096aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80096ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da34      	bge.n	800971e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80096d4:	e023      	b.n	800971e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e2:	461a      	mov	r2, r3
 80096e4:	f240 2325 	movw	r3, #549	; 0x225
 80096e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80096ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da17      	bge.n	8009722 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	440a      	add	r2, r1
 8009708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800970c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009710:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009712:	e006      	b.n	8009722 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
      break;
 8009718:	e004      	b.n	8009724 <USB_HC_Init+0x14c>
      break;
 800971a:	bf00      	nop
 800971c:	e002      	b.n	8009724 <USB_HC_Init+0x14c>
      break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <USB_HC_Init+0x14c>
      break;
 8009722:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	2101      	movs	r1, #1
 8009734:	fa01 f303 	lsl.w	r3, r1, r3
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800973e:	4313      	orrs	r3, r2
 8009740:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800974e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009752:	2b00      	cmp	r3, #0
 8009754:	da03      	bge.n	800975e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	e001      	b.n	8009762 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d103      	bne.n	8009772 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800976a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e001      	b.n	8009776 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009776:	787b      	ldrb	r3, [r7, #1]
 8009778:	059b      	lsls	r3, r3, #22
 800977a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800977e:	78bb      	ldrb	r3, [r7, #2]
 8009780:	02db      	lsls	r3, r3, #11
 8009782:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009786:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800978c:	049b      	lsls	r3, r3, #18
 800978e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009792:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009796:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800979a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	0159      	lsls	r1, r3, #5
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	440b      	add	r3, r1
 80097a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097b2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80097b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d10f      	bne.n	80097dc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097da:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop

080097ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	; 0x30
 80097f0:	af02      	add	r7, sp, #8
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009808:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	2b00      	cmp	r3, #0
 8009814:	d028      	beq.n	8009868 <USB_HC_StartXfer+0x7c>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	791b      	ldrb	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d124      	bne.n	8009868 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10b      	bne.n	800983c <USB_HC_StartXfer+0x50>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	795b      	ldrb	r3, [r3, #5]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d107      	bne.n	800983c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	4619      	mov	r1, r3
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fa30 	bl	8009c98 <USB_DoPing>
      return HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	e114      	b.n	8009a66 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d112      	bne.n	8009868 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	6a3a      	ldr	r2, [r7, #32]
 8009856:	440a      	add	r2, r1
 8009858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009860:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2200      	movs	r2, #0
 8009866:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d018      	beq.n	80098a2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	8912      	ldrh	r2, [r2, #8]
 8009878:	4413      	add	r3, r2
 800987a:	3b01      	subs	r3, #1
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	8912      	ldrh	r2, [r2, #8]
 8009880:	fbb3 f3f2 	udiv	r3, r3, r2
 8009884:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009888:	8b7b      	ldrh	r3, [r7, #26]
 800988a:	429a      	cmp	r2, r3
 800988c:	d90b      	bls.n	80098a6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800988e:	8b7b      	ldrh	r3, [r7, #26]
 8009890:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	8912      	ldrh	r2, [r2, #8]
 8009898:	fb02 f203 	mul.w	r2, r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	611a      	str	r2, [r3, #16]
 80098a0:	e001      	b.n	80098a6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80098a2:	2301      	movs	r3, #1
 80098a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	78db      	ldrb	r3, [r3, #3]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d006      	beq.n	80098bc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80098ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	8912      	ldrh	r2, [r2, #8]
 80098b4:	fb02 f203 	mul.w	r2, r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098c6:	04d9      	lsls	r1, r3, #19
 80098c8:	4b69      	ldr	r3, [pc, #420]	; (8009a70 <USB_HC_StartXfer+0x284>)
 80098ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80098cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7a9b      	ldrb	r3, [r3, #10]
 80098d2:	075b      	lsls	r3, r3, #29
 80098d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80098d8:	69f9      	ldr	r1, [r7, #28]
 80098da:	0148      	lsls	r0, r1, #5
 80098dc:	6a39      	ldr	r1, [r7, #32]
 80098de:	4401      	add	r1, r0
 80098e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80098e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	68d9      	ldr	r1, [r3, #12]
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fe:	460a      	mov	r2, r1
 8009900:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	bf0c      	ite	eq
 8009912:	2301      	moveq	r3, #1
 8009914:	2300      	movne	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	4413      	add	r3, r2
 8009922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	0151      	lsls	r1, r2, #5
 800992c:	6a3a      	ldr	r2, [r7, #32]
 800992e:	440a      	add	r2, r1
 8009930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009938:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	4413      	add	r3, r2
 8009942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	7e7b      	ldrb	r3, [r7, #25]
 800994a:	075b      	lsls	r3, r3, #29
 800994c:	69f9      	ldr	r1, [r7, #28]
 800994e:	0148      	lsls	r0, r1, #5
 8009950:	6a39      	ldr	r1, [r7, #32]
 8009952:	4401      	add	r1, r0
 8009954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009958:	4313      	orrs	r3, r2
 800995a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	4413      	add	r3, r2
 8009964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a42      	ldr	r2, [pc, #264]	; (8009a74 <USB_HC_StartXfer+0x288>)
 800996c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800996e:	4b41      	ldr	r3, [pc, #260]	; (8009a74 <USB_HC_StartXfer+0x288>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009976:	4a3f      	ldr	r2, [pc, #252]	; (8009a74 <USB_HC_StartXfer+0x288>)
 8009978:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009982:	4b3c      	ldr	r3, [pc, #240]	; (8009a74 <USB_HC_StartXfer+0x288>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998a:	4a3a      	ldr	r2, [pc, #232]	; (8009a74 <USB_HC_StartXfer+0x288>)
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	e005      	b.n	800999c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009990:	4b38      	ldr	r3, [pc, #224]	; (8009a74 <USB_HC_StartXfer+0x288>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009998:	4a36      	ldr	r2, [pc, #216]	; (8009a74 <USB_HC_StartXfer+0x288>)
 800999a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800999c:	4b35      	ldr	r3, [pc, #212]	; (8009a74 <USB_HC_StartXfer+0x288>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099a4:	4a33      	ldr	r2, [pc, #204]	; (8009a74 <USB_HC_StartXfer+0x288>)
 80099a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b4:	461a      	mov	r2, r3
 80099b6:	4b2f      	ldr	r3, [pc, #188]	; (8009a74 <USB_HC_StartXfer+0x288>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e04f      	b.n	8009a66 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	78db      	ldrb	r3, [r3, #3]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d14a      	bne.n	8009a64 <USB_HC_StartXfer+0x278>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d046      	beq.n	8009a64 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	79db      	ldrb	r3, [r3, #7]
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d830      	bhi.n	8009a40 <USB_HC_StartXfer+0x254>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USB_HC_StartXfer+0x1f8>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099f5 	.word	0x080099f5
 80099e8:	08009a19 	.word	0x08009a19
 80099ec:	080099f5 	.word	0x080099f5
 80099f0:	08009a19 	.word	0x08009a19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	3303      	adds	r3, #3
 80099fa:	089b      	lsrs	r3, r3, #2
 80099fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80099fe:	8afa      	ldrh	r2, [r7, #22]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d91c      	bls.n	8009a44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f043 0220 	orr.w	r2, r3, #32
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a16:	e015      	b.n	8009a44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	3303      	adds	r3, #3
 8009a1e:	089b      	lsrs	r3, r3, #2
 8009a20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009a22:	8afa      	ldrh	r2, [r7, #22]
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d90a      	bls.n	8009a48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a3e:	e003      	b.n	8009a48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009a40:	bf00      	nop
 8009a42:	e002      	b.n	8009a4a <USB_HC_StartXfer+0x25e>
        break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <USB_HC_StartXfer+0x25e>
        break;
 8009a48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	68d9      	ldr	r1, [r3, #12]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	785a      	ldrb	r2, [r3, #1]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	b298      	uxth	r0, r3
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff fb84 	bl	800916c <USB_WritePacket>
  }

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3728      	adds	r7, #40	; 0x28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	1ff80000 	.word	0x1ff80000
 8009a74:	20000134 	.word	0x20000134

08009a78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	b29b      	uxth	r3, r3
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b087      	sub	sp, #28
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	0c9b      	lsrs	r3, r3, #18
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <USB_HC_Halt+0x3a>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d16c      	bne.n	8009bae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	0151      	lsls	r1, r2, #5
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	440a      	add	r2, r1
 8009aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009af2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d143      	bne.n	8009b88 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b5e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	3301      	adds	r3, #1
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b6c:	d81d      	bhi.n	8009baa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b84:	d0ec      	beq.n	8009b60 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009b86:	e080      	b.n	8009c8a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ba6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ba8:	e06f      	b.n	8009c8a <USB_HC_Halt+0x1f0>
          break;
 8009baa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009bac:	e06d      	b.n	8009c8a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bcc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d143      	bne.n	8009c66 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bfc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	0151      	lsls	r1, r2, #5
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	440a      	add	r2, r1
 8009c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c1c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c3c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	3301      	adds	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c4a:	d81d      	bhi.n	8009c88 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c62:	d0ec      	beq.n	8009c3e <USB_HC_Halt+0x1a4>
 8009c64:	e011      	b.n	8009c8a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	0151      	lsls	r1, r2, #5
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	e000      	b.n	8009c8a <USB_HC_Halt+0x1f0>
          break;
 8009c88:	bf00      	nop
    }
  }

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009cac:	2301      	movs	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	04da      	lsls	r2, r3, #19
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <USB_DoPing+0x74>)
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	0151      	lsls	r1, r2, #5
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	440a      	add	r2, r1
 8009cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cc8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ce8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	1ff80000 	.word	0x1ff80000

08009d10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff f99f 	bl	8009064 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009d26:	2110      	movs	r1, #16
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff f9d7 	bl	80090dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff f9fa 	bl	8009128 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009d34:	2300      	movs	r3, #0
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	e01f      	b.n	8009d7a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	3301      	adds	r3, #1
 8009d78:	613b      	str	r3, [r7, #16]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b0f      	cmp	r3, #15
 8009d7e:	d9dc      	bls.n	8009d3a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
 8009d84:	e034      	b.n	8009df0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009da4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dba:	461a      	mov	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dcc:	d80c      	bhi.n	8009de8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009de4:	d0ec      	beq.n	8009dc0 <USB_StopHost+0xb0>
 8009de6:	e000      	b.n	8009dea <USB_StopHost+0xda>
        break;
 8009de8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3301      	adds	r3, #1
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d9c7      	bls.n	8009d86 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff f918 	bl	8009042 <USB_EnableGlobalInt>

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009e20:	4904      	ldr	r1, [pc, #16]	; (8009e34 <MX_FATFS_Init+0x18>)
 8009e22:	4805      	ldr	r0, [pc, #20]	; (8009e38 <MX_FATFS_Init+0x1c>)
 8009e24:	f005 fec8 	bl	800fbb8 <FATFS_LinkDriver>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <MX_FATFS_Init+0x20>)
 8009e2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e30:	bf00      	nop
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20003050 	.word	0x20003050
 8009e38:	08012584 	.word	0x08012584
 8009e3c:	200034b8 	.word	0x200034b8

08009e40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e40:	b480      	push	{r7}
 8009e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4808      	ldr	r0, [pc, #32]	; (8009e9c <USBH_status+0x34>)
 8009e7c:	f000 fe11 	bl	800aaa2 <USBH_MSC_UnitIsReady>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <USBH_status+0x24>
  {
    res = RES_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
 8009e8a:	e001      	b.n	8009e90 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200034bc 	.word	0x200034bc

08009ea0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b094      	sub	sp, #80	; 0x50
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009eb6:	7bf9      	ldrb	r1, [r7, #15]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4812      	ldr	r0, [pc, #72]	; (8009f0c <USBH_read+0x6c>)
 8009ec2:	f000 fe38 	bl	800ab36 <USBH_MSC_Read>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d103      	bne.n	8009ed4 <USBH_read+0x34>
  {
    res = RES_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ed2:	e015      	b.n	8009f00 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009ed4:	f107 0210 	add.w	r2, r7, #16
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	4619      	mov	r1, r3
 8009edc:	480b      	ldr	r0, [pc, #44]	; (8009f0c <USBH_read+0x6c>)
 8009ede:	f000 fe06 	bl	800aaee <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009ee2:	7f7b      	ldrb	r3, [r7, #29]
 8009ee4:	2b28      	cmp	r3, #40	; 0x28
 8009ee6:	d003      	beq.n	8009ef0 <USBH_read+0x50>
 8009ee8:	2b3a      	cmp	r3, #58	; 0x3a
 8009eea:	d001      	beq.n	8009ef0 <USBH_read+0x50>
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d103      	bne.n	8009ef8 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ef6:	e003      	b.n	8009f00 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009efe:	bf00      	nop
    }
  }

  return res;
 8009f00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3748      	adds	r7, #72	; 0x48
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	200034bc 	.word	0x200034bc

08009f10 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b094      	sub	sp, #80	; 0x50
 8009f14:	af02      	add	r7, sp, #8
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009f26:	7bf9      	ldrb	r1, [r7, #15]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4817      	ldr	r0, [pc, #92]	; (8009f90 <USBH_write+0x80>)
 8009f32:	f000 fe69 	bl	800ac08 <USBH_MSC_Write>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d103      	bne.n	8009f44 <USBH_write+0x34>
  {
    res = RES_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f42:	e01f      	b.n	8009f84 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009f44:	f107 0210 	add.w	r2, r7, #16
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4810      	ldr	r0, [pc, #64]	; (8009f90 <USBH_write+0x80>)
 8009f4e:	f000 fdce 	bl	800aaee <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009f52:	7f7b      	ldrb	r3, [r7, #29]
 8009f54:	2b27      	cmp	r3, #39	; 0x27
 8009f56:	d009      	beq.n	8009f6c <USBH_write+0x5c>
 8009f58:	2b27      	cmp	r3, #39	; 0x27
 8009f5a:	dc02      	bgt.n	8009f62 <USBH_write+0x52>
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d009      	beq.n	8009f74 <USBH_write+0x64>
 8009f60:	e00c      	b.n	8009f7c <USBH_write+0x6c>
 8009f62:	2b28      	cmp	r3, #40	; 0x28
 8009f64:	d006      	beq.n	8009f74 <USBH_write+0x64>
 8009f66:	2b3a      	cmp	r3, #58	; 0x3a
 8009f68:	d004      	beq.n	8009f74 <USBH_write+0x64>
 8009f6a:	e007      	b.n	8009f7c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f72:	e007      	b.n	8009f84 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009f74:	2303      	movs	r3, #3
 8009f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f7a:	e003      	b.n	8009f84 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f82:	bf00      	nop
    }
  }

  return res;
 8009f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3748      	adds	r7, #72	; 0x48
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	200034bc 	.word	0x200034bc

08009f94 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b090      	sub	sp, #64	; 0x40
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	603a      	str	r2, [r7, #0]
 8009f9e:	71fb      	strb	r3, [r7, #7]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009faa:	79bb      	ldrb	r3, [r7, #6]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d852      	bhi.n	800a056 <USBH_ioctl+0xc2>
 8009fb0:	a201      	add	r2, pc, #4	; (adr r2, 8009fb8 <USBH_ioctl+0x24>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fc9 	.word	0x08009fc9
 8009fbc:	08009fd1 	.word	0x08009fd1
 8009fc0:	08009ffb 	.word	0x08009ffb
 8009fc4:	0800a027 	.word	0x0800a027
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009fce:	e045      	b.n	800a05c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009fd0:	f107 0208 	add.w	r2, r7, #8
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4823      	ldr	r0, [pc, #140]	; (800a068 <USBH_ioctl+0xd4>)
 8009fda:	f000 fd88 	bl	800aaee <USBH_MSC_GetLUNInfo>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009ff0:	e034      	b.n	800a05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009ff8:	e030      	b.n	800a05c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009ffa:	f107 0208 	add.w	r2, r7, #8
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	4619      	mov	r1, r3
 800a002:	4819      	ldr	r0, [pc, #100]	; (800a068 <USBH_ioctl+0xd4>)
 800a004:	f000 fd73 	bl	800aaee <USBH_MSC_GetLUNInfo>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d107      	bne.n	800a01e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a00e:	8a3b      	ldrh	r3, [r7, #16]
 800a010:	461a      	mov	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a01c:	e01e      	b.n	800a05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a024:	e01a      	b.n	800a05c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a026:	f107 0208 	add.w	r2, r7, #8
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	4619      	mov	r1, r3
 800a02e:	480e      	ldr	r0, [pc, #56]	; (800a068 <USBH_ioctl+0xd4>)
 800a030:	f000 fd5d 	bl	800aaee <USBH_MSC_GetLUNInfo>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d109      	bne.n	800a04e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a03a:	8a3b      	ldrh	r3, [r7, #16]
 800a03c:	0a5b      	lsrs	r3, r3, #9
 800a03e:	b29b      	uxth	r3, r3
 800a040:	461a      	mov	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a04c:	e006      	b.n	800a05c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a054:	e002      	b.n	800a05c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a056:	2304      	movs	r3, #4
 800a058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a05c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a060:	4618      	mov	r0, r3
 800a062:	3740      	adds	r7, #64	; 0x40
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	200034bc 	.word	0x200034bc

0800a06c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b089      	sub	sp, #36	; 0x24
 800a070:	af04      	add	r7, sp, #16
 800a072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a07a:	7919      	ldrb	r1, [r3, #4]
 800a07c:	2350      	movs	r3, #80	; 0x50
 800a07e:	2206      	movs	r2, #6
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fc4f 	bl	800b924 <USBH_FindInterface>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2bff      	cmp	r3, #255	; 0xff
 800a08e:	d002      	beq.n	800a096 <USBH_MSC_InterfaceInit+0x2a>
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d901      	bls.n	800a09a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a096:	2302      	movs	r3, #2
 800a098:	e0ef      	b.n	800a27a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fc24 	bl	800b8ec <USBH_SelectInterface>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e0e3      	b.n	800a27a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a0b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0bc:	f007 fc0a 	bl	80118d4 <malloc>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e0d0      	b.n	800a27a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a0d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0dc:	2100      	movs	r1, #0
 800a0de:	68b8      	ldr	r0, [r7, #8]
 800a0e0:	f007 fc13 	bl	801190a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	211a      	movs	r1, #26
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b25b      	sxtb	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	da16      	bge.n	800a12a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	211a      	movs	r1, #26
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	4413      	add	r3, r2
 800a108:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a10c:	781a      	ldrb	r2, [r3, #0]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	211a      	movs	r1, #26
 800a118:	fb01 f303 	mul.w	r3, r1, r3
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a122:	881a      	ldrh	r2, [r3, #0]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	815a      	strh	r2, [r3, #10]
 800a128:	e015      	b.n	800a156 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	211a      	movs	r1, #26
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	4413      	add	r3, r2
 800a136:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	211a      	movs	r1, #26
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a150:	881a      	ldrh	r2, [r3, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	211a      	movs	r1, #26
 800a15c:	fb01 f303 	mul.w	r3, r1, r3
 800a160:	4413      	add	r3, r2
 800a162:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da16      	bge.n	800a19c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	211a      	movs	r1, #26
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	4413      	add	r3, r2
 800a17a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a17e:	781a      	ldrb	r2, [r3, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	211a      	movs	r1, #26
 800a18a:	fb01 f303 	mul.w	r3, r1, r3
 800a18e:	4413      	add	r3, r2
 800a190:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a194:	881a      	ldrh	r2, [r3, #0]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	815a      	strh	r2, [r3, #10]
 800a19a:	e015      	b.n	800a1c8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	211a      	movs	r1, #26
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a1ac:	781a      	ldrb	r2, [r3, #0]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	211a      	movs	r1, #26
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a1c2:	881a      	ldrh	r2, [r3, #0]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	799b      	ldrb	r3, [r3, #6]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f002 fdc2 	bl	800cd6a <USBH_AllocPipe>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	79db      	ldrb	r3, [r3, #7]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f002 fdb8 	bl	800cd6a <USBH_AllocPipe>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fda4 	bl	800ad50 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	7959      	ldrb	r1, [r3, #5]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	7998      	ldrb	r0, [r3, #6]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	8912      	ldrh	r2, [r2, #8]
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	2202      	movs	r2, #2
 800a224:	9201      	str	r2, [sp, #4]
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4623      	mov	r3, r4
 800a22a:	4602      	mov	r2, r0
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f002 fd6d 	bl	800cd0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	7919      	ldrb	r1, [r3, #4]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	79d8      	ldrb	r0, [r3, #7]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	8952      	ldrh	r2, [r2, #10]
 800a24a:	9202      	str	r2, [sp, #8]
 800a24c:	2202      	movs	r2, #2
 800a24e:	9201      	str	r2, [sp, #4]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	4623      	mov	r3, r4
 800a254:	4602      	mov	r2, r0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f002 fd58 	bl	800cd0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	791b      	ldrb	r3, [r3, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f005 ffff 	bl	8010268 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	795b      	ldrb	r3, [r3, #5]
 800a26e:	2200      	movs	r2, #0
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f005 fff8 	bl	8010268 <USBH_LL_SetToggle>

  return USBH_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd90      	pop	{r4, r7, pc}

0800a282 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	795b      	ldrb	r3, [r3, #5]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	795b      	ldrb	r3, [r3, #5]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f002 fd51 	bl	800cd4a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	795b      	ldrb	r3, [r3, #5]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 fd7c 	bl	800cdac <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	791b      	ldrb	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00e      	beq.n	800a2e0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	791b      	ldrb	r3, [r3, #4]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f002 fd3e 	bl	800cd4a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	791b      	ldrb	r3, [r3, #4]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f002 fd69 	bl	800cdac <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f007 faf5 	bl	80118e4 <free>
    phost->pActiveClass->pData = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a300:	2200      	movs	r2, #0
 800a302:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a320:	2301      	movs	r3, #1
 800a322:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	7b9b      	ldrb	r3, [r3, #14]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d004      	beq.n	800a336 <USBH_MSC_ClassRequest+0x28>
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d03e      	beq.n	800a3ae <USBH_MSC_ClassRequest+0xa0>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d000      	beq.n	800a336 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800a334:	e04a      	b.n	800a3cc <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fcea 	bl	800ad14 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b03      	cmp	r3, #3
 800a348:	d104      	bne.n	800a354 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2200      	movs	r2, #0
 800a34e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d135      	bne.n	800a3c6 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d804      	bhi.n	800a36c <USBH_MSC_ClassRequest+0x5e>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	3301      	adds	r3, #1
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	e000      	b.n	800a36e <USBH_MSC_ClassRequest+0x60>
 800a36c:	2202      	movs	r2, #2
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a372:	2300      	movs	r3, #0
 800a374:	73bb      	strb	r3, [r7, #14]
 800a376:	e014      	b.n	800a3a2 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	2134      	movs	r1, #52	; 0x34
 800a37e:	fb01 f303 	mul.w	r3, r1, r3
 800a382:	4413      	add	r3, r2
 800a384:	3392      	adds	r3, #146	; 0x92
 800a386:	2202      	movs	r2, #2
 800a388:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	2134      	movs	r1, #52	; 0x34
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	4413      	add	r3, r2
 800a396:	33c1      	adds	r3, #193	; 0xc1
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	73bb      	strb	r3, [r7, #14]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	7bba      	ldrb	r2, [r7, #14]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d3e5      	bcc.n	800a378 <USBH_MSC_ClassRequest+0x6a>
      break;
 800a3ac:	e00b      	b.n	800a3c6 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f002 f878 	bl	800c4a6 <USBH_ClrFeature>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	7bda      	ldrb	r2, [r3, #15]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	739a      	strb	r2, [r3, #14]
      break;
 800a3c4:	e001      	b.n	800a3ca <USBH_MSC_ClassRequest+0xbc>
      break;
 800a3c6:	bf00      	nop
 800a3c8:	e000      	b.n	800a3cc <USBH_MSC_ClassRequest+0xbe>
      break;
 800a3ca:	bf00      	nop
  }

  return status;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	7b1b      	ldrb	r3, [r3, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <USBH_MSC_Process+0x2e>
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	f000 8271 	beq.w	800a8e6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a404:	e272      	b.n	800a8ec <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	429a      	cmp	r2, r3
 800a414:	f080 824f 	bcs.w	800a8b6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a41e:	4619      	mov	r1, r3
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	2334      	movs	r3, #52	; 0x34
 800a424:	fb03 f301 	mul.w	r3, r3, r1
 800a428:	4413      	add	r3, r2
 800a42a:	3391      	adds	r3, #145	; 0x91
 800a42c:	2201      	movs	r2, #1
 800a42e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a436:	4619      	mov	r1, r3
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	2334      	movs	r3, #52	; 0x34
 800a43c:	fb03 f301 	mul.w	r3, r3, r1
 800a440:	4413      	add	r3, r2
 800a442:	3390      	adds	r3, #144	; 0x90
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b08      	cmp	r3, #8
 800a448:	f200 8243 	bhi.w	800a8d2 <USBH_MSC_Process+0x4fa>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <USBH_MSC_Process+0x7c>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a479 	.word	0x0800a479
 800a458:	0800a8d3 	.word	0x0800a8d3
 800a45c:	0800a541 	.word	0x0800a541
 800a460:	0800a6c5 	.word	0x0800a6c5
 800a464:	0800a49f 	.word	0x0800a49f
 800a468:	0800a791 	.word	0x0800a791
 800a46c:	0800a8d3 	.word	0x0800a8d3
 800a470:	0800a8d3 	.word	0x0800a8d3
 800a474:	0800a8a5 	.word	0x0800a8a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a47e:	4619      	mov	r1, r3
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	2334      	movs	r3, #52	; 0x34
 800a484:	fb03 f301 	mul.w	r3, r3, r1
 800a488:	4413      	add	r3, r2
 800a48a:	3390      	adds	r3, #144	; 0x90
 800a48c:	2204      	movs	r2, #4
 800a48e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a49c:	e222      	b.n	800a8e4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4a4:	b2d9      	uxtb	r1, r3
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	2334      	movs	r3, #52	; 0x34
 800a4b0:	fb03 f302 	mul.w	r3, r3, r2
 800a4b4:	3398      	adds	r3, #152	; 0x98
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	3307      	adds	r3, #7
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 ff68 	bl	800b394 <USBH_MSC_SCSI_Inquiry>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10b      	bne.n	800a4e6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	2334      	movs	r3, #52	; 0x34
 800a4da:	fb03 f301 	mul.w	r3, r3, r1
 800a4de:	4413      	add	r3, r2
 800a4e0:	3390      	adds	r3, #144	; 0x90
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d10c      	bne.n	800a506 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	2334      	movs	r3, #52	; 0x34
 800a4f8:	fb03 f301 	mul.w	r3, r3, r1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	3390      	adds	r3, #144	; 0x90
 800a500:	2205      	movs	r2, #5
 800a502:	701a      	strb	r2, [r3, #0]
            break;
 800a504:	e1e7      	b.n	800a8d6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b04      	cmp	r3, #4
 800a50a:	f040 81e4 	bne.w	800a8d6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a514:	4619      	mov	r1, r3
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	2334      	movs	r3, #52	; 0x34
 800a51a:	fb03 f301 	mul.w	r3, r3, r1
 800a51e:	4413      	add	r3, r2
 800a520:	3390      	adds	r3, #144	; 0x90
 800a522:	2201      	movs	r2, #1
 800a524:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a52c:	4619      	mov	r1, r3
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	2334      	movs	r3, #52	; 0x34
 800a532:	fb03 f301 	mul.w	r3, r3, r1
 800a536:	4413      	add	r3, r2
 800a538:	3391      	adds	r3, #145	; 0x91
 800a53a:	2202      	movs	r2, #2
 800a53c:	701a      	strb	r2, [r3, #0]
            break;
 800a53e:	e1ca      	b.n	800a8d6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a546:	b2db      	uxtb	r3, r3
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fe64 	bl	800b218 <USBH_MSC_SCSI_TestUnitReady>
 800a550:	4603      	mov	r3, r0
 800a552:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d149      	bne.n	800a5ee <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a560:	4619      	mov	r1, r3
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	2334      	movs	r3, #52	; 0x34
 800a566:	fb03 f301 	mul.w	r3, r3, r1
 800a56a:	4413      	add	r3, r2
 800a56c:	3392      	adds	r3, #146	; 0x92
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00c      	beq.n	800a58e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a57a:	4619      	mov	r1, r3
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	2334      	movs	r3, #52	; 0x34
 800a580:	fb03 f301 	mul.w	r3, r3, r1
 800a584:	4413      	add	r3, r2
 800a586:	33c1      	adds	r3, #193	; 0xc1
 800a588:	2201      	movs	r2, #1
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	e00b      	b.n	800a5a6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a594:	4619      	mov	r1, r3
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	2334      	movs	r3, #52	; 0x34
 800a59a:	fb03 f301 	mul.w	r3, r3, r1
 800a59e:	4413      	add	r3, r2
 800a5a0:	33c1      	adds	r3, #193	; 0xc1
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	2334      	movs	r3, #52	; 0x34
 800a5b2:	fb03 f301 	mul.w	r3, r3, r1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	3390      	adds	r3, #144	; 0x90
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	2334      	movs	r3, #52	; 0x34
 800a5ca:	fb03 f301 	mul.w	r3, r3, r1
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3391      	adds	r3, #145	; 0x91
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5dc:	4619      	mov	r1, r3
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	2334      	movs	r3, #52	; 0x34
 800a5e2:	fb03 f301 	mul.w	r3, r3, r1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3392      	adds	r3, #146	; 0x92
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d14a      	bne.n	800a68a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	2334      	movs	r3, #52	; 0x34
 800a600:	fb03 f301 	mul.w	r3, r3, r1
 800a604:	4413      	add	r3, r2
 800a606:	3392      	adds	r3, #146	; 0x92
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d00c      	beq.n	800a628 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a614:	4619      	mov	r1, r3
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	2334      	movs	r3, #52	; 0x34
 800a61a:	fb03 f301 	mul.w	r3, r3, r1
 800a61e:	4413      	add	r3, r2
 800a620:	33c1      	adds	r3, #193	; 0xc1
 800a622:	2201      	movs	r2, #1
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e00b      	b.n	800a640 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a62e:	4619      	mov	r1, r3
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	2334      	movs	r3, #52	; 0x34
 800a634:	fb03 f301 	mul.w	r3, r3, r1
 800a638:	4413      	add	r3, r2
 800a63a:	33c1      	adds	r3, #193	; 0xc1
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a646:	4619      	mov	r1, r3
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	2334      	movs	r3, #52	; 0x34
 800a64c:	fb03 f301 	mul.w	r3, r3, r1
 800a650:	4413      	add	r3, r2
 800a652:	3390      	adds	r3, #144	; 0x90
 800a654:	2205      	movs	r2, #5
 800a656:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a65e:	4619      	mov	r1, r3
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	2334      	movs	r3, #52	; 0x34
 800a664:	fb03 f301 	mul.w	r3, r3, r1
 800a668:	4413      	add	r3, r2
 800a66a:	3391      	adds	r3, #145	; 0x91
 800a66c:	2201      	movs	r2, #1
 800a66e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a676:	4619      	mov	r1, r3
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	2334      	movs	r3, #52	; 0x34
 800a67c:	fb03 f301 	mul.w	r3, r3, r1
 800a680:	4413      	add	r3, r2
 800a682:	3392      	adds	r3, #146	; 0x92
 800a684:	2202      	movs	r2, #2
 800a686:	701a      	strb	r2, [r3, #0]
            break;
 800a688:	e127      	b.n	800a8da <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	f040 8124 	bne.w	800a8da <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a698:	4619      	mov	r1, r3
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	2334      	movs	r3, #52	; 0x34
 800a69e:	fb03 f301 	mul.w	r3, r3, r1
 800a6a2:	4413      	add	r3, r2
 800a6a4:	3390      	adds	r3, #144	; 0x90
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	2334      	movs	r3, #52	; 0x34
 800a6b6:	fb03 f301 	mul.w	r3, r3, r1
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3391      	adds	r3, #145	; 0x91
 800a6be:	2202      	movs	r2, #2
 800a6c0:	701a      	strb	r2, [r3, #0]
            break;
 800a6c2:	e10a      	b.n	800a8da <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6ca:	b2d9      	uxtb	r1, r3
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	2334      	movs	r3, #52	; 0x34
 800a6d6:	fb03 f302 	mul.w	r3, r3, r2
 800a6da:	3390      	adds	r3, #144	; 0x90
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fdda 	bl	800b29e <USBH_MSC_SCSI_ReadCapacity>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d120      	bne.n	800a736 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	2334      	movs	r3, #52	; 0x34
 800a700:	fb03 f301 	mul.w	r3, r3, r1
 800a704:	4413      	add	r3, r2
 800a706:	3390      	adds	r3, #144	; 0x90
 800a708:	2201      	movs	r2, #1
 800a70a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a712:	4619      	mov	r1, r3
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	2334      	movs	r3, #52	; 0x34
 800a718:	fb03 f301 	mul.w	r3, r3, r1
 800a71c:	4413      	add	r3, r2
 800a71e:	3391      	adds	r3, #145	; 0x91
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a72a:	3301      	adds	r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a734:	e0d3      	b.n	800a8de <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d10c      	bne.n	800a756 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a742:	4619      	mov	r1, r3
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	2334      	movs	r3, #52	; 0x34
 800a748:	fb03 f301 	mul.w	r3, r3, r1
 800a74c:	4413      	add	r3, r2
 800a74e:	3390      	adds	r3, #144	; 0x90
 800a750:	2205      	movs	r2, #5
 800a752:	701a      	strb	r2, [r3, #0]
            break;
 800a754:	e0c3      	b.n	800a8de <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	f040 80c0 	bne.w	800a8de <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a764:	4619      	mov	r1, r3
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	2334      	movs	r3, #52	; 0x34
 800a76a:	fb03 f301 	mul.w	r3, r3, r1
 800a76e:	4413      	add	r3, r2
 800a770:	3390      	adds	r3, #144	; 0x90
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a77c:	4619      	mov	r1, r3
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	2334      	movs	r3, #52	; 0x34
 800a782:	fb03 f301 	mul.w	r3, r3, r1
 800a786:	4413      	add	r3, r2
 800a788:	3391      	adds	r3, #145	; 0x91
 800a78a:	2202      	movs	r2, #2
 800a78c:	701a      	strb	r2, [r3, #0]
            break;
 800a78e:	e0a6      	b.n	800a8de <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a796:	b2d9      	uxtb	r1, r3
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a79e:	461a      	mov	r2, r3
 800a7a0:	2334      	movs	r3, #52	; 0x34
 800a7a2:	fb03 f302 	mul.w	r3, r3, r2
 800a7a6:	3398      	adds	r3, #152	; 0x98
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fe94 	bl	800b4de <USBH_MSC_SCSI_RequestSense>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d145      	bne.n	800a84c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	2334      	movs	r3, #52	; 0x34
 800a7cc:	fb03 f301 	mul.w	r3, r3, r1
 800a7d0:	4413      	add	r3, r2
 800a7d2:	339c      	adds	r3, #156	; 0x9c
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b06      	cmp	r3, #6
 800a7d8:	d00c      	beq.n	800a7f4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	2334      	movs	r3, #52	; 0x34
 800a7e6:	fb03 f301 	mul.w	r3, r3, r1
 800a7ea:	4413      	add	r3, r2
 800a7ec:	339c      	adds	r3, #156	; 0x9c
 800a7ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d117      	bne.n	800a824 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	f242 720f 	movw	r2, #9999	; 0x270f
 800a806:	4293      	cmp	r3, r2
 800a808:	d80c      	bhi.n	800a824 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a810:	4619      	mov	r1, r3
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	2334      	movs	r3, #52	; 0x34
 800a816:	fb03 f301 	mul.w	r3, r3, r1
 800a81a:	4413      	add	r3, r2
 800a81c:	3390      	adds	r3, #144	; 0x90
 800a81e:	2202      	movs	r2, #2
 800a820:	701a      	strb	r2, [r3, #0]
                  break;
 800a822:	e05f      	b.n	800a8e4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a82a:	4619      	mov	r1, r3
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	2334      	movs	r3, #52	; 0x34
 800a830:	fb03 f301 	mul.w	r3, r3, r1
 800a834:	4413      	add	r3, r2
 800a836:	3390      	adds	r3, #144	; 0x90
 800a838:	2201      	movs	r2, #1
 800a83a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a842:	3301      	adds	r3, #1
 800a844:	b29a      	uxth	r2, r3
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d10c      	bne.n	800a86c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a858:	4619      	mov	r1, r3
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	2334      	movs	r3, #52	; 0x34
 800a85e:	fb03 f301 	mul.w	r3, r3, r1
 800a862:	4413      	add	r3, r2
 800a864:	3390      	adds	r3, #144	; 0x90
 800a866:	2208      	movs	r2, #8
 800a868:	701a      	strb	r2, [r3, #0]
            break;
 800a86a:	e03a      	b.n	800a8e2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d137      	bne.n	800a8e2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a878:	4619      	mov	r1, r3
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	2334      	movs	r3, #52	; 0x34
 800a87e:	fb03 f301 	mul.w	r3, r3, r1
 800a882:	4413      	add	r3, r2
 800a884:	3390      	adds	r3, #144	; 0x90
 800a886:	2201      	movs	r2, #1
 800a888:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a890:	4619      	mov	r1, r3
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	2334      	movs	r3, #52	; 0x34
 800a896:	fb03 f301 	mul.w	r3, r3, r1
 800a89a:	4413      	add	r3, r2
 800a89c:	3391      	adds	r3, #145	; 0x91
 800a89e:	2202      	movs	r2, #2
 800a8a0:	701a      	strb	r2, [r3, #0]
            break;
 800a8a2:	e01e      	b.n	800a8e2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a8b4:	e016      	b.n	800a8e4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
      break;
 800a8d0:	e00c      	b.n	800a8ec <USBH_MSC_Process+0x514>
            break;
 800a8d2:	bf00      	nop
 800a8d4:	e00a      	b.n	800a8ec <USBH_MSC_Process+0x514>
            break;
 800a8d6:	bf00      	nop
 800a8d8:	e008      	b.n	800a8ec <USBH_MSC_Process+0x514>
            break;
 800a8da:	bf00      	nop
 800a8dc:	e006      	b.n	800a8ec <USBH_MSC_Process+0x514>
            break;
 800a8de:	bf00      	nop
 800a8e0:	e004      	b.n	800a8ec <USBH_MSC_Process+0x514>
            break;
 800a8e2:	bf00      	nop
      break;
 800a8e4:	e002      	b.n	800a8ec <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ea:	bf00      	nop
  }
  return error;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop

0800a8f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b088      	sub	sp, #32
 800a912:	af02      	add	r7, sp, #8
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a924:	2301      	movs	r3, #1
 800a926:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a928:	2301      	movs	r3, #1
 800a92a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	2134      	movs	r1, #52	; 0x34
 800a932:	fb01 f303 	mul.w	r3, r1, r3
 800a936:	4413      	add	r3, r2
 800a938:	3390      	adds	r3, #144	; 0x90
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b06      	cmp	r3, #6
 800a93e:	d004      	beq.n	800a94a <USBH_MSC_RdWrProcess+0x3c>
 800a940:	2b07      	cmp	r3, #7
 800a942:	d037      	beq.n	800a9b4 <USBH_MSC_RdWrProcess+0xa6>
 800a944:	2b05      	cmp	r3, #5
 800a946:	d06a      	beq.n	800aa1e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800a948:	e0a6      	b.n	800aa98 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a94a:	78f9      	ldrb	r1, [r7, #3]
 800a94c:	2300      	movs	r3, #0
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2300      	movs	r3, #0
 800a952:	2200      	movs	r2, #0
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fea6 	bl	800b6a6 <USBH_MSC_SCSI_Read>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10b      	bne.n	800a97c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	2134      	movs	r1, #52	; 0x34
 800a96a:	fb01 f303 	mul.w	r3, r1, r3
 800a96e:	4413      	add	r3, r2
 800a970:	3390      	adds	r3, #144	; 0x90
 800a972:	2201      	movs	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]
      break;
 800a97a:	e088      	b.n	800aa8e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d109      	bne.n	800a996 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	2134      	movs	r1, #52	; 0x34
 800a988:	fb01 f303 	mul.w	r3, r1, r3
 800a98c:	4413      	add	r3, r2
 800a98e:	3390      	adds	r3, #144	; 0x90
 800a990:	2205      	movs	r2, #5
 800a992:	701a      	strb	r2, [r3, #0]
      break;
 800a994:	e07b      	b.n	800aa8e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d178      	bne.n	800aa8e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a99c:	78fb      	ldrb	r3, [r7, #3]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	2134      	movs	r1, #52	; 0x34
 800a9a2:	fb01 f303 	mul.w	r3, r1, r3
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3390      	adds	r3, #144	; 0x90
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b2:	e06c      	b.n	800aa8e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a9b4:	78f9      	ldrb	r1, [r7, #3]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2200      	movs	r2, #0
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fe06 	bl	800b5d0 <USBH_MSC_SCSI_Write>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	2134      	movs	r1, #52	; 0x34
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	4413      	add	r3, r2
 800a9da:	3390      	adds	r3, #144	; 0x90
 800a9dc:	2201      	movs	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e4:	e055      	b.n	800aa92 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d109      	bne.n	800aa00 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	2134      	movs	r1, #52	; 0x34
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3390      	adds	r3, #144	; 0x90
 800a9fa:	2205      	movs	r2, #5
 800a9fc:	701a      	strb	r2, [r3, #0]
      break;
 800a9fe:	e048      	b.n	800aa92 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d145      	bne.n	800aa92 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa06:	78fb      	ldrb	r3, [r7, #3]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	2134      	movs	r1, #52	; 0x34
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	3390      	adds	r3, #144	; 0x90
 800aa14:	2208      	movs	r2, #8
 800aa16:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1c:	e039      	b.n	800aa92 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	2234      	movs	r2, #52	; 0x34
 800aa22:	fb02 f303 	mul.w	r3, r2, r3
 800aa26:	3398      	adds	r3, #152	; 0x98
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	1d1a      	adds	r2, r3, #4
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fd53 	bl	800b4de <USBH_MSC_SCSI_RequestSense>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d113      	bne.n	800aa6a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	2134      	movs	r1, #52	; 0x34
 800aa48:	fb01 f303 	mul.w	r3, r1, r3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	3390      	adds	r3, #144	; 0x90
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	2134      	movs	r1, #52	; 0x34
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	4413      	add	r3, r2
 800aa60:	3391      	adds	r3, #145	; 0x91
 800aa62:	2202      	movs	r2, #2
 800aa64:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800aa66:	2302      	movs	r3, #2
 800aa68:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d012      	beq.n	800aa96 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d10f      	bne.n	800aa96 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	2134      	movs	r1, #52	; 0x34
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	4413      	add	r3, r2
 800aa82:	3390      	adds	r3, #144	; 0x90
 800aa84:	2208      	movs	r2, #8
 800aa86:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aa88:	2302      	movs	r3, #2
 800aa8a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa8c:	e003      	b.n	800aa96 <USBH_MSC_RdWrProcess+0x188>
      break;
 800aa8e:	bf00      	nop
 800aa90:	e002      	b.n	800aa98 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800aa92:	bf00      	nop
 800aa94:	e000      	b.n	800aa98 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800aa96:	bf00      	nop

  }
  return error;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b0b      	cmp	r3, #11
 800aac0:	d10c      	bne.n	800aadc <USBH_MSC_UnitIsReady+0x3a>
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	2134      	movs	r1, #52	; 0x34
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	4413      	add	r3, r2
 800aace:	3391      	adds	r3, #145	; 0x91
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800aad6:	2301      	movs	r3, #1
 800aad8:	73fb      	strb	r3, [r7, #15]
 800aada:	e001      	b.n	800aae0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b086      	sub	sp, #24
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	607a      	str	r2, [r7, #4]
 800aafa:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b0b      	cmp	r3, #11
 800ab0e:	d10d      	bne.n	800ab2c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ab10:	7afb      	ldrb	r3, [r7, #11]
 800ab12:	2234      	movs	r2, #52	; 0x34
 800ab14:	fb02 f303 	mul.w	r3, r2, r3
 800ab18:	3390      	adds	r3, #144	; 0x90
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	2234      	movs	r2, #52	; 0x34
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f006 fee6 	bl	80118f4 <memcpy>
    return USBH_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e000      	b.n	800ab2e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ab2c:	2302      	movs	r3, #2
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b088      	sub	sp, #32
 800ab3a:	af02      	add	r7, sp, #8
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
 800ab42:	460b      	mov	r3, r1
 800ab44:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ab62:	2b0b      	cmp	r3, #11
 800ab64:	d109      	bne.n	800ab7a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	2134      	movs	r1, #52	; 0x34
 800ab6c:	fb01 f303 	mul.w	r3, r1, r3
 800ab70:	4413      	add	r3, r2
 800ab72:	3390      	adds	r3, #144	; 0x90
 800ab74:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d001      	beq.n	800ab7e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e040      	b.n	800ac00 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2206      	movs	r2, #6
 800ab82:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ab84:	7afb      	ldrb	r3, [r7, #11]
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	2134      	movs	r1, #52	; 0x34
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	4413      	add	r3, r2
 800ab90:	3390      	adds	r3, #144	; 0x90
 800ab92:	2206      	movs	r2, #6
 800ab94:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ab96:	7afb      	ldrb	r3, [r7, #11]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800aba0:	7af9      	ldrb	r1, [r7, #11]
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fd7b 	bl	800b6a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abb6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800abb8:	e016      	b.n	800abe8 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	1ad2      	subs	r2, r2, r3
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	f242 7110 	movw	r1, #10000	; 0x2710
 800abca:	fb01 f303 	mul.w	r3, r1, r3
 800abce:	429a      	cmp	r2, r3
 800abd0:	d805      	bhi.n	800abde <USBH_MSC_Read+0xa8>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2201      	movs	r2, #1
 800abe2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800abe4:	2302      	movs	r3, #2
 800abe6:	e00b      	b.n	800ac00 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	4619      	mov	r1, r3
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff fe8e 	bl	800a90e <USBH_MSC_RdWrProcess>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d0e0      	beq.n	800abba <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2201      	movs	r2, #1
 800abfc:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	460b      	mov	r3, r1
 800ac16:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00e      	beq.n	800ac4c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ac34:	2b0b      	cmp	r3, #11
 800ac36:	d109      	bne.n	800ac4c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	2134      	movs	r1, #52	; 0x34
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	4413      	add	r3, r2
 800ac44:	3390      	adds	r3, #144	; 0x90
 800ac46:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d001      	beq.n	800ac50 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e040      	b.n	800acd2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2207      	movs	r2, #7
 800ac54:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	2134      	movs	r1, #52	; 0x34
 800ac5c:	fb01 f303 	mul.w	r3, r1, r3
 800ac60:	4413      	add	r3, r2
 800ac62:	3390      	adds	r3, #144	; 0x90
 800ac64:	2207      	movs	r2, #7
 800ac66:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ac72:	7af9      	ldrb	r1, [r7, #11]
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 fca7 	bl	800b5d0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac88:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac8a:	e016      	b.n	800acba <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	1ad2      	subs	r2, r2, r3
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	f242 7110 	movw	r1, #10000	; 0x2710
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d805      	bhi.n	800acb0 <USBH_MSC_Write+0xa8>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d104      	bne.n	800acba <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2201      	movs	r2, #1
 800acb4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800acb6:	2302      	movs	r3, #2
 800acb8:	e00b      	b.n	800acd2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	4619      	mov	r1, r3
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7ff fe25 	bl	800a90e <USBH_MSC_RdWrProcess>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d0e0      	beq.n	800ac8c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2201      	movs	r2, #1
 800acce:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2221      	movs	r2, #33	; 0x21
 800ace6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	22ff      	movs	r2, #255	; 0xff
 800acec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800ad00:	2200      	movs	r2, #0
 800ad02:	2100      	movs	r1, #0
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fdae 	bl	800c866 <USBH_CtlReq>
 800ad0a:	4603      	mov	r3, r0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	22a1      	movs	r2, #161	; 0xa1
 800ad22:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	22fe      	movs	r2, #254	; 0xfe
 800ad28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fd90 	bl	800c866 <USBH_CtlReq>
 800ad46:	4603      	mov	r3, r0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <USBH_MSC_BOT_Init+0x3c>)
 800ad66:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <USBH_MSC_BOT_Init+0x40>)
 800ad6c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	43425355 	.word	0x43425355
 800ad90:	20304050 	.word	0x20304050

0800ad94 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ada0:	2301      	movs	r3, #1
 800ada2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ada4:	2301      	movs	r3, #1
 800ada6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ada8:	2301      	movs	r3, #1
 800adaa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adac:	2300      	movs	r3, #0
 800adae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adb6:	69db      	ldr	r3, [r3, #28]
 800adb8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adc4:	3b01      	subs	r3, #1
 800adc6:	2b0a      	cmp	r3, #10
 800adc8:	f200 81a1 	bhi.w	800b10e <USBH_MSC_BOT_Process+0x37a>
 800adcc:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <USBH_MSC_BOT_Process+0x40>)
 800adce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add2:	bf00      	nop
 800add4:	0800ae01 	.word	0x0800ae01
 800add8:	0800ae2b 	.word	0x0800ae2b
 800addc:	0800ae95 	.word	0x0800ae95
 800ade0:	0800aeb3 	.word	0x0800aeb3
 800ade4:	0800af37 	.word	0x0800af37
 800ade8:	0800af5b 	.word	0x0800af5b
 800adec:	0800aff5 	.word	0x0800aff5
 800adf0:	0800b011 	.word	0x0800b011
 800adf4:	0800b063 	.word	0x0800b063
 800adf8:	0800b093 	.word	0x0800b093
 800adfc:	0800b0f5 	.word	0x0800b0f5
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	78fa      	ldrb	r2, [r7, #3]
 800ae04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	795a      	ldrb	r2, [r3, #5]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	221f      	movs	r2, #31
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 ff2f 	bl	800cc86 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800ae28:	e180      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	795b      	ldrb	r3, [r3, #5]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f005 f9ef 	bl	8010214 <USBH_LL_GetURBState>
 800ae36:	4603      	mov	r3, r0
 800ae38:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ae3a:	7d3b      	ldrb	r3, [r7, #20]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d118      	bne.n	800ae72 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00f      	beq.n	800ae68 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da04      	bge.n	800ae5e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2203      	movs	r2, #3
 800ae58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae5c:	e159      	b.n	800b112 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2205      	movs	r2, #5
 800ae62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae66:	e154      	b.n	800b112 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2207      	movs	r2, #7
 800ae6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae70:	e14f      	b.n	800b112 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae72:	7d3b      	ldrb	r3, [r7, #20]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d104      	bne.n	800ae82 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae80:	e147      	b.n	800b112 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800ae82:	7d3b      	ldrb	r3, [r7, #20]
 800ae84:	2b05      	cmp	r3, #5
 800ae86:	f040 8144 	bne.w	800b112 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae92:	e13e      	b.n	800b112 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	895a      	ldrh	r2, [r3, #10]
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	791b      	ldrb	r3, [r3, #4]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 ff14 	bl	800ccd0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2204      	movs	r2, #4
 800aeac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aeb0:	e13c      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	791b      	ldrb	r3, [r3, #4]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f005 f9ab 	bl	8010214 <USBH_LL_GetURBState>
 800aebe:	4603      	mov	r3, r0
 800aec0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aec2:	7d3b      	ldrb	r3, [r7, #20]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d12d      	bne.n	800af24 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	8952      	ldrh	r2, [r2, #10]
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d910      	bls.n	800aef6 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	8952      	ldrh	r2, [r2, #10]
 800aede:	441a      	add	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	8952      	ldrh	r2, [r2, #10]
 800aeee:	1a9a      	subs	r2, r3, r2
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	65da      	str	r2, [r3, #92]	; 0x5c
 800aef4:	e002      	b.n	800aefc <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2200      	movs	r2, #0
 800aefa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	895a      	ldrh	r2, [r3, #10]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	791b      	ldrb	r3, [r3, #4]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 fedc 	bl	800ccd0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800af18:	e0fd      	b.n	800b116 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2207      	movs	r2, #7
 800af1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af22:	e0f8      	b.n	800b116 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800af24:	7d3b      	ldrb	r3, [r7, #20]
 800af26:	2b05      	cmp	r3, #5
 800af28:	f040 80f5 	bne.w	800b116 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2209      	movs	r2, #9
 800af30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af34:	e0ef      	b.n	800b116 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	891a      	ldrh	r2, [r3, #8]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	7958      	ldrb	r0, [r3, #5]
 800af44:	2301      	movs	r3, #1
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4603      	mov	r3, r0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 fe9b 	bl	800cc86 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2206      	movs	r2, #6
 800af54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af58:	e0e8      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	795b      	ldrb	r3, [r3, #5]
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f005 f957 	bl	8010214 <USBH_LL_GetURBState>
 800af66:	4603      	mov	r3, r0
 800af68:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800af6a:	7d3b      	ldrb	r3, [r7, #20]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d130      	bne.n	800afd2 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	8912      	ldrh	r2, [r2, #8]
 800af78:	4293      	cmp	r3, r2
 800af7a:	d910      	bls.n	800af9e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	8912      	ldrh	r2, [r2, #8]
 800af86:	441a      	add	r2, r3
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	8912      	ldrh	r2, [r2, #8]
 800af96:	1a9a      	subs	r2, r3, r2
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af9c:	e002      	b.n	800afa4 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2200      	movs	r2, #0
 800afa2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00d      	beq.n	800afc8 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	891a      	ldrh	r2, [r3, #8]
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	7958      	ldrb	r0, [r3, #5]
 800afba:	2301      	movs	r3, #1
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4603      	mov	r3, r0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f001 fe60 	bl	800cc86 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800afc6:	e0a8      	b.n	800b11a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2207      	movs	r2, #7
 800afcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afd0:	e0a3      	b.n	800b11a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afd2:	7d3b      	ldrb	r3, [r7, #20]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d104      	bne.n	800afe2 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2205      	movs	r2, #5
 800afdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afe0:	e09b      	b.n	800b11a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800afe2:	7d3b      	ldrb	r3, [r7, #20]
 800afe4:	2b05      	cmp	r3, #5
 800afe6:	f040 8098 	bne.w	800b11a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	220a      	movs	r2, #10
 800afee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aff2:	e092      	b.n	800b11a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	791b      	ldrb	r3, [r3, #4]
 800affe:	220d      	movs	r2, #13
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 fe65 	bl	800ccd0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2208      	movs	r2, #8
 800b00a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b00e:	e08d      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	791b      	ldrb	r3, [r3, #4]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f005 f8fc 	bl	8010214 <USBH_LL_GetURBState>
 800b01c:	4603      	mov	r3, r0
 800b01e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b020:	7d3b      	ldrb	r3, [r7, #20]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d115      	bne.n	800b052 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8aa 	bl	800b190 <USBH_MSC_DecodeCSW>
 800b03c:	4603      	mov	r3, r0
 800b03e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b040:	7d7b      	ldrb	r3, [r7, #21]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b04a:	e068      	b.n	800b11e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800b04c:	2302      	movs	r3, #2
 800b04e:	75fb      	strb	r3, [r7, #23]
      break;
 800b050:	e065      	b.n	800b11e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800b052:	7d3b      	ldrb	r3, [r7, #20]
 800b054:	2b05      	cmp	r3, #5
 800b056:	d162      	bne.n	800b11e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2209      	movs	r2, #9
 800b05c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b060:	e05d      	b.n	800b11e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	2200      	movs	r2, #0
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f865 	bl	800b138 <USBH_MSC_BOT_Abort>
 800b06e:	4603      	mov	r3, r0
 800b070:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b072:	7dbb      	ldrb	r3, [r7, #22]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d104      	bne.n	800b082 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2207      	movs	r2, #7
 800b07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b080:	e04f      	b.n	800b122 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b082:	7dbb      	ldrb	r3, [r7, #22]
 800b084:	2b04      	cmp	r3, #4
 800b086:	d14c      	bne.n	800b122 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	220b      	movs	r2, #11
 800b08c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b090:	e047      	b.n	800b122 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	2201      	movs	r2, #1
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f84d 	bl	800b138 <USBH_MSC_BOT_Abort>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b0a2:	7dbb      	ldrb	r3, [r7, #22]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d11d      	bne.n	800b0e4 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	795b      	ldrb	r3, [r3, #5]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f005 f90d 	bl	80102ce <USBH_LL_GetToggle>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	7959      	ldrb	r1, [r3, #5]
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	f1c3 0301 	rsb	r3, r3, #1
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f005 f8ce 	bl	8010268 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	791b      	ldrb	r3, [r3, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f005 f8c7 	bl	8010268 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2209      	movs	r2, #9
 800b0de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b0e2:	e020      	b.n	800b126 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800b0e4:	7dbb      	ldrb	r3, [r7, #22]
 800b0e6:	2b04      	cmp	r3, #4
 800b0e8:	d11d      	bne.n	800b126 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	220b      	movs	r2, #11
 800b0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0f2:	e018      	b.n	800b126 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff fdf0 	bl	800acda <USBH_MSC_BOT_REQ_Reset>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d112      	bne.n	800b12a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b10c:	e00d      	b.n	800b12a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800b10e:	bf00      	nop
 800b110:	e00c      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b112:	bf00      	nop
 800b114:	e00a      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b116:	bf00      	nop
 800b118:	e008      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b11a:	bf00      	nop
 800b11c:	e006      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b11e:	bf00      	nop
 800b120:	e004      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b122:	bf00      	nop
 800b124:	e002      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b126:	bf00      	nop
 800b128:	e000      	b.n	800b12c <USBH_MSC_BOT_Process+0x398>
      break;
 800b12a:	bf00      	nop
  }
  return status;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop

0800b138 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
 800b144:	4613      	mov	r3, r2
 800b146:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b156:	78bb      	ldrb	r3, [r7, #2]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <USBH_MSC_BOT_Abort+0x2a>
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d009      	beq.n	800b174 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b160:	e011      	b.n	800b186 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	79db      	ldrb	r3, [r3, #7]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 f99c 	bl	800c4a6 <USBH_ClrFeature>
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]
      break;
 800b172:	e008      	b.n	800b186 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	799b      	ldrb	r3, [r3, #6]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f001 f993 	bl	800c4a6 <USBH_ClrFeature>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]
      break;
 800b184:	bf00      	nop
  }
  return status;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b19e:	69db      	ldr	r3, [r3, #28]
 800b1a0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f004 ff9f 	bl	80100f0 <USBH_LL_GetLastXferSize>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b0d      	cmp	r3, #13
 800b1b6:	d002      	beq.n	800b1be <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	73fb      	strb	r3, [r7, #15]
 800b1bc:	e024      	b.n	800b208 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c2:	4a14      	ldr	r2, [pc, #80]	; (800b214 <USBH_MSC_DecodeCSW+0x84>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d11d      	bne.n	800b204 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d119      	bne.n	800b208 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
 800b1e2:	e011      	b.n	800b208 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d102      	bne.n	800b1f4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	73fb      	strb	r3, [r7, #15]
 800b1f2:	e009      	b.n	800b208 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d104      	bne.n	800b208 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b1fe:	2302      	movs	r3, #2
 800b200:	73fb      	strb	r3, [r7, #15]
 800b202:	e001      	b.n	800b208 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b204:	2302      	movs	r3, #2
 800b206:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	53425355 	.word	0x53425355

0800b218 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b224:	2302      	movs	r3, #2
 800b226:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d002      	beq.n	800b242 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d021      	beq.n	800b284 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b240:	e028      	b.n	800b294 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	220a      	movs	r2, #10
 800b254:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3363      	adds	r3, #99	; 0x63
 800b25c:	2210      	movs	r2, #16
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f006 fb52 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2202      	movs	r2, #2
 800b27a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b27e:	2301      	movs	r3, #1
 800b280:	73fb      	strb	r3, [r7, #15]
      break;
 800b282:	e007      	b.n	800b294 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b284:	78fb      	ldrb	r3, [r7, #3]
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff fd83 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]
      break;
 800b292:	bf00      	nop
  }

  return error;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b086      	sub	sp, #24
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d002      	beq.n	800b2ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d027      	beq.n	800b318 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b2c8:	e05f      	b.n	800b38a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2280      	movs	r2, #128	; 0x80
 800b2d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	220a      	movs	r2, #10
 800b2dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3363      	adds	r3, #99	; 0x63
 800b2e4:	2210      	movs	r2, #16
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f006 fb0e 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2225      	movs	r2, #37	; 0x25
 800b2f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2202      	movs	r2, #2
 800b302:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f103 0210 	add.w	r2, r3, #16
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b312:	2301      	movs	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
      break;
 800b316:	e038      	b.n	800b38a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	4619      	mov	r1, r3
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f7ff fd39 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b322:	4603      	mov	r3, r0
 800b324:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d12d      	bne.n	800b388 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b332:	3303      	adds	r3, #3
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33e:	3302      	adds	r3, #2
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	021b      	lsls	r3, r3, #8
 800b344:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b34c:	3301      	adds	r3, #1
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b352:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	061b      	lsls	r3, r3, #24
 800b35e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b36a:	3307      	adds	r3, #7
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b29a      	uxth	r2, r3
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b376:	3306      	adds	r3, #6
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	b29b      	uxth	r3, r3
 800b380:	4313      	orrs	r3, r2
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	809a      	strh	r2, [r3, #4]
      break;
 800b388:	bf00      	nop
  }

  return error;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	460b      	mov	r3, r1
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d002      	beq.n	800b3c0 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d03d      	beq.n	800b43a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b3be:	e089      	b.n	800b4d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2224      	movs	r2, #36	; 0x24
 800b3c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2280      	movs	r2, #128	; 0x80
 800b3ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	3363      	adds	r3, #99	; 0x63
 800b3da:	220a      	movs	r2, #10
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f006 fa93 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2212      	movs	r2, #18
 800b3e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
 800b3ee:	015b      	lsls	r3, r3, #5
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2224      	movs	r2, #36	; 0x24
 800b40c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f103 0210 	add.w	r2, r3, #16
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b434:	2301      	movs	r3, #1
 800b436:	75fb      	strb	r3, [r7, #23]
      break;
 800b438:	e04c      	b.n	800b4d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b43a:	7afb      	ldrb	r3, [r7, #11]
 800b43c:	4619      	mov	r1, r3
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff fca8 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b444:	4603      	mov	r3, r0
 800b446:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d141      	bne.n	800b4d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b44e:	2222      	movs	r2, #34	; 0x22
 800b450:	2100      	movs	r1, #0
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f006 fa59 	bl	801190a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 031f 	and.w	r3, r3, #31
 800b464:	b2da      	uxtb	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	095b      	lsrs	r3, r3, #5
 800b474:	b2da      	uxtb	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b480:	3301      	adds	r3, #1
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	b25b      	sxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	da03      	bge.n	800b492 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	709a      	strb	r2, [r3, #2]
 800b490:	e002      	b.n	800b498 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	1cd8      	adds	r0, r3, #3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	f006 fa24 	bl	80118f4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f103 000c 	add.w	r0, r3, #12
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	4619      	mov	r1, r3
 800b4be:	f006 fa19 	bl	80118f4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	331d      	adds	r3, #29
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b4cc:	3220      	adds	r2, #32
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	601a      	str	r2, [r3, #0]
      break;
 800b4d2:	bf00      	nop
  }

  return error;
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b500:	2b01      	cmp	r3, #1
 800b502:	d002      	beq.n	800b50a <USBH_MSC_SCSI_RequestSense+0x2c>
 800b504:	2b02      	cmp	r3, #2
 800b506:	d03d      	beq.n	800b584 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b508:	e05d      	b.n	800b5c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	220e      	movs	r2, #14
 800b50e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2280      	movs	r2, #128	; 0x80
 800b514:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	220a      	movs	r2, #10
 800b51c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	3363      	adds	r3, #99	; 0x63
 800b524:	2210      	movs	r2, #16
 800b526:	2100      	movs	r1, #0
 800b528:	4618      	mov	r0, r3
 800b52a:	f006 f9ee 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2203      	movs	r2, #3
 800b532:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	015b      	lsls	r3, r3, #5
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	220e      	movs	r2, #14
 800b556:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f103 0210 	add.w	r2, r3, #16
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b57e:	2301      	movs	r3, #1
 800b580:	75fb      	strb	r3, [r7, #23]
      break;
 800b582:	e020      	b.n	800b5c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b584:	7afb      	ldrb	r3, [r7, #11]
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fc03 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d115      	bne.n	800b5c4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b59e:	3302      	adds	r3, #2
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	f003 030f 	and.w	r3, r3, #15
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5b2:	7b1a      	ldrb	r2, [r3, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5be:	7b5a      	ldrb	r2, [r3, #13]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	709a      	strb	r2, [r3, #2]
      break;
 800b5c4:	bf00      	nop
  }

  return error;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	607a      	str	r2, [r7, #4]
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d002      	beq.n	800b5fe <USBH_MSC_SCSI_Write+0x2e>
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d047      	beq.n	800b68c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b5fc:	e04e      	b.n	800b69c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b604:	461a      	mov	r2, r3
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	fb03 f202 	mul.w	r2, r3, r2
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	220a      	movs	r2, #10
 800b61c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3363      	adds	r3, #99	; 0x63
 800b624:	2210      	movs	r2, #16
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f006 f96e 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	222a      	movs	r2, #42	; 0x2a
 800b632:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b636:	79fa      	ldrb	r2, [r7, #7]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b63e:	79ba      	ldrb	r2, [r7, #6]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b646:	797a      	ldrb	r2, [r7, #5]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b64e:	1d3b      	adds	r3, r7, #4
 800b650:	781a      	ldrb	r2, [r3, #0]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b658:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b662:	f107 0320 	add.w	r3, r7, #32
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2202      	movs	r2, #2
 800b67a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
      break;
 800b68a:	e007      	b.n	800b69c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b68c:	7afb      	ldrb	r3, [r7, #11]
 800b68e:	4619      	mov	r1, r3
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fb7f 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
      break;
 800b69a:	bf00      	nop
  }

  return error;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d002      	beq.n	800b6d4 <USBH_MSC_SCSI_Read+0x2e>
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d047      	beq.n	800b762 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b6d2:	e04e      	b.n	800b772 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	fb03 f202 	mul.w	r2, r3, r2
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2280      	movs	r2, #128	; 0x80
 800b6ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	220a      	movs	r2, #10
 800b6f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	3363      	adds	r3, #99	; 0x63
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f006 f903 	bl	801190a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2228      	movs	r2, #40	; 0x28
 800b708:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b70c:	79fa      	ldrb	r2, [r7, #7]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b714:	79ba      	ldrb	r2, [r7, #6]
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b71c:	797a      	ldrb	r2, [r7, #5]
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b724:	1d3b      	adds	r3, r7, #4
 800b726:	781a      	ldrb	r2, [r3, #0]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b72e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b738:	f107 0320 	add.w	r3, r7, #32
 800b73c:	781a      	ldrb	r2, [r3, #0]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2202      	movs	r2, #2
 800b750:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b75c:	2301      	movs	r3, #1
 800b75e:	75fb      	strb	r3, [r7, #23]
      break;
 800b760:	e007      	b.n	800b772 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b762:	7afb      	ldrb	r3, [r7, #11]
 800b764:	4619      	mov	r1, r3
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fb14 	bl	800ad94 <USBH_MSC_BOT_Process>
 800b76c:	4603      	mov	r3, r0
 800b76e:	75fb      	strb	r3, [r7, #23]
      break;
 800b770:	bf00      	nop
  }

  return error;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b790:	2302      	movs	r3, #2
 800b792:	e029      	b.n	800b7e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	79fa      	ldrb	r2, [r7, #7]
 800b798:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f81f 	bl	800b7f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d003      	beq.n	800b7e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f004 fbd3 	bl	800ff8c <USBH_LL_Init>

  return USBH_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e009      	b.n	800b816 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	33e0      	adds	r3, #224	; 0xe0
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	2200      	movs	r2, #0
 800b80e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3301      	adds	r3, #1
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b0e      	cmp	r3, #14
 800b81a:	d9f2      	bls.n	800b802 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	e009      	b.n	800b836 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4413      	add	r3, r2
 800b828:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	3301      	adds	r3, #1
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b83c:	d3f1      	bcc.n	800b822 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2240      	movs	r2, #64	; 0x40
 800b862:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d016      	beq.n	800b8da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10e      	bne.n	800b8d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b8bc:	1c59      	adds	r1, r3, #1
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	33de      	adds	r3, #222	; 0xde
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
 800b8d2:	e004      	b.n	800b8de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	73fb      	strb	r3, [r7, #15]
 800b8d8:	e001      	b.n	800b8de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	429a      	cmp	r2, r3
 800b906:	d204      	bcs.n	800b912 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b910:	e001      	b.n	800b916 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b912:	2302      	movs	r3, #2
 800b914:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b916:	7bfb      	ldrb	r3, [r7, #15]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	4608      	mov	r0, r1
 800b92e:	4611      	mov	r1, r2
 800b930:	461a      	mov	r2, r3
 800b932:	4603      	mov	r3, r0
 800b934:	70fb      	strb	r3, [r7, #3]
 800b936:	460b      	mov	r3, r1
 800b938:	70bb      	strb	r3, [r7, #2]
 800b93a:	4613      	mov	r3, r2
 800b93c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b942:	2300      	movs	r3, #0
 800b944:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b94c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b94e:	e025      	b.n	800b99c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	221a      	movs	r2, #26
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	3308      	adds	r3, #8
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	3302      	adds	r3, #2
 800b960:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	795b      	ldrb	r3, [r3, #5]
 800b966:	78fa      	ldrb	r2, [r7, #3]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d002      	beq.n	800b972 <USBH_FindInterface+0x4e>
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	2bff      	cmp	r3, #255	; 0xff
 800b970:	d111      	bne.n	800b996 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b976:	78ba      	ldrb	r2, [r7, #2]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d002      	beq.n	800b982 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b97c:	78bb      	ldrb	r3, [r7, #2]
 800b97e:	2bff      	cmp	r3, #255	; 0xff
 800b980:	d109      	bne.n	800b996 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b986:	787a      	ldrb	r2, [r7, #1]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d002      	beq.n	800b992 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b98c:	787b      	ldrb	r3, [r7, #1]
 800b98e:	2bff      	cmp	r3, #255	; 0xff
 800b990:	d101      	bne.n	800b996 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	e006      	b.n	800b9a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	3301      	adds	r3, #1
 800b99a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d9d6      	bls.n	800b950 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b9a2:	23ff      	movs	r3, #255	; 0xff
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	371c      	adds	r7, #28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f004 fb23 	bl	8010004 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b9be:	2101      	movs	r1, #1
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f004 fc3a 	bl	801023a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af04      	add	r7, sp, #16
 800b9d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d102      	bne.n	800b9f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b0b      	cmp	r3, #11
 800b9fa:	f200 81b3 	bhi.w	800bd64 <USBH_Process+0x394>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <USBH_Process+0x34>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba35 	.word	0x0800ba35
 800ba08:	0800ba67 	.word	0x0800ba67
 800ba0c:	0800bacf 	.word	0x0800bacf
 800ba10:	0800bcff 	.word	0x0800bcff
 800ba14:	0800bd65 	.word	0x0800bd65
 800ba18:	0800bb73 	.word	0x0800bb73
 800ba1c:	0800bca5 	.word	0x0800bca5
 800ba20:	0800bba9 	.word	0x0800bba9
 800ba24:	0800bbc9 	.word	0x0800bbc9
 800ba28:	0800bbe9 	.word	0x0800bbe9
 800ba2c:	0800bc17 	.word	0x0800bc17
 800ba30:	0800bce7 	.word	0x0800bce7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 8193 	beq.w	800bd68 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ba48:	20c8      	movs	r0, #200	; 0xc8
 800ba4a:	f004 fc73 	bl	8010334 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f004 fb33 	bl	80100ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba64:	e180      	b.n	800bd68 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d107      	bne.n	800ba80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ba7e:	e182      	b.n	800bd86 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ba86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba8a:	d914      	bls.n	800bab6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ba92:	3301      	adds	r3, #1
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d903      	bls.n	800baae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	220d      	movs	r2, #13
 800baaa:	701a      	strb	r2, [r3, #0]
      break;
 800baac:	e16b      	b.n	800bd86 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	701a      	strb	r2, [r3, #0]
      break;
 800bab4:	e167      	b.n	800bd86 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800babc:	f103 020a 	add.w	r2, r3, #10
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bac6:	200a      	movs	r0, #10
 800bac8:	f004 fc34 	bl	8010334 <USBH_Delay>
      break;
 800bacc:	e15b      	b.n	800bd86 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d005      	beq.n	800bae4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bade:	2104      	movs	r1, #4
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bae4:	2064      	movs	r0, #100	; 0x64
 800bae6:	f004 fc25 	bl	8010334 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f004 fac0 	bl	8010070 <USBH_LL_GetSpeed>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2205      	movs	r2, #5
 800bafe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 f931 	bl	800cd6a <USBH_AllocPipe>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bb10:	2180      	movs	r1, #128	; 0x80
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 f929 	bl	800cd6a <USBH_AllocPipe>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	7919      	ldrb	r1, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bb34:	b292      	uxth	r2, r2
 800bb36:	9202      	str	r2, [sp, #8]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	9201      	str	r2, [sp, #4]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2280      	movs	r2, #128	; 0x80
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 f8e2 	bl	800cd0c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	7959      	ldrb	r1, [r3, #5]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bb5c:	b292      	uxth	r2, r2
 800bb5e:	9202      	str	r2, [sp, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	9201      	str	r2, [sp, #4]
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4603      	mov	r3, r0
 800bb68:	2200      	movs	r2, #0
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f001 f8ce 	bl	800cd0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb70:	e109      	b.n	800bd86 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f90c 	bl	800bd90 <USBH_HandleEnum>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f040 80f3 	bne.w	800bd6c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d103      	bne.n	800bba0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2208      	movs	r2, #8
 800bb9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bb9e:	e0e5      	b.n	800bd6c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2207      	movs	r2, #7
 800bba4:	701a      	strb	r2, [r3, #0]
      break;
 800bba6:	e0e1      	b.n	800bd6c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80de 	beq.w	800bd70 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbba:	2101      	movs	r1, #1
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2208      	movs	r2, #8
 800bbc4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bbc6:	e0d3      	b.n	800bd70 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fc20 	bl	800c418 <USBH_SetCfg>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 80ca 	bne.w	800bd74 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2209      	movs	r2, #9
 800bbe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bbe6:	e0c5      	b.n	800bd74 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bbee:	f003 0320 	and.w	r3, r3, #32
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00b      	beq.n	800bc0e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fc30 	bl	800c45e <USBH_SetFeature>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 80b9 	bne.w	800bd78 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	220a      	movs	r2, #10
 800bc0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bc0c:	e0b4      	b.n	800bd78 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	220a      	movs	r2, #10
 800bc12:	701a      	strb	r2, [r3, #0]
      break;
 800bc14:	e0b0      	b.n	800bd78 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 80ad 	beq.w	800bd7c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]
 800bc2e:	e016      	b.n	800bc5e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bc30:	7bfa      	ldrb	r2, [r7, #15]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	32de      	adds	r2, #222	; 0xde
 800bc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3a:	791a      	ldrb	r2, [r3, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d108      	bne.n	800bc58 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bc46:	7bfa      	ldrb	r2, [r7, #15]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	32de      	adds	r2, #222	; 0xde
 800bc4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bc56:	e005      	b.n	800bc64 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0e5      	beq.n	800bc30 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d016      	beq.n	800bc9c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2206      	movs	r2, #6
 800bc84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc8c:	2103      	movs	r1, #3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bc92:	e073      	b.n	800bd7c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	220d      	movs	r2, #13
 800bc98:	701a      	strb	r2, [r3, #0]
      break;
 800bc9a:	e06f      	b.n	800bd7c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	220d      	movs	r2, #13
 800bca0:	701a      	strb	r2, [r3, #0]
      break;
 800bca2:	e06b      	b.n	800bd7c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d017      	beq.n	800bcde <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d103      	bne.n	800bcce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	220b      	movs	r2, #11
 800bcca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bccc:	e058      	b.n	800bd80 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d154      	bne.n	800bd80 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	220d      	movs	r2, #13
 800bcda:	701a      	strb	r2, [r3, #0]
      break;
 800bcdc:	e050      	b.n	800bd80 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	220d      	movs	r2, #13
 800bce2:	701a      	strb	r2, [r3, #0]
      break;
 800bce4:	e04c      	b.n	800bd80 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d049      	beq.n	800bd84 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
      }
      break;
 800bcfc:	e042      	b.n	800bd84 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fd72 	bl	800b7f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d009      	beq.n	800bd2a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd3a:	2105      	movs	r1, #5
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d107      	bne.n	800bd5c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff fe2b 	bl	800b9b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bd5a:	e014      	b.n	800bd86 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f004 f951 	bl	8010004 <USBH_LL_Start>
      break;
 800bd62:	e010      	b.n	800bd86 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800bd64:	bf00      	nop
 800bd66:	e00e      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd68:	bf00      	nop
 800bd6a:	e00c      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd6c:	bf00      	nop
 800bd6e:	e00a      	b.n	800bd86 <USBH_Process+0x3b6>
    break;
 800bd70:	bf00      	nop
 800bd72:	e008      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd74:	bf00      	nop
 800bd76:	e006      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd78:	bf00      	nop
 800bd7a:	e004      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd7c:	bf00      	nop
 800bd7e:	e002      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd80:	bf00      	nop
 800bd82:	e000      	b.n	800bd86 <USBH_Process+0x3b6>
      break;
 800bd84:	bf00      	nop
  }
  return USBH_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af04      	add	r7, sp, #16
 800bd96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	2b07      	cmp	r3, #7
 800bda6:	f200 81c1 	bhi.w	800c12c <USBH_HandleEnum+0x39c>
 800bdaa:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <USBH_HandleEnum+0x20>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800bdd1 	.word	0x0800bdd1
 800bdb4:	0800be8f 	.word	0x0800be8f
 800bdb8:	0800bef9 	.word	0x0800bef9
 800bdbc:	0800bf87 	.word	0x0800bf87
 800bdc0:	0800bff1 	.word	0x0800bff1
 800bdc4:	0800c061 	.word	0x0800c061
 800bdc8:	0800c0a7 	.word	0x0800c0a7
 800bdcc:	0800c0ed 	.word	0x0800c0ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bdd0:	2108      	movs	r1, #8
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fa50 	bl	800c278 <USBH_Get_DevDesc>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d130      	bne.n	800be44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	7919      	ldrb	r1, [r3, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800be06:	b292      	uxth	r2, r2
 800be08:	9202      	str	r2, [sp, #8]
 800be0a:	2200      	movs	r2, #0
 800be0c:	9201      	str	r2, [sp, #4]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4603      	mov	r3, r0
 800be12:	2280      	movs	r2, #128	; 0x80
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 ff79 	bl	800cd0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	7959      	ldrb	r1, [r3, #5]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be2e:	b292      	uxth	r2, r2
 800be30:	9202      	str	r2, [sp, #8]
 800be32:	2200      	movs	r2, #0
 800be34:	9201      	str	r2, [sp, #4]
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	4603      	mov	r3, r0
 800be3a:	2200      	movs	r2, #0
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 ff65 	bl	800cd0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be42:	e175      	b.n	800c130 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b03      	cmp	r3, #3
 800be48:	f040 8172 	bne.w	800c130 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be52:	3301      	adds	r3, #1
 800be54:	b2da      	uxtb	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be62:	2b03      	cmp	r3, #3
 800be64:	d903      	bls.n	800be6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	220d      	movs	r2, #13
 800be6a:	701a      	strb	r2, [r3, #0]
      break;
 800be6c:	e160      	b.n	800c130 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	795b      	ldrb	r3, [r3, #5]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 ff99 	bl	800cdac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 ff93 	bl	800cdac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
      break;
 800be8c:	e150      	b.n	800c130 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800be8e:	2112      	movs	r1, #18
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f9f1 	bl	800c278 <USBH_Get_DevDesc>
 800be96:	4603      	mov	r3, r0
 800be98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be9a:	7bbb      	ldrb	r3, [r7, #14]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d103      	bne.n	800bea8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bea6:	e145      	b.n	800c134 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	f040 8142 	bne.w	800c134 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beb6:	3301      	adds	r3, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d903      	bls.n	800bed2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	220d      	movs	r2, #13
 800bece:	701a      	strb	r2, [r3, #0]
      break;
 800bed0:	e130      	b.n	800c134 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	795b      	ldrb	r3, [r3, #5]
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 ff67 	bl	800cdac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	791b      	ldrb	r3, [r3, #4]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 ff61 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]
      break;
 800bef6:	e11d      	b.n	800c134 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bef8:	2101      	movs	r1, #1
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fa68 	bl	800c3d0 <USBH_SetAddress>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d132      	bne.n	800bf70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bf0a:	2002      	movs	r0, #2
 800bf0c:	f004 fa12 	bl	8010334 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7919      	ldrb	r1, [r3, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bf32:	b292      	uxth	r2, r2
 800bf34:	9202      	str	r2, [sp, #8]
 800bf36:	2200      	movs	r2, #0
 800bf38:	9201      	str	r2, [sp, #4]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2280      	movs	r2, #128	; 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fee3 	bl	800cd0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7959      	ldrb	r1, [r3, #5]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf5a:	b292      	uxth	r2, r2
 800bf5c:	9202      	str	r2, [sp, #8]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	9201      	str	r2, [sp, #4]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	4603      	mov	r3, r0
 800bf66:	2200      	movs	r2, #0
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fecf 	bl	800cd0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bf6e:	e0e3      	b.n	800c138 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	f040 80e0 	bne.w	800c138 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	220d      	movs	r2, #13
 800bf7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	705a      	strb	r2, [r3, #1]
      break;
 800bf84:	e0d8      	b.n	800c138 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bf86:	2109      	movs	r1, #9
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f99d 	bl	800c2c8 <USBH_Get_CfgDesc>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bf9e:	e0cd      	b.n	800c13c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	f040 80ca 	bne.w	800c13c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfae:	3301      	adds	r3, #1
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d903      	bls.n	800bfca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	220d      	movs	r2, #13
 800bfc6:	701a      	strb	r2, [r3, #0]
      break;
 800bfc8:	e0b8      	b.n	800c13c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	795b      	ldrb	r3, [r3, #5]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 feeb 	bl	800cdac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	791b      	ldrb	r3, [r3, #4]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fee5 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	701a      	strb	r2, [r3, #0]
      break;
 800bfee:	e0a5      	b.n	800c13c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f965 	bl	800c2c8 <USBH_Get_CfgDesc>
 800bffe:	4603      	mov	r3, r0
 800c000:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d103      	bne.n	800c010 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2205      	movs	r2, #5
 800c00c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c00e:	e097      	b.n	800c140 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	2b03      	cmp	r3, #3
 800c014:	f040 8094 	bne.w	800c140 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c01e:	3301      	adds	r3, #1
 800c020:	b2da      	uxtb	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d903      	bls.n	800c03a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	220d      	movs	r2, #13
 800c036:	701a      	strb	r2, [r3, #0]
      break;
 800c038:	e082      	b.n	800c140 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	795b      	ldrb	r3, [r3, #5]
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 feb3 	bl	800cdac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	791b      	ldrb	r3, [r3, #4]
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fead 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	701a      	strb	r2, [r3, #0]
      break;
 800c05e:	e06f      	b.n	800c140 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c066:	2b00      	cmp	r3, #0
 800c068:	d019      	beq.n	800c09e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c076:	23ff      	movs	r3, #255	; 0xff
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f949 	bl	800c310 <USBH_Get_StringDesc>
 800c07e:	4603      	mov	r3, r0
 800c080:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d103      	bne.n	800c090 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2206      	movs	r2, #6
 800c08c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c08e:	e059      	b.n	800c144 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	2b03      	cmp	r3, #3
 800c094:	d156      	bne.n	800c144 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2206      	movs	r2, #6
 800c09a:	705a      	strb	r2, [r3, #1]
      break;
 800c09c:	e052      	b.n	800c144 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2206      	movs	r2, #6
 800c0a2:	705a      	strb	r2, [r3, #1]
      break;
 800c0a4:	e04e      	b.n	800c144 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d019      	beq.n	800c0e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c0bc:	23ff      	movs	r3, #255	; 0xff
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f926 	bl	800c310 <USBH_Get_StringDesc>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d103      	bne.n	800c0d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2207      	movs	r2, #7
 800c0d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c0d4:	e038      	b.n	800c148 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d135      	bne.n	800c148 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2207      	movs	r2, #7
 800c0e0:	705a      	strb	r2, [r3, #1]
      break;
 800c0e2:	e031      	b.n	800c148 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2207      	movs	r2, #7
 800c0e8:	705a      	strb	r2, [r3, #1]
      break;
 800c0ea:	e02d      	b.n	800c148 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d017      	beq.n	800c126 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c102:	23ff      	movs	r3, #255	; 0xff
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f903 	bl	800c310 <USBH_Get_StringDesc>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c118:	e018      	b.n	800c14c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d115      	bne.n	800c14c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
      break;
 800c124:	e012      	b.n	800c14c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
      break;
 800c12a:	e00f      	b.n	800c14c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c12c:	bf00      	nop
 800c12e:	e00e      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c130:	bf00      	nop
 800c132:	e00c      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c134:	bf00      	nop
 800c136:	e00a      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c138:	bf00      	nop
 800c13a:	e008      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c13c:	bf00      	nop
 800c13e:	e006      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c140:	bf00      	nop
 800c142:	e004      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c144:	bf00      	nop
 800c146:	e002      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c148:	bf00      	nop
 800c14a:	e000      	b.n	800c14e <USBH_HandleEnum+0x3be>
      break;
 800c14c:	bf00      	nop
  }
  return Status;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f804 	bl	800c19a <USBH_HandleSof>
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b0b      	cmp	r3, #11
 800c1aa:	d10a      	bne.n	800c1c2 <USBH_HandleSof+0x28>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c1da:	bf00      	nop
}
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c1f6:	bf00      	nop
}
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f003 fef2 	bl	801003a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	791b      	ldrb	r3, [r3, #4]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fda5 	bl	800cdac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	795b      	ldrb	r3, [r3, #5]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fd9f 	bl	800cdac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c28a:	78fb      	ldrb	r3, [r7, #3]
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	4613      	mov	r3, r2
 800c292:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c296:	2100      	movs	r1, #0
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f864 	bl	800c366 <USBH_GetDescriptor>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	73fb      	strb	r3, [r7, #15]
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2b4:	78fa      	ldrb	r2, [r7, #3]
 800c2b6:	b292      	uxth	r2, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f000 f918 	bl	800c4ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	331c      	adds	r3, #28
 800c2d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c2da:	887b      	ldrh	r3, [r7, #2]
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f83d 	bl	800c366 <USBH_GetDescriptor>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	72fb      	strb	r3, [r7, #11]
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d107      	bne.n	800c306 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c2fc:	887a      	ldrh	r2, [r7, #2]
 800c2fe:	68f9      	ldr	r1, [r7, #12]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f964 	bl	800c5ce <USBH_ParseCfgDesc>
  }

  return status;
 800c306:	7afb      	ldrb	r3, [r7, #11]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af02      	add	r7, sp, #8
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	607a      	str	r2, [r7, #4]
 800c31a:	461a      	mov	r2, r3
 800c31c:	460b      	mov	r3, r1
 800c31e:	72fb      	strb	r3, [r7, #11]
 800c320:	4613      	mov	r3, r2
 800c322:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c324:	7afb      	ldrb	r3, [r7, #11]
 800c326:	b29b      	uxth	r3, r3
 800c328:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c32c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c334:	893b      	ldrh	r3, [r7, #8]
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	460b      	mov	r3, r1
 800c33a:	2100      	movs	r1, #0
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 f812 	bl	800c366 <USBH_GetDescriptor>
 800c342:	4603      	mov	r3, r0
 800c344:	75fb      	strb	r3, [r7, #23]
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d107      	bne.n	800c35c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c352:	893a      	ldrh	r2, [r7, #8]
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fa37 	bl	800c7ca <USBH_ParseStringDesc>
  }

  return status;
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	607b      	str	r3, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	72fb      	strb	r3, [r7, #11]
 800c374:	4613      	mov	r3, r2
 800c376:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	789b      	ldrb	r3, [r3, #2]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d11c      	bne.n	800c3ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c386:	b2da      	uxtb	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2206      	movs	r2, #6
 800c390:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	893a      	ldrh	r2, [r7, #8]
 800c396:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c398:	893b      	ldrh	r3, [r7, #8]
 800c39a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c39e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3a2:	d104      	bne.n	800c3ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f240 4209 	movw	r2, #1033	; 0x409
 800c3aa:	829a      	strh	r2, [r3, #20]
 800c3ac:	e002      	b.n	800c3b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8b3a      	ldrh	r2, [r7, #24]
 800c3b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c3ba:	8b3b      	ldrh	r3, [r7, #24]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 fa50 	bl	800c866 <USBH_CtlReq>
 800c3c6:	4603      	mov	r3, r0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	789b      	ldrb	r3, [r3, #2]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d10f      	bne.n	800c404 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2205      	movs	r2, #5
 800c3ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c404:	2200      	movs	r2, #0
 800c406:	2100      	movs	r1, #0
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa2c 	bl	800c866 <USBH_CtlReq>
 800c40e:	4603      	mov	r3, r0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	789b      	ldrb	r3, [r3, #2]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d10e      	bne.n	800c44a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2209      	movs	r2, #9
 800c436:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	887a      	ldrh	r2, [r7, #2]
 800c43c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c44a:	2200      	movs	r2, #0
 800c44c:	2100      	movs	r1, #0
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa09 	bl	800c866 <USBH_CtlReq>
 800c454:	4603      	mov	r3, r0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	789b      	ldrb	r3, [r3, #2]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d10f      	bne.n	800c492 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2203      	movs	r2, #3
 800c47c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c47e:	78fb      	ldrb	r3, [r7, #3]
 800c480:	b29a      	uxth	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c492:	2200      	movs	r2, #0
 800c494:	2100      	movs	r1, #0
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f9e5 	bl	800c866 <USBH_CtlReq>
 800c49c:	4603      	mov	r3, r0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	789b      	ldrb	r3, [r3, #2]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d10f      	bne.n	800c4da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2202      	movs	r2, #2
 800c4be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2100      	movs	r1, #0
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f9c1 	bl	800c866 <USBH_CtlReq>
 800c4e4:	4603      	mov	r3, r0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	785a      	ldrb	r2, [r3, #1]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	3302      	adds	r3, #2
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b29a      	uxth	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	3303      	adds	r3, #3
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	021b      	lsls	r3, r3, #8
 800c51e:	b29b      	uxth	r3, r3
 800c520:	4313      	orrs	r3, r2
 800c522:	b29a      	uxth	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	791a      	ldrb	r2, [r3, #4]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	795a      	ldrb	r2, [r3, #5]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	799a      	ldrb	r2, [r3, #6]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	79da      	ldrb	r2, [r3, #7]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c548:	88fb      	ldrh	r3, [r7, #6]
 800c54a:	2b08      	cmp	r3, #8
 800c54c:	d939      	bls.n	800c5c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	3308      	adds	r3, #8
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	b29a      	uxth	r2, r3
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	3309      	adds	r3, #9
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	b29b      	uxth	r3, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	330a      	adds	r3, #10
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	b29a      	uxth	r2, r3
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	330b      	adds	r3, #11
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	b29a      	uxth	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	330c      	adds	r3, #12
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	330d      	adds	r3, #13
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	b29b      	uxth	r3, r3
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	b29b      	uxth	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	7b9a      	ldrb	r2, [r3, #14]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	7bda      	ldrb	r2, [r3, #15]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	7c1a      	ldrb	r2, [r3, #16]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	7c5a      	ldrb	r2, [r3, #17]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	745a      	strb	r2, [r3, #17]
  }
}
 800c5c2:	bf00      	nop
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b08a      	sub	sp, #40	; 0x28
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	781a      	ldrb	r2, [r3, #0]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	785a      	ldrb	r2, [r3, #1]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3302      	adds	r3, #2
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	b29a      	uxth	r2, r3
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	3303      	adds	r3, #3
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	b29b      	uxth	r3, r3
 800c614:	4313      	orrs	r3, r2
 800c616:	b29a      	uxth	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	791a      	ldrb	r2, [r3, #4]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	795a      	ldrb	r2, [r3, #5]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	799a      	ldrb	r2, [r3, #6]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	79da      	ldrb	r2, [r3, #7]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	7a1a      	ldrb	r2, [r3, #8]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c644:	88fb      	ldrh	r3, [r7, #6]
 800c646:	2b09      	cmp	r3, #9
 800c648:	d95f      	bls.n	800c70a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c64a:	2309      	movs	r3, #9
 800c64c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c64e:	2300      	movs	r3, #0
 800c650:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c652:	e051      	b.n	800c6f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c654:	f107 0316 	add.w	r3, r7, #22
 800c658:	4619      	mov	r1, r3
 800c65a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c65c:	f000 f8e8 	bl	800c830 <USBH_GetNextDesc>
 800c660:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	785b      	ldrb	r3, [r3, #1]
 800c666:	2b04      	cmp	r3, #4
 800c668:	d146      	bne.n	800c6f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c66a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c66e:	221a      	movs	r2, #26
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	3308      	adds	r3, #8
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4413      	add	r3, r2
 800c67a:	3302      	adds	r3, #2
 800c67c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c67e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c680:	69f8      	ldr	r0, [r7, #28]
 800c682:	f000 f846 	bl	800c712 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c690:	e022      	b.n	800c6d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c692:	f107 0316 	add.w	r3, r7, #22
 800c696:	4619      	mov	r1, r3
 800c698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c69a:	f000 f8c9 	bl	800c830 <USBH_GetNextDesc>
 800c69e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2b05      	cmp	r3, #5
 800c6a6:	d117      	bne.n	800c6d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c6a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c6b0:	3201      	adds	r2, #1
 800c6b2:	00d2      	lsls	r2, r2, #3
 800c6b4:	211a      	movs	r1, #26
 800c6b6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	3308      	adds	r3, #8
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c6c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6c8:	69b8      	ldr	r0, [r7, #24]
 800c6ca:	f000 f851 	bl	800c770 <USBH_ParseEPDesc>
            ep_ix++;
 800c6ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	791b      	ldrb	r3, [r3, #4]
 800c6dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d204      	bcs.n	800c6ee <USBH_ParseCfgDesc+0x120>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	885a      	ldrh	r2, [r3, #2]
 800c6e8:	8afb      	ldrh	r3, [r7, #22]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d8d1      	bhi.n	800c692 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c6f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d804      	bhi.n	800c70a <USBH_ParseCfgDesc+0x13c>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	885a      	ldrh	r2, [r3, #2]
 800c704:	8afb      	ldrh	r3, [r7, #22]
 800c706:	429a      	cmp	r2, r3
 800c708:	d8a4      	bhi.n	800c654 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c70a:	bf00      	nop
 800c70c:	3728      	adds	r7, #40	; 0x28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	781a      	ldrb	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	785a      	ldrb	r2, [r3, #1]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	789a      	ldrb	r2, [r3, #2]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	78da      	ldrb	r2, [r3, #3]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	791a      	ldrb	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	795a      	ldrb	r2, [r3, #5]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	799a      	ldrb	r2, [r3, #6]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	79da      	ldrb	r2, [r3, #7]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	7a1a      	ldrb	r2, [r3, #8]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	721a      	strb	r2, [r3, #8]
}
 800c764:	bf00      	nop
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	785a      	ldrb	r2, [r3, #1]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	789a      	ldrb	r2, [r3, #2]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	78da      	ldrb	r2, [r3, #3]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	3304      	adds	r3, #4
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	799a      	ldrb	r2, [r3, #6]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	719a      	strb	r2, [r3, #6]
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b087      	sub	sp, #28
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	60b9      	str	r1, [r7, #8]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d120      	bne.n	800c824 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	1e9a      	subs	r2, r3, #2
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	bf28      	it	cs
 800c7ee:	4613      	movcs	r3, r2
 800c7f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	82fb      	strh	r3, [r7, #22]
 800c7fc:	e00b      	b.n	800c816 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c7fe:	8afb      	ldrh	r3, [r7, #22]
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	3301      	adds	r3, #1
 800c80e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c810:	8afb      	ldrh	r3, [r7, #22]
 800c812:	3302      	adds	r3, #2
 800c814:	82fb      	strh	r3, [r7, #22]
 800c816:	8afa      	ldrh	r2, [r7, #22]
 800c818:	8abb      	ldrh	r3, [r7, #20]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d3ef      	bcc.n	800c7fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2200      	movs	r2, #0
 800c822:	701a      	strb	r2, [r3, #0]
  }
}
 800c824:	bf00      	nop
 800c826:	371c      	adds	r7, #28
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	881a      	ldrh	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b29b      	uxth	r3, r3
 800c844:	4413      	add	r3, r2
 800c846:	b29a      	uxth	r2, r3
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4413      	add	r3, r2
 800c856:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c858:	68fb      	ldr	r3, [r7, #12]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b086      	sub	sp, #24
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	60f8      	str	r0, [r7, #12]
 800c86e:	60b9      	str	r1, [r7, #8]
 800c870:	4613      	mov	r3, r2
 800c872:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c874:	2301      	movs	r3, #1
 800c876:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	789b      	ldrb	r3, [r3, #2]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d002      	beq.n	800c886 <USBH_CtlReq+0x20>
 800c880:	2b02      	cmp	r3, #2
 800c882:	d00f      	beq.n	800c8a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c884:	e027      	b.n	800c8d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	88fa      	ldrh	r2, [r7, #6]
 800c890:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2201      	movs	r2, #1
 800c896:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2202      	movs	r2, #2
 800c89c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c8a2:	e018      	b.n	800c8d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f81b 	bl	800c8e0 <USBH_HandleControl>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <USBH_CtlReq+0x54>
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d106      	bne.n	800c8c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	761a      	strb	r2, [r3, #24]
      break;
 800c8c6:	e005      	b.n	800c8d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d102      	bne.n	800c8d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	709a      	strb	r2, [r3, #2]
      break;
 800c8d4:	bf00      	nop
  }
  return status;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af02      	add	r7, sp, #8
 800c8e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7e1b      	ldrb	r3, [r3, #24]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	2b0a      	cmp	r3, #10
 800c8f8:	f200 8158 	bhi.w	800cbac <USBH_HandleControl+0x2cc>
 800c8fc:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <USBH_HandleControl+0x24>)
 800c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c902:	bf00      	nop
 800c904:	0800c931 	.word	0x0800c931
 800c908:	0800c94b 	.word	0x0800c94b
 800c90c:	0800c9b5 	.word	0x0800c9b5
 800c910:	0800c9db 	.word	0x0800c9db
 800c914:	0800ca13 	.word	0x0800ca13
 800c918:	0800ca3f 	.word	0x0800ca3f
 800c91c:	0800ca91 	.word	0x0800ca91
 800c920:	0800cab3 	.word	0x0800cab3
 800c924:	0800caef 	.word	0x0800caef
 800c928:	0800cb17 	.word	0x0800cb17
 800c92c:	0800cb55 	.word	0x0800cb55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f103 0110 	add.w	r1, r3, #16
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	795b      	ldrb	r3, [r3, #5]
 800c93a:	461a      	mov	r2, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f945 	bl	800cbcc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2202      	movs	r2, #2
 800c946:	761a      	strb	r2, [r3, #24]
      break;
 800c948:	e13b      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	795b      	ldrb	r3, [r3, #5]
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f003 fc5f 	bl	8010214 <USBH_LL_GetURBState>
 800c956:	4603      	mov	r3, r0
 800c958:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d11e      	bne.n	800c99e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	7c1b      	ldrb	r3, [r3, #16]
 800c964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c968:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8adb      	ldrh	r3, [r3, #22]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00a      	beq.n	800c988 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c972:	7b7b      	ldrb	r3, [r7, #13]
 800c974:	2b80      	cmp	r3, #128	; 0x80
 800c976:	d103      	bne.n	800c980 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2203      	movs	r2, #3
 800c97c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c97e:	e117      	b.n	800cbb0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2205      	movs	r2, #5
 800c984:	761a      	strb	r2, [r3, #24]
      break;
 800c986:	e113      	b.n	800cbb0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800c988:	7b7b      	ldrb	r3, [r7, #13]
 800c98a:	2b80      	cmp	r3, #128	; 0x80
 800c98c:	d103      	bne.n	800c996 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2209      	movs	r2, #9
 800c992:	761a      	strb	r2, [r3, #24]
      break;
 800c994:	e10c      	b.n	800cbb0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2207      	movs	r2, #7
 800c99a:	761a      	strb	r2, [r3, #24]
      break;
 800c99c:	e108      	b.n	800cbb0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d003      	beq.n	800c9ac <USBH_HandleControl+0xcc>
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	f040 8102 	bne.w	800cbb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	220b      	movs	r2, #11
 800c9b0:	761a      	strb	r2, [r3, #24]
      break;
 800c9b2:	e0fd      	b.n	800cbb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6899      	ldr	r1, [r3, #8]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	899a      	ldrh	r2, [r3, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	791b      	ldrb	r3, [r3, #4]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f93c 	bl	800cc4a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2204      	movs	r2, #4
 800c9d6:	761a      	strb	r2, [r3, #24]
      break;
 800c9d8:	e0f3      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	791b      	ldrb	r3, [r3, #4]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f003 fc17 	bl	8010214 <USBH_LL_GetURBState>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d102      	bne.n	800c9f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2209      	movs	r2, #9
 800c9f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
 800c9f8:	2b05      	cmp	r3, #5
 800c9fa:	d102      	bne.n	800ca02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ca00:	e0d8      	b.n	800cbb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	f040 80d5 	bne.w	800cbb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	220b      	movs	r2, #11
 800ca0e:	761a      	strb	r2, [r3, #24]
      break;
 800ca10:	e0d0      	b.n	800cbb4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6899      	ldr	r1, [r3, #8]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	899a      	ldrh	r2, [r3, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7958      	ldrb	r0, [r3, #5]
 800ca1e:	2301      	movs	r3, #1
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	4603      	mov	r3, r0
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f8eb 	bl	800cc00 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2206      	movs	r2, #6
 800ca3a:	761a      	strb	r2, [r3, #24]
      break;
 800ca3c:	e0c1      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	795b      	ldrb	r3, [r3, #5]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f003 fbe5 	bl	8010214 <USBH_LL_GetURBState>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca4e:	7bbb      	ldrb	r3, [r7, #14]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d103      	bne.n	800ca5c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2207      	movs	r2, #7
 800ca58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ca5a:	e0ad      	b.n	800cbb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	2b05      	cmp	r3, #5
 800ca60:	d105      	bne.n	800ca6e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	220c      	movs	r2, #12
 800ca66:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6c:	e0a4      	b.n	800cbb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d103      	bne.n	800ca7c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2205      	movs	r2, #5
 800ca78:	761a      	strb	r2, [r3, #24]
      break;
 800ca7a:	e09d      	b.n	800cbb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	f040 809a 	bne.w	800cbb8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	220b      	movs	r2, #11
 800ca88:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca8e:	e093      	b.n	800cbb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	2100      	movs	r1, #0
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f8d6 	bl	800cc4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2208      	movs	r2, #8
 800caae:	761a      	strb	r2, [r3, #24]

      break;
 800cab0:	e087      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	791b      	ldrb	r3, [r3, #4]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f003 fbab 	bl	8010214 <USBH_LL_GetURBState>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d105      	bne.n	800cad4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	220d      	movs	r2, #13
 800cacc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cad2:	e073      	b.n	800cbbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d103      	bne.n	800cae2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	220b      	movs	r2, #11
 800cade:	761a      	strb	r2, [r3, #24]
      break;
 800cae0:	e06c      	b.n	800cbbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800cae2:	7bbb      	ldrb	r3, [r7, #14]
 800cae4:	2b05      	cmp	r3, #5
 800cae6:	d169      	bne.n	800cbbc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800cae8:	2303      	movs	r3, #3
 800caea:	73fb      	strb	r3, [r7, #15]
      break;
 800caec:	e066      	b.n	800cbbc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	795a      	ldrb	r2, [r3, #5]
 800caf2:	2301      	movs	r3, #1
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	4613      	mov	r3, r2
 800caf8:	2200      	movs	r2, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f87f 	bl	800cc00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	220a      	movs	r2, #10
 800cb12:	761a      	strb	r2, [r3, #24]
      break;
 800cb14:	e055      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	795b      	ldrb	r3, [r3, #5]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f003 fb79 	bl	8010214 <USBH_LL_GetURBState>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	220d      	movs	r2, #13
 800cb34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cb36:	e043      	b.n	800cbc0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2209      	movs	r2, #9
 800cb42:	761a      	strb	r2, [r3, #24]
      break;
 800cb44:	e03c      	b.n	800cbc0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d139      	bne.n	800cbc0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	220b      	movs	r2, #11
 800cb50:	761a      	strb	r2, [r3, #24]
      break;
 800cb52:	e035      	b.n	800cbc0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	7e5b      	ldrb	r3, [r3, #25]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	765a      	strb	r2, [r3, #25]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7e5b      	ldrb	r3, [r3, #25]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d806      	bhi.n	800cb76 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cb74:	e025      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb7c:	2106      	movs	r1, #6
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	795b      	ldrb	r3, [r3, #5]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f90c 	bl	800cdac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	791b      	ldrb	r3, [r3, #4]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f906 	bl	800cdac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cba6:	2302      	movs	r3, #2
 800cba8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbaa:	e00a      	b.n	800cbc2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800cbac:	bf00      	nop
 800cbae:	e008      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
      break;
 800cbb0:	bf00      	nop
 800cbb2:	e006      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
      break;
 800cbb4:	bf00      	nop
 800cbb6:	e004      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
      break;
 800cbb8:	bf00      	nop
 800cbba:	e002      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
      break;
 800cbbc:	bf00      	nop
 800cbbe:	e000      	b.n	800cbc2 <USBH_HandleControl+0x2e2>
      break;
 800cbc0:	bf00      	nop
  }

  return status;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af04      	add	r7, sp, #16
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cbda:	79f9      	ldrb	r1, [r7, #7]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9303      	str	r3, [sp, #12]
 800cbe0:	2308      	movs	r3, #8
 800cbe2:	9302      	str	r3, [sp, #8]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2300      	movs	r3, #0
 800cbee:	2200      	movs	r2, #0
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f003 fade 	bl	80101b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af04      	add	r7, sp, #16
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	460b      	mov	r3, r1
 800cc10:	80fb      	strh	r3, [r7, #6]
 800cc12:	4613      	mov	r3, r2
 800cc14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc24:	7979      	ldrb	r1, [r7, #5]
 800cc26:	7e3b      	ldrb	r3, [r7, #24]
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	2301      	movs	r3, #1
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	2300      	movs	r3, #0
 800cc38:	2200      	movs	r2, #0
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f003 fab9 	bl	80101b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af04      	add	r7, sp, #16
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	4611      	mov	r1, r2
 800cc56:	461a      	mov	r2, r3
 800cc58:	460b      	mov	r3, r1
 800cc5a:	80fb      	strh	r3, [r7, #6]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc60:	7979      	ldrb	r1, [r7, #5]
 800cc62:	2300      	movs	r3, #0
 800cc64:	9303      	str	r3, [sp, #12]
 800cc66:	88fb      	ldrh	r3, [r7, #6]
 800cc68:	9302      	str	r3, [sp, #8]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	2301      	movs	r3, #1
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	2300      	movs	r3, #0
 800cc74:	2201      	movs	r2, #1
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f003 fa9b 	bl	80101b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cc7c:	2300      	movs	r3, #0

}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b088      	sub	sp, #32
 800cc8a:	af04      	add	r7, sp, #16
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	4611      	mov	r1, r2
 800cc92:	461a      	mov	r2, r3
 800cc94:	460b      	mov	r3, r1
 800cc96:	80fb      	strh	r3, [r7, #6]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cca6:	2300      	movs	r3, #0
 800cca8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ccaa:	7979      	ldrb	r1, [r7, #5]
 800ccac:	7e3b      	ldrb	r3, [r7, #24]
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	88fb      	ldrh	r3, [r7, #6]
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	2301      	movs	r3, #1
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f003 fa76 	bl	80101b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af04      	add	r7, sp, #16
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	461a      	mov	r2, r3
 800ccde:	460b      	mov	r3, r1
 800cce0:	80fb      	strh	r3, [r7, #6]
 800cce2:	4613      	mov	r3, r2
 800cce4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cce6:	7979      	ldrb	r1, [r7, #5]
 800cce8:	2300      	movs	r3, #0
 800ccea:	9303      	str	r3, [sp, #12]
 800ccec:	88fb      	ldrh	r3, [r7, #6]
 800ccee:	9302      	str	r3, [sp, #8]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f003 fa58 	bl	80101b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af04      	add	r7, sp, #16
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	4608      	mov	r0, r1
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	70fb      	strb	r3, [r7, #3]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70bb      	strb	r3, [r7, #2]
 800cd22:	4613      	mov	r3, r2
 800cd24:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd26:	7878      	ldrb	r0, [r7, #1]
 800cd28:	78ba      	ldrb	r2, [r7, #2]
 800cd2a:	78f9      	ldrb	r1, [r7, #3]
 800cd2c:	8b3b      	ldrh	r3, [r7, #24]
 800cd2e:	9302      	str	r3, [sp, #8]
 800cd30:	7d3b      	ldrb	r3, [r7, #20]
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	7c3b      	ldrb	r3, [r7, #16]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	4603      	mov	r3, r0
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f003 f9eb 	bl	8010116 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f003 fa0a 	bl	8010174 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	460b      	mov	r3, r1
 800cd74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f836 	bl	800cde8 <USBH_GetFreePipe>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cd80:	89fb      	ldrh	r3, [r7, #14]
 800cd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d00a      	beq.n	800cda0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	89fb      	ldrh	r3, [r7, #14]
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	33e0      	adds	r3, #224	; 0xe0
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cda0:	89fb      	ldrh	r3, [r7, #14]
 800cda2:	b2db      	uxtb	r3, r3
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	2b0a      	cmp	r3, #10
 800cdbc:	d80d      	bhi.n	800cdda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	33e0      	adds	r3, #224	; 0xe0
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	685a      	ldr	r2, [r3, #4]
 800cdca:	78fb      	ldrb	r3, [r7, #3]
 800cdcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	33e0      	adds	r3, #224	; 0xe0
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	440b      	add	r3, r1
 800cdd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
 800cdf8:	e00f      	b.n	800ce1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	33e0      	adds	r3, #224	; 0xe0
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	e007      	b.n	800ce24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	3301      	adds	r3, #1
 800ce18:	73fb      	strb	r3, [r7, #15]
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	2b0a      	cmp	r3, #10
 800ce1e:	d9ec      	bls.n	800cdfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	4a08      	ldr	r2, [pc, #32]	; (800ce60 <disk_status+0x30>)
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	79fa      	ldrb	r2, [r7, #7]
 800ce48:	4905      	ldr	r1, [pc, #20]	; (800ce60 <disk_status+0x30>)
 800ce4a:	440a      	add	r2, r1
 800ce4c:	7a12      	ldrb	r2, [r2, #8]
 800ce4e:	4610      	mov	r0, r2
 800ce50:	4798      	blx	r3
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000370 	.word	0x20000370

0800ce64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	4a0d      	ldr	r2, [pc, #52]	; (800ceac <disk_initialize+0x48>)
 800ce76:	5cd3      	ldrb	r3, [r2, r3]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d111      	bne.n	800cea0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	4a0b      	ldr	r2, [pc, #44]	; (800ceac <disk_initialize+0x48>)
 800ce80:	2101      	movs	r1, #1
 800ce82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	4a09      	ldr	r2, [pc, #36]	; (800ceac <disk_initialize+0x48>)
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	79fa      	ldrb	r2, [r7, #7]
 800ce92:	4906      	ldr	r1, [pc, #24]	; (800ceac <disk_initialize+0x48>)
 800ce94:	440a      	add	r2, r1
 800ce96:	7a12      	ldrb	r2, [r2, #8]
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4798      	blx	r3
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000370 	.word	0x20000370

0800ceb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ceb0:	b590      	push	{r4, r7, lr}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <disk_read+0x3c>)
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	689c      	ldr	r4, [r3, #8]
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
 800cece:	4a07      	ldr	r2, [pc, #28]	; (800ceec <disk_read+0x3c>)
 800ced0:	4413      	add	r3, r2
 800ced2:	7a18      	ldrb	r0, [r3, #8]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	68b9      	ldr	r1, [r7, #8]
 800ceda:	47a0      	blx	r4
 800cedc:	4603      	mov	r3, r0
 800cede:	75fb      	strb	r3, [r7, #23]
  return res;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd90      	pop	{r4, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20000370 	.word	0x20000370

0800cef0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
 800cefa:	603b      	str	r3, [r7, #0]
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <disk_write+0x3c>)
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	68dc      	ldr	r4, [r3, #12]
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	4a07      	ldr	r2, [pc, #28]	; (800cf2c <disk_write+0x3c>)
 800cf10:	4413      	add	r3, r2
 800cf12:	7a18      	ldrb	r0, [r3, #8]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	68b9      	ldr	r1, [r7, #8]
 800cf1a:	47a0      	blx	r4
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd90      	pop	{r4, r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20000370 	.word	0x20000370

0800cf30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	603a      	str	r2, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	4a09      	ldr	r2, [pc, #36]	; (800cf68 <disk_ioctl+0x38>)
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	79fa      	ldrb	r2, [r7, #7]
 800cf4e:	4906      	ldr	r1, [pc, #24]	; (800cf68 <disk_ioctl+0x38>)
 800cf50:	440a      	add	r2, r1
 800cf52:	7a10      	ldrb	r0, [r2, #8]
 800cf54:	79b9      	ldrb	r1, [r7, #6]
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	4798      	blx	r3
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20000370 	.word	0x20000370

0800cf6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	b21a      	sxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	b21b      	sxth	r3, r3
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	b21b      	sxth	r3, r3
 800cf8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf8e:	89fb      	ldrh	r3, [r7, #14]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	3303      	adds	r3, #3
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	3202      	adds	r2, #2
 800cfb4:	7812      	ldrb	r2, [r2, #0]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	7812      	ldrb	r2, [r2, #0]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	60fb      	str	r3, [r7, #12]
	return rv;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	460b      	mov	r3, r1
 800cfec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	1c5a      	adds	r2, r3, #1
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	887a      	ldrh	r2, [r7, #2]
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	887b      	ldrh	r3, [r7, #2]
 800cffc:	0a1b      	lsrs	r3, r3, #8
 800cffe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	887a      	ldrh	r2, [r7, #2]
 800d008:	b2d2      	uxtb	r2, r2
 800d00a:	701a      	strb	r2, [r3, #0]
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	b2d2      	uxtb	r2, r2
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	0a1b      	lsrs	r3, r3, #8
 800d032:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	b2d2      	uxtb	r2, r2
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	0a1b      	lsrs	r3, r3, #8
 800d044:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	0a1b      	lsrs	r3, r3, #8
 800d056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	607a      	str	r2, [r7, #4]
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00d      	beq.n	800d0a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	1c53      	adds	r3, r2, #1
 800d08e:	613b      	str	r3, [r7, #16]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	1c59      	adds	r1, r3, #1
 800d094:	6179      	str	r1, [r7, #20]
 800d096:	7812      	ldrb	r2, [r2, #0]
 800d098:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	607b      	str	r3, [r7, #4]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f1      	bne.n	800d08a <mem_cpy+0x1a>
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d0b2:	b480      	push	{r7}
 800d0b4:	b087      	sub	sp, #28
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	60b9      	str	r1, [r7, #8]
 800d0bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	617a      	str	r2, [r7, #20]
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	607b      	str	r3, [r7, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1f3      	bne.n	800d0c2 <mem_set+0x10>
}
 800d0da:	bf00      	nop
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d0e6:	b480      	push	{r7}
 800d0e8:	b089      	sub	sp, #36	; 0x24
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	60f8      	str	r0, [r7, #12]
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	61fb      	str	r3, [r7, #28]
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	61fa      	str	r2, [r7, #28]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	4619      	mov	r1, r3
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	61ba      	str	r2, [r7, #24]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	1acb      	subs	r3, r1, r3
 800d112:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3b01      	subs	r3, #1
 800d118:	607b      	str	r3, [r7, #4]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <mem_cmp+0x40>
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d0eb      	beq.n	800d0fe <mem_cmp+0x18>

	return r;
 800d126:	697b      	ldr	r3, [r7, #20]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3724      	adds	r7, #36	; 0x24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d13e:	e002      	b.n	800d146 <chk_chr+0x12>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3301      	adds	r3, #1
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <chk_chr+0x26>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	4293      	cmp	r3, r2
 800d158:	d1f2      	bne.n	800d140 <chk_chr+0xc>
	return *str;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	781b      	ldrb	r3, [r3, #0]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d176:	2300      	movs	r3, #0
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e029      	b.n	800d1d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d180:	4a27      	ldr	r2, [pc, #156]	; (800d220 <chk_lock+0xb4>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	011b      	lsls	r3, r3, #4
 800d186:	4413      	add	r3, r2
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01d      	beq.n	800d1ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d18e:	4a24      	ldr	r2, [pc, #144]	; (800d220 <chk_lock+0xb4>)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	011b      	lsls	r3, r3, #4
 800d194:	4413      	add	r3, r2
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d116      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d1a0:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <chk_lock+0xb4>)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	4413      	add	r3, r2
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d10c      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1b4:	4a1a      	ldr	r2, [pc, #104]	; (800d220 <chk_lock+0xb4>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	4413      	add	r3, r2
 800d1bc:	3308      	adds	r3, #8
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d102      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1c8:	e007      	b.n	800d1da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d9d2      	bls.n	800d180 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d109      	bne.n	800d1f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <chk_lock+0x80>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d101      	bne.n	800d1f0 <chk_lock+0x84>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e010      	b.n	800d212 <chk_lock+0xa6>
 800d1f0:	2312      	movs	r3, #18
 800d1f2:	e00e      	b.n	800d212 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d108      	bne.n	800d20c <chk_lock+0xa0>
 800d1fa:	4a09      	ldr	r2, [pc, #36]	; (800d220 <chk_lock+0xb4>)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	4413      	add	r3, r2
 800d202:	330c      	adds	r3, #12
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20a:	d101      	bne.n	800d210 <chk_lock+0xa4>
 800d20c:	2310      	movs	r3, #16
 800d20e:	e000      	b.n	800d212 <chk_lock+0xa6>
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	20000140 	.word	0x20000140

0800d224 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d22a:	2300      	movs	r3, #0
 800d22c:	607b      	str	r3, [r7, #4]
 800d22e:	e002      	b.n	800d236 <enq_lock+0x12>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3301      	adds	r3, #1
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d806      	bhi.n	800d24a <enq_lock+0x26>
 800d23c:	4a09      	ldr	r2, [pc, #36]	; (800d264 <enq_lock+0x40>)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	4413      	add	r3, r2
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1f2      	bne.n	800d230 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	bf14      	ite	ne
 800d250:	2301      	movne	r3, #1
 800d252:	2300      	moveq	r3, #0
 800d254:	b2db      	uxtb	r3, r3
}
 800d256:	4618      	mov	r0, r3
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	20000140 	.word	0x20000140

0800d268 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d272:	2300      	movs	r3, #0
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	e01f      	b.n	800d2b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d278:	4a41      	ldr	r2, [pc, #260]	; (800d380 <inc_lock+0x118>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	011b      	lsls	r3, r3, #4
 800d27e:	4413      	add	r3, r2
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	429a      	cmp	r2, r3
 800d288:	d113      	bne.n	800d2b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d28a:	4a3d      	ldr	r2, [pc, #244]	; (800d380 <inc_lock+0x118>)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	011b      	lsls	r3, r3, #4
 800d290:	4413      	add	r3, r2
 800d292:	3304      	adds	r3, #4
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d109      	bne.n	800d2b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d29e:	4a38      	ldr	r2, [pc, #224]	; (800d380 <inc_lock+0x118>)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	4413      	add	r3, r2
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d006      	beq.n	800d2c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d9dc      	bls.n	800d278 <inc_lock+0x10>
 800d2be:	e000      	b.n	800d2c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d2c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2b03      	cmp	r3, #3
 800d2c6:	d132      	bne.n	800d32e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	e002      	b.n	800d2d4 <inc_lock+0x6c>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d806      	bhi.n	800d2e8 <inc_lock+0x80>
 800d2da:	4a29      	ldr	r2, [pc, #164]	; (800d380 <inc_lock+0x118>)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4413      	add	r3, r2
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1f2      	bne.n	800d2ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d101      	bne.n	800d2f2 <inc_lock+0x8a>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e040      	b.n	800d374 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4922      	ldr	r1, [pc, #136]	; (800d380 <inc_lock+0x118>)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	440b      	add	r3, r1
 800d2fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	689a      	ldr	r2, [r3, #8]
 800d304:	491e      	ldr	r1, [pc, #120]	; (800d380 <inc_lock+0x118>)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	440b      	add	r3, r1
 800d30c:	3304      	adds	r3, #4
 800d30e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695a      	ldr	r2, [r3, #20]
 800d314:	491a      	ldr	r1, [pc, #104]	; (800d380 <inc_lock+0x118>)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	440b      	add	r3, r1
 800d31c:	3308      	adds	r3, #8
 800d31e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d320:	4a17      	ldr	r2, [pc, #92]	; (800d380 <inc_lock+0x118>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	4413      	add	r3, r2
 800d328:	330c      	adds	r3, #12
 800d32a:	2200      	movs	r2, #0
 800d32c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d009      	beq.n	800d348 <inc_lock+0xe0>
 800d334:	4a12      	ldr	r2, [pc, #72]	; (800d380 <inc_lock+0x118>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	330c      	adds	r3, #12
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <inc_lock+0xe0>
 800d344:	2300      	movs	r3, #0
 800d346:	e015      	b.n	800d374 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <inc_lock+0xf8>
 800d34e:	4a0c      	ldr	r2, [pc, #48]	; (800d380 <inc_lock+0x118>)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	4413      	add	r3, r2
 800d356:	330c      	adds	r3, #12
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	e001      	b.n	800d364 <inc_lock+0xfc>
 800d360:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d364:	4906      	ldr	r1, [pc, #24]	; (800d380 <inc_lock+0x118>)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	011b      	lsls	r3, r3, #4
 800d36a:	440b      	add	r3, r1
 800d36c:	330c      	adds	r3, #12
 800d36e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3301      	adds	r3, #1
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	20000140 	.word	0x20000140

0800d384 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3b01      	subs	r3, #1
 800d390:	607b      	str	r3, [r7, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d825      	bhi.n	800d3e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800d398:	4a17      	ldr	r2, [pc, #92]	; (800d3f8 <dec_lock+0x74>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	011b      	lsls	r3, r3, #4
 800d39e:	4413      	add	r3, r2
 800d3a0:	330c      	adds	r3, #12
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d3a6:	89fb      	ldrh	r3, [r7, #14]
 800d3a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ac:	d101      	bne.n	800d3b2 <dec_lock+0x2e>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <dec_lock+0x3a>
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d3be:	4a0e      	ldr	r2, [pc, #56]	; (800d3f8 <dec_lock+0x74>)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	4413      	add	r3, r2
 800d3c6:	330c      	adds	r3, #12
 800d3c8:	89fa      	ldrh	r2, [r7, #14]
 800d3ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <dec_lock+0x5a>
 800d3d2:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <dec_lock+0x74>)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	4413      	add	r3, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	737b      	strb	r3, [r7, #13]
 800d3e2:	e001      	b.n	800d3e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d3e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	20000140 	.word	0x20000140

0800d3fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d404:	2300      	movs	r3, #0
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	e010      	b.n	800d42c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d40a:	4a0d      	ldr	r2, [pc, #52]	; (800d440 <clear_lock+0x44>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	429a      	cmp	r2, r3
 800d418:	d105      	bne.n	800d426 <clear_lock+0x2a>
 800d41a:	4a09      	ldr	r2, [pc, #36]	; (800d440 <clear_lock+0x44>)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	4413      	add	r3, r2
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3301      	adds	r3, #1
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d9eb      	bls.n	800d40a <clear_lock+0xe>
	}
}
 800d432:	bf00      	nop
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20000140 	.word	0x20000140

0800d444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	78db      	ldrb	r3, [r3, #3]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d034      	beq.n	800d4c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7858      	ldrb	r0, [r3, #1]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d468:	2301      	movs	r3, #1
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	f7ff fd40 	bl	800cef0 <disk_write>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d476:	2301      	movs	r3, #1
 800d478:	73fb      	strb	r3, [r7, #15]
 800d47a:	e022      	b.n	800d4c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	1ad2      	subs	r2, r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d217      	bcs.n	800d4c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	789b      	ldrb	r3, [r3, #2]
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	e010      	b.n	800d4bc <sync_window+0x78>
					wsect += fs->fsize;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7858      	ldrb	r0, [r3, #1]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	f7ff fd1d 	bl	800cef0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d8eb      	bhi.n	800d49a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d01b      	beq.n	800d51c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff ffad 	bl	800d444 <sync_window>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d113      	bne.n	800d51c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7858      	ldrb	r0, [r3, #1]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d4fe:	2301      	movs	r3, #1
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	f7ff fcd5 	bl	800ceb0 <disk_read>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d004      	beq.n	800d516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d512:	2301      	movs	r3, #1
 800d514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ff87 	bl	800d444 <sync_window>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d158      	bne.n	800d5f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b03      	cmp	r3, #3
 800d546:	d148      	bne.n	800d5da <sync_fs+0xb2>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	791b      	ldrb	r3, [r3, #4]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d144      	bne.n	800d5da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	3334      	adds	r3, #52	; 0x34
 800d554:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d558:	2100      	movs	r1, #0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fda9 	bl	800d0b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3334      	adds	r3, #52	; 0x34
 800d564:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d568:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fd38 	bl	800cfe2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3334      	adds	r3, #52	; 0x34
 800d576:	4921      	ldr	r1, [pc, #132]	; (800d5fc <sync_fs+0xd4>)
 800d578:	4618      	mov	r0, r3
 800d57a:	f7ff fd4d 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3334      	adds	r3, #52	; 0x34
 800d582:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d586:	491e      	ldr	r1, [pc, #120]	; (800d600 <sync_fs+0xd8>)
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff fd45 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3334      	adds	r3, #52	; 0x34
 800d592:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	4619      	mov	r1, r3
 800d59c:	4610      	mov	r0, r2
 800d59e:	f7ff fd3b 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3334      	adds	r3, #52	; 0x34
 800d5a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	f7ff fd31 	bl	800d018 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7858      	ldrb	r0, [r3, #1]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	f7ff fc8e 	bl	800cef0 <disk_write>
			fs->fsi_flag = 0;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	785b      	ldrb	r3, [r3, #1]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fca4 	bl	800cf30 <disk_ioctl>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <sync_fs+0xca>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	41615252 	.word	0x41615252
 800d600:	61417272 	.word	0x61417272

0800d604 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	3b02      	subs	r3, #2
 800d612:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	3b02      	subs	r3, #2
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d301      	bcc.n	800d624 <clust2sect+0x20>
 800d620:	2300      	movs	r3, #0
 800d622:	e008      	b.n	800d636 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	895b      	ldrh	r3, [r3, #10]
 800d628:	461a      	mov	r2, r3
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	fb03 f202 	mul.w	r2, r3, r2
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	4413      	add	r3, r2
}
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b086      	sub	sp, #24
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d904      	bls.n	800d662 <get_fat+0x20>
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d302      	bcc.n	800d668 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d662:	2301      	movs	r3, #1
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	e08c      	b.n	800d782 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d66c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d045      	beq.n	800d702 <get_fat+0xc0>
 800d676:	2b03      	cmp	r3, #3
 800d678:	d05d      	beq.n	800d736 <get_fat+0xf4>
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d177      	bne.n	800d76e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	085b      	lsrs	r3, r3, #1
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	4413      	add	r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	0a5b      	lsrs	r3, r3, #9
 800d694:	4413      	add	r3, r2
 800d696:	4619      	mov	r1, r3
 800d698:	6938      	ldr	r0, [r7, #16]
 800d69a:	f7ff ff17 	bl	800d4cc <move_window>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d167      	bne.n	800d774 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	60fa      	str	r2, [r7, #12]
 800d6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6b6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	0a5b      	lsrs	r3, r3, #9
 800d6c0:	4413      	add	r3, r2
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6938      	ldr	r0, [r7, #16]
 800d6c6:	f7ff ff01 	bl	800d4cc <move_window>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d153      	bne.n	800d778 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	4413      	add	r3, r2
 800d6da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6de:	021b      	lsls	r3, r3, #8
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <get_fat+0xb6>
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	091b      	lsrs	r3, r3, #4
 800d6f6:	e002      	b.n	800d6fe <get_fat+0xbc>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6fe:	617b      	str	r3, [r7, #20]
			break;
 800d700:	e03f      	b.n	800d782 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	0a1b      	lsrs	r3, r3, #8
 800d70a:	4413      	add	r3, r2
 800d70c:	4619      	mov	r1, r3
 800d70e:	6938      	ldr	r0, [r7, #16]
 800d710:	f7ff fedc 	bl	800d4cc <move_window>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d130      	bne.n	800d77c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d728:	4413      	add	r3, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fc1e 	bl	800cf6c <ld_word>
 800d730:	4603      	mov	r3, r0
 800d732:	617b      	str	r3, [r7, #20]
			break;
 800d734:	e025      	b.n	800d782 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	09db      	lsrs	r3, r3, #7
 800d73e:	4413      	add	r3, r2
 800d740:	4619      	mov	r1, r3
 800d742:	6938      	ldr	r0, [r7, #16]
 800d744:	f7ff fec2 	bl	800d4cc <move_window>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d118      	bne.n	800d780 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d75c:	4413      	add	r3, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff fc1c 	bl	800cf9c <ld_dword>
 800d764:	4603      	mov	r3, r0
 800d766:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d76a:	617b      	str	r3, [r7, #20]
			break;
 800d76c:	e009      	b.n	800d782 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d76e:	2301      	movs	r3, #1
 800d770:	617b      	str	r3, [r7, #20]
 800d772:	e006      	b.n	800d782 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d774:	bf00      	nop
 800d776:	e004      	b.n	800d782 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d778:	bf00      	nop
 800d77a:	e002      	b.n	800d782 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d77c:	bf00      	nop
 800d77e:	e000      	b.n	800d782 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d780:	bf00      	nop
		}
	}

	return val;
 800d782:	697b      	ldr	r3, [r7, #20]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3718      	adds	r7, #24
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d78c:	b590      	push	{r4, r7, lr}
 800d78e:	b089      	sub	sp, #36	; 0x24
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d798:	2302      	movs	r3, #2
 800d79a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	f240 80d6 	bls.w	800d950 <put_fat+0x1c4>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	f080 80d0 	bcs.w	800d950 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d073      	beq.n	800d8a0 <put_fat+0x114>
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	f000 8091 	beq.w	800d8e0 <put_fat+0x154>
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	f040 80c6 	bne.w	800d950 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	61bb      	str	r3, [r7, #24]
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	085b      	lsrs	r3, r3, #1
 800d7cc:	69ba      	ldr	r2, [r7, #24]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	0a5b      	lsrs	r3, r3, #9
 800d7da:	4413      	add	r3, r2
 800d7dc:	4619      	mov	r1, r3
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f7ff fe74 	bl	800d4cc <move_window>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7e8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f040 80a9 	bne.w	800d942 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	1c59      	adds	r1, r3, #1
 800d7fa:	61b9      	str	r1, [r7, #24]
 800d7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d800:	4413      	add	r3, r2
 800d802:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00d      	beq.n	800d82a <put_fat+0x9e>
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	b25b      	sxtb	r3, r3
 800d814:	f003 030f 	and.w	r3, r3, #15
 800d818:	b25a      	sxtb	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	b25b      	sxtb	r3, r3
 800d822:	4313      	orrs	r3, r2
 800d824:	b25b      	sxtb	r3, r3
 800d826:	b2db      	uxtb	r3, r3
 800d828:	e001      	b.n	800d82e <put_fat+0xa2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2201      	movs	r2, #1
 800d836:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	0a5b      	lsrs	r3, r3, #9
 800d840:	4413      	add	r3, r2
 800d842:	4619      	mov	r1, r3
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f7ff fe41 	bl	800d4cc <move_window>
 800d84a:	4603      	mov	r3, r0
 800d84c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d84e:	7ffb      	ldrb	r3, [r7, #31]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d178      	bne.n	800d946 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d860:	4413      	add	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d003      	beq.n	800d876 <put_fat+0xea>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	091b      	lsrs	r3, r3, #4
 800d872:	b2db      	uxtb	r3, r3
 800d874:	e00e      	b.n	800d894 <put_fat+0x108>
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	f023 030f 	bic.w	r3, r3, #15
 800d880:	b25a      	sxtb	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	0a1b      	lsrs	r3, r3, #8
 800d886:	b25b      	sxtb	r3, r3
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	b25b      	sxtb	r3, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	b25b      	sxtb	r3, r3
 800d892:	b2db      	uxtb	r3, r3
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2201      	movs	r2, #1
 800d89c:	70da      	strb	r2, [r3, #3]
			break;
 800d89e:	e057      	b.n	800d950 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	4413      	add	r3, r2
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f7ff fe0d 	bl	800d4cc <move_window>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8b6:	7ffb      	ldrb	r3, [r7, #31]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d146      	bne.n	800d94a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d8ca:	4413      	add	r3, r2
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	b292      	uxth	r2, r2
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fb85 	bl	800cfe2 <st_word>
			fs->wflag = 1;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	70da      	strb	r2, [r3, #3]
			break;
 800d8de:	e037      	b.n	800d950 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	09db      	lsrs	r3, r3, #7
 800d8e8:	4413      	add	r3, r2
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f7ff fded 	bl	800d4cc <move_window>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8f6:	7ffb      	ldrb	r3, [r7, #31]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d128      	bne.n	800d94e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d910:	4413      	add	r3, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7ff fb42 	bl	800cf9c <ld_dword>
 800d918:	4603      	mov	r3, r0
 800d91a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d91e:	4323      	orrs	r3, r4
 800d920:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d930:	4413      	add	r3, r2
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff fb6f 	bl	800d018 <st_dword>
			fs->wflag = 1;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	70da      	strb	r2, [r3, #3]
			break;
 800d940:	e006      	b.n	800d950 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d942:	bf00      	nop
 800d944:	e004      	b.n	800d950 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d946:	bf00      	nop
 800d948:	e002      	b.n	800d950 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d94a:	bf00      	nop
 800d94c:	e000      	b.n	800d950 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d94e:	bf00      	nop
		}
	}
	return res;
 800d950:	7ffb      	ldrb	r3, [r7, #31]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3724      	adds	r7, #36	; 0x24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd90      	pop	{r4, r7, pc}

0800d95a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b088      	sub	sp, #32
 800d95e:	af00      	add	r7, sp, #0
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	2b01      	cmp	r3, #1
 800d974:	d904      	bls.n	800d980 <remove_chain+0x26>
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d301      	bcc.n	800d984 <remove_chain+0x2a>
 800d980:	2302      	movs	r3, #2
 800d982:	e04b      	b.n	800da1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00c      	beq.n	800d9a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d98a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	69b8      	ldr	r0, [r7, #24]
 800d992:	f7ff fefb 	bl	800d78c <put_fat>
 800d996:	4603      	mov	r3, r0
 800d998:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d99a:	7ffb      	ldrb	r3, [r7, #31]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d001      	beq.n	800d9a4 <remove_chain+0x4a>
 800d9a0:	7ffb      	ldrb	r3, [r7, #31]
 800d9a2:	e03b      	b.n	800da1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f7ff fe4b 	bl	800d642 <get_fat>
 800d9ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d031      	beq.n	800da18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d101      	bne.n	800d9be <remove_chain+0x64>
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	e02e      	b.n	800da1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9c4:	d101      	bne.n	800d9ca <remove_chain+0x70>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e028      	b.n	800da1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	69b8      	ldr	r0, [r7, #24]
 800d9d0:	f7ff fedc 	bl	800d78c <put_fat>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d9d8:	7ffb      	ldrb	r3, [r7, #31]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <remove_chain+0x88>
 800d9de:	7ffb      	ldrb	r3, [r7, #31]
 800d9e0:	e01c      	b.n	800da1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	695a      	ldr	r2, [r3, #20]
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	3b02      	subs	r3, #2
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d20b      	bcs.n	800da08 <remove_chain+0xae>
			fs->free_clst++;
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	791b      	ldrb	r3, [r3, #4]
 800d9fe:	f043 0301 	orr.w	r3, r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	429a      	cmp	r2, r3
 800da14:	d3c6      	bcc.n	800d9a4 <remove_chain+0x4a>
 800da16:	e000      	b.n	800da1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800da18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3720      	adds	r7, #32
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b088      	sub	sp, #32
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10d      	bne.n	800da56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d004      	beq.n	800da50 <create_chain+0x2c>
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d31b      	bcc.n	800da88 <create_chain+0x64>
 800da50:	2301      	movs	r3, #1
 800da52:	61bb      	str	r3, [r7, #24]
 800da54:	e018      	b.n	800da88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff fdf2 	bl	800d642 <get_fat>
 800da5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d801      	bhi.n	800da6a <create_chain+0x46>
 800da66:	2301      	movs	r3, #1
 800da68:	e070      	b.n	800db4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da70:	d101      	bne.n	800da76 <create_chain+0x52>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	e06a      	b.n	800db4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	699b      	ldr	r3, [r3, #24]
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d201      	bcs.n	800da84 <create_chain+0x60>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	e063      	b.n	800db4c <create_chain+0x128>
		scl = clst;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	3301      	adds	r3, #1
 800da90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	69fa      	ldr	r2, [r7, #28]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d307      	bcc.n	800daac <create_chain+0x88>
				ncl = 2;
 800da9c:	2302      	movs	r3, #2
 800da9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800daa0:	69fa      	ldr	r2, [r7, #28]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d901      	bls.n	800daac <create_chain+0x88>
 800daa8:	2300      	movs	r3, #0
 800daaa:	e04f      	b.n	800db4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800daac:	69f9      	ldr	r1, [r7, #28]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fdc7 	bl	800d642 <get_fat>
 800dab4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00e      	beq.n	800dada <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d003      	beq.n	800daca <create_chain+0xa6>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dac8:	d101      	bne.n	800dace <create_chain+0xaa>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	e03e      	b.n	800db4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dace:	69fa      	ldr	r2, [r7, #28]
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d1da      	bne.n	800da8c <create_chain+0x68>
 800dad6:	2300      	movs	r3, #0
 800dad8:	e038      	b.n	800db4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dada:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dadc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dae0:	69f9      	ldr	r1, [r7, #28]
 800dae2:	6938      	ldr	r0, [r7, #16]
 800dae4:	f7ff fe52 	bl	800d78c <put_fat>
 800dae8:	4603      	mov	r3, r0
 800daea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800daec:	7dfb      	ldrb	r3, [r7, #23]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d109      	bne.n	800db06 <create_chain+0xe2>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d006      	beq.n	800db06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6938      	ldr	r0, [r7, #16]
 800dafe:	f7ff fe45 	bl	800d78c <put_fat>
 800db02:	4603      	mov	r3, r0
 800db04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d116      	bne.n	800db3a <create_chain+0x116>
		fs->last_clst = ncl;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	69fa      	ldr	r2, [r7, #28]
 800db10:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	695a      	ldr	r2, [r3, #20]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	3b02      	subs	r3, #2
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d804      	bhi.n	800db2a <create_chain+0x106>
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	1e5a      	subs	r2, r3, #1
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	791b      	ldrb	r3, [r3, #4]
 800db2e:	f043 0301 	orr.w	r3, r3, #1
 800db32:	b2da      	uxtb	r2, r3
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	711a      	strb	r2, [r3, #4]
 800db38:	e007      	b.n	800db4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d102      	bne.n	800db46 <create_chain+0x122>
 800db40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db44:	e000      	b.n	800db48 <create_chain+0x124>
 800db46:	2301      	movs	r3, #1
 800db48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db4a:	69fb      	ldr	r3, [r7, #28]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3720      	adds	r7, #32
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db68:	3304      	adds	r3, #4
 800db6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	0a5b      	lsrs	r3, r3, #9
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	8952      	ldrh	r2, [r2, #10]
 800db74:	fbb3 f3f2 	udiv	r3, r3, r2
 800db78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	1d1a      	adds	r2, r3, #4
 800db7e:	613a      	str	r2, [r7, #16]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <clmt_clust+0x3a>
 800db8a:	2300      	movs	r3, #0
 800db8c:	e010      	b.n	800dbb0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	429a      	cmp	r2, r3
 800db94:	d307      	bcc.n	800dba6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	617b      	str	r3, [r7, #20]
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	3304      	adds	r3, #4
 800dba2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dba4:	e7e9      	b.n	800db7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dba6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	4413      	add	r3, r2
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	371c      	adds	r7, #28
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbd2:	d204      	bcs.n	800dbde <dir_sdi+0x22>
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	f003 031f 	and.w	r3, r3, #31
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e063      	b.n	800dcaa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <dir_sdi+0x46>
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b02      	cmp	r3, #2
 800dbfa:	d902      	bls.n	800dc02 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10c      	bne.n	800dc22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	095b      	lsrs	r3, r3, #5
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	8912      	ldrh	r2, [r2, #8]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d301      	bcc.n	800dc18 <dir_sdi+0x5c>
 800dc14:	2302      	movs	r3, #2
 800dc16:	e048      	b.n	800dcaa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	61da      	str	r2, [r3, #28]
 800dc20:	e029      	b.n	800dc76 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	895b      	ldrh	r3, [r3, #10]
 800dc26:	025b      	lsls	r3, r3, #9
 800dc28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc2a:	e019      	b.n	800dc60 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6979      	ldr	r1, [r7, #20]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7ff fd06 	bl	800d642 <get_fat>
 800dc36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc3e:	d101      	bne.n	800dc44 <dir_sdi+0x88>
 800dc40:	2301      	movs	r3, #1
 800dc42:	e032      	b.n	800dcaa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d904      	bls.n	800dc54 <dir_sdi+0x98>
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d301      	bcc.n	800dc58 <dir_sdi+0x9c>
 800dc54:	2302      	movs	r3, #2
 800dc56:	e028      	b.n	800dcaa <dir_sdi+0xee>
			ofs -= csz;
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d2e1      	bcs.n	800dc2c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dc68:	6979      	ldr	r1, [r7, #20]
 800dc6a:	6938      	ldr	r0, [r7, #16]
 800dc6c:	f7ff fcca 	bl	800d604 <clust2sect>
 800dc70:	4602      	mov	r2, r0
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <dir_sdi+0xcc>
 800dc84:	2302      	movs	r3, #2
 800dc86:	e010      	b.n	800dcaa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	69da      	ldr	r2, [r3, #28]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	0a5b      	lsrs	r3, r3, #9
 800dc90:	441a      	add	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dca2:	441a      	add	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b086      	sub	sp, #24
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	3320      	adds	r3, #32
 800dcc8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <dir_next+0x28>
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcd8:	d301      	bcc.n	800dcde <dir_next+0x2c>
 800dcda:	2304      	movs	r3, #4
 800dcdc:	e0aa      	b.n	800de34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f040 8098 	bne.w	800de1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	69db      	ldr	r3, [r3, #28]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10b      	bne.n	800dd14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	095b      	lsrs	r3, r3, #5
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	8912      	ldrh	r2, [r2, #8]
 800dd04:	4293      	cmp	r3, r2
 800dd06:	f0c0 8088 	bcc.w	800de1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	61da      	str	r2, [r3, #28]
 800dd10:	2304      	movs	r3, #4
 800dd12:	e08f      	b.n	800de34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	0a5b      	lsrs	r3, r3, #9
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	8952      	ldrh	r2, [r2, #10]
 800dd1c:	3a01      	subs	r2, #1
 800dd1e:	4013      	ands	r3, r2
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d17a      	bne.n	800de1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	699b      	ldr	r3, [r3, #24]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	f7ff fc88 	bl	800d642 <get_fat>
 800dd32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d801      	bhi.n	800dd3e <dir_next+0x8c>
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	e07a      	b.n	800de34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd44:	d101      	bne.n	800dd4a <dir_next+0x98>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e074      	b.n	800de34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d358      	bcc.n	800de06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	61da      	str	r2, [r3, #28]
 800dd60:	2304      	movs	r3, #4
 800dd62:	e067      	b.n	800de34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	699b      	ldr	r3, [r3, #24]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7ff fe59 	bl	800da24 <create_chain>
 800dd72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <dir_next+0xcc>
 800dd7a:	2307      	movs	r3, #7
 800dd7c:	e05a      	b.n	800de34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d101      	bne.n	800dd88 <dir_next+0xd6>
 800dd84:	2302      	movs	r3, #2
 800dd86:	e055      	b.n	800de34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd8e:	d101      	bne.n	800dd94 <dir_next+0xe2>
 800dd90:	2301      	movs	r3, #1
 800dd92:	e04f      	b.n	800de34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f7ff fb55 	bl	800d444 <sync_window>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <dir_next+0xf2>
 800dda0:	2301      	movs	r3, #1
 800dda2:	e047      	b.n	800de34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3334      	adds	r3, #52	; 0x34
 800dda8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddac:	2100      	movs	r1, #0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff f97f 	bl	800d0b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	6979      	ldr	r1, [r7, #20]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff fc22 	bl	800d604 <clust2sect>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	631a      	str	r2, [r3, #48]	; 0x30
 800ddc6:	e012      	b.n	800ddee <dir_next+0x13c>
						fs->wflag = 1;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff fb38 	bl	800d444 <sync_window>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <dir_next+0x12c>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e02a      	b.n	800de34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	3301      	adds	r3, #1
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde8:	1c5a      	adds	r2, r3, #1
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	631a      	str	r2, [r3, #48]	; 0x30
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	895b      	ldrh	r3, [r3, #10]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d3e6      	bcc.n	800ddc8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	1ad2      	subs	r2, r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800de0c:	6979      	ldr	r1, [r7, #20]
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fbf8 	bl	800d604 <clust2sect>
 800de14:	4602      	mov	r2, r0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de2c:	441a      	add	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3718      	adds	r7, #24
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800de4c:	2100      	movs	r1, #0
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff feb4 	bl	800dbbc <dir_sdi>
 800de54:	4603      	mov	r3, r0
 800de56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d12b      	bne.n	800deb6 <dir_alloc+0x7a>
		n = 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	4619      	mov	r1, r3
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f7ff fb2f 	bl	800d4cc <move_window>
 800de6e:	4603      	mov	r3, r0
 800de70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d11d      	bne.n	800deb4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a1b      	ldr	r3, [r3, #32]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2be5      	cmp	r3, #229	; 0xe5
 800de80:	d004      	beq.n	800de8c <dir_alloc+0x50>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d107      	bne.n	800de9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	3301      	adds	r3, #1
 800de90:	613b      	str	r3, [r7, #16]
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	429a      	cmp	r2, r3
 800de98:	d102      	bne.n	800dea0 <dir_alloc+0x64>
 800de9a:	e00c      	b.n	800deb6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de9c:	2300      	movs	r3, #0
 800de9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dea0:	2101      	movs	r1, #1
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff ff05 	bl	800dcb2 <dir_next>
 800dea8:	4603      	mov	r3, r0
 800deaa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800deac:	7dfb      	ldrb	r3, [r7, #23]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d0d7      	beq.n	800de62 <dir_alloc+0x26>
 800deb2:	e000      	b.n	800deb6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800deb4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	2b04      	cmp	r3, #4
 800deba:	d101      	bne.n	800dec0 <dir_alloc+0x84>
 800debc:	2307      	movs	r3, #7
 800debe:	75fb      	strb	r3, [r7, #23]
	return res;
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b084      	sub	sp, #16
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	331a      	adds	r3, #26
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff f847 	bl	800cf6c <ld_word>
 800dede:	4603      	mov	r3, r0
 800dee0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d109      	bne.n	800defe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	3314      	adds	r3, #20
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff f83c 	bl	800cf6c <ld_word>
 800def4:	4603      	mov	r3, r0
 800def6:	041b      	lsls	r3, r3, #16
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800defe:	68fb      	ldr	r3, [r7, #12]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	331a      	adds	r3, #26
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	b292      	uxth	r2, r2
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff f85f 	bl	800cfe2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b03      	cmp	r3, #3
 800df2a:	d109      	bne.n	800df40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f103 0214 	add.w	r2, r3, #20
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	0c1b      	lsrs	r3, r3, #16
 800df36:	b29b      	uxth	r3, r3
 800df38:	4619      	mov	r1, r3
 800df3a:	4610      	mov	r0, r2
 800df3c:	f7ff f851 	bl	800cfe2 <st_word>
	}
}
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800df48:	b590      	push	{r4, r7, lr}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	331a      	adds	r3, #26
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff f808 	bl	800cf6c <ld_word>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <cmp_lfn+0x1e>
 800df62:	2300      	movs	r3, #0
 800df64:	e059      	b.n	800e01a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df6e:	1e5a      	subs	r2, r3, #1
 800df70:	4613      	mov	r3, r2
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df7c:	2301      	movs	r3, #1
 800df7e:	81fb      	strh	r3, [r7, #14]
 800df80:	2300      	movs	r3, #0
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	e033      	b.n	800dfee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800df86:	4a27      	ldr	r2, [pc, #156]	; (800e024 <cmp_lfn+0xdc>)
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	4413      	add	r3, r2
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	4413      	add	r3, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7fe ffe9 	bl	800cf6c <ld_word>
 800df9a:	4603      	mov	r3, r0
 800df9c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800df9e:	89fb      	ldrh	r3, [r7, #14]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01a      	beq.n	800dfda <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	2bfe      	cmp	r3, #254	; 0xfe
 800dfa8:	d812      	bhi.n	800dfd0 <cmp_lfn+0x88>
 800dfaa:	89bb      	ldrh	r3, [r7, #12]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f001 fe4f 	bl	800fc50 <ff_wtoupper>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	461c      	mov	r4, r3
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	617a      	str	r2, [r7, #20]
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f001 fe43 	bl	800fc50 <ff_wtoupper>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	429c      	cmp	r4, r3
 800dfce:	d001      	beq.n	800dfd4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e022      	b.n	800e01a <cmp_lfn+0xd2>
			}
			wc = uc;
 800dfd4:	89bb      	ldrh	r3, [r7, #12]
 800dfd6:	81fb      	strh	r3, [r7, #14]
 800dfd8:	e006      	b.n	800dfe8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dfda:	89bb      	ldrh	r3, [r7, #12]
 800dfdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d001      	beq.n	800dfe8 <cmp_lfn+0xa0>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e018      	b.n	800e01a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	3301      	adds	r3, #1
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b0c      	cmp	r3, #12
 800dff2:	d9c8      	bls.n	800df86 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00b      	beq.n	800e018 <cmp_lfn+0xd0>
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d008      	beq.n	800e018 <cmp_lfn+0xd0>
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	4413      	add	r3, r2
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d001      	beq.n	800e018 <cmp_lfn+0xd0>
 800e014:	2300      	movs	r3, #0
 800e016:	e000      	b.n	800e01a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e018:	2301      	movs	r3, #1
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd90      	pop	{r4, r7, pc}
 800e022:	bf00      	nop
 800e024:	08012618 	.word	0x08012618

0800e028 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4611      	mov	r1, r2
 800e034:	461a      	mov	r2, r3
 800e036:	460b      	mov	r3, r1
 800e038:	71fb      	strb	r3, [r7, #7]
 800e03a:	4613      	mov	r3, r2
 800e03c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	330d      	adds	r3, #13
 800e042:	79ba      	ldrb	r2, [r7, #6]
 800e044:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	330b      	adds	r3, #11
 800e04a:	220f      	movs	r2, #15
 800e04c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	330c      	adds	r3, #12
 800e052:	2200      	movs	r2, #0
 800e054:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	331a      	adds	r3, #26
 800e05a:	2100      	movs	r1, #0
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe ffc0 	bl	800cfe2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e062:	79fb      	ldrb	r3, [r7, #7]
 800e064:	1e5a      	subs	r2, r3, #1
 800e066:	4613      	mov	r3, r2
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4413      	add	r3, r2
 800e070:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	82fb      	strh	r3, [r7, #22]
 800e076:	2300      	movs	r3, #0
 800e078:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e07a:	8afb      	ldrh	r3, [r7, #22]
 800e07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e080:	4293      	cmp	r3, r2
 800e082:	d007      	beq.n	800e094 <put_lfn+0x6c>
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	61fa      	str	r2, [r7, #28]
 800e08a:	005b      	lsls	r3, r3, #1
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4413      	add	r3, r2
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e094:	4a17      	ldr	r2, [pc, #92]	; (800e0f4 <put_lfn+0xcc>)
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	4413      	add	r3, r2
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	8afa      	ldrh	r2, [r7, #22]
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe ff9b 	bl	800cfe2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e0ac:	8afb      	ldrh	r3, [r7, #22]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <put_lfn+0x90>
 800e0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	61bb      	str	r3, [r7, #24]
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b0c      	cmp	r3, #12
 800e0c2:	d9da      	bls.n	800e07a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e0c4:	8afb      	ldrh	r3, [r7, #22]
 800e0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d006      	beq.n	800e0dc <put_lfn+0xb4>
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d103      	bne.n	800e0e4 <put_lfn+0xbc>
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	79fa      	ldrb	r2, [r7, #7]
 800e0e8:	701a      	strb	r2, [r3, #0]
}
 800e0ea:	bf00      	nop
 800e0ec:	3720      	adds	r7, #32
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	08012618 	.word	0x08012618

0800e0f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e106:	220b      	movs	r2, #11
 800e108:	68b9      	ldr	r1, [r7, #8]
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7fe ffb0 	bl	800d070 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	2b05      	cmp	r3, #5
 800e114:	d92b      	bls.n	800e16e <gen_numname+0x76>
		sr = seq;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e11a:	e022      	b.n	800e162 <gen_numname+0x6a>
			wc = *lfn++;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	1c9a      	adds	r2, r3, #2
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e126:	2300      	movs	r3, #0
 800e128:	62bb      	str	r3, [r7, #40]	; 0x28
 800e12a:	e017      	b.n	800e15c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	005a      	lsls	r2, r3, #1
 800e130:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e13c:	085b      	lsrs	r3, r3, #1
 800e13e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e146:	2b00      	cmp	r3, #0
 800e148:	d005      	beq.n	800e156 <gen_numname+0x5e>
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e150:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e154:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e158:	3301      	adds	r3, #1
 800e15a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	2b0f      	cmp	r3, #15
 800e160:	d9e4      	bls.n	800e12c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1d8      	bne.n	800e11c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e16e:	2307      	movs	r3, #7
 800e170:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	b2db      	uxtb	r3, r3
 800e176:	f003 030f 	and.w	r3, r3, #15
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	3330      	adds	r3, #48	; 0x30
 800e17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e186:	2b39      	cmp	r3, #57	; 0x39
 800e188:	d904      	bls.n	800e194 <gen_numname+0x9c>
 800e18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e18e:	3307      	adds	r3, #7
 800e190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	62ba      	str	r2, [r7, #40]	; 0x28
 800e19a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e19e:	4413      	add	r3, r2
 800e1a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	091b      	lsrs	r3, r3, #4
 800e1ac:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1de      	bne.n	800e172 <gen_numname+0x7a>
	ns[i] = '~';
 800e1b4:	f107 0214 	add.w	r2, r7, #20
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	4413      	add	r3, r2
 800e1bc:	227e      	movs	r2, #126	; 0x7e
 800e1be:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e1c4:	e002      	b.n	800e1cc <gen_numname+0xd4>
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d205      	bcs.n	800e1e0 <gen_numname+0xe8>
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d8:	4413      	add	r3, r2
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	2b20      	cmp	r3, #32
 800e1de:	d1f2      	bne.n	800e1c6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	2b07      	cmp	r3, #7
 800e1e4:	d808      	bhi.n	800e1f8 <gen_numname+0x100>
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	62ba      	str	r2, [r7, #40]	; 0x28
 800e1ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e1f6:	e000      	b.n	800e1fa <gen_numname+0x102>
 800e1f8:	2120      	movs	r1, #32
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	627a      	str	r2, [r7, #36]	; 0x24
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	4413      	add	r3, r2
 800e204:	460a      	mov	r2, r1
 800e206:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	2b07      	cmp	r3, #7
 800e20c:	d9e8      	bls.n	800e1e0 <gen_numname+0xe8>
}
 800e20e:	bf00      	nop
 800e210:	3730      	adds	r7, #48	; 0x30
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e222:	230b      	movs	r3, #11
 800e224:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e226:	7bfb      	ldrb	r3, [r7, #15]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	0852      	lsrs	r2, r2, #1
 800e22c:	01db      	lsls	r3, r3, #7
 800e22e:	4313      	orrs	r3, r2
 800e230:	b2da      	uxtb	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	1c59      	adds	r1, r3, #1
 800e236:	6079      	str	r1, [r7, #4]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	4413      	add	r3, r2
 800e23c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3b01      	subs	r3, #1
 800e242:	60bb      	str	r3, [r7, #8]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1ed      	bne.n	800e226 <sum_sfn+0x10>
	return sum;
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e266:	2100      	movs	r1, #0
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fca7 	bl	800dbbc <dir_sdi>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <dir_find+0x24>
 800e278:	7dfb      	ldrb	r3, [r7, #23]
 800e27a:	e0a9      	b.n	800e3d0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e27c:	23ff      	movs	r3, #255	; 0xff
 800e27e:	753b      	strb	r3, [r7, #20]
 800e280:	7d3b      	ldrb	r3, [r7, #20]
 800e282:	757b      	strb	r3, [r7, #21]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e28a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	4619      	mov	r1, r3
 800e292:	6938      	ldr	r0, [r7, #16]
 800e294:	f7ff f91a 	bl	800d4cc <move_window>
 800e298:	4603      	mov	r3, r0
 800e29a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 8090 	bne.w	800e3c4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e2ac:	7dbb      	ldrb	r3, [r7, #22]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d102      	bne.n	800e2b8 <dir_find+0x60>
 800e2b2:	2304      	movs	r3, #4
 800e2b4:	75fb      	strb	r3, [r7, #23]
 800e2b6:	e08a      	b.n	800e3ce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	330b      	adds	r3, #11
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2c4:	73fb      	strb	r3, [r7, #15]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7bfa      	ldrb	r2, [r7, #15]
 800e2ca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e2cc:	7dbb      	ldrb	r3, [r7, #22]
 800e2ce:	2be5      	cmp	r3, #229	; 0xe5
 800e2d0:	d007      	beq.n	800e2e2 <dir_find+0x8a>
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	f003 0308 	and.w	r3, r3, #8
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d009      	beq.n	800e2f0 <dir_find+0x98>
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	2b0f      	cmp	r3, #15
 800e2e0:	d006      	beq.n	800e2f0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e2e2:	23ff      	movs	r3, #255	; 0xff
 800e2e4:	757b      	strb	r3, [r7, #21]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2ec:	631a      	str	r2, [r3, #48]	; 0x30
 800e2ee:	e05e      	b.n	800e3ae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	2b0f      	cmp	r3, #15
 800e2f4:	d136      	bne.n	800e364 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e300:	2b00      	cmp	r3, #0
 800e302:	d154      	bne.n	800e3ae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e304:	7dbb      	ldrb	r3, [r7, #22]
 800e306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00d      	beq.n	800e32a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	7b5b      	ldrb	r3, [r3, #13]
 800e314:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e316:	7dbb      	ldrb	r3, [r7, #22]
 800e318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e31c:	75bb      	strb	r3, [r7, #22]
 800e31e:	7dbb      	ldrb	r3, [r7, #22]
 800e320:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	695a      	ldr	r2, [r3, #20]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e32a:	7dba      	ldrb	r2, [r7, #22]
 800e32c:	7d7b      	ldrb	r3, [r7, #21]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d115      	bne.n	800e35e <dir_find+0x106>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	330d      	adds	r3, #13
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	7d3a      	ldrb	r2, [r7, #20]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d10e      	bne.n	800e35e <dir_find+0x106>
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	68da      	ldr	r2, [r3, #12]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a1b      	ldr	r3, [r3, #32]
 800e348:	4619      	mov	r1, r3
 800e34a:	4610      	mov	r0, r2
 800e34c:	f7ff fdfc 	bl	800df48 <cmp_lfn>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <dir_find+0x106>
 800e356:	7d7b      	ldrb	r3, [r7, #21]
 800e358:	3b01      	subs	r3, #1
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	e000      	b.n	800e360 <dir_find+0x108>
 800e35e:	23ff      	movs	r3, #255	; 0xff
 800e360:	757b      	strb	r3, [r7, #21]
 800e362:	e024      	b.n	800e3ae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e364:	7d7b      	ldrb	r3, [r7, #21]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <dir_find+0x126>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	4618      	mov	r0, r3
 800e370:	f7ff ff51 	bl	800e216 <sum_sfn>
 800e374:	4603      	mov	r3, r0
 800e376:	461a      	mov	r2, r3
 800e378:	7d3b      	ldrb	r3, [r7, #20]
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d024      	beq.n	800e3c8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <dir_find+0x14a>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a18      	ldr	r0, [r3, #32]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3324      	adds	r3, #36	; 0x24
 800e394:	220b      	movs	r2, #11
 800e396:	4619      	mov	r1, r3
 800e398:	f7fe fea5 	bl	800d0e6 <mem_cmp>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d014      	beq.n	800e3cc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e3a2:	23ff      	movs	r3, #255	; 0xff
 800e3a4:	757b      	strb	r3, [r7, #21]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3ac:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff fc7e 	bl	800dcb2 <dir_next>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f43f af65 	beq.w	800e28c <dir_find+0x34>
 800e3c2:	e004      	b.n	800e3ce <dir_find+0x176>
		if (res != FR_OK) break;
 800e3c4:	bf00      	nop
 800e3c6:	e002      	b.n	800e3ce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e3c8:	bf00      	nop
 800e3ca:	e000      	b.n	800e3ce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e3cc:	bf00      	nop

	return res;
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08c      	sub	sp, #48	; 0x30
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <dir_register+0x20>
 800e3f4:	2306      	movs	r3, #6
 800e3f6:	e0e0      	b.n	800e5ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3fc:	e002      	b.n	800e404 <dir_register+0x2c>
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	3301      	adds	r3, #1
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	68da      	ldr	r2, [r3, #12]
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	4413      	add	r3, r2
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1f4      	bne.n	800e3fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e41a:	f107 030c 	add.w	r3, r7, #12
 800e41e:	220c      	movs	r2, #12
 800e420:	4618      	mov	r0, r3
 800e422:	f7fe fe25 	bl	800d070 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d032      	beq.n	800e496 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2240      	movs	r2, #64	; 0x40
 800e434:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e438:	2301      	movs	r3, #1
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e43c:	e016      	b.n	800e46c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	68da      	ldr	r2, [r3, #12]
 800e448:	f107 010c 	add.w	r1, r7, #12
 800e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44e:	f7ff fe53 	bl	800e0f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff ff00 	bl	800e258 <dir_find>
 800e458:	4603      	mov	r3, r0
 800e45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	3301      	adds	r3, #1
 800e46a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	2b63      	cmp	r3, #99	; 0x63
 800e470:	d9e5      	bls.n	800e43e <dir_register+0x66>
 800e472:	e000      	b.n	800e476 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e474:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	2b64      	cmp	r3, #100	; 0x64
 800e47a:	d101      	bne.n	800e480 <dir_register+0xa8>
 800e47c:	2307      	movs	r3, #7
 800e47e:	e09c      	b.n	800e5ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e484:	2b04      	cmp	r3, #4
 800e486:	d002      	beq.n	800e48e <dir_register+0xb6>
 800e488:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e48c:	e095      	b.n	800e5ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e48e:	7dfa      	ldrb	r2, [r7, #23]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e496:	7dfb      	ldrb	r3, [r7, #23]
 800e498:	f003 0302 	and.w	r3, r3, #2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d007      	beq.n	800e4b0 <dir_register+0xd8>
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	330c      	adds	r3, #12
 800e4a4:	4a47      	ldr	r2, [pc, #284]	; (800e5c4 <dir_register+0x1ec>)
 800e4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4aa:	089b      	lsrs	r3, r3, #2
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	e000      	b.n	800e4b2 <dir_register+0xda>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e4b4:	6a39      	ldr	r1, [r7, #32]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff fcc0 	bl	800de3c <dir_alloc>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e4c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d148      	bne.n	800e55c <dir_register+0x184>
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	623b      	str	r3, [r7, #32]
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d042      	beq.n	800e55c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	695a      	ldr	r2, [r3, #20]
 800e4da:	6a3b      	ldr	r3, [r7, #32]
 800e4dc:	015b      	lsls	r3, r3, #5
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff fb6a 	bl	800dbbc <dir_sdi>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d132      	bne.n	800e55c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3324      	adds	r3, #36	; 0x24
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff fe8b 	bl	800e216 <sum_sfn>
 800e500:	4603      	mov	r3, r0
 800e502:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	69db      	ldr	r3, [r3, #28]
 800e508:	4619      	mov	r1, r3
 800e50a:	69f8      	ldr	r0, [r7, #28]
 800e50c:	f7fe ffde 	bl	800d4cc <move_window>
 800e510:	4603      	mov	r3, r0
 800e512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d11d      	bne.n	800e55a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	68d8      	ldr	r0, [r3, #12]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a19      	ldr	r1, [r3, #32]
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	7efb      	ldrb	r3, [r7, #27]
 800e52c:	f7ff fd7c 	bl	800e028 <put_lfn>
				fs->wflag = 1;
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	2201      	movs	r2, #1
 800e534:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e536:	2100      	movs	r1, #0
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff fbba 	bl	800dcb2 <dir_next>
 800e53e:	4603      	mov	r3, r0
 800e540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d107      	bne.n	800e55c <dir_register+0x184>
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	3b01      	subs	r3, #1
 800e550:	623b      	str	r3, [r7, #32]
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1d5      	bne.n	800e504 <dir_register+0x12c>
 800e558:	e000      	b.n	800e55c <dir_register+0x184>
				if (res != FR_OK) break;
 800e55a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e55c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e560:	2b00      	cmp	r3, #0
 800e562:	d128      	bne.n	800e5b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	69db      	ldr	r3, [r3, #28]
 800e568:	4619      	mov	r1, r3
 800e56a:	69f8      	ldr	r0, [r7, #28]
 800e56c:	f7fe ffae 	bl	800d4cc <move_window>
 800e570:	4603      	mov	r3, r0
 800e572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d11b      	bne.n	800e5b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	2220      	movs	r2, #32
 800e584:	2100      	movs	r1, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe fd93 	bl	800d0b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a18      	ldr	r0, [r3, #32]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3324      	adds	r3, #36	; 0x24
 800e594:	220b      	movs	r2, #11
 800e596:	4619      	mov	r1, r3
 800e598:	f7fe fd6a 	bl	800d070 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a1b      	ldr	r3, [r3, #32]
 800e5a6:	330c      	adds	r3, #12
 800e5a8:	f002 0218 	and.w	r2, r2, #24
 800e5ac:	b2d2      	uxtb	r2, r2
 800e5ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3730      	adds	r7, #48	; 0x30
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	4ec4ec4f 	.word	0x4ec4ec4f

0800e5c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08a      	sub	sp, #40	; 0x28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	613b      	str	r3, [r7, #16]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	60fb      	str	r3, [r7, #12]
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	61ba      	str	r2, [r7, #24]
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5f8:	2b1f      	cmp	r3, #31
 800e5fa:	d940      	bls.n	800e67e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5fe:	2b2f      	cmp	r3, #47	; 0x2f
 800e600:	d006      	beq.n	800e610 <create_name+0x48>
 800e602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e604:	2b5c      	cmp	r3, #92	; 0x5c
 800e606:	d110      	bne.n	800e62a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e608:	e002      	b.n	800e610 <create_name+0x48>
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	3301      	adds	r3, #1
 800e60e:	61bb      	str	r3, [r7, #24]
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	4413      	add	r3, r2
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b2f      	cmp	r3, #47	; 0x2f
 800e61a:	d0f6      	beq.n	800e60a <create_name+0x42>
 800e61c:	693a      	ldr	r2, [r7, #16]
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	4413      	add	r3, r2
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b5c      	cmp	r3, #92	; 0x5c
 800e626:	d0f0      	beq.n	800e60a <create_name+0x42>
			break;
 800e628:	e02a      	b.n	800e680 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2bfe      	cmp	r3, #254	; 0xfe
 800e62e:	d901      	bls.n	800e634 <create_name+0x6c>
 800e630:	2306      	movs	r3, #6
 800e632:	e177      	b.n	800e924 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e636:	b2db      	uxtb	r3, r3
 800e638:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e63c:	2101      	movs	r1, #1
 800e63e:	4618      	mov	r0, r3
 800e640:	f001 faca 	bl	800fbd8 <ff_convert>
 800e644:	4603      	mov	r3, r0
 800e646:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <create_name+0x8a>
 800e64e:	2306      	movs	r3, #6
 800e650:	e168      	b.n	800e924 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e654:	2b7f      	cmp	r3, #127	; 0x7f
 800e656:	d809      	bhi.n	800e66c <create_name+0xa4>
 800e658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e65a:	4619      	mov	r1, r3
 800e65c:	48b3      	ldr	r0, [pc, #716]	; (800e92c <create_name+0x364>)
 800e65e:	f7fe fd69 	bl	800d134 <chk_chr>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <create_name+0xa4>
 800e668:	2306      	movs	r3, #6
 800e66a:	e15b      	b.n	800e924 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	617a      	str	r2, [r7, #20]
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e67a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e67c:	e7b4      	b.n	800e5e8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e67e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	441a      	add	r2, r3
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e68c:	2b1f      	cmp	r3, #31
 800e68e:	d801      	bhi.n	800e694 <create_name+0xcc>
 800e690:	2304      	movs	r3, #4
 800e692:	e000      	b.n	800e696 <create_name+0xce>
 800e694:	2300      	movs	r3, #0
 800e696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e69a:	e011      	b.n	800e6c0 <create_name+0xf8>
		w = lfn[di - 1];
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b0:	2b20      	cmp	r3, #32
 800e6b2:	d002      	beq.n	800e6ba <create_name+0xf2>
 800e6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b6:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b8:	d106      	bne.n	800e6c8 <create_name+0x100>
		di--;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1ea      	bne.n	800e69c <create_name+0xd4>
 800e6c6:	e000      	b.n	800e6ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e6c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d101      	bne.n	800e6e0 <create_name+0x118>
 800e6dc:	2306      	movs	r3, #6
 800e6de:	e121      	b.n	800e924 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3324      	adds	r3, #36	; 0x24
 800e6e4:	220b      	movs	r2, #11
 800e6e6:	2120      	movs	r1, #32
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe fce2 	bl	800d0b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	61bb      	str	r3, [r7, #24]
 800e6f2:	e002      	b.n	800e6fa <create_name+0x132>
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	4413      	add	r3, r2
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	2b20      	cmp	r3, #32
 800e706:	d0f5      	beq.n	800e6f4 <create_name+0x12c>
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	4413      	add	r3, r2
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	2b2e      	cmp	r3, #46	; 0x2e
 800e714:	d0ee      	beq.n	800e6f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d009      	beq.n	800e730 <create_name+0x168>
 800e71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e720:	f043 0303 	orr.w	r3, r3, #3
 800e724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e728:	e002      	b.n	800e730 <create_name+0x168>
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d009      	beq.n	800e74a <create_name+0x182>
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e73c:	3b01      	subs	r3, #1
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	4413      	add	r3, r2
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	2b2e      	cmp	r3, #46	; 0x2e
 800e748:	d1ef      	bne.n	800e72a <create_name+0x162>

	i = b = 0; ni = 8;
 800e74a:	2300      	movs	r3, #0
 800e74c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e750:	2300      	movs	r3, #0
 800e752:	623b      	str	r3, [r7, #32]
 800e754:	2308      	movs	r3, #8
 800e756:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	61ba      	str	r2, [r7, #24]
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	4413      	add	r3, r2
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 8090 	beq.w	800e890 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e772:	2b20      	cmp	r3, #32
 800e774:	d006      	beq.n	800e784 <create_name+0x1bc>
 800e776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e778:	2b2e      	cmp	r3, #46	; 0x2e
 800e77a:	d10a      	bne.n	800e792 <create_name+0x1ca>
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	429a      	cmp	r2, r3
 800e782:	d006      	beq.n	800e792 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e788:	f043 0303 	orr.w	r3, r3, #3
 800e78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e790:	e07d      	b.n	800e88e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e792:	6a3a      	ldr	r2, [r7, #32]
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	429a      	cmp	r2, r3
 800e798:	d203      	bcs.n	800e7a2 <create_name+0x1da>
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d123      	bne.n	800e7ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	2b0b      	cmp	r3, #11
 800e7a6:	d106      	bne.n	800e7b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ac:	f043 0303 	orr.w	r3, r3, #3
 800e7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7b4:	e06f      	b.n	800e896 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d005      	beq.n	800e7ca <create_name+0x202>
 800e7be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c2:	f043 0303 	orr.w	r3, r3, #3
 800e7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e7ca:	69ba      	ldr	r2, [r7, #24]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d860      	bhi.n	800e894 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	61bb      	str	r3, [r7, #24]
 800e7d6:	2308      	movs	r3, #8
 800e7d8:	623b      	str	r3, [r7, #32]
 800e7da:	230b      	movs	r3, #11
 800e7dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e7de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7e8:	e051      	b.n	800e88e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ec:	2b7f      	cmp	r3, #127	; 0x7f
 800e7ee:	d914      	bls.n	800e81a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f001 f9ef 	bl	800fbd8 <ff_convert>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <create_name+0x246>
 800e804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e806:	3b80      	subs	r3, #128	; 0x80
 800e808:	4a49      	ldr	r2, [pc, #292]	; (800e930 <create_name+0x368>)
 800e80a:	5cd3      	ldrb	r3, [r2, r3]
 800e80c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e80e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e812:	f043 0302 	orr.w	r3, r3, #2
 800e816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d007      	beq.n	800e830 <create_name+0x268>
 800e820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e822:	4619      	mov	r1, r3
 800e824:	4843      	ldr	r0, [pc, #268]	; (800e934 <create_name+0x36c>)
 800e826:	f7fe fc85 	bl	800d134 <chk_chr>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d008      	beq.n	800e842 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e830:	235f      	movs	r3, #95	; 0x5f
 800e832:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e838:	f043 0303 	orr.w	r3, r3, #3
 800e83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e840:	e01b      	b.n	800e87a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e844:	2b40      	cmp	r3, #64	; 0x40
 800e846:	d909      	bls.n	800e85c <create_name+0x294>
 800e848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e84a:	2b5a      	cmp	r3, #90	; 0x5a
 800e84c:	d806      	bhi.n	800e85c <create_name+0x294>
					b |= 2;
 800e84e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e852:	f043 0302 	orr.w	r3, r3, #2
 800e856:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e85a:	e00e      	b.n	800e87a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e85c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e85e:	2b60      	cmp	r3, #96	; 0x60
 800e860:	d90b      	bls.n	800e87a <create_name+0x2b2>
 800e862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e864:	2b7a      	cmp	r3, #122	; 0x7a
 800e866:	d808      	bhi.n	800e87a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e876:	3b20      	subs	r3, #32
 800e878:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	623a      	str	r2, [r7, #32]
 800e880:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e882:	b2d1      	uxtb	r1, r2
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	4413      	add	r3, r2
 800e888:	460a      	mov	r2, r1
 800e88a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e88e:	e763      	b.n	800e758 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e890:	bf00      	nop
 800e892:	e000      	b.n	800e896 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e894:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e89c:	2be5      	cmp	r3, #229	; 0xe5
 800e89e:	d103      	bne.n	800e8a8 <create_name+0x2e0>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2205      	movs	r2, #5
 800e8a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	2b08      	cmp	r3, #8
 800e8ac:	d104      	bne.n	800e8b8 <create_name+0x2f0>
 800e8ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e8b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8bc:	f003 030c 	and.w	r3, r3, #12
 800e8c0:	2b0c      	cmp	r3, #12
 800e8c2:	d005      	beq.n	800e8d0 <create_name+0x308>
 800e8c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8c8:	f003 0303 	and.w	r3, r3, #3
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d105      	bne.n	800e8dc <create_name+0x314>
 800e8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d4:	f043 0302 	orr.w	r3, r3, #2
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e0:	f003 0302 	and.w	r3, r3, #2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d117      	bne.n	800e918 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8ec:	f003 0303 	and.w	r3, r3, #3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d105      	bne.n	800e900 <create_name+0x338>
 800e8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f8:	f043 0310 	orr.w	r3, r3, #16
 800e8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e904:	f003 030c 	and.w	r3, r3, #12
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d105      	bne.n	800e918 <create_name+0x350>
 800e90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e910:	f043 0308 	orr.w	r3, r3, #8
 800e914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e91e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e922:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e924:	4618      	mov	r0, r3
 800e926:	3728      	adds	r7, #40	; 0x28
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	0801251c 	.word	0x0801251c
 800e930:	08012598 	.word	0x08012598
 800e934:	08012528 	.word	0x08012528

0800e938 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e94c:	e002      	b.n	800e954 <follow_path+0x1c>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	3301      	adds	r3, #1
 800e952:	603b      	str	r3, [r7, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	2b2f      	cmp	r3, #47	; 0x2f
 800e95a:	d0f8      	beq.n	800e94e <follow_path+0x16>
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	2b5c      	cmp	r3, #92	; 0x5c
 800e962:	d0f4      	beq.n	800e94e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	2200      	movs	r2, #0
 800e968:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	2b1f      	cmp	r3, #31
 800e970:	d80a      	bhi.n	800e988 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2280      	movs	r2, #128	; 0x80
 800e976:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e97a:	2100      	movs	r1, #0
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff f91d 	bl	800dbbc <dir_sdi>
 800e982:	4603      	mov	r3, r0
 800e984:	75fb      	strb	r3, [r7, #23]
 800e986:	e043      	b.n	800ea10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e988:	463b      	mov	r3, r7
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff fe1b 	bl	800e5c8 <create_name>
 800e992:	4603      	mov	r3, r0
 800e994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e996:	7dfb      	ldrb	r3, [r7, #23]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d134      	bne.n	800ea06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff fc5b 	bl	800e258 <dir_find>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00a      	beq.n	800e9ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e9b4:	7dfb      	ldrb	r3, [r7, #23]
 800e9b6:	2b04      	cmp	r3, #4
 800e9b8:	d127      	bne.n	800ea0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e9ba:	7afb      	ldrb	r3, [r7, #11]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d122      	bne.n	800ea0a <follow_path+0xd2>
 800e9c4:	2305      	movs	r3, #5
 800e9c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e9c8:	e01f      	b.n	800ea0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e9ca:	7afb      	ldrb	r3, [r7, #11]
 800e9cc:	f003 0304 	and.w	r3, r3, #4
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11c      	bne.n	800ea0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	799b      	ldrb	r3, [r3, #6]
 800e9d8:	f003 0310 	and.w	r3, r3, #16
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d102      	bne.n	800e9e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e9e0:	2305      	movs	r3, #5
 800e9e2:	75fb      	strb	r3, [r7, #23]
 800e9e4:	e014      	b.n	800ea10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	695b      	ldr	r3, [r3, #20]
 800e9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f4:	4413      	add	r3, r2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7ff fa66 	bl	800deca <ld_clust>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea04:	e7c0      	b.n	800e988 <follow_path+0x50>
			if (res != FR_OK) break;
 800ea06:	bf00      	nop
 800ea08:	e002      	b.n	800ea10 <follow_path+0xd8>
				break;
 800ea0a:	bf00      	nop
 800ea0c:	e000      	b.n	800ea10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea0e:	bf00      	nop
			}
		}
	}

	return res;
 800ea10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b087      	sub	sp, #28
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d031      	beq.n	800ea94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	617b      	str	r3, [r7, #20]
 800ea36:	e002      	b.n	800ea3e <get_ldnumber+0x24>
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	617b      	str	r3, [r7, #20]
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b1f      	cmp	r3, #31
 800ea44:	d903      	bls.n	800ea4e <get_ldnumber+0x34>
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b3a      	cmp	r3, #58	; 0x3a
 800ea4c:	d1f4      	bne.n	800ea38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	2b3a      	cmp	r3, #58	; 0x3a
 800ea54:	d11c      	bne.n	800ea90 <get_ldnumber+0x76>
			tp = *path;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	60fa      	str	r2, [r7, #12]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	3b30      	subs	r3, #48	; 0x30
 800ea66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2b09      	cmp	r3, #9
 800ea6c:	d80e      	bhi.n	800ea8c <get_ldnumber+0x72>
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d10a      	bne.n	800ea8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d107      	bne.n	800ea8c <get_ldnumber+0x72>
					vol = (int)i;
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	3301      	adds	r3, #1
 800ea84:	617b      	str	r3, [r7, #20]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	e002      	b.n	800ea96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea90:	2300      	movs	r3, #0
 800ea92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea94:	693b      	ldr	r3, [r7, #16]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	371c      	adds	r7, #28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	70da      	strb	r2, [r3, #3]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eabc:	6839      	ldr	r1, [r7, #0]
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7fe fd04 	bl	800d4cc <move_window>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <check_fs+0x2a>
 800eaca:	2304      	movs	r3, #4
 800eacc:	e038      	b.n	800eb40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	3334      	adds	r3, #52	; 0x34
 800ead2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fe fa48 	bl	800cf6c <ld_word>
 800eadc:	4603      	mov	r3, r0
 800eade:	461a      	mov	r2, r3
 800eae0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d001      	beq.n	800eaec <check_fs+0x48>
 800eae8:	2303      	movs	r3, #3
 800eaea:	e029      	b.n	800eb40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eaf2:	2be9      	cmp	r3, #233	; 0xe9
 800eaf4:	d009      	beq.n	800eb0a <check_fs+0x66>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eafc:	2beb      	cmp	r3, #235	; 0xeb
 800eafe:	d11e      	bne.n	800eb3e <check_fs+0x9a>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eb06:	2b90      	cmp	r3, #144	; 0x90
 800eb08:	d119      	bne.n	800eb3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3334      	adds	r3, #52	; 0x34
 800eb0e:	3336      	adds	r3, #54	; 0x36
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe fa43 	bl	800cf9c <ld_dword>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb1c:	4a0a      	ldr	r2, [pc, #40]	; (800eb48 <check_fs+0xa4>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d101      	bne.n	800eb26 <check_fs+0x82>
 800eb22:	2300      	movs	r3, #0
 800eb24:	e00c      	b.n	800eb40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	3334      	adds	r3, #52	; 0x34
 800eb2a:	3352      	adds	r3, #82	; 0x52
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fe fa35 	bl	800cf9c <ld_dword>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <check_fs+0xa8>)
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d101      	bne.n	800eb3e <check_fs+0x9a>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	e000      	b.n	800eb40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eb3e:	2302      	movs	r3, #2
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	00544146 	.word	0x00544146
 800eb4c:	33544146 	.word	0x33544146

0800eb50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b096      	sub	sp, #88	; 0x58
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2200      	movs	r2, #0
 800eb62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f7ff ff58 	bl	800ea1a <get_ldnumber>
 800eb6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	da01      	bge.n	800eb76 <find_volume+0x26>
 800eb72:	230b      	movs	r3, #11
 800eb74:	e231      	b.n	800efda <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb76:	4aa8      	ldr	r2, [pc, #672]	; (800ee18 <find_volume+0x2c8>)
 800eb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d101      	bne.n	800eb8a <find_volume+0x3a>
 800eb86:	230c      	movs	r3, #12
 800eb88:	e227      	b.n	800efda <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	f023 0301 	bic.w	r3, r3, #1
 800eb96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01a      	beq.n	800ebd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba2:	785b      	ldrb	r3, [r3, #1]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe f943 	bl	800ce30 <disk_status>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ebb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10c      	bne.n	800ebd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d007      	beq.n	800ebd2 <find_volume+0x82>
 800ebc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebc6:	f003 0304 	and.w	r3, r3, #4
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ebce:	230a      	movs	r3, #10
 800ebd0:	e203      	b.n	800efda <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e201      	b.n	800efda <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ebd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd8:	2200      	movs	r2, #0
 800ebda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ebdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe f93b 	bl	800ce64 <disk_initialize>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ebf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec00:	2303      	movs	r3, #3
 800ec02:	e1ea      	b.n	800efda <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d007      	beq.n	800ec1a <find_volume+0xca>
 800ec0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec0e:	f003 0304 	and.w	r3, r3, #4
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ec16:	230a      	movs	r3, #10
 800ec18:	e1df      	b.n	800efda <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ec1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec22:	f7ff ff3f 	bl	800eaa4 <check_fs>
 800ec26:	4603      	mov	r3, r0
 800ec28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ec2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d14b      	bne.n	800eccc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec34:	2300      	movs	r3, #0
 800ec36:	643b      	str	r3, [r7, #64]	; 0x40
 800ec38:	e01f      	b.n	800ec7a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec42:	011b      	lsls	r3, r3, #4
 800ec44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ec48:	4413      	add	r3, r2
 800ec4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	3304      	adds	r3, #4
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d006      	beq.n	800ec64 <find_volume+0x114>
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	3308      	adds	r3, #8
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fe f99e 	bl	800cf9c <ld_dword>
 800ec60:	4602      	mov	r2, r0
 800ec62:	e000      	b.n	800ec66 <find_volume+0x116>
 800ec64:	2200      	movs	r2, #0
 800ec66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ec6e:	440b      	add	r3, r1
 800ec70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec76:	3301      	adds	r3, #1
 800ec78:	643b      	str	r3, [r7, #64]	; 0x40
 800ec7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d9dc      	bls.n	800ec3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec80:	2300      	movs	r3, #0
 800ec82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <find_volume+0x140>
 800ec8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ec98:	4413      	add	r3, r2
 800ec9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <find_volume+0x162>
 800eca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecaa:	f7ff fefb 	bl	800eaa4 <check_fs>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	e000      	b.n	800ecb4 <find_volume+0x164>
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ecb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d905      	bls.n	800eccc <find_volume+0x17c>
 800ecc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	643b      	str	r3, [r7, #64]	; 0x40
 800ecc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	d9e1      	bls.n	800ec90 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecd0:	2b04      	cmp	r3, #4
 800ecd2:	d101      	bne.n	800ecd8 <find_volume+0x188>
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e180      	b.n	800efda <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ecd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d901      	bls.n	800ece4 <find_volume+0x194>
 800ece0:	230d      	movs	r3, #13
 800ece2:	e17a      	b.n	800efda <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	3334      	adds	r3, #52	; 0x34
 800ece8:	330b      	adds	r3, #11
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe f93e 	bl	800cf6c <ld_word>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf6:	d001      	beq.n	800ecfc <find_volume+0x1ac>
 800ecf8:	230d      	movs	r3, #13
 800ecfa:	e16e      	b.n	800efda <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfe:	3334      	adds	r3, #52	; 0x34
 800ed00:	3316      	adds	r3, #22
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe f932 	bl	800cf6c <ld_word>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <find_volume+0x1d0>
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	3334      	adds	r3, #52	; 0x34
 800ed16:	3324      	adds	r3, #36	; 0x24
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe f93f 	bl	800cf9c <ld_dword>
 800ed1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ed26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	789b      	ldrb	r3, [r3, #2]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d005      	beq.n	800ed44 <find_volume+0x1f4>
 800ed38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3a:	789b      	ldrb	r3, [r3, #2]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d001      	beq.n	800ed44 <find_volume+0x1f4>
 800ed40:	230d      	movs	r3, #13
 800ed42:	e14a      	b.n	800efda <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	789b      	ldrb	r3, [r3, #2]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed4c:	fb02 f303 	mul.w	r3, r2, r3
 800ed50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed60:	895b      	ldrh	r3, [r3, #10]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d008      	beq.n	800ed78 <find_volume+0x228>
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	895b      	ldrh	r3, [r3, #10]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	895b      	ldrh	r3, [r3, #10]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	4013      	ands	r3, r2
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d001      	beq.n	800ed7c <find_volume+0x22c>
 800ed78:	230d      	movs	r3, #13
 800ed7a:	e12e      	b.n	800efda <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	3334      	adds	r3, #52	; 0x34
 800ed80:	3311      	adds	r3, #17
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe f8f2 	bl	800cf6c <ld_word>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed92:	891b      	ldrh	r3, [r3, #8]
 800ed94:	f003 030f 	and.w	r3, r3, #15
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <find_volume+0x252>
 800ed9e:	230d      	movs	r3, #13
 800eda0:	e11b      	b.n	800efda <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda4:	3334      	adds	r3, #52	; 0x34
 800eda6:	3313      	adds	r3, #19
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fe f8df 	bl	800cf6c <ld_word>
 800edae:	4603      	mov	r3, r0
 800edb0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800edb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <find_volume+0x276>
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	3334      	adds	r3, #52	; 0x34
 800edbc:	3320      	adds	r3, #32
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe f8ec 	bl	800cf9c <ld_dword>
 800edc4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800edc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc8:	3334      	adds	r3, #52	; 0x34
 800edca:	330e      	adds	r3, #14
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe f8cd 	bl	800cf6c <ld_word>
 800edd2:	4603      	mov	r3, r0
 800edd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800edd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d101      	bne.n	800ede0 <find_volume+0x290>
 800eddc:	230d      	movs	r3, #13
 800edde:	e0fc      	b.n	800efda <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ede0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ede2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede4:	4413      	add	r3, r2
 800ede6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede8:	8912      	ldrh	r2, [r2, #8]
 800edea:	0912      	lsrs	r2, r2, #4
 800edec:	b292      	uxth	r2, r2
 800edee:	4413      	add	r3, r2
 800edf0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800edf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d201      	bcs.n	800edfe <find_volume+0x2ae>
 800edfa:	230d      	movs	r3, #13
 800edfc:	e0ed      	b.n	800efda <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee06:	8952      	ldrh	r2, [r2, #10]
 800ee08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d103      	bne.n	800ee1c <find_volume+0x2cc>
 800ee14:	230d      	movs	r3, #13
 800ee16:	e0e0      	b.n	800efda <find_volume+0x48a>
 800ee18:	20000138 	.word	0x20000138
		fmt = FS_FAT32;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d802      	bhi.n	800ee32 <find_volume+0x2e2>
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d802      	bhi.n	800ee42 <find_volume+0x2f2>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	1c9a      	adds	r2, r3, #2
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee4e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee54:	441a      	add	r2, r3
 800ee56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee58:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5e:	441a      	add	r2, r3
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ee64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d11e      	bne.n	800eeaa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	3334      	adds	r3, #52	; 0x34
 800ee70:	332a      	adds	r3, #42	; 0x2a
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fe f87a 	bl	800cf6c <ld_word>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <find_volume+0x332>
 800ee7e:	230d      	movs	r3, #13
 800ee80:	e0ab      	b.n	800efda <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	891b      	ldrh	r3, [r3, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <find_volume+0x33e>
 800ee8a:	230d      	movs	r3, #13
 800ee8c:	e0a5      	b.n	800efda <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	3334      	adds	r3, #52	; 0x34
 800ee92:	332c      	adds	r3, #44	; 0x2c
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe f881 	bl	800cf9c <ld_dword>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	699b      	ldr	r3, [r3, #24]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	647b      	str	r3, [r7, #68]	; 0x44
 800eea8:	e01f      	b.n	800eeea <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeac:	891b      	ldrh	r3, [r3, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d101      	bne.n	800eeb6 <find_volume+0x366>
 800eeb2:	230d      	movs	r3, #13
 800eeb4:	e091      	b.n	800efda <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eebc:	441a      	add	r2, r3
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d103      	bne.n	800eed2 <find_volume+0x382>
 800eeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	e00a      	b.n	800eee8 <find_volume+0x398>
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	699a      	ldr	r2, [r3, #24]
 800eed6:	4613      	mov	r3, r2
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	4413      	add	r3, r2
 800eedc:	085a      	lsrs	r2, r3, #1
 800eede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee0:	699b      	ldr	r3, [r3, #24]
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eee8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeec:	69da      	ldr	r2, [r3, #28]
 800eeee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eef0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eef4:	0a5b      	lsrs	r3, r3, #9
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d201      	bcs.n	800eefe <find_volume+0x3ae>
 800eefa:	230d      	movs	r3, #13
 800eefc:	e06d      	b.n	800efda <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef04:	615a      	str	r2, [r3, #20]
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	695a      	ldr	r2, [r3, #20]
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	2280      	movs	r2, #128	; 0x80
 800ef12:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	d149      	bne.n	800efb0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	3334      	adds	r3, #52	; 0x34
 800ef20:	3330      	adds	r3, #48	; 0x30
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f822 	bl	800cf6c <ld_word>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d140      	bne.n	800efb0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef30:	3301      	adds	r3, #1
 800ef32:	4619      	mov	r1, r3
 800ef34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef36:	f7fe fac9 	bl	800d4cc <move_window>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d137      	bne.n	800efb0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	2200      	movs	r2, #0
 800ef44:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	3334      	adds	r3, #52	; 0x34
 800ef4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fe f80c 	bl	800cf6c <ld_word>
 800ef54:	4603      	mov	r3, r0
 800ef56:	461a      	mov	r2, r3
 800ef58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d127      	bne.n	800efb0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	3334      	adds	r3, #52	; 0x34
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fe f819 	bl	800cf9c <ld_dword>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	4b1d      	ldr	r3, [pc, #116]	; (800efe4 <find_volume+0x494>)
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d11e      	bne.n	800efb0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef74:	3334      	adds	r3, #52	; 0x34
 800ef76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe f80e 	bl	800cf9c <ld_dword>
 800ef80:	4602      	mov	r2, r0
 800ef82:	4b19      	ldr	r3, [pc, #100]	; (800efe8 <find_volume+0x498>)
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d113      	bne.n	800efb0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8a:	3334      	adds	r3, #52	; 0x34
 800ef8c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fe f803 	bl	800cf9c <ld_dword>
 800ef96:	4602      	mov	r2, r0
 800ef98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	3334      	adds	r3, #52	; 0x34
 800efa0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fd fff9 	bl	800cf9c <ld_dword>
 800efaa:	4602      	mov	r2, r0
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800efb6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800efb8:	4b0c      	ldr	r3, [pc, #48]	; (800efec <find_volume+0x49c>)
 800efba:	881b      	ldrh	r3, [r3, #0]
 800efbc:	3301      	adds	r3, #1
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	4b0a      	ldr	r3, [pc, #40]	; (800efec <find_volume+0x49c>)
 800efc2:	801a      	strh	r2, [r3, #0]
 800efc4:	4b09      	ldr	r3, [pc, #36]	; (800efec <find_volume+0x49c>)
 800efc6:	881a      	ldrh	r2, [r3, #0]
 800efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800efcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efce:	4a08      	ldr	r2, [pc, #32]	; (800eff0 <find_volume+0x4a0>)
 800efd0:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800efd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efd4:	f7fe fa12 	bl	800d3fc <clear_lock>
#endif
	return FR_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3758      	adds	r7, #88	; 0x58
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	41615252 	.word	0x41615252
 800efe8:	61417272 	.word	0x61417272
 800efec:	2000013c 	.word	0x2000013c
 800eff0:	20000170 	.word	0x20000170

0800eff4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800effe:	2309      	movs	r3, #9
 800f000:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01c      	beq.n	800f042 <validate+0x4e>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d018      	beq.n	800f042 <validate+0x4e>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d013      	beq.n	800f042 <validate+0x4e>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	889a      	ldrh	r2, [r3, #4]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	88db      	ldrh	r3, [r3, #6]
 800f024:	429a      	cmp	r2, r3
 800f026:	d10c      	bne.n	800f042 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	785b      	ldrb	r3, [r3, #1]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fd fefe 	bl	800ce30 <disk_status>
 800f034:	4603      	mov	r3, r0
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <validate+0x4e>
			res = FR_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d102      	bne.n	800f04e <validate+0x5a>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	e000      	b.n	800f050 <validate+0x5c>
 800f04e:	2300      	movs	r3, #0
 800f050:	683a      	ldr	r2, [r7, #0]
 800f052:	6013      	str	r3, [r2, #0]
	return res;
 800f054:	7bfb      	ldrb	r3, [r7, #15]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b088      	sub	sp, #32
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	4613      	mov	r3, r2
 800f06c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f072:	f107 0310 	add.w	r3, r7, #16
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fccf 	bl	800ea1a <get_ldnumber>
 800f07c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	2b00      	cmp	r3, #0
 800f082:	da01      	bge.n	800f088 <f_mount+0x28>
 800f084:	230b      	movs	r3, #11
 800f086:	e02b      	b.n	800f0e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f088:	4a17      	ldr	r2, [pc, #92]	; (800f0e8 <f_mount+0x88>)
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f090:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d005      	beq.n	800f0a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f098:	69b8      	ldr	r0, [r7, #24]
 800f09a:	f7fe f9af 	bl	800d3fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	490d      	ldr	r1, [pc, #52]	; (800f0e8 <f_mount+0x88>)
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <f_mount+0x66>
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d001      	beq.n	800f0ca <f_mount+0x6a>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e00a      	b.n	800f0e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0ca:	f107 010c 	add.w	r1, r7, #12
 800f0ce:	f107 0308 	add.w	r3, r7, #8
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff fd3b 	bl	800eb50 <find_volume>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	20000138 	.word	0x20000138

0800f0ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b09a      	sub	sp, #104	; 0x68
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <f_open+0x18>
 800f100:	2309      	movs	r3, #9
 800f102:	e1ad      	b.n	800f460 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f10a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f10c:	79fa      	ldrb	r2, [r7, #7]
 800f10e:	f107 0114 	add.w	r1, r7, #20
 800f112:	f107 0308 	add.w	r3, r7, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fd1a 	bl	800eb50 <find_volume>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f122:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f126:	2b00      	cmp	r3, #0
 800f128:	f040 8191 	bne.w	800f44e <f_open+0x362>
		dj.obj.fs = fs;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	4611      	mov	r1, r2
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff fbfd 	bl	800e938 <follow_path>
 800f13e:	4603      	mov	r3, r0
 800f140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d11a      	bne.n	800f182 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f14c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f150:	b25b      	sxtb	r3, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	da03      	bge.n	800f15e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f156:	2306      	movs	r3, #6
 800f158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f15c:	e011      	b.n	800f182 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	bf14      	ite	ne
 800f168:	2301      	movne	r3, #1
 800f16a:	2300      	moveq	r3, #0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	461a      	mov	r2, r3
 800f170:	f107 0318 	add.w	r3, r7, #24
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f7fd fff8 	bl	800d16c <chk_lock>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	f003 031c 	and.w	r3, r3, #28
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d07f      	beq.n	800f28c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f18c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f190:	2b00      	cmp	r3, #0
 800f192:	d017      	beq.n	800f1c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f194:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f198:	2b04      	cmp	r3, #4
 800f19a:	d10e      	bne.n	800f1ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f19c:	f7fe f842 	bl	800d224 <enq_lock>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d006      	beq.n	800f1b4 <f_open+0xc8>
 800f1a6:	f107 0318 	add.w	r3, r7, #24
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff f914 	bl	800e3d8 <dir_register>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	e000      	b.n	800f1b6 <f_open+0xca>
 800f1b4:	2312      	movs	r3, #18
 800f1b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	f043 0308 	orr.w	r3, r3, #8
 800f1c0:	71fb      	strb	r3, [r7, #7]
 800f1c2:	e010      	b.n	800f1e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f1c4:	7fbb      	ldrb	r3, [r7, #30]
 800f1c6:	f003 0311 	and.w	r3, r3, #17
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <f_open+0xea>
					res = FR_DENIED;
 800f1ce:	2307      	movs	r3, #7
 800f1d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f1d4:	e007      	b.n	800f1e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <f_open+0xfa>
 800f1e0:	2308      	movs	r3, #8
 800f1e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f1e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d168      	bne.n	800f2c0 <f_open+0x1d4>
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	f003 0308 	and.w	r3, r3, #8
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d063      	beq.n	800f2c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f1f8:	f7fa fe22 	bl	8009e40 <get_fattime>
 800f1fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f200:	330e      	adds	r3, #14
 800f202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f204:	4618      	mov	r0, r3
 800f206:	f7fd ff07 	bl	800d018 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	3316      	adds	r3, #22
 800f20e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f210:	4618      	mov	r0, r3
 800f212:	f7fd ff01 	bl	800d018 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	330b      	adds	r3, #11
 800f21a:	2220      	movs	r2, #32
 800f21c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe fe50 	bl	800deca <ld_clust>
 800f22a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f230:	2200      	movs	r2, #0
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fe68 	bl	800df08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	331c      	adds	r3, #28
 800f23c:	2100      	movs	r1, #0
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fd feea 	bl	800d018 <st_dword>
					fs->wflag = 1;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	2201      	movs	r2, #1
 800f248:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d037      	beq.n	800f2c0 <f_open+0x1d4>
						dw = fs->winsect;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f254:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f256:	f107 0318 	add.w	r3, r7, #24
 800f25a:	2200      	movs	r2, #0
 800f25c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe fb7b 	bl	800d95a <remove_chain>
 800f264:	4603      	mov	r3, r0
 800f266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f26a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d126      	bne.n	800f2c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f276:	4618      	mov	r0, r3
 800f278:	f7fe f928 	bl	800d4cc <move_window>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f286:	3a01      	subs	r2, #1
 800f288:	611a      	str	r2, [r3, #16]
 800f28a:	e019      	b.n	800f2c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f28c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f290:	2b00      	cmp	r3, #0
 800f292:	d115      	bne.n	800f2c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f294:	7fbb      	ldrb	r3, [r7, #30]
 800f296:	f003 0310 	and.w	r3, r3, #16
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f29e:	2304      	movs	r3, #4
 800f2a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2a4:	e00c      	b.n	800f2c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	f003 0302 	and.w	r3, r3, #2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d007      	beq.n	800f2c0 <f_open+0x1d4>
 800f2b0:	7fbb      	ldrb	r3, [r7, #30]
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <f_open+0x1d4>
						res = FR_DENIED;
 800f2ba:	2307      	movs	r3, #7
 800f2bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f2c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d128      	bne.n	800f31a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	f003 0308 	and.w	r3, r3, #8
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f2e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	f023 0301 	bic.w	r3, r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bf14      	ite	ne
 800f2f2:	2301      	movne	r3, #1
 800f2f4:	2300      	moveq	r3, #0
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	f107 0318 	add.w	r3, r7, #24
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7fd ffb1 	bl	800d268 <inc_lock>
 800f306:	4602      	mov	r2, r0
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <f_open+0x22e>
 800f314:	2302      	movs	r3, #2
 800f316:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f31a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f040 8095 	bne.w	800f44e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f328:	4611      	mov	r1, r2
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fe fdcd 	bl	800deca <ld_clust>
 800f330:	4602      	mov	r2, r0
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	331c      	adds	r3, #28
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd fe2e 	bl	800cf9c <ld_dword>
 800f340:	4602      	mov	r2, r0
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	88da      	ldrh	r2, [r3, #6]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	79fa      	ldrb	r2, [r7, #7]
 800f35e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2200      	movs	r2, #0
 800f370:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3330      	adds	r3, #48	; 0x30
 800f376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f37a:	2100      	movs	r1, #0
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fd fe98 	bl	800d0b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	f003 0320 	and.w	r3, r3, #32
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d060      	beq.n	800f44e <f_open+0x362>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d05c      	beq.n	800f44e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	025b      	lsls	r3, r3, #9
 800f3a2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3b0:	e016      	b.n	800f3e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fe f943 	bl	800d642 <get_fat>
 800f3bc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f3be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d802      	bhi.n	800f3ca <f_open+0x2de>
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3d0:	d102      	bne.n	800f3d8 <f_open+0x2ec>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d103      	bne.n	800f3f0 <f_open+0x304>
 800f3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d8e0      	bhi.n	800f3b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d127      	bne.n	800f44e <f_open+0x362>
 800f3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f404:	2b00      	cmp	r3, #0
 800f406:	d022      	beq.n	800f44e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fe f8f9 	bl	800d604 <clust2sect>
 800f412:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d103      	bne.n	800f422 <f_open+0x336>
						res = FR_INT_ERR;
 800f41a:	2302      	movs	r3, #2
 800f41c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f420:	e015      	b.n	800f44e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f424:	0a5a      	lsrs	r2, r3, #9
 800f426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f428:	441a      	add	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	7858      	ldrb	r0, [r3, #1]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6a1a      	ldr	r2, [r3, #32]
 800f43c:	2301      	movs	r3, #1
 800f43e:	f7fd fd37 	bl	800ceb0 <disk_read>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <f_open+0x362>
 800f448:	2301      	movs	r3, #1
 800f44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f44e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <f_open+0x370>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f45c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f460:	4618      	mov	r0, r3
 800f462:	3768      	adds	r7, #104	; 0x68
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08e      	sub	sp, #56	; 0x38
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f107 0214 	add.w	r2, r7, #20
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fdb3 	bl	800eff4 <validate>
 800f48e:	4603      	mov	r3, r0
 800f490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d107      	bne.n	800f4ac <f_read+0x44>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	7d5b      	ldrb	r3, [r3, #21]
 800f4a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f4a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <f_read+0x4a>
 800f4ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4b0:	e115      	b.n	800f6de <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	7d1b      	ldrb	r3, [r3, #20]
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <f_read+0x5a>
 800f4be:	2307      	movs	r3, #7
 800f4c0:	e10d      	b.n	800f6de <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	68da      	ldr	r2, [r3, #12]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	f240 80fe 	bls.w	800f6d4 <f_read+0x26c>
 800f4d8:	6a3b      	ldr	r3, [r7, #32]
 800f4da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f4dc:	e0fa      	b.n	800f6d4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f040 80c6 	bne.w	800f678 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	0a5b      	lsrs	r3, r3, #9
 800f4f2:	697a      	ldr	r2, [r7, #20]
 800f4f4:	8952      	ldrh	r2, [r2, #10]
 800f4f6:	3a01      	subs	r2, #1
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d12f      	bne.n	800f562 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	699b      	ldr	r3, [r3, #24]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d103      	bne.n	800f512 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	633b      	str	r3, [r7, #48]	; 0x30
 800f510:	e013      	b.n	800f53a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	4619      	mov	r1, r3
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f7fe fb17 	bl	800db54 <clmt_clust>
 800f526:	6338      	str	r0, [r7, #48]	; 0x30
 800f528:	e007      	b.n	800f53a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	4619      	mov	r1, r3
 800f532:	4610      	mov	r0, r2
 800f534:	f7fe f885 	bl	800d642 <get_fat>
 800f538:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d804      	bhi.n	800f54a <f_read+0xe2>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2202      	movs	r2, #2
 800f544:	755a      	strb	r2, [r3, #21]
 800f546:	2302      	movs	r3, #2
 800f548:	e0c9      	b.n	800f6de <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f550:	d104      	bne.n	800f55c <f_read+0xf4>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2201      	movs	r2, #1
 800f556:	755a      	strb	r2, [r3, #21]
 800f558:	2301      	movs	r3, #1
 800f55a:	e0c0      	b.n	800f6de <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f560:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	69db      	ldr	r3, [r3, #28]
 800f568:	4619      	mov	r1, r3
 800f56a:	4610      	mov	r0, r2
 800f56c:	f7fe f84a 	bl	800d604 <clust2sect>
 800f570:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d104      	bne.n	800f582 <f_read+0x11a>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2202      	movs	r2, #2
 800f57c:	755a      	strb	r2, [r3, #21]
 800f57e:	2302      	movs	r3, #2
 800f580:	e0ad      	b.n	800f6de <f_read+0x276>
			sect += csect;
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	4413      	add	r3, r2
 800f588:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	0a5b      	lsrs	r3, r3, #9
 800f58e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	2b00      	cmp	r3, #0
 800f594:	d039      	beq.n	800f60a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f596:	69fa      	ldr	r2, [r7, #28]
 800f598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59a:	4413      	add	r3, r2
 800f59c:	697a      	ldr	r2, [r7, #20]
 800f59e:	8952      	ldrh	r2, [r2, #10]
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d905      	bls.n	800f5b0 <f_read+0x148>
					cc = fs->csize - csect;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	895b      	ldrh	r3, [r3, #10]
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	7858      	ldrb	r0, [r3, #1]
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	69ba      	ldr	r2, [r7, #24]
 800f5b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5ba:	f7fd fc79 	bl	800ceb0 <disk_read>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d004      	beq.n	800f5ce <f_read+0x166>
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	755a      	strb	r2, [r3, #21]
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e087      	b.n	800f6de <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	7d1b      	ldrb	r3, [r3, #20]
 800f5d2:	b25b      	sxtb	r3, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	da14      	bge.n	800f602 <f_read+0x19a>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6a1a      	ldr	r2, [r3, #32]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d90d      	bls.n	800f602 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6a1a      	ldr	r2, [r3, #32]
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	025b      	lsls	r3, r3, #9
 800f5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f2:	18d0      	adds	r0, r2, r3
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3330      	adds	r3, #48	; 0x30
 800f5f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	f7fd fd37 	bl	800d070 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f604:	025b      	lsls	r3, r3, #9
 800f606:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f608:	e050      	b.n	800f6ac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	69ba      	ldr	r2, [r7, #24]
 800f610:	429a      	cmp	r2, r3
 800f612:	d02e      	beq.n	800f672 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	7d1b      	ldrb	r3, [r3, #20]
 800f618:	b25b      	sxtb	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	da18      	bge.n	800f650 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	7858      	ldrb	r0, [r3, #1]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6a1a      	ldr	r2, [r3, #32]
 800f62c:	2301      	movs	r3, #1
 800f62e:	f7fd fc5f 	bl	800cef0 <disk_write>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <f_read+0x1da>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2201      	movs	r2, #1
 800f63c:	755a      	strb	r2, [r3, #21]
 800f63e:	2301      	movs	r3, #1
 800f640:	e04d      	b.n	800f6de <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	7d1b      	ldrb	r3, [r3, #20]
 800f646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	7858      	ldrb	r0, [r3, #1]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f65a:	2301      	movs	r3, #1
 800f65c:	69ba      	ldr	r2, [r7, #24]
 800f65e:	f7fd fc27 	bl	800ceb0 <disk_read>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d004      	beq.n	800f672 <f_read+0x20a>
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2201      	movs	r2, #1
 800f66c:	755a      	strb	r2, [r3, #21]
 800f66e:	2301      	movs	r3, #1
 800f670:	e035      	b.n	800f6de <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	69ba      	ldr	r2, [r7, #24]
 800f676:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	699b      	ldr	r3, [r3, #24]
 800f67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f680:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f684:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d901      	bls.n	800f692 <f_read+0x22a>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	699b      	ldr	r3, [r3, #24]
 800f69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6a0:	4413      	add	r3, r2
 800f6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6a8:	f7fd fce2 	bl	800d070 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	4413      	add	r3, r2
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	699a      	ldr	r2, [r3, #24]
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	441a      	add	r2, r3
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	619a      	str	r2, [r3, #24]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	441a      	add	r2, r3
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f47f af01 	bne.w	800f4de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3738      	adds	r7, #56	; 0x38
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b08c      	sub	sp, #48	; 0x30
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	607a      	str	r2, [r7, #4]
 800f6f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f107 0210 	add.w	r2, r7, #16
 800f704:	4611      	mov	r1, r2
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff fc74 	bl	800eff4 <validate>
 800f70c:	4603      	mov	r3, r0
 800f70e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f716:	2b00      	cmp	r3, #0
 800f718:	d107      	bne.n	800f72a <f_write+0x44>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	7d5b      	ldrb	r3, [r3, #21]
 800f71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f726:	2b00      	cmp	r3, #0
 800f728:	d002      	beq.n	800f730 <f_write+0x4a>
 800f72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f72e:	e14b      	b.n	800f9c8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	7d1b      	ldrb	r3, [r3, #20]
 800f734:	f003 0302 	and.w	r3, r3, #2
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d101      	bne.n	800f740 <f_write+0x5a>
 800f73c:	2307      	movs	r3, #7
 800f73e:	e143      	b.n	800f9c8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	699a      	ldr	r2, [r3, #24]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	441a      	add	r2, r3
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	f080 812d 	bcs.w	800f9ac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	699b      	ldr	r3, [r3, #24]
 800f756:	43db      	mvns	r3, r3
 800f758:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f75a:	e127      	b.n	800f9ac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f764:	2b00      	cmp	r3, #0
 800f766:	f040 80e3 	bne.w	800f930 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	0a5b      	lsrs	r3, r3, #9
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	8952      	ldrh	r2, [r2, #10]
 800f774:	3a01      	subs	r2, #1
 800f776:	4013      	ands	r3, r2
 800f778:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d143      	bne.n	800f808 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	699b      	ldr	r3, [r3, #24]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10c      	bne.n	800f7a2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f790:	2b00      	cmp	r3, #0
 800f792:	d11a      	bne.n	800f7ca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2100      	movs	r1, #0
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fe f943 	bl	800da24 <create_chain>
 800f79e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7a0:	e013      	b.n	800f7ca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d007      	beq.n	800f7ba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f7fe f9cf 	bl	800db54 <clmt_clust>
 800f7b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7b8:	e007      	b.n	800f7ca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	69db      	ldr	r3, [r3, #28]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	f7fe f92e 	bl	800da24 <create_chain>
 800f7c8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80f2 	beq.w	800f9b6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d104      	bne.n	800f7e2 <f_write+0xfc>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2202      	movs	r2, #2
 800f7dc:	755a      	strb	r2, [r3, #21]
 800f7de:	2302      	movs	r3, #2
 800f7e0:	e0f2      	b.n	800f9c8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7e8:	d104      	bne.n	800f7f4 <f_write+0x10e>
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	755a      	strb	r2, [r3, #21]
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	e0e9      	b.n	800f9c8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d102      	bne.n	800f808 <f_write+0x122>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f806:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	7d1b      	ldrb	r3, [r3, #20]
 800f80c:	b25b      	sxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	da18      	bge.n	800f844 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	7858      	ldrb	r0, [r3, #1]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6a1a      	ldr	r2, [r3, #32]
 800f820:	2301      	movs	r3, #1
 800f822:	f7fd fb65 	bl	800cef0 <disk_write>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d004      	beq.n	800f836 <f_write+0x150>
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2201      	movs	r2, #1
 800f830:	755a      	strb	r2, [r3, #21]
 800f832:	2301      	movs	r3, #1
 800f834:	e0c8      	b.n	800f9c8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	7d1b      	ldrb	r3, [r3, #20]
 800f83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	69db      	ldr	r3, [r3, #28]
 800f84a:	4619      	mov	r1, r3
 800f84c:	4610      	mov	r0, r2
 800f84e:	f7fd fed9 	bl	800d604 <clust2sect>
 800f852:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d104      	bne.n	800f864 <f_write+0x17e>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2202      	movs	r2, #2
 800f85e:	755a      	strb	r2, [r3, #21]
 800f860:	2302      	movs	r3, #2
 800f862:	e0b1      	b.n	800f9c8 <f_write+0x2e2>
			sect += csect;
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	4413      	add	r3, r2
 800f86a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	0a5b      	lsrs	r3, r3, #9
 800f870:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d03c      	beq.n	800f8f2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f878:	69ba      	ldr	r2, [r7, #24]
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	4413      	add	r3, r2
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	8952      	ldrh	r2, [r2, #10]
 800f882:	4293      	cmp	r3, r2
 800f884:	d905      	bls.n	800f892 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	895b      	ldrh	r3, [r3, #10]
 800f88a:	461a      	mov	r2, r3
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	7858      	ldrb	r0, [r3, #1]
 800f896:	6a3b      	ldr	r3, [r7, #32]
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	69f9      	ldr	r1, [r7, #28]
 800f89c:	f7fd fb28 	bl	800cef0 <disk_write>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d004      	beq.n	800f8b0 <f_write+0x1ca>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	755a      	strb	r2, [r3, #21]
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e08b      	b.n	800f9c8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6a1a      	ldr	r2, [r3, #32]
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	6a3a      	ldr	r2, [r7, #32]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d915      	bls.n	800f8ea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6a1a      	ldr	r2, [r3, #32]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	025b      	lsls	r3, r3, #9
 800f8ce:	69fa      	ldr	r2, [r7, #28]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	f7fd fbca 	bl	800d070 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	7d1b      	ldrb	r3, [r3, #20]
 800f8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f8ea:	6a3b      	ldr	r3, [r7, #32]
 800f8ec:	025b      	lsls	r3, r3, #9
 800f8ee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f8f0:	e03f      	b.n	800f972 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	697a      	ldr	r2, [r7, #20]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d016      	beq.n	800f92a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	699a      	ldr	r2, [r3, #24]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f904:	429a      	cmp	r2, r3
 800f906:	d210      	bcs.n	800f92a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	7858      	ldrb	r0, [r3, #1]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f912:	2301      	movs	r3, #1
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	f7fd facb 	bl	800ceb0 <disk_read>
 800f91a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d004      	beq.n	800f92a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2201      	movs	r2, #1
 800f924:	755a      	strb	r2, [r3, #21]
 800f926:	2301      	movs	r3, #1
 800f928:	e04e      	b.n	800f9c8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f938:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d901      	bls.n	800f94a <f_write+0x264>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	699b      	ldr	r3, [r3, #24]
 800f954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f958:	4413      	add	r3, r2
 800f95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f95c:	69f9      	ldr	r1, [r7, #28]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd fb86 	bl	800d070 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	7d1b      	ldrb	r3, [r3, #20]
 800f968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f972:	69fa      	ldr	r2, [r7, #28]
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	4413      	add	r3, r2
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	699a      	ldr	r2, [r3, #24]
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	441a      	add	r2, r3
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	619a      	str	r2, [r3, #24]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	699b      	ldr	r3, [r3, #24]
 800f98e:	429a      	cmp	r2, r3
 800f990:	bf38      	it	cc
 800f992:	461a      	movcc	r2, r3
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	60da      	str	r2, [r3, #12]
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	441a      	add	r2, r3
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	601a      	str	r2, [r3, #0]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f47f aed4 	bne.w	800f75c <f_write+0x76>
 800f9b4:	e000      	b.n	800f9b8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	7d1b      	ldrb	r3, [r3, #20]
 800f9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f9c6:	2300      	movs	r3, #0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3730      	adds	r7, #48	; 0x30
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f107 0208 	add.w	r2, r7, #8
 800f9de:	4611      	mov	r1, r2
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff fb07 	bl	800eff4 <validate>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d168      	bne.n	800fac2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7d1b      	ldrb	r3, [r3, #20]
 800f9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d062      	beq.n	800fac2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	7d1b      	ldrb	r3, [r3, #20]
 800fa00:	b25b      	sxtb	r3, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	da15      	bge.n	800fa32 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	7858      	ldrb	r0, [r3, #1]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a1a      	ldr	r2, [r3, #32]
 800fa14:	2301      	movs	r3, #1
 800fa16:	f7fd fa6b 	bl	800cef0 <disk_write>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <f_sync+0x54>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e04f      	b.n	800fac4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	7d1b      	ldrb	r3, [r3, #20]
 800fa28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fa32:	f7fa fa05 	bl	8009e40 <get_fattime>
 800fa36:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	4619      	mov	r1, r3
 800fa40:	4610      	mov	r0, r2
 800fa42:	f7fd fd43 	bl	800d4cc <move_window>
 800fa46:	4603      	mov	r3, r0
 800fa48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d138      	bne.n	800fac2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa54:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	330b      	adds	r3, #11
 800fa5a:	781a      	ldrb	r2, [r3, #0]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	330b      	adds	r3, #11
 800fa60:	f042 0220 	orr.w	r2, r2, #32
 800fa64:	b2d2      	uxtb	r2, r2
 800fa66:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6818      	ldr	r0, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	461a      	mov	r2, r3
 800fa72:	68f9      	ldr	r1, [r7, #12]
 800fa74:	f7fe fa48 	bl	800df08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f103 021c 	add.w	r2, r3, #28
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	4619      	mov	r1, r3
 800fa84:	4610      	mov	r0, r2
 800fa86:	f7fd fac7 	bl	800d018 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	3316      	adds	r3, #22
 800fa8e:	6939      	ldr	r1, [r7, #16]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fd fac1 	bl	800d018 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	3312      	adds	r3, #18
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fd faa0 	bl	800cfe2 <st_word>
					fs->wflag = 1;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	2201      	movs	r2, #1
 800faa6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fd fd3c 	bl	800d528 <sync_fs>
 800fab0:	4603      	mov	r3, r0
 800fab2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	7d1b      	ldrb	r3, [r3, #20]
 800fab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ff7b 	bl	800f9d0 <f_sync>
 800fada:	4603      	mov	r3, r0
 800fadc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d118      	bne.n	800fb16 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f107 0208 	add.w	r2, r7, #8
 800faea:	4611      	mov	r1, r2
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff fa81 	bl	800eff4 <validate>
 800faf2:	4603      	mov	r3, r0
 800faf4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d10c      	bne.n	800fb16 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fd fc3f 	bl	800d384 <dec_lock>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d102      	bne.n	800fb16 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb32:	2300      	movs	r3, #0
 800fb34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb36:	4b1f      	ldr	r3, [pc, #124]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb38:	7a5b      	ldrb	r3, [r3, #9]
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d131      	bne.n	800fba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fb40:	4b1c      	ldr	r3, [pc, #112]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb42:	7a5b      	ldrb	r3, [r3, #9]
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	461a      	mov	r2, r3
 800fb48:	4b1a      	ldr	r3, [pc, #104]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb4e:	4b19      	ldr	r3, [pc, #100]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb50:	7a5b      	ldrb	r3, [r3, #9]
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	4a17      	ldr	r2, [pc, #92]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb5e:	4b15      	ldr	r3, [pc, #84]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb60:	7a5b      	ldrb	r3, [r3, #9]
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	461a      	mov	r2, r3
 800fb66:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb68:	4413      	add	r3, r2
 800fb6a:	79fa      	ldrb	r2, [r7, #7]
 800fb6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb6e:	4b11      	ldr	r3, [pc, #68]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb70:	7a5b      	ldrb	r3, [r3, #9]
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	1c5a      	adds	r2, r3, #1
 800fb76:	b2d1      	uxtb	r1, r2
 800fb78:	4a0e      	ldr	r2, [pc, #56]	; (800fbb4 <FATFS_LinkDriverEx+0x94>)
 800fb7a:	7251      	strb	r1, [r2, #9]
 800fb7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb7e:	7dbb      	ldrb	r3, [r7, #22]
 800fb80:	3330      	adds	r3, #48	; 0x30
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	223a      	movs	r2, #58	; 0x3a
 800fb8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	3302      	adds	r3, #2
 800fb94:	222f      	movs	r2, #47	; 0x2f
 800fb96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	3303      	adds	r3, #3
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	371c      	adds	r7, #28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20000370 	.word	0x20000370

0800fbb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff ffaa 	bl	800fb20 <FATFS_LinkDriverEx>
 800fbcc:	4603      	mov	r3, r0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
	...

0800fbd8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	4603      	mov	r3, r0
 800fbe0:	6039      	str	r1, [r7, #0]
 800fbe2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fbe4:	88fb      	ldrh	r3, [r7, #6]
 800fbe6:	2b7f      	cmp	r3, #127	; 0x7f
 800fbe8:	d802      	bhi.n	800fbf0 <ff_convert+0x18>
		c = chr;
 800fbea:	88fb      	ldrh	r3, [r7, #6]
 800fbec:	81fb      	strh	r3, [r7, #14]
 800fbee:	e025      	b.n	800fc3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00b      	beq.n	800fc0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fbf6:	88fb      	ldrh	r3, [r7, #6]
 800fbf8:	2bff      	cmp	r3, #255	; 0xff
 800fbfa:	d805      	bhi.n	800fc08 <ff_convert+0x30>
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	3b80      	subs	r3, #128	; 0x80
 800fc00:	4a12      	ldr	r2, [pc, #72]	; (800fc4c <ff_convert+0x74>)
 800fc02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc06:	e000      	b.n	800fc0a <ff_convert+0x32>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	81fb      	strh	r3, [r7, #14]
 800fc0c:	e016      	b.n	800fc3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc0e:	2300      	movs	r3, #0
 800fc10:	81fb      	strh	r3, [r7, #14]
 800fc12:	e009      	b.n	800fc28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc14:	89fb      	ldrh	r3, [r7, #14]
 800fc16:	4a0d      	ldr	r2, [pc, #52]	; (800fc4c <ff_convert+0x74>)
 800fc18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc1c:	88fa      	ldrh	r2, [r7, #6]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d006      	beq.n	800fc30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc22:	89fb      	ldrh	r3, [r7, #14]
 800fc24:	3301      	adds	r3, #1
 800fc26:	81fb      	strh	r3, [r7, #14]
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	2b7f      	cmp	r3, #127	; 0x7f
 800fc2c:	d9f2      	bls.n	800fc14 <ff_convert+0x3c>
 800fc2e:	e000      	b.n	800fc32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fc30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fc32:	89fb      	ldrh	r3, [r7, #14]
 800fc34:	3380      	adds	r3, #128	; 0x80
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fc3c:	89fb      	ldrh	r3, [r7, #14]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	08012628 	.word	0x08012628

0800fc50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fc5a:	88fb      	ldrh	r3, [r7, #6]
 800fc5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc60:	d201      	bcs.n	800fc66 <ff_wtoupper+0x16>
 800fc62:	4b3e      	ldr	r3, [pc, #248]	; (800fd5c <ff_wtoupper+0x10c>)
 800fc64:	e000      	b.n	800fc68 <ff_wtoupper+0x18>
 800fc66:	4b3e      	ldr	r3, [pc, #248]	; (800fd60 <ff_wtoupper+0x110>)
 800fc68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	1c9a      	adds	r2, r3, #2
 800fc6e:	617a      	str	r2, [r7, #20]
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc74:	8a7b      	ldrh	r3, [r7, #18]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d068      	beq.n	800fd4c <ff_wtoupper+0xfc>
 800fc7a:	88fa      	ldrh	r2, [r7, #6]
 800fc7c:	8a7b      	ldrh	r3, [r7, #18]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d364      	bcc.n	800fd4c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	1c9a      	adds	r2, r3, #2
 800fc86:	617a      	str	r2, [r7, #20]
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	823b      	strh	r3, [r7, #16]
 800fc8c:	8a3b      	ldrh	r3, [r7, #16]
 800fc8e:	0a1b      	lsrs	r3, r3, #8
 800fc90:	81fb      	strh	r3, [r7, #14]
 800fc92:	8a3b      	ldrh	r3, [r7, #16]
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fc98:	88fa      	ldrh	r2, [r7, #6]
 800fc9a:	8a79      	ldrh	r1, [r7, #18]
 800fc9c:	8a3b      	ldrh	r3, [r7, #16]
 800fc9e:	440b      	add	r3, r1
 800fca0:	429a      	cmp	r2, r3
 800fca2:	da49      	bge.n	800fd38 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fca4:	89fb      	ldrh	r3, [r7, #14]
 800fca6:	2b08      	cmp	r3, #8
 800fca8:	d84f      	bhi.n	800fd4a <ff_wtoupper+0xfa>
 800fcaa:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <ff_wtoupper+0x60>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fcd5 	.word	0x0800fcd5
 800fcb4:	0800fce7 	.word	0x0800fce7
 800fcb8:	0800fcfd 	.word	0x0800fcfd
 800fcbc:	0800fd05 	.word	0x0800fd05
 800fcc0:	0800fd0d 	.word	0x0800fd0d
 800fcc4:	0800fd15 	.word	0x0800fd15
 800fcc8:	0800fd1d 	.word	0x0800fd1d
 800fccc:	0800fd25 	.word	0x0800fd25
 800fcd0:	0800fd2d 	.word	0x0800fd2d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fcd4:	88fa      	ldrh	r2, [r7, #6]
 800fcd6:	8a7b      	ldrh	r3, [r7, #18]
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	005b      	lsls	r3, r3, #1
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	4413      	add	r3, r2
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	80fb      	strh	r3, [r7, #6]
 800fce4:	e027      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fce6:	88fa      	ldrh	r2, [r7, #6]
 800fce8:	8a7b      	ldrh	r3, [r7, #18]
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	88fa      	ldrh	r2, [r7, #6]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	80fb      	strh	r3, [r7, #6]
 800fcfa:	e01c      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fcfc:	88fb      	ldrh	r3, [r7, #6]
 800fcfe:	3b10      	subs	r3, #16
 800fd00:	80fb      	strh	r3, [r7, #6]
 800fd02:	e018      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd04:	88fb      	ldrh	r3, [r7, #6]
 800fd06:	3b20      	subs	r3, #32
 800fd08:	80fb      	strh	r3, [r7, #6]
 800fd0a:	e014      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd0c:	88fb      	ldrh	r3, [r7, #6]
 800fd0e:	3b30      	subs	r3, #48	; 0x30
 800fd10:	80fb      	strh	r3, [r7, #6]
 800fd12:	e010      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd14:	88fb      	ldrh	r3, [r7, #6]
 800fd16:	3b1a      	subs	r3, #26
 800fd18:	80fb      	strh	r3, [r7, #6]
 800fd1a:	e00c      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd1c:	88fb      	ldrh	r3, [r7, #6]
 800fd1e:	3308      	adds	r3, #8
 800fd20:	80fb      	strh	r3, [r7, #6]
 800fd22:	e008      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd24:	88fb      	ldrh	r3, [r7, #6]
 800fd26:	3b50      	subs	r3, #80	; 0x50
 800fd28:	80fb      	strh	r3, [r7, #6]
 800fd2a:	e004      	b.n	800fd36 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd2c:	88fb      	ldrh	r3, [r7, #6]
 800fd2e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fd32:	80fb      	strh	r3, [r7, #6]
 800fd34:	bf00      	nop
			}
			break;
 800fd36:	e008      	b.n	800fd4a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fd38:	89fb      	ldrh	r3, [r7, #14]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d195      	bne.n	800fc6a <ff_wtoupper+0x1a>
 800fd3e:	8a3b      	ldrh	r3, [r7, #16]
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	697a      	ldr	r2, [r7, #20]
 800fd44:	4413      	add	r3, r2
 800fd46:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fd48:	e78f      	b.n	800fc6a <ff_wtoupper+0x1a>
			break;
 800fd4a:	bf00      	nop
	}

	return chr;
 800fd4c:	88fb      	ldrh	r3, [r7, #6]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	371c      	adds	r7, #28
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	08012728 	.word	0x08012728
 800fd60:	0801291c 	.word	0x0801291c

0800fd64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fd68:	2201      	movs	r2, #1
 800fd6a:	490e      	ldr	r1, [pc, #56]	; (800fda4 <MX_USB_HOST_Init+0x40>)
 800fd6c:	480e      	ldr	r0, [pc, #56]	; (800fda8 <MX_USB_HOST_Init+0x44>)
 800fd6e:	f7fb fd05 	bl	800b77c <USBH_Init>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fd78:	f7f2 fa02 	bl	8002180 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fd7c:	490b      	ldr	r1, [pc, #44]	; (800fdac <MX_USB_HOST_Init+0x48>)
 800fd7e:	480a      	ldr	r0, [pc, #40]	; (800fda8 <MX_USB_HOST_Init+0x44>)
 800fd80:	f7fb fd8a 	bl	800b898 <USBH_RegisterClass>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fd8a:	f7f2 f9f9 	bl	8002180 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fd8e:	4806      	ldr	r0, [pc, #24]	; (800fda8 <MX_USB_HOST_Init+0x44>)
 800fd90:	f7fb fe0e 	bl	800b9b0 <USBH_Start>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fd9a:	f7f2 f9f1 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fd9e:	bf00      	nop
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	0800fdc5 	.word	0x0800fdc5
 800fda8:	200034bc 	.word	0x200034bc
 800fdac:	20000070 	.word	0x20000070

0800fdb0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fdb4:	4802      	ldr	r0, [pc, #8]	; (800fdc0 <MX_USB_HOST_Process+0x10>)
 800fdb6:	f7fb fe0b 	bl	800b9d0 <USBH_Process>
}
 800fdba:	bf00      	nop
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	200034bc 	.word	0x200034bc

0800fdc4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	460b      	mov	r3, r1
 800fdce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fdd0:	78fb      	ldrb	r3, [r7, #3]
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	d819      	bhi.n	800fe0c <USBH_UserProcess+0x48>
 800fdd8:	a201      	add	r2, pc, #4	; (adr r2, 800fde0 <USBH_UserProcess+0x1c>)
 800fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdde:	bf00      	nop
 800fde0:	0800fe0d 	.word	0x0800fe0d
 800fde4:	0800fdfd 	.word	0x0800fdfd
 800fde8:	0800fe0d 	.word	0x0800fe0d
 800fdec:	0800fe05 	.word	0x0800fe05
 800fdf0:	0800fdf5 	.word	0x0800fdf5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fdf4:	4b09      	ldr	r3, [pc, #36]	; (800fe1c <USBH_UserProcess+0x58>)
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	701a      	strb	r2, [r3, #0]
  break;
 800fdfa:	e008      	b.n	800fe0e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fdfc:	4b07      	ldr	r3, [pc, #28]	; (800fe1c <USBH_UserProcess+0x58>)
 800fdfe:	2202      	movs	r2, #2
 800fe00:	701a      	strb	r2, [r3, #0]
  break;
 800fe02:	e004      	b.n	800fe0e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fe04:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <USBH_UserProcess+0x58>)
 800fe06:	2201      	movs	r2, #1
 800fe08:	701a      	strb	r2, [r3, #0]
  break;
 800fe0a:	e000      	b.n	800fe0e <USBH_UserProcess+0x4a>

  default:
  break;
 800fe0c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fe0e:	bf00      	nop
 800fe10:	370c      	adds	r7, #12
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	2000037c 	.word	0x2000037c

0800fe20 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b08a      	sub	sp, #40	; 0x28
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe28:	f107 0314 	add.w	r3, r7, #20
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	605a      	str	r2, [r3, #4]
 800fe32:	609a      	str	r2, [r3, #8]
 800fe34:	60da      	str	r2, [r3, #12]
 800fe36:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe40:	d147      	bne.n	800fed2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe42:	2300      	movs	r3, #0
 800fe44:	613b      	str	r3, [r7, #16]
 800fe46:	4b25      	ldr	r3, [pc, #148]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800fe48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4a:	4a24      	ldr	r2, [pc, #144]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800fe4c:	f043 0301 	orr.w	r3, r3, #1
 800fe50:	6313      	str	r3, [r2, #48]	; 0x30
 800fe52:	4b22      	ldr	r3, [pc, #136]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800fe54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	613b      	str	r3, [r7, #16]
 800fe5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fe5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fe64:	2300      	movs	r3, #0
 800fe66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fe6c:	f107 0314 	add.w	r3, r7, #20
 800fe70:	4619      	mov	r1, r3
 800fe72:	481b      	ldr	r0, [pc, #108]	; (800fee0 <HAL_HCD_MspInit+0xc0>)
 800fe74:	f7f4 f8b0 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fe78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fe7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe7e:	2302      	movs	r3, #2
 800fe80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe86:	2300      	movs	r3, #0
 800fe88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe8e:	f107 0314 	add.w	r3, r7, #20
 800fe92:	4619      	mov	r1, r3
 800fe94:	4812      	ldr	r0, [pc, #72]	; (800fee0 <HAL_HCD_MspInit+0xc0>)
 800fe96:	f7f4 f89f 	bl	8003fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe9a:	4b10      	ldr	r3, [pc, #64]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800fe9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe9e:	4a0f      	ldr	r2, [pc, #60]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800fea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fea4:	6353      	str	r3, [r2, #52]	; 0x34
 800fea6:	2300      	movs	r3, #0
 800fea8:	60fb      	str	r3, [r7, #12]
 800feaa:	4b0c      	ldr	r3, [pc, #48]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800feac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feae:	4a0b      	ldr	r2, [pc, #44]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800feb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800feb4:	6453      	str	r3, [r2, #68]	; 0x44
 800feb6:	4b09      	ldr	r3, [pc, #36]	; (800fedc <HAL_HCD_MspInit+0xbc>)
 800feb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800febe:	60fb      	str	r3, [r7, #12]
 800fec0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fec2:	2200      	movs	r2, #0
 800fec4:	2100      	movs	r1, #0
 800fec6:	2043      	movs	r0, #67	; 0x43
 800fec8:	f7f3 fb4c 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fecc:	2043      	movs	r0, #67	; 0x43
 800fece:	f7f3 fb75 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fed2:	bf00      	nop
 800fed4:	3728      	adds	r7, #40	; 0x28
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	40023800 	.word	0x40023800
 800fee0:	40020000 	.word	0x40020000

0800fee4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fc f93f 	bl	800c176 <USBH_LL_IncTimer>
}
 800fef8:	bf00      	nop
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fc f977 	bl	800c202 <USBH_LL_Connect>
}
 800ff14:	bf00      	nop
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fc f980 	bl	800c230 <USBH_LL_Disconnect>
}
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	460b      	mov	r3, r1
 800ff42:	70fb      	strb	r3, [r7, #3]
 800ff44:	4613      	mov	r3, r2
 800ff46:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fc f931 	bl	800c1ca <USBH_LL_PortEnabled>
}
 800ff68:	bf00      	nop
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fc f931 	bl	800c1e6 <USBH_LL_PortDisabled>
}
 800ff84:	bf00      	nop
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d12a      	bne.n	800fff4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ff9e:	4a18      	ldr	r2, [pc, #96]	; (8010000 <USBH_LL_Init+0x74>)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a15      	ldr	r2, [pc, #84]	; (8010000 <USBH_LL_Init+0x74>)
 800ffaa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ffae:	4b14      	ldr	r3, [pc, #80]	; (8010000 <USBH_LL_Init+0x74>)
 800ffb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ffb4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ffb6:	4b12      	ldr	r3, [pc, #72]	; (8010000 <USBH_LL_Init+0x74>)
 800ffb8:	2208      	movs	r2, #8
 800ffba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ffbc:	4b10      	ldr	r3, [pc, #64]	; (8010000 <USBH_LL_Init+0x74>)
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ffc2:	4b0f      	ldr	r3, [pc, #60]	; (8010000 <USBH_LL_Init+0x74>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ffc8:	4b0d      	ldr	r3, [pc, #52]	; (8010000 <USBH_LL_Init+0x74>)
 800ffca:	2202      	movs	r2, #2
 800ffcc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ffce:	4b0c      	ldr	r3, [pc, #48]	; (8010000 <USBH_LL_Init+0x74>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ffd4:	480a      	ldr	r0, [pc, #40]	; (8010000 <USBH_LL_Init+0x74>)
 800ffd6:	f7f4 fb5d 	bl	8004694 <HAL_HCD_Init>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ffe0:	f7f2 f8ce 	bl	8002180 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ffe4:	4806      	ldr	r0, [pc, #24]	; (8010000 <USBH_LL_Init+0x74>)
 800ffe6:	f7f4 ff73 	bl	8004ed0 <HAL_HCD_GetCurrentFrame>
 800ffea:	4603      	mov	r3, r0
 800ffec:	4619      	mov	r1, r3
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7fc f8b2 	bl	800c158 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	20003894 	.word	0x20003894

08010004 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801000c:	2300      	movs	r3, #0
 801000e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010010:	2300      	movs	r3, #0
 8010012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801001a:	4618      	mov	r0, r3
 801001c:	f7f4 fee0 	bl	8004de0 <HAL_HCD_Start>
 8010020:	4603      	mov	r3, r0
 8010022:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010024:	7bfb      	ldrb	r3, [r7, #15]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 f990 	bl	801034c <USBH_Get_USB_Status>
 801002c:	4603      	mov	r3, r0
 801002e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010030:	7bbb      	ldrb	r3, [r7, #14]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3710      	adds	r7, #16
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b084      	sub	sp, #16
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010050:	4618      	mov	r0, r3
 8010052:	f7f4 fee8 	bl	8004e26 <HAL_HCD_Stop>
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801005a:	7bfb      	ldrb	r3, [r7, #15]
 801005c:	4618      	mov	r0, r3
 801005e:	f000 f975 	bl	801034c <USBH_Get_USB_Status>
 8010062:	4603      	mov	r3, r0
 8010064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010066:	7bbb      	ldrb	r3, [r7, #14]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3710      	adds	r7, #16
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010078:	2301      	movs	r3, #1
 801007a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010082:	4618      	mov	r0, r3
 8010084:	f7f4 ff32 	bl	8004eec <HAL_HCD_GetCurrentSpeed>
 8010088:	4603      	mov	r3, r0
 801008a:	2b01      	cmp	r3, #1
 801008c:	d007      	beq.n	801009e <USBH_LL_GetSpeed+0x2e>
 801008e:	2b01      	cmp	r3, #1
 8010090:	d302      	bcc.n	8010098 <USBH_LL_GetSpeed+0x28>
 8010092:	2b02      	cmp	r3, #2
 8010094:	d006      	beq.n	80100a4 <USBH_LL_GetSpeed+0x34>
 8010096:	e008      	b.n	80100aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010098:	2300      	movs	r3, #0
 801009a:	73fb      	strb	r3, [r7, #15]
    break;
 801009c:	e008      	b.n	80100b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801009e:	2301      	movs	r3, #1
 80100a0:	73fb      	strb	r3, [r7, #15]
    break;
 80100a2:	e005      	b.n	80100b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80100a4:	2302      	movs	r3, #2
 80100a6:	73fb      	strb	r3, [r7, #15]
    break;
 80100a8:	e002      	b.n	80100b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80100aa:	2301      	movs	r3, #1
 80100ac:	73fb      	strb	r3, [r7, #15]
    break;
 80100ae:	bf00      	nop
  }
  return  speed;
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b084      	sub	sp, #16
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c2:	2300      	movs	r3, #0
 80100c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7f4 fec5 	bl	8004e60 <HAL_HCD_ResetPort>
 80100d6:	4603      	mov	r3, r0
 80100d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100da:	7bfb      	ldrb	r3, [r7, #15]
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 f935 	bl	801034c <USBH_Get_USB_Status>
 80100e2:	4603      	mov	r3, r0
 80100e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010102:	78fa      	ldrb	r2, [r7, #3]
 8010104:	4611      	mov	r1, r2
 8010106:	4618      	mov	r0, r3
 8010108:	f7f4 fecd 	bl	8004ea6 <HAL_HCD_HC_GetXferCount>
 801010c:	4603      	mov	r3, r0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}

08010116 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010116:	b590      	push	{r4, r7, lr}
 8010118:	b089      	sub	sp, #36	; 0x24
 801011a:	af04      	add	r7, sp, #16
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	4608      	mov	r0, r1
 8010120:	4611      	mov	r1, r2
 8010122:	461a      	mov	r2, r3
 8010124:	4603      	mov	r3, r0
 8010126:	70fb      	strb	r3, [r7, #3]
 8010128:	460b      	mov	r3, r1
 801012a:	70bb      	strb	r3, [r7, #2]
 801012c:	4613      	mov	r3, r2
 801012e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010130:	2300      	movs	r3, #0
 8010132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801013e:	787c      	ldrb	r4, [r7, #1]
 8010140:	78ba      	ldrb	r2, [r7, #2]
 8010142:	78f9      	ldrb	r1, [r7, #3]
 8010144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010146:	9302      	str	r3, [sp, #8]
 8010148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801014c:	9301      	str	r3, [sp, #4]
 801014e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	4623      	mov	r3, r4
 8010156:	f7f4 fb11 	bl	800477c <HAL_HCD_HC_Init>
 801015a:	4603      	mov	r3, r0
 801015c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	4618      	mov	r0, r3
 8010162:	f000 f8f3 	bl	801034c <USBH_Get_USB_Status>
 8010166:	4603      	mov	r3, r0
 8010168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801016a:	7bbb      	ldrb	r3, [r7, #14]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	bd90      	pop	{r4, r7, pc}

08010174 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	460b      	mov	r3, r1
 801017e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801018e:	78fa      	ldrb	r2, [r7, #3]
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f7f4 fb8a 	bl	80048ac <HAL_HCD_HC_Halt>
 8010198:	4603      	mov	r3, r0
 801019a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f8d4 	bl	801034c <USBH_Get_USB_Status>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80101b2:	b590      	push	{r4, r7, lr}
 80101b4:	b089      	sub	sp, #36	; 0x24
 80101b6:	af04      	add	r7, sp, #16
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	4608      	mov	r0, r1
 80101bc:	4611      	mov	r1, r2
 80101be:	461a      	mov	r2, r3
 80101c0:	4603      	mov	r3, r0
 80101c2:	70fb      	strb	r3, [r7, #3]
 80101c4:	460b      	mov	r3, r1
 80101c6:	70bb      	strb	r3, [r7, #2]
 80101c8:	4613      	mov	r3, r2
 80101ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80101da:	787c      	ldrb	r4, [r7, #1]
 80101dc:	78ba      	ldrb	r2, [r7, #2]
 80101de:	78f9      	ldrb	r1, [r7, #3]
 80101e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80101e4:	9303      	str	r3, [sp, #12]
 80101e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80101e8:	9302      	str	r3, [sp, #8]
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	4623      	mov	r3, r4
 80101f6:	f7f4 fb7d 	bl	80048f4 <HAL_HCD_HC_SubmitRequest>
 80101fa:	4603      	mov	r3, r0
 80101fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	4618      	mov	r0, r3
 8010202:	f000 f8a3 	bl	801034c <USBH_Get_USB_Status>
 8010206:	4603      	mov	r3, r0
 8010208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801020a:	7bbb      	ldrb	r3, [r7, #14]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	bd90      	pop	{r4, r7, pc}

08010214 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010226:	78fa      	ldrb	r2, [r7, #3]
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f7f4 fe26 	bl	8004e7c <HAL_HCD_HC_GetURBState>
 8010230:	4603      	mov	r3, r0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	460b      	mov	r3, r1
 8010244:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801024c:	2b01      	cmp	r3, #1
 801024e:	d103      	bne.n	8010258 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	4618      	mov	r0, r3
 8010254:	f000 f8a6 	bl	80103a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010258:	20c8      	movs	r0, #200	; 0xc8
 801025a:	f7f2 faf7 	bl	800284c <HAL_Delay>
  return USBH_OK;
 801025e:	2300      	movs	r3, #0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	460b      	mov	r3, r1
 8010272:	70fb      	strb	r3, [r7, #3]
 8010274:	4613      	mov	r3, r2
 8010276:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801027e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010280:	78fa      	ldrb	r2, [r7, #3]
 8010282:	68f9      	ldr	r1, [r7, #12]
 8010284:	4613      	mov	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	00db      	lsls	r3, r3, #3
 801028c:	440b      	add	r3, r1
 801028e:	333b      	adds	r3, #59	; 0x3b
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010296:	78fa      	ldrb	r2, [r7, #3]
 8010298:	68f9      	ldr	r1, [r7, #12]
 801029a:	4613      	mov	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4413      	add	r3, r2
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	440b      	add	r3, r1
 80102a4:	3350      	adds	r3, #80	; 0x50
 80102a6:	78ba      	ldrb	r2, [r7, #2]
 80102a8:	701a      	strb	r2, [r3, #0]
 80102aa:	e009      	b.n	80102c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80102ac:	78fa      	ldrb	r2, [r7, #3]
 80102ae:	68f9      	ldr	r1, [r7, #12]
 80102b0:	4613      	mov	r3, r2
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	4413      	add	r3, r2
 80102b6:	00db      	lsls	r3, r3, #3
 80102b8:	440b      	add	r3, r1
 80102ba:	3351      	adds	r3, #81	; 0x51
 80102bc:	78ba      	ldrb	r2, [r7, #2]
 80102be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80102ce:	b480      	push	{r7}
 80102d0:	b085      	sub	sp, #20
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	460b      	mov	r3, r1
 80102d8:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80102da:	2300      	movs	r3, #0
 80102dc:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80102e4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80102e6:	78fa      	ldrb	r2, [r7, #3]
 80102e8:	68b9      	ldr	r1, [r7, #8]
 80102ea:	4613      	mov	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	440b      	add	r3, r1
 80102f4:	333b      	adds	r3, #59	; 0x3b
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80102fc:	78fa      	ldrb	r2, [r7, #3]
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	4613      	mov	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	4413      	add	r3, r2
 8010306:	00db      	lsls	r3, r3, #3
 8010308:	440b      	add	r3, r1
 801030a:	3350      	adds	r3, #80	; 0x50
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	73fb      	strb	r3, [r7, #15]
 8010310:	e009      	b.n	8010326 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010312:	78fa      	ldrb	r2, [r7, #3]
 8010314:	68b9      	ldr	r1, [r7, #8]
 8010316:	4613      	mov	r3, r2
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	4413      	add	r3, r2
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	440b      	add	r3, r1
 8010320:	3351      	adds	r3, #81	; 0x51
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010326:	7bfb      	ldrb	r3, [r7, #15]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7f2 fa85 	bl	800284c <HAL_Delay>
}
 8010342:	bf00      	nop
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
	...

0801034c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	2b03      	cmp	r3, #3
 801035e:	d817      	bhi.n	8010390 <USBH_Get_USB_Status+0x44>
 8010360:	a201      	add	r2, pc, #4	; (adr r2, 8010368 <USBH_Get_USB_Status+0x1c>)
 8010362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010366:	bf00      	nop
 8010368:	08010379 	.word	0x08010379
 801036c:	0801037f 	.word	0x0801037f
 8010370:	08010385 	.word	0x08010385
 8010374:	0801038b 	.word	0x0801038b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	73fb      	strb	r3, [r7, #15]
    break;
 801037c:	e00b      	b.n	8010396 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801037e:	2302      	movs	r3, #2
 8010380:	73fb      	strb	r3, [r7, #15]
    break;
 8010382:	e008      	b.n	8010396 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010384:	2301      	movs	r3, #1
 8010386:	73fb      	strb	r3, [r7, #15]
    break;
 8010388:	e005      	b.n	8010396 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801038a:	2302      	movs	r3, #2
 801038c:	73fb      	strb	r3, [r7, #15]
    break;
 801038e:	e002      	b.n	8010396 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010390:	2302      	movs	r3, #2
 8010392:	73fb      	strb	r3, [r7, #15]
    break;
 8010394:	bf00      	nop
  }
  return usb_status;
 8010396:	7bfb      	ldrb	r3, [r7, #15]
}
 8010398:	4618      	mov	r0, r3
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80103ae:	79fb      	ldrb	r3, [r7, #7]
 80103b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80103b2:	79fb      	ldrb	r3, [r7, #7]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d102      	bne.n	80103be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80103b8:	2301      	movs	r3, #1
 80103ba:	73fb      	strb	r3, [r7, #15]
 80103bc:	e001      	b.n	80103c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80103be:	2300      	movs	r3, #0
 80103c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	461a      	mov	r2, r3
 80103c6:	2101      	movs	r1, #1
 80103c8:	4803      	ldr	r0, [pc, #12]	; (80103d8 <MX_DriverVbusFS+0x34>)
 80103ca:	f7f4 f8f1 	bl	80045b0 <HAL_GPIO_WritePin>
}
 80103ce:	bf00      	nop
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	40020800 	.word	0x40020800

080103dc <arm_max_f32>:
 80103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	1e4f      	subs	r7, r1, #1
 80103e2:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80103e6:	f100 0e04 	add.w	lr, r0, #4
 80103ea:	edd0 7a00 	vldr	s15, [r0]
 80103ee:	d058      	beq.n	80104a2 <arm_max_f32+0xc6>
 80103f0:	3014      	adds	r0, #20
 80103f2:	46c4      	mov	ip, r8
 80103f4:	2604      	movs	r6, #4
 80103f6:	2400      	movs	r4, #0
 80103f8:	ed10 6a04 	vldr	s12, [r0, #-16]
 80103fc:	ed50 6a03 	vldr	s13, [r0, #-12]
 8010400:	ed10 7a02 	vldr	s14, [r0, #-8]
 8010404:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010408:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801040c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010410:	bfc8      	it	gt
 8010412:	eef0 7a46 	vmovgt.f32	s15, s12
 8010416:	f1a6 0503 	sub.w	r5, r6, #3
 801041a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801041e:	bfc8      	it	gt
 8010420:	462c      	movgt	r4, r5
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	bf48      	it	mi
 8010428:	eef0 7a66 	vmovmi.f32	s15, s13
 801042c:	f1a6 0502 	sub.w	r5, r6, #2
 8010430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010434:	bf48      	it	mi
 8010436:	462c      	movmi	r4, r5
 8010438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043c:	bf48      	it	mi
 801043e:	eef0 7a47 	vmovmi.f32	s15, s14
 8010442:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010446:	eef4 7ae5 	vcmpe.f32	s15, s11
 801044a:	bf48      	it	mi
 801044c:	462c      	movmi	r4, r5
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	bf48      	it	mi
 8010454:	4634      	movmi	r4, r6
 8010456:	bf48      	it	mi
 8010458:	eef0 7a65 	vmovmi.f32	s15, s11
 801045c:	f1bc 0c01 	subs.w	ip, ip, #1
 8010460:	f106 0604 	add.w	r6, r6, #4
 8010464:	f100 0010 	add.w	r0, r0, #16
 8010468:	d1c6      	bne.n	80103f8 <arm_max_f32+0x1c>
 801046a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801046e:	f017 0003 	ands.w	r0, r7, #3
 8010472:	d018      	beq.n	80104a6 <arm_max_f32+0xca>
 8010474:	1a08      	subs	r0, r1, r0
 8010476:	ecbe 7a01 	vldmia	lr!, {s14}
 801047a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010482:	bfc8      	it	gt
 8010484:	4604      	movgt	r4, r0
 8010486:	f100 0001 	add.w	r0, r0, #1
 801048a:	bfd8      	it	le
 801048c:	eeb0 7a67 	vmovle.f32	s14, s15
 8010490:	4288      	cmp	r0, r1
 8010492:	eef0 7a47 	vmov.f32	s15, s14
 8010496:	d1ee      	bne.n	8010476 <arm_max_f32+0x9a>
 8010498:	ed82 7a00 	vstr	s14, [r2]
 801049c:	601c      	str	r4, [r3, #0]
 801049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a2:	4644      	mov	r4, r8
 80104a4:	e7e3      	b.n	801046e <arm_max_f32+0x92>
 80104a6:	eeb0 7a67 	vmov.f32	s14, s15
 80104aa:	e7f5      	b.n	8010498 <arm_max_f32+0xbc>

080104ac <arm_cfft_radix8by2_f32>:
 80104ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b0:	ed2d 8b08 	vpush	{d8-d11}
 80104b4:	f8b0 e000 	ldrh.w	lr, [r0]
 80104b8:	6842      	ldr	r2, [r0, #4]
 80104ba:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80104be:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80104c2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80104c6:	4607      	mov	r7, r0
 80104c8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80104cc:	f000 80af 	beq.w	801062e <arm_cfft_radix8by2_f32+0x182>
 80104d0:	3310      	adds	r3, #16
 80104d2:	18ce      	adds	r6, r1, r3
 80104d4:	3210      	adds	r2, #16
 80104d6:	4443      	add	r3, r8
 80104d8:	f101 0510 	add.w	r5, r1, #16
 80104dc:	f108 0410 	add.w	r4, r8, #16
 80104e0:	ed54 1a04 	vldr	s3, [r4, #-16]
 80104e4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80104e8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80104ec:	ed53 5a02 	vldr	s11, [r3, #-8]
 80104f0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80104f4:	ed54 6a03 	vldr	s13, [r4, #-12]
 80104f8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80104fc:	ed16 2a04 	vldr	s4, [r6, #-16]
 8010500:	ed56 2a03 	vldr	s5, [r6, #-12]
 8010504:	ed15 6a03 	vldr	s12, [r5, #-12]
 8010508:	ed15 7a01 	vldr	s14, [r5, #-4]
 801050c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8010510:	ed54 7a01 	vldr	s15, [r4, #-4]
 8010514:	ed56 0a02 	vldr	s1, [r6, #-8]
 8010518:	ed16 1a01 	vldr	s2, [r6, #-4]
 801051c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8010520:	ee73 ba21 	vadd.f32	s23, s6, s3
 8010524:	ee36 ba26 	vadd.f32	s22, s12, s13
 8010528:	ee37 aa27 	vadd.f32	s20, s14, s15
 801052c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8010530:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8010534:	ee31 8a05 	vadd.f32	s16, s2, s10
 8010538:	ee74 aa80 	vadd.f32	s21, s9, s0
 801053c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8010540:	ed45 ba04 	vstr	s23, [r5, #-16]
 8010544:	ed05 ba03 	vstr	s22, [r5, #-12]
 8010548:	ed45 aa02 	vstr	s21, [r5, #-8]
 801054c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8010550:	ed06 8a01 	vstr	s16, [r6, #-4]
 8010554:	ed46 9a04 	vstr	s19, [r6, #-16]
 8010558:	ed06 9a03 	vstr	s18, [r6, #-12]
 801055c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8010560:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010564:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8010568:	ed12 6a03 	vldr	s12, [r2, #-12]
 801056c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8010570:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010574:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010578:	ee26 8a86 	vmul.f32	s16, s13, s12
 801057c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8010580:	ee63 1a22 	vmul.f32	s3, s6, s5
 8010584:	ee24 4a22 	vmul.f32	s8, s8, s5
 8010588:	ee23 3a06 	vmul.f32	s6, s6, s12
 801058c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8010590:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010594:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010598:	ee36 6a04 	vadd.f32	s12, s12, s8
 801059c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80105a0:	ee72 3a63 	vsub.f32	s7, s4, s7
 80105a4:	ee71 2a88 	vadd.f32	s5, s3, s16
 80105a8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80105ac:	ed44 2a04 	vstr	s5, [r4, #-16]
 80105b0:	ed43 3a04 	vstr	s7, [r3, #-16]
 80105b4:	ed03 6a03 	vstr	s12, [r3, #-12]
 80105b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105bc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80105c0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80105c4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80105c8:	ee35 6a41 	vsub.f32	s12, s10, s2
 80105cc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80105d0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80105d4:	ee26 5a87 	vmul.f32	s10, s13, s14
 80105d8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80105dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80105e0:	ee64 4a87 	vmul.f32	s9, s9, s14
 80105e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80105e8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80105ec:	ee26 6a25 	vmul.f32	s12, s12, s11
 80105f0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80105f4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80105f8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80105fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010600:	f1be 0e01 	subs.w	lr, lr, #1
 8010604:	ed44 5a02 	vstr	s11, [r4, #-8]
 8010608:	f105 0510 	add.w	r5, r5, #16
 801060c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8010610:	f106 0610 	add.w	r6, r6, #16
 8010614:	ed03 6a02 	vstr	s12, [r3, #-8]
 8010618:	ed03 7a01 	vstr	s14, [r3, #-4]
 801061c:	f102 0210 	add.w	r2, r2, #16
 8010620:	f104 0410 	add.w	r4, r4, #16
 8010624:	f103 0310 	add.w	r3, r3, #16
 8010628:	f47f af5a 	bne.w	80104e0 <arm_cfft_radix8by2_f32+0x34>
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	fa1f f48c 	uxth.w	r4, ip
 8010632:	4608      	mov	r0, r1
 8010634:	2302      	movs	r3, #2
 8010636:	4621      	mov	r1, r4
 8010638:	f000 fe40 	bl	80112bc <arm_radix8_butterfly_f32>
 801063c:	ecbd 8b08 	vpop	{d8-d11}
 8010640:	4640      	mov	r0, r8
 8010642:	4621      	mov	r1, r4
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	2302      	movs	r3, #2
 8010648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801064c:	f000 be36 	b.w	80112bc <arm_radix8_butterfly_f32>

08010650 <arm_cfft_radix8by4_f32>:
 8010650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010654:	ed2d 8b0a 	vpush	{d8-d12}
 8010658:	8802      	ldrh	r2, [r0, #0]
 801065a:	ed91 6a00 	vldr	s12, [r1]
 801065e:	b08f      	sub	sp, #60	; 0x3c
 8010660:	460f      	mov	r7, r1
 8010662:	0852      	lsrs	r2, r2, #1
 8010664:	0093      	lsls	r3, r2, #2
 8010666:	900c      	str	r0, [sp, #48]	; 0x30
 8010668:	9103      	str	r1, [sp, #12]
 801066a:	6841      	ldr	r1, [r0, #4]
 801066c:	ed97 7a01 	vldr	s14, [r7, #4]
 8010670:	4638      	mov	r0, r7
 8010672:	4418      	add	r0, r3
 8010674:	4606      	mov	r6, r0
 8010676:	9009      	str	r0, [sp, #36]	; 0x24
 8010678:	4418      	add	r0, r3
 801067a:	edd0 6a00 	vldr	s13, [r0]
 801067e:	edd6 3a00 	vldr	s7, [r6]
 8010682:	edd6 2a01 	vldr	s5, [r6, #4]
 8010686:	edd0 7a01 	vldr	s15, [r0, #4]
 801068a:	900a      	str	r0, [sp, #40]	; 0x28
 801068c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010690:	4604      	mov	r4, r0
 8010692:	4625      	mov	r5, r4
 8010694:	441c      	add	r4, r3
 8010696:	ed94 4a00 	vldr	s8, [r4]
 801069a:	ed94 5a01 	vldr	s10, [r4, #4]
 801069e:	9401      	str	r4, [sp, #4]
 80106a0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80106a4:	4630      	mov	r0, r6
 80106a6:	ee74 4a24 	vadd.f32	s9, s8, s9
 80106aa:	463e      	mov	r6, r7
 80106ac:	ee14 ea90 	vmov	lr, s9
 80106b0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80106b4:	f846 eb08 	str.w	lr, [r6], #8
 80106b8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80106bc:	edd0 4a01 	vldr	s9, [r0, #4]
 80106c0:	9604      	str	r6, [sp, #16]
 80106c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106c6:	9e01      	ldr	r6, [sp, #4]
 80106c8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80106cc:	ed96 2a01 	vldr	s4, [r6, #4]
 80106d0:	ee36 7a24 	vadd.f32	s14, s12, s9
 80106d4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80106d8:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80106dc:	ee36 6a62 	vsub.f32	s12, s12, s5
 80106e0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80106e4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80106e8:	ee73 3a45 	vsub.f32	s7, s6, s10
 80106ec:	4604      	mov	r4, r0
 80106ee:	ee36 6a45 	vsub.f32	s12, s12, s10
 80106f2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80106f6:	46a3      	mov	fp, r4
 80106f8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80106fc:	ee34 5a84 	vadd.f32	s10, s9, s8
 8010700:	ee13 8a90 	vmov	r8, s7
 8010704:	46a4      	mov	ip, r4
 8010706:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801070a:	ed87 7a01 	vstr	s14, [r7, #4]
 801070e:	f84b 8b08 	str.w	r8, [fp], #8
 8010712:	f1ac 0704 	sub.w	r7, ip, #4
 8010716:	ed8c 5a01 	vstr	s10, [ip, #4]
 801071a:	f101 0c08 	add.w	ip, r1, #8
 801071e:	462c      	mov	r4, r5
 8010720:	f8cd c014 	str.w	ip, [sp, #20]
 8010724:	ee15 ca90 	vmov	ip, s11
 8010728:	f844 cb08 	str.w	ip, [r4], #8
 801072c:	9407      	str	r4, [sp, #28]
 801072e:	f101 0410 	add.w	r4, r1, #16
 8010732:	ed85 6a01 	vstr	s12, [r5, #4]
 8010736:	0852      	lsrs	r2, r2, #1
 8010738:	9402      	str	r4, [sp, #8]
 801073a:	462c      	mov	r4, r5
 801073c:	f101 0518 	add.w	r5, r1, #24
 8010740:	920b      	str	r2, [sp, #44]	; 0x2c
 8010742:	46b2      	mov	sl, r6
 8010744:	9506      	str	r5, [sp, #24]
 8010746:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801074a:	3a02      	subs	r2, #2
 801074c:	ee16 5a90 	vmov	r5, s13
 8010750:	46b6      	mov	lr, r6
 8010752:	4630      	mov	r0, r6
 8010754:	0852      	lsrs	r2, r2, #1
 8010756:	f84a 5b08 	str.w	r5, [sl], #8
 801075a:	f1a0 0604 	sub.w	r6, r0, #4
 801075e:	edce 7a01 	vstr	s15, [lr, #4]
 8010762:	9208      	str	r2, [sp, #32]
 8010764:	f000 8130 	beq.w	80109c8 <arm_cfft_radix8by4_f32+0x378>
 8010768:	4691      	mov	r9, r2
 801076a:	9a03      	ldr	r2, [sp, #12]
 801076c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010770:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010774:	3b08      	subs	r3, #8
 8010776:	f102 0510 	add.w	r5, r2, #16
 801077a:	f101 0c20 	add.w	ip, r1, #32
 801077e:	f1a4 020c 	sub.w	r2, r4, #12
 8010782:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8010786:	4433      	add	r3, r6
 8010788:	3410      	adds	r4, #16
 801078a:	4650      	mov	r0, sl
 801078c:	4659      	mov	r1, fp
 801078e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8010792:	ed14 5a02 	vldr	s10, [r4, #-8]
 8010796:	ed91 7a00 	vldr	s14, [r1]
 801079a:	edd0 7a00 	vldr	s15, [r0]
 801079e:	ed15 4a01 	vldr	s8, [r5, #-4]
 80107a2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80107a6:	edd0 6a01 	vldr	s13, [r0, #4]
 80107aa:	ed91 6a01 	vldr	s12, [r1, #4]
 80107ae:	ee33 8a85 	vadd.f32	s16, s7, s10
 80107b2:	ee34 0a25 	vadd.f32	s0, s8, s11
 80107b6:	ee78 4a07 	vadd.f32	s9, s16, s14
 80107ba:	ee74 5a65 	vsub.f32	s11, s8, s11
 80107be:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80107c2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80107c6:	ed45 4a02 	vstr	s9, [r5, #-8]
 80107ca:	edd1 4a01 	vldr	s9, [r1, #4]
 80107ce:	ed90 4a01 	vldr	s8, [r0, #4]
 80107d2:	ee70 4a24 	vadd.f32	s9, s0, s9
 80107d6:	ee76 aa05 	vadd.f32	s21, s12, s10
 80107da:	ee74 4a84 	vadd.f32	s9, s9, s8
 80107de:	ee35 aac7 	vsub.f32	s20, s11, s14
 80107e2:	ed45 4a01 	vstr	s9, [r5, #-4]
 80107e6:	edd6 1a00 	vldr	s3, [r6]
 80107ea:	edd7 0a00 	vldr	s1, [r7]
 80107ee:	ed92 4a02 	vldr	s8, [r2, #8]
 80107f2:	edd3 3a02 	vldr	s7, [r3, #8]
 80107f6:	ed93 2a01 	vldr	s4, [r3, #4]
 80107fa:	ed16 1a01 	vldr	s2, [r6, #-4]
 80107fe:	edd2 2a01 	vldr	s5, [r2, #4]
 8010802:	ed57 9a01 	vldr	s19, [r7, #-4]
 8010806:	ee70 4aa1 	vadd.f32	s9, s1, s3
 801080a:	ee39 3a81 	vadd.f32	s6, s19, s2
 801080e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8010812:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8010816:	ee73 8aa8 	vadd.f32	s17, s7, s17
 801081a:	ee7a aae6 	vsub.f32	s21, s21, s13
 801081e:	ee18 aa90 	vmov	sl, s17
 8010822:	f847 a908 	str.w	sl, [r7], #-8
 8010826:	edd2 8a01 	vldr	s17, [r2, #4]
 801082a:	ed93 9a01 	vldr	s18, [r3, #4]
 801082e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8010832:	ee3a aa27 	vadd.f32	s20, s20, s15
 8010836:	ee78 8a89 	vadd.f32	s17, s17, s18
 801083a:	ee74 0a63 	vsub.f32	s1, s8, s7
 801083e:	edc7 8a01 	vstr	s17, [r7, #4]
 8010842:	ed18 ba02 	vldr	s22, [r8, #-8]
 8010846:	ed58 8a01 	vldr	s17, [r8, #-4]
 801084a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 801084e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8010852:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8010856:	ee71 9ae2 	vsub.f32	s19, s3, s5
 801085a:	ee30 9a81 	vadd.f32	s18, s1, s2
 801085e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8010862:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8010866:	ee6a aaa8 	vmul.f32	s21, s21, s17
 801086a:	ee69 baa8 	vmul.f32	s23, s19, s17
 801086e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8010872:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8010876:	ee69 8a28 	vmul.f32	s17, s18, s17
 801087a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801087e:	ee1c aa10 	vmov	sl, s24
 8010882:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8010886:	f841 ab08 	str.w	sl, [r1], #8
 801088a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801088e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8010892:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8010896:	ee33 3a62 	vsub.f32	s6, s6, s5
 801089a:	ed01 aa01 	vstr	s20, [r1, #-4]
 801089e:	edc2 8a01 	vstr	s17, [r2, #4]
 80108a2:	ed82 ba02 	vstr	s22, [r2, #8]
 80108a6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80108aa:	ee74 3a63 	vsub.f32	s7, s8, s7
 80108ae:	ee38 8a47 	vsub.f32	s16, s16, s14
 80108b2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80108b6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80108ba:	ee33 3a42 	vsub.f32	s6, s6, s4
 80108be:	ee38 8a67 	vsub.f32	s16, s16, s15
 80108c2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80108c6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80108ca:	ee63 8a04 	vmul.f32	s17, s6, s8
 80108ce:	ee28 aa24 	vmul.f32	s20, s16, s9
 80108d2:	ee60 9a04 	vmul.f32	s19, s0, s8
 80108d6:	ee28 8a04 	vmul.f32	s16, s16, s8
 80108da:	ee20 0a24 	vmul.f32	s0, s0, s9
 80108de:	ee63 3a84 	vmul.f32	s7, s7, s8
 80108e2:	ee39 4a68 	vsub.f32	s8, s18, s17
 80108e6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80108ea:	ee14 aa10 	vmov	sl, s8
 80108ee:	ee30 0a48 	vsub.f32	s0, s0, s16
 80108f2:	ee63 4a24 	vmul.f32	s9, s6, s9
 80108f6:	ed44 9a02 	vstr	s19, [r4, #-8]
 80108fa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80108fe:	ed04 0a01 	vstr	s0, [r4, #-4]
 8010902:	f846 a908 	str.w	sl, [r6], #-8
 8010906:	ee35 6a46 	vsub.f32	s12, s10, s12
 801090a:	ee35 7a87 	vadd.f32	s14, s11, s14
 801090e:	edc6 3a01 	vstr	s7, [r6, #4]
 8010912:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010916:	ee77 7a67 	vsub.f32	s15, s14, s15
 801091a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 801091e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8010922:	ee67 5a86 	vmul.f32	s11, s15, s12
 8010926:	ee26 5a87 	vmul.f32	s10, s13, s14
 801092a:	ee72 2a62 	vsub.f32	s5, s4, s5
 801092e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8010932:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8010936:	ee75 5a25 	vadd.f32	s11, s10, s11
 801093a:	ee62 0a86 	vmul.f32	s1, s5, s12
 801093e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010946:	ee21 6a06 	vmul.f32	s12, s2, s12
 801094a:	ee62 2a87 	vmul.f32	s5, s5, s14
 801094e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8010952:	ee15 aa90 	vmov	sl, s11
 8010956:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801095a:	f840 ab08 	str.w	sl, [r0], #8
 801095e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8010962:	ee76 2a22 	vadd.f32	s5, s12, s5
 8010966:	f1b9 0901 	subs.w	r9, r9, #1
 801096a:	ed40 7a01 	vstr	s15, [r0, #-4]
 801096e:	f105 0508 	add.w	r5, r5, #8
 8010972:	ed83 1a02 	vstr	s2, [r3, #8]
 8010976:	edc3 2a01 	vstr	s5, [r3, #4]
 801097a:	f108 0808 	add.w	r8, r8, #8
 801097e:	f1a2 0208 	sub.w	r2, r2, #8
 8010982:	f10c 0c10 	add.w	ip, ip, #16
 8010986:	f104 0408 	add.w	r4, r4, #8
 801098a:	f10e 0e18 	add.w	lr, lr, #24
 801098e:	f1a3 0308 	sub.w	r3, r3, #8
 8010992:	f47f aefc 	bne.w	801078e <arm_cfft_radix8by4_f32+0x13e>
 8010996:	9908      	ldr	r1, [sp, #32]
 8010998:	9802      	ldr	r0, [sp, #8]
 801099a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801099e:	00cb      	lsls	r3, r1, #3
 80109a0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80109a4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80109a8:	9102      	str	r1, [sp, #8]
 80109aa:	9904      	ldr	r1, [sp, #16]
 80109ac:	4419      	add	r1, r3
 80109ae:	9104      	str	r1, [sp, #16]
 80109b0:	9905      	ldr	r1, [sp, #20]
 80109b2:	4419      	add	r1, r3
 80109b4:	9105      	str	r1, [sp, #20]
 80109b6:	9907      	ldr	r1, [sp, #28]
 80109b8:	449b      	add	fp, r3
 80109ba:	4419      	add	r1, r3
 80109bc:	449a      	add	sl, r3
 80109be:	9b06      	ldr	r3, [sp, #24]
 80109c0:	9107      	str	r1, [sp, #28]
 80109c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109c6:	9306      	str	r3, [sp, #24]
 80109c8:	9a04      	ldr	r2, [sp, #16]
 80109ca:	9807      	ldr	r0, [sp, #28]
 80109cc:	edd2 3a00 	vldr	s7, [r2]
 80109d0:	ed90 4a00 	vldr	s8, [r0]
 80109d4:	eddb 7a00 	vldr	s15, [fp]
 80109d8:	ed9a 3a00 	vldr	s6, [sl]
 80109dc:	edd2 4a01 	vldr	s9, [r2, #4]
 80109e0:	ed90 7a01 	vldr	s14, [r0, #4]
 80109e4:	ed9b 2a01 	vldr	s4, [fp, #4]
 80109e8:	edda 5a01 	vldr	s11, [sl, #4]
 80109ec:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80109f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80109f2:	ee73 6a84 	vadd.f32	s13, s7, s8
 80109f6:	ee34 6a87 	vadd.f32	s12, s9, s14
 80109fa:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80109fe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010a02:	ee33 5a05 	vadd.f32	s10, s6, s10
 8010a06:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010a0a:	ed82 5a00 	vstr	s10, [r2]
 8010a0e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8010a12:	edda 4a01 	vldr	s9, [sl, #4]
 8010a16:	ee36 5a05 	vadd.f32	s10, s12, s10
 8010a1a:	ee72 3a04 	vadd.f32	s7, s4, s8
 8010a1e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010a22:	ee77 4a67 	vsub.f32	s9, s14, s15
 8010a26:	ed82 5a01 	vstr	s10, [r2, #4]
 8010a2a:	9a05      	ldr	r2, [sp, #20]
 8010a2c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8010a30:	edd2 1a00 	vldr	s3, [r2]
 8010a34:	edd2 2a01 	vldr	s5, [r2, #4]
 8010a38:	9a02      	ldr	r2, [sp, #8]
 8010a3a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8010a3e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8010a42:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8010a46:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010a4a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8010a4e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8010a52:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8010a56:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010a5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a5e:	edcb 2a00 	vstr	s5, [fp]
 8010a62:	ed8b 5a01 	vstr	s10, [fp, #4]
 8010a66:	edd2 3a01 	vldr	s7, [r2, #4]
 8010a6a:	ed92 5a00 	vldr	s10, [r2]
 8010a6e:	9a06      	ldr	r2, [sp, #24]
 8010a70:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010a74:	ee36 6a65 	vsub.f32	s12, s12, s11
 8010a78:	ee66 4a85 	vmul.f32	s9, s13, s10
 8010a7c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8010a80:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010a84:	ee26 6a23 	vmul.f32	s12, s12, s7
 8010a88:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010a8c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8010a90:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a98:	edc0 6a01 	vstr	s13, [r0, #4]
 8010a9c:	ed80 6a00 	vstr	s12, [r0]
 8010aa0:	ed92 6a01 	vldr	s12, [r2, #4]
 8010aa4:	9803      	ldr	r0, [sp, #12]
 8010aa6:	ee77 7a43 	vsub.f32	s15, s14, s6
 8010aaa:	ee75 5a84 	vadd.f32	s11, s11, s8
 8010aae:	ed92 7a00 	vldr	s14, [r2]
 8010ab2:	ee65 6a87 	vmul.f32	s13, s11, s14
 8010ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010aba:	ee65 5a86 	vmul.f32	s11, s11, s12
 8010abe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010ac2:	ee77 5a65 	vsub.f32	s11, s14, s11
 8010ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010aca:	edca 5a01 	vstr	s11, [sl, #4]
 8010ace:	edca 7a00 	vstr	s15, [sl]
 8010ad2:	6872      	ldr	r2, [r6, #4]
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	2304      	movs	r3, #4
 8010ad8:	f000 fbf0 	bl	80112bc <arm_radix8_butterfly_f32>
 8010adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ade:	6872      	ldr	r2, [r6, #4]
 8010ae0:	4621      	mov	r1, r4
 8010ae2:	2304      	movs	r3, #4
 8010ae4:	f000 fbea 	bl	80112bc <arm_radix8_butterfly_f32>
 8010ae8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010aea:	6872      	ldr	r2, [r6, #4]
 8010aec:	4621      	mov	r1, r4
 8010aee:	2304      	movs	r3, #4
 8010af0:	f000 fbe4 	bl	80112bc <arm_radix8_butterfly_f32>
 8010af4:	9801      	ldr	r0, [sp, #4]
 8010af6:	6872      	ldr	r2, [r6, #4]
 8010af8:	4621      	mov	r1, r4
 8010afa:	2304      	movs	r3, #4
 8010afc:	b00f      	add	sp, #60	; 0x3c
 8010afe:	ecbd 8b0a 	vpop	{d8-d12}
 8010b02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b06:	f000 bbd9 	b.w	80112bc <arm_radix8_butterfly_f32>
 8010b0a:	bf00      	nop

08010b0c <arm_cfft_f32>:
 8010b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b10:	2a01      	cmp	r2, #1
 8010b12:	4606      	mov	r6, r0
 8010b14:	4617      	mov	r7, r2
 8010b16:	460c      	mov	r4, r1
 8010b18:	4698      	mov	r8, r3
 8010b1a:	8805      	ldrh	r5, [r0, #0]
 8010b1c:	d054      	beq.n	8010bc8 <arm_cfft_f32+0xbc>
 8010b1e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010b22:	d04c      	beq.n	8010bbe <arm_cfft_f32+0xb2>
 8010b24:	d916      	bls.n	8010b54 <arm_cfft_f32+0x48>
 8010b26:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010b2a:	d01a      	beq.n	8010b62 <arm_cfft_f32+0x56>
 8010b2c:	d95c      	bls.n	8010be8 <arm_cfft_f32+0xdc>
 8010b2e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8010b32:	d044      	beq.n	8010bbe <arm_cfft_f32+0xb2>
 8010b34:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010b38:	d105      	bne.n	8010b46 <arm_cfft_f32+0x3a>
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	6872      	ldr	r2, [r6, #4]
 8010b40:	2301      	movs	r3, #1
 8010b42:	f000 fbbb 	bl	80112bc <arm_radix8_butterfly_f32>
 8010b46:	f1b8 0f00 	cmp.w	r8, #0
 8010b4a:	d111      	bne.n	8010b70 <arm_cfft_f32+0x64>
 8010b4c:	2f01      	cmp	r7, #1
 8010b4e:	d016      	beq.n	8010b7e <arm_cfft_f32+0x72>
 8010b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b54:	2d20      	cmp	r5, #32
 8010b56:	d032      	beq.n	8010bbe <arm_cfft_f32+0xb2>
 8010b58:	d94a      	bls.n	8010bf0 <arm_cfft_f32+0xe4>
 8010b5a:	2d40      	cmp	r5, #64	; 0x40
 8010b5c:	d0ed      	beq.n	8010b3a <arm_cfft_f32+0x2e>
 8010b5e:	2d80      	cmp	r5, #128	; 0x80
 8010b60:	d1f1      	bne.n	8010b46 <arm_cfft_f32+0x3a>
 8010b62:	4630      	mov	r0, r6
 8010b64:	4621      	mov	r1, r4
 8010b66:	f7ff fca1 	bl	80104ac <arm_cfft_radix8by2_f32>
 8010b6a:	f1b8 0f00 	cmp.w	r8, #0
 8010b6e:	d0ed      	beq.n	8010b4c <arm_cfft_f32+0x40>
 8010b70:	4620      	mov	r0, r4
 8010b72:	89b1      	ldrh	r1, [r6, #12]
 8010b74:	68b2      	ldr	r2, [r6, #8]
 8010b76:	f7ef fb2b 	bl	80001d0 <arm_bitreversal_32>
 8010b7a:	2f01      	cmp	r7, #1
 8010b7c:	d1e8      	bne.n	8010b50 <arm_cfft_f32+0x44>
 8010b7e:	ee07 5a90 	vmov	s15, r5
 8010b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b8a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010b8e:	2d00      	cmp	r5, #0
 8010b90:	d0de      	beq.n	8010b50 <arm_cfft_f32+0x44>
 8010b92:	f104 0108 	add.w	r1, r4, #8
 8010b96:	2300      	movs	r3, #0
 8010b98:	3301      	adds	r3, #1
 8010b9a:	429d      	cmp	r5, r3
 8010b9c:	f101 0108 	add.w	r1, r1, #8
 8010ba0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8010ba4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8010ba8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010bac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010bb0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010bb4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010bb8:	d1ee      	bne.n	8010b98 <arm_cfft_f32+0x8c>
 8010bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	f7ff fd45 	bl	8010650 <arm_cfft_radix8by4_f32>
 8010bc6:	e7be      	b.n	8010b46 <arm_cfft_f32+0x3a>
 8010bc8:	b1ad      	cbz	r5, 8010bf6 <arm_cfft_f32+0xea>
 8010bca:	f101 030c 	add.w	r3, r1, #12
 8010bce:	2200      	movs	r2, #0
 8010bd0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010bd4:	3201      	adds	r2, #1
 8010bd6:	eef1 7a67 	vneg.f32	s15, s15
 8010bda:	4295      	cmp	r5, r2
 8010bdc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8010be0:	f103 0308 	add.w	r3, r3, #8
 8010be4:	d1f4      	bne.n	8010bd0 <arm_cfft_f32+0xc4>
 8010be6:	e79a      	b.n	8010b1e <arm_cfft_f32+0x12>
 8010be8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010bec:	d0a5      	beq.n	8010b3a <arm_cfft_f32+0x2e>
 8010bee:	e7aa      	b.n	8010b46 <arm_cfft_f32+0x3a>
 8010bf0:	2d10      	cmp	r5, #16
 8010bf2:	d0b6      	beq.n	8010b62 <arm_cfft_f32+0x56>
 8010bf4:	e7a7      	b.n	8010b46 <arm_cfft_f32+0x3a>
 8010bf6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010bfa:	d894      	bhi.n	8010b26 <arm_cfft_f32+0x1a>
 8010bfc:	e7aa      	b.n	8010b54 <arm_cfft_f32+0x48>
 8010bfe:	bf00      	nop

08010c00 <arm_fir_init_f32>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	9c04      	ldr	r4, [sp, #16]
 8010c04:	6082      	str	r2, [r0, #8]
 8010c06:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8010c0a:	3c01      	subs	r4, #1
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	440c      	add	r4, r1
 8010c10:	8001      	strh	r1, [r0, #0]
 8010c12:	461e      	mov	r6, r3
 8010c14:	00a2      	lsls	r2, r4, #2
 8010c16:	4618      	mov	r0, r3
 8010c18:	2100      	movs	r1, #0
 8010c1a:	f000 fe76 	bl	801190a <memset>
 8010c1e:	606e      	str	r6, [r5, #4]
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	bf00      	nop

08010c24 <arm_fir_f32>:
 8010c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c28:	ed2d 8b10 	vpush	{d8-d15}
 8010c2c:	b089      	sub	sp, #36	; 0x24
 8010c2e:	4605      	mov	r5, r0
 8010c30:	9003      	str	r0, [sp, #12]
 8010c32:	8800      	ldrh	r0, [r0, #0]
 8010c34:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8010c38:	9304      	str	r3, [sp, #16]
 8010c3a:	461e      	mov	r6, r3
 8010c3c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8010c40:	3b01      	subs	r3, #1
 8010c42:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8010c46:	08f3      	lsrs	r3, r6, #3
 8010c48:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8010c4c:	9001      	str	r0, [sp, #4]
 8010c4e:	4625      	mov	r5, r4
 8010c50:	9400      	str	r4, [sp, #0]
 8010c52:	9302      	str	r3, [sp, #8]
 8010c54:	f000 81ee 	beq.w	8011034 <arm_fir_f32+0x410>
 8010c58:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8010c5c:	469e      	mov	lr, r3
 8010c5e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8010c62:	1f1e      	subs	r6, r3, #4
 8010c64:	4604      	mov	r4, r0
 8010c66:	9605      	str	r6, [sp, #20]
 8010c68:	eb08 0003 	add.w	r0, r8, r3
 8010c6c:	f004 0a07 	and.w	sl, r4, #7
 8010c70:	4613      	mov	r3, r2
 8010c72:	f10c 0420 	add.w	r4, ip, #32
 8010c76:	f8cd c018 	str.w	ip, [sp, #24]
 8010c7a:	4684      	mov	ip, r0
 8010c7c:	4648      	mov	r0, r9
 8010c7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010c82:	9107      	str	r1, [sp, #28]
 8010c84:	f105 0720 	add.w	r7, r5, #32
 8010c88:	f101 0620 	add.w	r6, r1, #32
 8010c8c:	f102 0520 	add.w	r5, r2, #32
 8010c90:	4652      	mov	r2, sl
 8010c92:	469a      	mov	sl, r3
 8010c94:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8010c98:	f847 3c20 	str.w	r3, [r7, #-32]
 8010c9c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8010ca0:	f847 3c1c 	str.w	r3, [r7, #-28]
 8010ca4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8010ca8:	f847 3c18 	str.w	r3, [r7, #-24]
 8010cac:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8010cb0:	f847 3c14 	str.w	r3, [r7, #-20]
 8010cb4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8010cb8:	f847 3c10 	str.w	r3, [r7, #-16]
 8010cbc:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8010cc0:	f847 3c0c 	str.w	r3, [r7, #-12]
 8010cc4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8010cc8:	f847 3c08 	str.w	r3, [r7, #-8]
 8010ccc:	eddf 3af1 	vldr	s7, [pc, #964]	; 8011094 <arm_fir_f32+0x470>
 8010cd0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cd4:	f847 3c04 	str.w	r3, [r7, #-4]
 8010cd8:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8010cdc:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8010ce0:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8010ce4:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8010ce8:	ed14 1a04 	vldr	s2, [r4, #-16]
 8010cec:	ed54 0a03 	vldr	s1, [r4, #-12]
 8010cf0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8010cf4:	1f21      	subs	r1, r4, #4
 8010cf6:	eef0 8a63 	vmov.f32	s17, s7
 8010cfa:	eef0 9a63 	vmov.f32	s19, s7
 8010cfe:	eef0 aa63 	vmov.f32	s21, s7
 8010d02:	eef0 ba63 	vmov.f32	s23, s7
 8010d06:	eeb0 ca63 	vmov.f32	s24, s7
 8010d0a:	eef0 ca63 	vmov.f32	s25, s7
 8010d0e:	eeb0 da63 	vmov.f32	s26, s7
 8010d12:	2800      	cmp	r0, #0
 8010d14:	f000 81e8 	beq.w	80110e8 <arm_fir_f32+0x4c4>
 8010d18:	f108 0120 	add.w	r1, r8, #32
 8010d1c:	f104 031c 	add.w	r3, r4, #28
 8010d20:	4683      	mov	fp, r0
 8010d22:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8010d26:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8010d2a:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8010d2e:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8010d32:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8010d36:	ed11 6a04 	vldr	s12, [r1, #-16]
 8010d3a:	ed51 6a03 	vldr	s13, [r1, #-12]
 8010d3e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010d42:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010d46:	ee23 fa04 	vmul.f32	s30, s6, s8
 8010d4a:	ee62 ea84 	vmul.f32	s29, s5, s8
 8010d4e:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8010d52:	ee22 ea04 	vmul.f32	s28, s4, s8
 8010d56:	ee61 da84 	vmul.f32	s27, s3, s8
 8010d5a:	ee21 ba04 	vmul.f32	s22, s2, s8
 8010d5e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8010d62:	ee20 9a04 	vmul.f32	s18, s0, s8
 8010d66:	ee28 4a04 	vmul.f32	s8, s16, s8
 8010d6a:	ee62 fa24 	vmul.f32	s31, s4, s9
 8010d6e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8010d72:	ee7b baad 	vadd.f32	s23, s23, s27
 8010d76:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8010d7a:	ee61 da24 	vmul.f32	s27, s2, s9
 8010d7e:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8010d82:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8010d86:	ee20 baa4 	vmul.f32	s22, s1, s9
 8010d8a:	ee20 aa24 	vmul.f32	s20, s0, s9
 8010d8e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8010d92:	ee7c caae 	vadd.f32	s25, s25, s29
 8010d96:	ee22 faa4 	vmul.f32	s30, s5, s9
 8010d9a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8010d9e:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8010da2:	ee28 9a24 	vmul.f32	s18, s16, s9
 8010da6:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010daa:	ee63 4a24 	vmul.f32	s9, s6, s9
 8010dae:	ee22 4a05 	vmul.f32	s8, s4, s10
 8010db2:	ee61 ea05 	vmul.f32	s29, s2, s10
 8010db6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8010dba:	ee3d da0f 	vadd.f32	s26, s26, s30
 8010dbe:	ee7c caaf 	vadd.f32	s25, s25, s31
 8010dc2:	ee20 fa85 	vmul.f32	s30, s1, s10
 8010dc6:	ee61 fa85 	vmul.f32	s31, s3, s10
 8010dca:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8010dce:	ee7b daad 	vadd.f32	s27, s23, s27
 8010dd2:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8010dd6:	ee60 ba05 	vmul.f32	s23, s0, s10
 8010dda:	ee68 aa05 	vmul.f32	s21, s16, s10
 8010dde:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8010de2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8010de6:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8010dea:	ee63 4a05 	vmul.f32	s9, s6, s10
 8010dee:	ee22 5a85 	vmul.f32	s10, s5, s10
 8010df2:	ee21 9a25 	vmul.f32	s18, s2, s11
 8010df6:	ee20 ca25 	vmul.f32	s24, s0, s11
 8010dfa:	ee3d da04 	vadd.f32	s26, s26, s8
 8010dfe:	ee7c caaf 	vadd.f32	s25, s25, s31
 8010e02:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8010e06:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8010e0a:	ed53 1a04 	vldr	s3, [r3, #-16]
 8010e0e:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8010e12:	ee7d da8f 	vadd.f32	s27, s27, s30
 8010e16:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8010e1a:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8010e1e:	ee68 ba25 	vmul.f32	s23, s16, s11
 8010e22:	ee63 aa25 	vmul.f32	s21, s6, s11
 8010e26:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8010e2a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8010e2e:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8010e32:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010e36:	ee61 4a06 	vmul.f32	s9, s2, s12
 8010e3a:	ee60 9a86 	vmul.f32	s19, s1, s12
 8010e3e:	ee60 fa06 	vmul.f32	s31, s0, s12
 8010e42:	ed13 1a03 	vldr	s2, [r3, #-12]
 8010e46:	ee23 fa06 	vmul.f32	s30, s6, s12
 8010e4a:	ee3d da04 	vadd.f32	s26, s26, s8
 8010e4e:	ee7c ca89 	vadd.f32	s25, s25, s18
 8010e52:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8010e56:	ee28 9a06 	vmul.f32	s18, s16, s12
 8010e5a:	ee7d da8c 	vadd.f32	s27, s27, s24
 8010e5e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8010e62:	ee22 ca86 	vmul.f32	s24, s5, s12
 8010e66:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8010e6a:	ee78 8a85 	vadd.f32	s17, s17, s10
 8010e6e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8010e72:	ee62 5a06 	vmul.f32	s11, s4, s12
 8010e76:	ee21 6a86 	vmul.f32	s12, s3, s12
 8010e7a:	ee20 4a26 	vmul.f32	s8, s0, s13
 8010e7e:	ee63 ea26 	vmul.f32	s29, s6, s13
 8010e82:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8010e86:	ee22 5a26 	vmul.f32	s10, s4, s13
 8010e8a:	ee3d da24 	vadd.f32	s26, s26, s9
 8010e8e:	ee7c caa9 	vadd.f32	s25, s25, s19
 8010e92:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8010e96:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8010e9a:	ed53 0a02 	vldr	s1, [r3, #-8]
 8010e9e:	ee68 fa26 	vmul.f32	s31, s16, s13
 8010ea2:	ee7d da89 	vadd.f32	s27, s27, s18
 8010ea6:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8010eaa:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8010eae:	ee22 faa6 	vmul.f32	s30, s5, s13
 8010eb2:	ee73 3a86 	vadd.f32	s7, s7, s12
 8010eb6:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8010eba:	ee61 6a26 	vmul.f32	s13, s2, s13
 8010ebe:	ee60 aa07 	vmul.f32	s21, s0, s14
 8010ec2:	ee28 ca07 	vmul.f32	s24, s16, s14
 8010ec6:	ee63 ba07 	vmul.f32	s23, s6, s14
 8010eca:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8010ece:	ee78 8a86 	vadd.f32	s17, s17, s12
 8010ed2:	ee3d da24 	vadd.f32	s26, s26, s9
 8010ed6:	ee7c ca84 	vadd.f32	s25, s25, s8
 8010eda:	ee7d daae 	vadd.f32	s27, s27, s29
 8010ede:	ee22 9a07 	vmul.f32	s18, s4, s14
 8010ee2:	ee62 ea87 	vmul.f32	s29, s5, s14
 8010ee6:	ee61 5a87 	vmul.f32	s11, s3, s14
 8010eea:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8010eee:	ed13 0a01 	vldr	s0, [r3, #-4]
 8010ef2:	ee61 6a07 	vmul.f32	s13, s2, s14
 8010ef6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8010efa:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8010efe:	ee20 7a87 	vmul.f32	s14, s1, s14
 8010f02:	ee68 4a27 	vmul.f32	s9, s16, s15
 8010f06:	ee3d da2a 	vadd.f32	s26, s26, s21
 8010f0a:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8010f0e:	ee23 8a27 	vmul.f32	s16, s6, s15
 8010f12:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8010f16:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8010f1a:	ee22 aa27 	vmul.f32	s20, s4, s15
 8010f1e:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8010f22:	ee21 6a27 	vmul.f32	s12, s2, s15
 8010f26:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8010f2a:	ee7d daae 	vadd.f32	s27, s27, s29
 8010f2e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8010f32:	ee3b ba09 	vadd.f32	s22, s22, s18
 8010f36:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8010f3a:	ee73 3a87 	vadd.f32	s7, s7, s14
 8010f3e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010f42:	f1bb 0b01 	subs.w	fp, fp, #1
 8010f46:	f101 0120 	add.w	r1, r1, #32
 8010f4a:	ee3d da24 	vadd.f32	s26, s26, s9
 8010f4e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8010f52:	ee3e ca04 	vadd.f32	s24, s28, s8
 8010f56:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8010f5a:	ee7b aa05 	vadd.f32	s21, s22, s10
 8010f5e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8010f62:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8010f66:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8010f6a:	f103 0320 	add.w	r3, r3, #32
 8010f6e:	f47f aed8 	bne.w	8010d22 <arm_fir_f32+0xfe>
 8010f72:	eb09 0104 	add.w	r1, r9, r4
 8010f76:	46e3      	mov	fp, ip
 8010f78:	b3a2      	cbz	r2, 8010fe4 <arm_fir_f32+0x3c0>
 8010f7a:	4613      	mov	r3, r2
 8010f7c:	ecbb 6a01 	vldmia	fp!, {s12}
 8010f80:	ecf1 7a01 	vldmia	r1!, {s15}
 8010f84:	ee23 3a06 	vmul.f32	s6, s6, s12
 8010f88:	ee22 4a86 	vmul.f32	s8, s5, s12
 8010f8c:	ee62 4a06 	vmul.f32	s9, s4, s12
 8010f90:	ee21 5a86 	vmul.f32	s10, s3, s12
 8010f94:	ee61 5a06 	vmul.f32	s11, s2, s12
 8010f98:	ee60 6a86 	vmul.f32	s13, s1, s12
 8010f9c:	ee20 7a06 	vmul.f32	s14, s0, s12
 8010fa0:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	ee3d da03 	vadd.f32	s26, s26, s6
 8010faa:	ee7c ca84 	vadd.f32	s25, s25, s8
 8010fae:	eeb0 3a62 	vmov.f32	s6, s5
 8010fb2:	ee3c ca24 	vadd.f32	s24, s24, s9
 8010fb6:	eef0 2a42 	vmov.f32	s5, s4
 8010fba:	ee7b ba85 	vadd.f32	s23, s23, s10
 8010fbe:	eeb0 2a61 	vmov.f32	s4, s3
 8010fc2:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8010fc6:	eef0 1a41 	vmov.f32	s3, s2
 8010fca:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8010fce:	eeb0 1a60 	vmov.f32	s2, s1
 8010fd2:	ee78 8a87 	vadd.f32	s17, s17, s14
 8010fd6:	eef0 0a40 	vmov.f32	s1, s0
 8010fda:	ee73 3a86 	vadd.f32	s7, s7, s12
 8010fde:	eeb0 0a67 	vmov.f32	s0, s15
 8010fe2:	d1cb      	bne.n	8010f7c <arm_fir_f32+0x358>
 8010fe4:	f1be 0e01 	subs.w	lr, lr, #1
 8010fe8:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8010fec:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8010ff0:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8010ff4:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8010ff8:	ed45 aa04 	vstr	s21, [r5, #-16]
 8010ffc:	ed45 9a03 	vstr	s19, [r5, #-12]
 8011000:	ed45 8a02 	vstr	s17, [r5, #-8]
 8011004:	ed45 3a01 	vstr	s7, [r5, #-4]
 8011008:	f107 0720 	add.w	r7, r7, #32
 801100c:	f106 0620 	add.w	r6, r6, #32
 8011010:	f104 0420 	add.w	r4, r4, #32
 8011014:	f105 0520 	add.w	r5, r5, #32
 8011018:	f47f ae3c 	bne.w	8010c94 <arm_fir_f32+0x70>
 801101c:	9b02      	ldr	r3, [sp, #8]
 801101e:	9800      	ldr	r0, [sp, #0]
 8011020:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011024:	9907      	ldr	r1, [sp, #28]
 8011026:	015b      	lsls	r3, r3, #5
 8011028:	4652      	mov	r2, sl
 801102a:	4418      	add	r0, r3
 801102c:	9000      	str	r0, [sp, #0]
 801102e:	4419      	add	r1, r3
 8011030:	449c      	add	ip, r3
 8011032:	441a      	add	r2, r3
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	f013 0e07 	ands.w	lr, r3, #7
 801103a:	d01f      	beq.n	801107c <arm_fir_f32+0x458>
 801103c:	9f00      	ldr	r7, [sp, #0]
 801103e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011042:	4676      	mov	r6, lr
 8011044:	4665      	mov	r5, ip
 8011046:	f851 3b04 	ldr.w	r3, [r1], #4
 801104a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8011094 <arm_fir_f32+0x470>
 801104e:	f847 3b04 	str.w	r3, [r7], #4
 8011052:	4644      	mov	r4, r8
 8011054:	464b      	mov	r3, r9
 8011056:	4628      	mov	r0, r5
 8011058:	ecb0 7a01 	vldmia	r0!, {s14}
 801105c:	ecf4 7a01 	vldmia	r4!, {s15}
 8011060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011064:	3b01      	subs	r3, #1
 8011066:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801106a:	d1f5      	bne.n	8011058 <arm_fir_f32+0x434>
 801106c:	3e01      	subs	r6, #1
 801106e:	ece2 6a01 	vstmia	r2!, {s13}
 8011072:	f105 0504 	add.w	r5, r5, #4
 8011076:	d1e6      	bne.n	8011046 <arm_fir_f32+0x422>
 8011078:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801107c:	9b01      	ldr	r3, [sp, #4]
 801107e:	1e59      	subs	r1, r3, #1
 8011080:	9b03      	ldr	r3, [sp, #12]
 8011082:	088e      	lsrs	r6, r1, #2
 8011084:	685c      	ldr	r4, [r3, #4]
 8011086:	d020      	beq.n	80110ca <arm_fir_f32+0x4a6>
 8011088:	f104 0210 	add.w	r2, r4, #16
 801108c:	f10c 0310 	add.w	r3, ip, #16
 8011090:	4630      	mov	r0, r6
 8011092:	e001      	b.n	8011098 <arm_fir_f32+0x474>
 8011094:	00000000 	.word	0x00000000
 8011098:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801109c:	f842 5c10 	str.w	r5, [r2, #-16]
 80110a0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80110a4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80110a8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80110ac:	f842 5c08 	str.w	r5, [r2, #-8]
 80110b0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80110b4:	f842 5c04 	str.w	r5, [r2, #-4]
 80110b8:	3801      	subs	r0, #1
 80110ba:	f103 0310 	add.w	r3, r3, #16
 80110be:	f102 0210 	add.w	r2, r2, #16
 80110c2:	d1e9      	bne.n	8011098 <arm_fir_f32+0x474>
 80110c4:	0133      	lsls	r3, r6, #4
 80110c6:	441c      	add	r4, r3
 80110c8:	449c      	add	ip, r3
 80110ca:	f011 0303 	ands.w	r3, r1, #3
 80110ce:	d006      	beq.n	80110de <arm_fir_f32+0x4ba>
 80110d0:	4622      	mov	r2, r4
 80110d2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80110d6:	f842 1b04 	str.w	r1, [r2], #4
 80110da:	3b01      	subs	r3, #1
 80110dc:	d1f9      	bne.n	80110d2 <arm_fir_f32+0x4ae>
 80110de:	b009      	add	sp, #36	; 0x24
 80110e0:	ecbd 8b10 	vpop	{d8-d15}
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e8:	46c3      	mov	fp, r8
 80110ea:	e745      	b.n	8010f78 <arm_fir_f32+0x354>

080110ec <arm_cmplx_mag_f32>:
 80110ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80110f4:	b084      	sub	sp, #16
 80110f6:	d07f      	beq.n	80111f8 <arm_cmplx_mag_f32+0x10c>
 80110f8:	2700      	movs	r7, #0
 80110fa:	f100 0420 	add.w	r4, r0, #32
 80110fe:	f101 0510 	add.w	r5, r1, #16
 8011102:	4646      	mov	r6, r8
 8011104:	e05a      	b.n	80111bc <arm_cmplx_mag_f32+0xd0>
 8011106:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801110a:	eeb4 0a40 	vcmp.f32	s0, s0
 801110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011112:	f040 80a4 	bne.w	801125e <arm_cmplx_mag_f32+0x172>
 8011116:	ed05 0a04 	vstr	s0, [r5, #-16]
 801111a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801111e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8011122:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011126:	ee20 0a00 	vmul.f32	s0, s0, s0
 801112a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801112e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011136:	f2c0 808f 	blt.w	8011258 <arm_cmplx_mag_f32+0x16c>
 801113a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801113e:	eeb4 0a40 	vcmp.f32	s0, s0
 8011142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011146:	f040 80af 	bne.w	80112a8 <arm_cmplx_mag_f32+0x1bc>
 801114a:	ed05 0a03 	vstr	s0, [r5, #-12]
 801114e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8011152:	ed14 0a03 	vldr	s0, [r4, #-12]
 8011156:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801115a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801115e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	db72      	blt.n	8011252 <arm_cmplx_mag_f32+0x166>
 801116c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011170:	eeb4 0a40 	vcmp.f32	s0, s0
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	f040 808c 	bne.w	8011294 <arm_cmplx_mag_f32+0x1a8>
 801117c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8011180:	ed54 7a02 	vldr	s15, [r4, #-8]
 8011184:	ed14 0a01 	vldr	s0, [r4, #-4]
 8011188:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801118c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011190:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119c:	db20      	blt.n	80111e0 <arm_cmplx_mag_f32+0xf4>
 801119e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80111a2:	eeb4 0a40 	vcmp.f32	s0, s0
 80111a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111aa:	d169      	bne.n	8011280 <arm_cmplx_mag_f32+0x194>
 80111ac:	3e01      	subs	r6, #1
 80111ae:	ed05 0a01 	vstr	s0, [r5, #-4]
 80111b2:	f104 0420 	add.w	r4, r4, #32
 80111b6:	f105 0510 	add.w	r5, r5, #16
 80111ba:	d019      	beq.n	80111f0 <arm_cmplx_mag_f32+0x104>
 80111bc:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80111c0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80111c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80111c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80111cc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80111d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	da95      	bge.n	8011106 <arm_cmplx_mag_f32+0x1a>
 80111da:	f845 7c10 	str.w	r7, [r5, #-16]
 80111de:	e79c      	b.n	801111a <arm_cmplx_mag_f32+0x2e>
 80111e0:	3e01      	subs	r6, #1
 80111e2:	f845 7c04 	str.w	r7, [r5, #-4]
 80111e6:	f104 0420 	add.w	r4, r4, #32
 80111ea:	f105 0510 	add.w	r5, r5, #16
 80111ee:	d1e5      	bne.n	80111bc <arm_cmplx_mag_f32+0xd0>
 80111f0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80111f4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80111f8:	f012 0503 	ands.w	r5, r2, #3
 80111fc:	d026      	beq.n	801124c <arm_cmplx_mag_f32+0x160>
 80111fe:	2600      	movs	r6, #0
 8011200:	f100 0408 	add.w	r4, r0, #8
 8011204:	e00c      	b.n	8011220 <arm_cmplx_mag_f32+0x134>
 8011206:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801120a:	eeb4 0a40 	vcmp.f32	s0, s0
 801120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011212:	d12e      	bne.n	8011272 <arm_cmplx_mag_f32+0x186>
 8011214:	3d01      	subs	r5, #1
 8011216:	ed01 0a01 	vstr	s0, [r1, #-4]
 801121a:	f104 0408 	add.w	r4, r4, #8
 801121e:	d015      	beq.n	801124c <arm_cmplx_mag_f32+0x160>
 8011220:	ed54 7a02 	vldr	s15, [r4, #-8]
 8011224:	ed14 0a01 	vldr	s0, [r4, #-4]
 8011228:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801122c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011230:	3104      	adds	r1, #4
 8011232:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123e:	dae2      	bge.n	8011206 <arm_cmplx_mag_f32+0x11a>
 8011240:	3d01      	subs	r5, #1
 8011242:	f841 6c04 	str.w	r6, [r1, #-4]
 8011246:	f104 0408 	add.w	r4, r4, #8
 801124a:	d1e9      	bne.n	8011220 <arm_cmplx_mag_f32+0x134>
 801124c:	b004      	add	sp, #16
 801124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011252:	f845 7c08 	str.w	r7, [r5, #-8]
 8011256:	e793      	b.n	8011180 <arm_cmplx_mag_f32+0x94>
 8011258:	f845 7c0c 	str.w	r7, [r5, #-12]
 801125c:	e777      	b.n	801114e <arm_cmplx_mag_f32+0x62>
 801125e:	eeb0 0a67 	vmov.f32	s0, s15
 8011262:	9203      	str	r2, [sp, #12]
 8011264:	9102      	str	r1, [sp, #8]
 8011266:	9001      	str	r0, [sp, #4]
 8011268:	f000 ff68 	bl	801213c <sqrtf>
 801126c:	a801      	add	r0, sp, #4
 801126e:	c807      	ldmia	r0, {r0, r1, r2}
 8011270:	e751      	b.n	8011116 <arm_cmplx_mag_f32+0x2a>
 8011272:	eeb0 0a67 	vmov.f32	s0, s15
 8011276:	9101      	str	r1, [sp, #4]
 8011278:	f000 ff60 	bl	801213c <sqrtf>
 801127c:	9901      	ldr	r1, [sp, #4]
 801127e:	e7c9      	b.n	8011214 <arm_cmplx_mag_f32+0x128>
 8011280:	eeb0 0a67 	vmov.f32	s0, s15
 8011284:	9203      	str	r2, [sp, #12]
 8011286:	9102      	str	r1, [sp, #8]
 8011288:	9001      	str	r0, [sp, #4]
 801128a:	f000 ff57 	bl	801213c <sqrtf>
 801128e:	a801      	add	r0, sp, #4
 8011290:	c807      	ldmia	r0, {r0, r1, r2}
 8011292:	e78b      	b.n	80111ac <arm_cmplx_mag_f32+0xc0>
 8011294:	eeb0 0a67 	vmov.f32	s0, s15
 8011298:	9203      	str	r2, [sp, #12]
 801129a:	9102      	str	r1, [sp, #8]
 801129c:	9001      	str	r0, [sp, #4]
 801129e:	f000 ff4d 	bl	801213c <sqrtf>
 80112a2:	a801      	add	r0, sp, #4
 80112a4:	c807      	ldmia	r0, {r0, r1, r2}
 80112a6:	e769      	b.n	801117c <arm_cmplx_mag_f32+0x90>
 80112a8:	eeb0 0a67 	vmov.f32	s0, s15
 80112ac:	9203      	str	r2, [sp, #12]
 80112ae:	9102      	str	r1, [sp, #8]
 80112b0:	9001      	str	r0, [sp, #4]
 80112b2:	f000 ff43 	bl	801213c <sqrtf>
 80112b6:	a801      	add	r0, sp, #4
 80112b8:	c807      	ldmia	r0, {r0, r1, r2}
 80112ba:	e746      	b.n	801114a <arm_cmplx_mag_f32+0x5e>

080112bc <arm_radix8_butterfly_f32>:
 80112bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c0:	ed2d 8b10 	vpush	{d8-d15}
 80112c4:	b09d      	sub	sp, #116	; 0x74
 80112c6:	461c      	mov	r4, r3
 80112c8:	ed9f bac8 	vldr	s22, [pc, #800]	; 80115ec <arm_radix8_butterfly_f32+0x330>
 80112cc:	921a      	str	r2, [sp, #104]	; 0x68
 80112ce:	1d03      	adds	r3, r0, #4
 80112d0:	4682      	mov	sl, r0
 80112d2:	4689      	mov	r9, r1
 80112d4:	468b      	mov	fp, r1
 80112d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80112d8:	9400      	str	r4, [sp, #0]
 80112da:	469e      	mov	lr, r3
 80112dc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80112e0:	005a      	lsls	r2, r3, #1
 80112e2:	18d6      	adds	r6, r2, r3
 80112e4:	18f5      	adds	r5, r6, r3
 80112e6:	9203      	str	r2, [sp, #12]
 80112e8:	195a      	adds	r2, r3, r5
 80112ea:	18d0      	adds	r0, r2, r3
 80112ec:	00df      	lsls	r7, r3, #3
 80112ee:	1819      	adds	r1, r3, r0
 80112f0:	463c      	mov	r4, r7
 80112f2:	9701      	str	r7, [sp, #4]
 80112f4:	4457      	add	r7, sl
 80112f6:	930c      	str	r3, [sp, #48]	; 0x30
 80112f8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80112fc:	011b      	lsls	r3, r3, #4
 80112fe:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8011302:	eb07 0c04 	add.w	ip, r7, r4
 8011306:	9c00      	ldr	r4, [sp, #0]
 8011308:	9302      	str	r3, [sp, #8]
 801130a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 801130e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8011312:	3204      	adds	r2, #4
 8011314:	3104      	adds	r1, #4
 8011316:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 801131a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801131e:	f04f 0800 	mov.w	r8, #0
 8011322:	eddc 7a00 	vldr	s15, [ip]
 8011326:	edd7 6a00 	vldr	s13, [r7]
 801132a:	edd6 3a00 	vldr	s7, [r6]
 801132e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8011332:	edd5 4a00 	vldr	s9, [r5]
 8011336:	ed90 2a00 	vldr	s4, [r0]
 801133a:	ed12 7a01 	vldr	s14, [r2, #-4]
 801133e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8011342:	ee77 8a82 	vadd.f32	s17, s15, s4
 8011346:	ee33 4aa0 	vadd.f32	s8, s7, s1
 801134a:	ee76 1a87 	vadd.f32	s3, s13, s14
 801134e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8011352:	ee31 6a84 	vadd.f32	s12, s3, s8
 8011356:	ee33 5a28 	vadd.f32	s10, s6, s17
 801135a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801135e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8011362:	ee35 5a46 	vsub.f32	s10, s10, s12
 8011366:	ed4e 6a01 	vstr	s13, [lr, #-4]
 801136a:	ed85 5a00 	vstr	s10, [r5]
 801136e:	ed96 1a01 	vldr	s2, [r6, #4]
 8011372:	edd7 5a01 	vldr	s11, [r7, #4]
 8011376:	ed92 aa00 	vldr	s20, [r2]
 801137a:	ed91 6a00 	vldr	s12, [r1]
 801137e:	ed9e 9a00 	vldr	s18, [lr]
 8011382:	ed95 5a01 	vldr	s10, [r5, #4]
 8011386:	eddc 6a01 	vldr	s13, [ip, #4]
 801138a:	edd0 9a01 	vldr	s19, [r0, #4]
 801138e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8011392:	ee71 2a46 	vsub.f32	s5, s2, s12
 8011396:	ee75 3aca 	vsub.f32	s7, s11, s20
 801139a:	ee37 0a60 	vsub.f32	s0, s14, s1
 801139e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80113a2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80113a6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80113aa:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80113ae:	ee79 3a05 	vadd.f32	s7, s18, s10
 80113b2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80113b6:	ee39 5a45 	vsub.f32	s10, s18, s10
 80113ba:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80113be:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80113c2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80113c6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80113ca:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80113ce:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80113d2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80113d6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80113da:	ee33 3a68 	vsub.f32	s6, s6, s17
 80113de:	ee36 0a88 	vadd.f32	s0, s13, s16
 80113e2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80113e6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80113ea:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80113ee:	ee75 6a62 	vsub.f32	s13, s10, s5
 80113f2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80113f6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80113fa:	ee33 1a89 	vadd.f32	s2, s7, s18
 80113fe:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8011402:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8011406:	ee75 4a22 	vadd.f32	s9, s10, s5
 801140a:	ee32 5a27 	vadd.f32	s10, s4, s15
 801140e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011412:	ee33 8a06 	vadd.f32	s16, s6, s12
 8011416:	ee75 2a87 	vadd.f32	s5, s11, s14
 801141a:	ee31 9a28 	vadd.f32	s18, s2, s17
 801141e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8011422:	ee74 0a61 	vsub.f32	s1, s8, s3
 8011426:	ee33 2a80 	vadd.f32	s4, s7, s0
 801142a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801142e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8011432:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011436:	ee31 1a68 	vsub.f32	s2, s2, s17
 801143a:	ee34 4a21 	vadd.f32	s8, s8, s3
 801143e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8011442:	ee74 4a85 	vadd.f32	s9, s9, s10
 8011446:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801144a:	44d8      	add	r8, fp
 801144c:	45c1      	cmp	r9, r8
 801144e:	ed8e 9a00 	vstr	s18, [lr]
 8011452:	ed85 1a01 	vstr	s2, [r5, #4]
 8011456:	449e      	add	lr, r3
 8011458:	ed8c 8a00 	vstr	s16, [ip]
 801145c:	441d      	add	r5, r3
 801145e:	ed80 6a00 	vstr	s12, [r0]
 8011462:	edcc 0a01 	vstr	s1, [ip, #4]
 8011466:	ed80 4a01 	vstr	s8, [r0, #4]
 801146a:	449c      	add	ip, r3
 801146c:	ed87 2a00 	vstr	s4, [r7]
 8011470:	4418      	add	r0, r3
 8011472:	ed41 3a01 	vstr	s7, [r1, #-4]
 8011476:	ed42 2a01 	vstr	s5, [r2, #-4]
 801147a:	ed86 7a00 	vstr	s14, [r6]
 801147e:	ed87 3a01 	vstr	s6, [r7, #4]
 8011482:	edc1 4a00 	vstr	s9, [r1]
 8011486:	441f      	add	r7, r3
 8011488:	edc2 5a00 	vstr	s11, [r2]
 801148c:	4419      	add	r1, r3
 801148e:	edc6 6a01 	vstr	s13, [r6, #4]
 8011492:	441a      	add	r2, r3
 8011494:	441e      	add	r6, r3
 8011496:	f63f af44 	bhi.w	8011322 <arm_radix8_butterfly_f32+0x66>
 801149a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801149c:	2907      	cmp	r1, #7
 801149e:	4620      	mov	r0, r4
 80114a0:	f240 81e9 	bls.w	8011876 <arm_radix8_butterfly_f32+0x5ba>
 80114a4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80114a8:	193e      	adds	r6, r7, r4
 80114aa:	1935      	adds	r5, r6, r4
 80114ac:	9c03      	ldr	r4, [sp, #12]
 80114ae:	9000      	str	r0, [sp, #0]
 80114b0:	4622      	mov	r2, r4
 80114b2:	3201      	adds	r2, #1
 80114b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80114b8:	9900      	ldr	r1, [sp, #0]
 80114ba:	1828      	adds	r0, r5, r0
 80114bc:	eb00 0e01 	add.w	lr, r0, r1
 80114c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80114c2:	440a      	add	r2, r1
 80114c4:	eb04 0c01 	add.w	ip, r4, r1
 80114c8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80114cc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80114d0:	9a00      	ldr	r2, [sp, #0]
 80114d2:	940f      	str	r4, [sp, #60]	; 0x3c
 80114d4:	00ed      	lsls	r5, r5, #3
 80114d6:	9511      	str	r5, [sp, #68]	; 0x44
 80114d8:	00d5      	lsls	r5, r2, #3
 80114da:	950d      	str	r5, [sp, #52]	; 0x34
 80114dc:	9d01      	ldr	r5, [sp, #4]
 80114de:	3508      	adds	r5, #8
 80114e0:	9516      	str	r5, [sp, #88]	; 0x58
 80114e2:	9d02      	ldr	r5, [sp, #8]
 80114e4:	3508      	adds	r5, #8
 80114e6:	0114      	lsls	r4, r2, #4
 80114e8:	9517      	str	r5, [sp, #92]	; 0x5c
 80114ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114ec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80114ee:	940e      	str	r4, [sp, #56]	; 0x38
 80114f0:	00c0      	lsls	r0, r0, #3
 80114f2:	9010      	str	r0, [sp, #64]	; 0x40
 80114f4:	18aa      	adds	r2, r5, r2
 80114f6:	9207      	str	r2, [sp, #28]
 80114f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80114fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80114fc:	18aa      	adds	r2, r5, r2
 80114fe:	9208      	str	r2, [sp, #32]
 8011500:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011502:	18aa      	adds	r2, r5, r2
 8011504:	9209      	str	r2, [sp, #36]	; 0x24
 8011506:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801150a:	f10e 0204 	add.w	r2, lr, #4
 801150e:	920a      	str	r2, [sp, #40]	; 0x28
 8011510:	00c9      	lsls	r1, r1, #3
 8011512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011514:	310c      	adds	r1, #12
 8011516:	00f6      	lsls	r6, r6, #3
 8011518:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 801151c:	9114      	str	r1, [sp, #80]	; 0x50
 801151e:	18a9      	adds	r1, r5, r2
 8011520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011522:	9612      	str	r6, [sp, #72]	; 0x48
 8011524:	00ff      	lsls	r7, r7, #3
 8011526:	19ae      	adds	r6, r5, r6
 8011528:	3008      	adds	r0, #8
 801152a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801152e:	9606      	str	r6, [sp, #24]
 8011530:	9019      	str	r0, [sp, #100]	; 0x64
 8011532:	18aa      	adds	r2, r5, r2
 8011534:	0164      	lsls	r4, r4, #5
 8011536:	19ee      	adds	r6, r5, r7
 8011538:	f10c 000c 	add.w	r0, ip, #12
 801153c:	9713      	str	r7, [sp, #76]	; 0x4c
 801153e:	9604      	str	r6, [sp, #16]
 8011540:	9015      	str	r0, [sp, #84]	; 0x54
 8011542:	9103      	str	r1, [sp, #12]
 8011544:	9205      	str	r2, [sp, #20]
 8011546:	f104 0208 	add.w	r2, r4, #8
 801154a:	9218      	str	r2, [sp, #96]	; 0x60
 801154c:	f04f 0801 	mov.w	r8, #1
 8011550:	2200      	movs	r2, #0
 8011552:	f102 0108 	add.w	r1, r2, #8
 8011556:	460f      	mov	r7, r1
 8011558:	910b      	str	r1, [sp, #44]	; 0x2c
 801155a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801155c:	188e      	adds	r6, r1, r2
 801155e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011560:	188d      	adds	r5, r1, r2
 8011562:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011564:	188c      	adds	r4, r1, r2
 8011566:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011568:	1888      	adds	r0, r1, r2
 801156a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801156c:	eb01 0c02 	add.w	ip, r1, r2
 8011570:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011572:	440a      	add	r2, r1
 8011574:	9903      	ldr	r1, [sp, #12]
 8011576:	edd1 fa00 	vldr	s31, [r1]
 801157a:	9905      	ldr	r1, [sp, #20]
 801157c:	ed91 fa00 	vldr	s30, [r1]
 8011580:	9904      	ldr	r1, [sp, #16]
 8011582:	edd1 ea00 	vldr	s29, [r1]
 8011586:	9906      	ldr	r1, [sp, #24]
 8011588:	ed91 ea00 	vldr	s28, [r1]
 801158c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801158e:	edd1 da00 	vldr	s27, [r1]
 8011592:	9908      	ldr	r1, [sp, #32]
 8011594:	ed91 da00 	vldr	s26, [r1]
 8011598:	9907      	ldr	r1, [sp, #28]
 801159a:	edd1 ca00 	vldr	s25, [r1]
 801159e:	9903      	ldr	r1, [sp, #12]
 80115a0:	ed91 ca01 	vldr	s24, [r1, #4]
 80115a4:	9905      	ldr	r1, [sp, #20]
 80115a6:	edd1 ba01 	vldr	s23, [r1, #4]
 80115aa:	9904      	ldr	r1, [sp, #16]
 80115ac:	edd1 aa01 	vldr	s21, [r1, #4]
 80115b0:	9906      	ldr	r1, [sp, #24]
 80115b2:	ed91 aa01 	vldr	s20, [r1, #4]
 80115b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115b8:	edd1 7a01 	vldr	s15, [r1, #4]
 80115bc:	9908      	ldr	r1, [sp, #32]
 80115be:	edcd 7a00 	vstr	s15, [sp]
 80115c2:	edd1 7a01 	vldr	s15, [r1, #4]
 80115c6:	9907      	ldr	r1, [sp, #28]
 80115c8:	edcd 7a01 	vstr	s15, [sp, #4]
 80115cc:	edd1 7a01 	vldr	s15, [r1, #4]
 80115d0:	eb0a 0e07 	add.w	lr, sl, r7
 80115d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80115d6:	edcd 7a02 	vstr	s15, [sp, #8]
 80115da:	eb0c 010a 	add.w	r1, ip, sl
 80115de:	4456      	add	r6, sl
 80115e0:	4455      	add	r5, sl
 80115e2:	4454      	add	r4, sl
 80115e4:	4450      	add	r0, sl
 80115e6:	4452      	add	r2, sl
 80115e8:	46c4      	mov	ip, r8
 80115ea:	e001      	b.n	80115f0 <arm_radix8_butterfly_f32+0x334>
 80115ec:	3f3504f3 	.word	0x3f3504f3
 80115f0:	ed96 5a00 	vldr	s10, [r6]
 80115f4:	ed52 9a01 	vldr	s19, [r2, #-4]
 80115f8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80115fc:	edd0 7a00 	vldr	s15, [r0]
 8011600:	ed17 7a01 	vldr	s14, [r7, #-4]
 8011604:	edde 3a00 	vldr	s7, [lr]
 8011608:	ed94 3a00 	vldr	s6, [r4]
 801160c:	ed95 2a00 	vldr	s4, [r5]
 8011610:	ed9e 0a01 	vldr	s0, [lr, #4]
 8011614:	ee33 8a85 	vadd.f32	s16, s7, s10
 8011618:	ee32 1a06 	vadd.f32	s2, s4, s12
 801161c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8011620:	ee77 4a87 	vadd.f32	s9, s15, s14
 8011624:	ee78 1a04 	vadd.f32	s3, s16, s8
 8011628:	ee71 6a24 	vadd.f32	s13, s2, s9
 801162c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8011630:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8011634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011638:	ed8e 6a00 	vstr	s12, [lr]
 801163c:	edd0 8a01 	vldr	s17, [r0, #4]
 8011640:	ed95 9a01 	vldr	s18, [r5, #4]
 8011644:	edd1 2a00 	vldr	s5, [r1]
 8011648:	ed97 7a00 	vldr	s14, [r7]
 801164c:	edd4 0a01 	vldr	s1, [r4, #4]
 8011650:	ed96 6a01 	vldr	s12, [r6, #4]
 8011654:	edd2 5a00 	vldr	s11, [r2]
 8011658:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801165c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8011660:	ee39 5a62 	vsub.f32	s10, s18, s5
 8011664:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8011668:	ee38 4a44 	vsub.f32	s8, s16, s8
 801166c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8011670:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8011674:	ee79 2a22 	vadd.f32	s5, s18, s5
 8011678:	ee75 8a69 	vsub.f32	s17, s10, s19
 801167c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8011680:	ee35 5a29 	vadd.f32	s10, s10, s19
 8011684:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011688:	ee30 2a06 	vadd.f32	s4, s0, s12
 801168c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8011690:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8011694:	ee32 9a08 	vadd.f32	s18, s4, s16
 8011698:	ee68 8a8b 	vmul.f32	s17, s17, s22
 801169c:	ee32 2a48 	vsub.f32	s4, s4, s16
 80116a0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80116a4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80116a8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80116ac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80116b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80116b4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80116b8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80116bc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80116c0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80116c4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80116c8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80116cc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80116d0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80116d4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80116d8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80116dc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80116e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80116e4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80116e8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80116ec:	ee76 5a43 	vsub.f32	s11, s12, s6
 80116f0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80116f4:	ee72 4a24 	vadd.f32	s9, s4, s9
 80116f8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80116fc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8011700:	ee30 0a20 	vadd.f32	s0, s0, s1
 8011704:	ee77 9a85 	vadd.f32	s19, s15, s10
 8011708:	ee36 6a03 	vadd.f32	s12, s12, s6
 801170c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011710:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8011714:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8011718:	ee6f 0a23 	vmul.f32	s1, s30, s7
 801171c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8011720:	ee39 1a01 	vadd.f32	s2, s18, s2
 8011724:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8011728:	ee2b 9a87 	vmul.f32	s18, s23, s14
 801172c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8011730:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8011734:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8011738:	ee35 3a03 	vadd.f32	s6, s10, s6
 801173c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8011740:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8011744:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8011748:	ed9d 4a02 	vldr	s8, [sp, #8]
 801174c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8011750:	ee77 3a63 	vsub.f32	s7, s14, s7
 8011754:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8011758:	ed9d 7a01 	vldr	s14, [sp, #4]
 801175c:	ed86 3a00 	vstr	s6, [r6]
 8011760:	ee30 9a89 	vadd.f32	s18, s1, s18
 8011764:	ee32 2a05 	vadd.f32	s4, s4, s10
 8011768:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801176c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8011770:	ee67 2a22 	vmul.f32	s5, s14, s5
 8011774:	ee64 1a00 	vmul.f32	s3, s8, s0
 8011778:	ee27 7a24 	vmul.f32	s14, s14, s9
 801177c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8011780:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8011784:	ee64 8a28 	vmul.f32	s17, s8, s17
 8011788:	ed9d 4a00 	vldr	s8, [sp]
 801178c:	edc6 6a01 	vstr	s13, [r6, #4]
 8011790:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8011794:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8011798:	ee64 9a29 	vmul.f32	s19, s8, s19
 801179c:	ee24 4a25 	vmul.f32	s8, s8, s11
 80117a0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80117a4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80117a8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80117ac:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80117b0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80117b4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80117b8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80117bc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80117c0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80117c4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80117c8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80117cc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80117d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80117d4:	44dc      	add	ip, fp
 80117d6:	45e1      	cmp	r9, ip
 80117d8:	ed84 9a00 	vstr	s18, [r4]
 80117dc:	edc4 3a01 	vstr	s7, [r4, #4]
 80117e0:	449e      	add	lr, r3
 80117e2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80117e6:	edc2 2a00 	vstr	s5, [r2]
 80117ea:	441e      	add	r6, r3
 80117ec:	ed85 2a00 	vstr	s4, [r5]
 80117f0:	ed85 8a01 	vstr	s16, [r5, #4]
 80117f4:	441c      	add	r4, r3
 80117f6:	ed47 1a01 	vstr	s3, [r7, #-4]
 80117fa:	ed87 0a00 	vstr	s0, [r7]
 80117fe:	441a      	add	r2, r3
 8011800:	ed41 4a01 	vstr	s9, [r1, #-4]
 8011804:	edc1 9a00 	vstr	s19, [r1]
 8011808:	441d      	add	r5, r3
 801180a:	edc0 0a00 	vstr	s1, [r0]
 801180e:	441f      	add	r7, r3
 8011810:	ed80 6a01 	vstr	s12, [r0, #4]
 8011814:	4419      	add	r1, r3
 8011816:	4418      	add	r0, r3
 8011818:	f63f aeea 	bhi.w	80115f0 <arm_radix8_butterfly_f32+0x334>
 801181c:	9a03      	ldr	r2, [sp, #12]
 801181e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011820:	440a      	add	r2, r1
 8011822:	9203      	str	r2, [sp, #12]
 8011824:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011826:	9a05      	ldr	r2, [sp, #20]
 8011828:	440a      	add	r2, r1
 801182a:	9205      	str	r2, [sp, #20]
 801182c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801182e:	9a04      	ldr	r2, [sp, #16]
 8011830:	440a      	add	r2, r1
 8011832:	9204      	str	r2, [sp, #16]
 8011834:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011836:	9a06      	ldr	r2, [sp, #24]
 8011838:	440a      	add	r2, r1
 801183a:	9206      	str	r2, [sp, #24]
 801183c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801183e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011840:	440a      	add	r2, r1
 8011842:	9209      	str	r2, [sp, #36]	; 0x24
 8011844:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011846:	9a08      	ldr	r2, [sp, #32]
 8011848:	440a      	add	r2, r1
 801184a:	9208      	str	r2, [sp, #32]
 801184c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801184e:	9a07      	ldr	r2, [sp, #28]
 8011850:	440a      	add	r2, r1
 8011852:	9207      	str	r2, [sp, #28]
 8011854:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011858:	f108 0801 	add.w	r8, r8, #1
 801185c:	3208      	adds	r2, #8
 801185e:	4588      	cmp	r8, r1
 8011860:	920a      	str	r2, [sp, #40]	; 0x28
 8011862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011864:	f47f ae75 	bne.w	8011552 <arm_radix8_butterfly_f32+0x296>
 8011868:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	46c3      	mov	fp, r8
 8011870:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8011874:	e532      	b.n	80112dc <arm_radix8_butterfly_f32+0x20>
 8011876:	b01d      	add	sp, #116	; 0x74
 8011878:	ecbd 8b10 	vpop	{d8-d15}
 801187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011880 <__errno>:
 8011880:	4b01      	ldr	r3, [pc, #4]	; (8011888 <__errno+0x8>)
 8011882:	6818      	ldr	r0, [r3, #0]
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	20000090 	.word	0x20000090

0801188c <__libc_init_array>:
 801188c:	b570      	push	{r4, r5, r6, lr}
 801188e:	4e0d      	ldr	r6, [pc, #52]	; (80118c4 <__libc_init_array+0x38>)
 8011890:	4c0d      	ldr	r4, [pc, #52]	; (80118c8 <__libc_init_array+0x3c>)
 8011892:	1ba4      	subs	r4, r4, r6
 8011894:	10a4      	asrs	r4, r4, #2
 8011896:	2500      	movs	r5, #0
 8011898:	42a5      	cmp	r5, r4
 801189a:	d109      	bne.n	80118b0 <__libc_init_array+0x24>
 801189c:	4e0b      	ldr	r6, [pc, #44]	; (80118cc <__libc_init_array+0x40>)
 801189e:	4c0c      	ldr	r4, [pc, #48]	; (80118d0 <__libc_init_array+0x44>)
 80118a0:	f000 fca2 	bl	80121e8 <_init>
 80118a4:	1ba4      	subs	r4, r4, r6
 80118a6:	10a4      	asrs	r4, r4, #2
 80118a8:	2500      	movs	r5, #0
 80118aa:	42a5      	cmp	r5, r4
 80118ac:	d105      	bne.n	80118ba <__libc_init_array+0x2e>
 80118ae:	bd70      	pop	{r4, r5, r6, pc}
 80118b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118b4:	4798      	blx	r3
 80118b6:	3501      	adds	r5, #1
 80118b8:	e7ee      	b.n	8011898 <__libc_init_array+0xc>
 80118ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118be:	4798      	blx	r3
 80118c0:	3501      	adds	r5, #1
 80118c2:	e7f2      	b.n	80118aa <__libc_init_array+0x1e>
 80118c4:	08013dac 	.word	0x08013dac
 80118c8:	08013dac 	.word	0x08013dac
 80118cc:	08013dac 	.word	0x08013dac
 80118d0:	08013db0 	.word	0x08013db0

080118d4 <malloc>:
 80118d4:	4b02      	ldr	r3, [pc, #8]	; (80118e0 <malloc+0xc>)
 80118d6:	4601      	mov	r1, r0
 80118d8:	6818      	ldr	r0, [r3, #0]
 80118da:	f000 b86d 	b.w	80119b8 <_malloc_r>
 80118de:	bf00      	nop
 80118e0:	20000090 	.word	0x20000090

080118e4 <free>:
 80118e4:	4b02      	ldr	r3, [pc, #8]	; (80118f0 <free+0xc>)
 80118e6:	4601      	mov	r1, r0
 80118e8:	6818      	ldr	r0, [r3, #0]
 80118ea:	f000 b817 	b.w	801191c <_free_r>
 80118ee:	bf00      	nop
 80118f0:	20000090 	.word	0x20000090

080118f4 <memcpy>:
 80118f4:	b510      	push	{r4, lr}
 80118f6:	1e43      	subs	r3, r0, #1
 80118f8:	440a      	add	r2, r1
 80118fa:	4291      	cmp	r1, r2
 80118fc:	d100      	bne.n	8011900 <memcpy+0xc>
 80118fe:	bd10      	pop	{r4, pc}
 8011900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011908:	e7f7      	b.n	80118fa <memcpy+0x6>

0801190a <memset>:
 801190a:	4402      	add	r2, r0
 801190c:	4603      	mov	r3, r0
 801190e:	4293      	cmp	r3, r2
 8011910:	d100      	bne.n	8011914 <memset+0xa>
 8011912:	4770      	bx	lr
 8011914:	f803 1b01 	strb.w	r1, [r3], #1
 8011918:	e7f9      	b.n	801190e <memset+0x4>
	...

0801191c <_free_r>:
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	4605      	mov	r5, r0
 8011920:	2900      	cmp	r1, #0
 8011922:	d045      	beq.n	80119b0 <_free_r+0x94>
 8011924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011928:	1f0c      	subs	r4, r1, #4
 801192a:	2b00      	cmp	r3, #0
 801192c:	bfb8      	it	lt
 801192e:	18e4      	addlt	r4, r4, r3
 8011930:	f000 f8e0 	bl	8011af4 <__malloc_lock>
 8011934:	4a1f      	ldr	r2, [pc, #124]	; (80119b4 <_free_r+0x98>)
 8011936:	6813      	ldr	r3, [r2, #0]
 8011938:	4610      	mov	r0, r2
 801193a:	b933      	cbnz	r3, 801194a <_free_r+0x2e>
 801193c:	6063      	str	r3, [r4, #4]
 801193e:	6014      	str	r4, [r2, #0]
 8011940:	4628      	mov	r0, r5
 8011942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011946:	f000 b8d6 	b.w	8011af6 <__malloc_unlock>
 801194a:	42a3      	cmp	r3, r4
 801194c:	d90c      	bls.n	8011968 <_free_r+0x4c>
 801194e:	6821      	ldr	r1, [r4, #0]
 8011950:	1862      	adds	r2, r4, r1
 8011952:	4293      	cmp	r3, r2
 8011954:	bf04      	itt	eq
 8011956:	681a      	ldreq	r2, [r3, #0]
 8011958:	685b      	ldreq	r3, [r3, #4]
 801195a:	6063      	str	r3, [r4, #4]
 801195c:	bf04      	itt	eq
 801195e:	1852      	addeq	r2, r2, r1
 8011960:	6022      	streq	r2, [r4, #0]
 8011962:	6004      	str	r4, [r0, #0]
 8011964:	e7ec      	b.n	8011940 <_free_r+0x24>
 8011966:	4613      	mov	r3, r2
 8011968:	685a      	ldr	r2, [r3, #4]
 801196a:	b10a      	cbz	r2, 8011970 <_free_r+0x54>
 801196c:	42a2      	cmp	r2, r4
 801196e:	d9fa      	bls.n	8011966 <_free_r+0x4a>
 8011970:	6819      	ldr	r1, [r3, #0]
 8011972:	1858      	adds	r0, r3, r1
 8011974:	42a0      	cmp	r0, r4
 8011976:	d10b      	bne.n	8011990 <_free_r+0x74>
 8011978:	6820      	ldr	r0, [r4, #0]
 801197a:	4401      	add	r1, r0
 801197c:	1858      	adds	r0, r3, r1
 801197e:	4282      	cmp	r2, r0
 8011980:	6019      	str	r1, [r3, #0]
 8011982:	d1dd      	bne.n	8011940 <_free_r+0x24>
 8011984:	6810      	ldr	r0, [r2, #0]
 8011986:	6852      	ldr	r2, [r2, #4]
 8011988:	605a      	str	r2, [r3, #4]
 801198a:	4401      	add	r1, r0
 801198c:	6019      	str	r1, [r3, #0]
 801198e:	e7d7      	b.n	8011940 <_free_r+0x24>
 8011990:	d902      	bls.n	8011998 <_free_r+0x7c>
 8011992:	230c      	movs	r3, #12
 8011994:	602b      	str	r3, [r5, #0]
 8011996:	e7d3      	b.n	8011940 <_free_r+0x24>
 8011998:	6820      	ldr	r0, [r4, #0]
 801199a:	1821      	adds	r1, r4, r0
 801199c:	428a      	cmp	r2, r1
 801199e:	bf04      	itt	eq
 80119a0:	6811      	ldreq	r1, [r2, #0]
 80119a2:	6852      	ldreq	r2, [r2, #4]
 80119a4:	6062      	str	r2, [r4, #4]
 80119a6:	bf04      	itt	eq
 80119a8:	1809      	addeq	r1, r1, r0
 80119aa:	6021      	streq	r1, [r4, #0]
 80119ac:	605c      	str	r4, [r3, #4]
 80119ae:	e7c7      	b.n	8011940 <_free_r+0x24>
 80119b0:	bd38      	pop	{r3, r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	20000380 	.word	0x20000380

080119b8 <_malloc_r>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	1ccd      	adds	r5, r1, #3
 80119bc:	f025 0503 	bic.w	r5, r5, #3
 80119c0:	3508      	adds	r5, #8
 80119c2:	2d0c      	cmp	r5, #12
 80119c4:	bf38      	it	cc
 80119c6:	250c      	movcc	r5, #12
 80119c8:	2d00      	cmp	r5, #0
 80119ca:	4606      	mov	r6, r0
 80119cc:	db01      	blt.n	80119d2 <_malloc_r+0x1a>
 80119ce:	42a9      	cmp	r1, r5
 80119d0:	d903      	bls.n	80119da <_malloc_r+0x22>
 80119d2:	230c      	movs	r3, #12
 80119d4:	6033      	str	r3, [r6, #0]
 80119d6:	2000      	movs	r0, #0
 80119d8:	bd70      	pop	{r4, r5, r6, pc}
 80119da:	f000 f88b 	bl	8011af4 <__malloc_lock>
 80119de:	4a21      	ldr	r2, [pc, #132]	; (8011a64 <_malloc_r+0xac>)
 80119e0:	6814      	ldr	r4, [r2, #0]
 80119e2:	4621      	mov	r1, r4
 80119e4:	b991      	cbnz	r1, 8011a0c <_malloc_r+0x54>
 80119e6:	4c20      	ldr	r4, [pc, #128]	; (8011a68 <_malloc_r+0xb0>)
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	b91b      	cbnz	r3, 80119f4 <_malloc_r+0x3c>
 80119ec:	4630      	mov	r0, r6
 80119ee:	f000 f83d 	bl	8011a6c <_sbrk_r>
 80119f2:	6020      	str	r0, [r4, #0]
 80119f4:	4629      	mov	r1, r5
 80119f6:	4630      	mov	r0, r6
 80119f8:	f000 f838 	bl	8011a6c <_sbrk_r>
 80119fc:	1c43      	adds	r3, r0, #1
 80119fe:	d124      	bne.n	8011a4a <_malloc_r+0x92>
 8011a00:	230c      	movs	r3, #12
 8011a02:	6033      	str	r3, [r6, #0]
 8011a04:	4630      	mov	r0, r6
 8011a06:	f000 f876 	bl	8011af6 <__malloc_unlock>
 8011a0a:	e7e4      	b.n	80119d6 <_malloc_r+0x1e>
 8011a0c:	680b      	ldr	r3, [r1, #0]
 8011a0e:	1b5b      	subs	r3, r3, r5
 8011a10:	d418      	bmi.n	8011a44 <_malloc_r+0x8c>
 8011a12:	2b0b      	cmp	r3, #11
 8011a14:	d90f      	bls.n	8011a36 <_malloc_r+0x7e>
 8011a16:	600b      	str	r3, [r1, #0]
 8011a18:	50cd      	str	r5, [r1, r3]
 8011a1a:	18cc      	adds	r4, r1, r3
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f000 f86a 	bl	8011af6 <__malloc_unlock>
 8011a22:	f104 000b 	add.w	r0, r4, #11
 8011a26:	1d23      	adds	r3, r4, #4
 8011a28:	f020 0007 	bic.w	r0, r0, #7
 8011a2c:	1ac3      	subs	r3, r0, r3
 8011a2e:	d0d3      	beq.n	80119d8 <_malloc_r+0x20>
 8011a30:	425a      	negs	r2, r3
 8011a32:	50e2      	str	r2, [r4, r3]
 8011a34:	e7d0      	b.n	80119d8 <_malloc_r+0x20>
 8011a36:	428c      	cmp	r4, r1
 8011a38:	684b      	ldr	r3, [r1, #4]
 8011a3a:	bf16      	itet	ne
 8011a3c:	6063      	strne	r3, [r4, #4]
 8011a3e:	6013      	streq	r3, [r2, #0]
 8011a40:	460c      	movne	r4, r1
 8011a42:	e7eb      	b.n	8011a1c <_malloc_r+0x64>
 8011a44:	460c      	mov	r4, r1
 8011a46:	6849      	ldr	r1, [r1, #4]
 8011a48:	e7cc      	b.n	80119e4 <_malloc_r+0x2c>
 8011a4a:	1cc4      	adds	r4, r0, #3
 8011a4c:	f024 0403 	bic.w	r4, r4, #3
 8011a50:	42a0      	cmp	r0, r4
 8011a52:	d005      	beq.n	8011a60 <_malloc_r+0xa8>
 8011a54:	1a21      	subs	r1, r4, r0
 8011a56:	4630      	mov	r0, r6
 8011a58:	f000 f808 	bl	8011a6c <_sbrk_r>
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	d0cf      	beq.n	8011a00 <_malloc_r+0x48>
 8011a60:	6025      	str	r5, [r4, #0]
 8011a62:	e7db      	b.n	8011a1c <_malloc_r+0x64>
 8011a64:	20000380 	.word	0x20000380
 8011a68:	20000384 	.word	0x20000384

08011a6c <_sbrk_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4c06      	ldr	r4, [pc, #24]	; (8011a88 <_sbrk_r+0x1c>)
 8011a70:	2300      	movs	r3, #0
 8011a72:	4605      	mov	r5, r0
 8011a74:	4608      	mov	r0, r1
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	f7f0 fd8a 	bl	8002590 <_sbrk>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d102      	bne.n	8011a86 <_sbrk_r+0x1a>
 8011a80:	6823      	ldr	r3, [r4, #0]
 8011a82:	b103      	cbz	r3, 8011a86 <_sbrk_r+0x1a>
 8011a84:	602b      	str	r3, [r5, #0]
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	20003b58 	.word	0x20003b58

08011a8c <sniprintf>:
 8011a8c:	b40c      	push	{r2, r3}
 8011a8e:	b530      	push	{r4, r5, lr}
 8011a90:	4b17      	ldr	r3, [pc, #92]	; (8011af0 <sniprintf+0x64>)
 8011a92:	1e0c      	subs	r4, r1, #0
 8011a94:	b09d      	sub	sp, #116	; 0x74
 8011a96:	681d      	ldr	r5, [r3, #0]
 8011a98:	da08      	bge.n	8011aac <sniprintf+0x20>
 8011a9a:	238b      	movs	r3, #139	; 0x8b
 8011a9c:	602b      	str	r3, [r5, #0]
 8011a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aa2:	b01d      	add	sp, #116	; 0x74
 8011aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011aa8:	b002      	add	sp, #8
 8011aaa:	4770      	bx	lr
 8011aac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011ab0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ab4:	bf14      	ite	ne
 8011ab6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011aba:	4623      	moveq	r3, r4
 8011abc:	9304      	str	r3, [sp, #16]
 8011abe:	9307      	str	r3, [sp, #28]
 8011ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ac4:	9002      	str	r0, [sp, #8]
 8011ac6:	9006      	str	r0, [sp, #24]
 8011ac8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011acc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011ace:	ab21      	add	r3, sp, #132	; 0x84
 8011ad0:	a902      	add	r1, sp, #8
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	f000 f869 	bl	8011bac <_svfiprintf_r>
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	bfbc      	itt	lt
 8011ade:	238b      	movlt	r3, #139	; 0x8b
 8011ae0:	602b      	strlt	r3, [r5, #0]
 8011ae2:	2c00      	cmp	r4, #0
 8011ae4:	d0dd      	beq.n	8011aa2 <sniprintf+0x16>
 8011ae6:	9b02      	ldr	r3, [sp, #8]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	701a      	strb	r2, [r3, #0]
 8011aec:	e7d9      	b.n	8011aa2 <sniprintf+0x16>
 8011aee:	bf00      	nop
 8011af0:	20000090 	.word	0x20000090

08011af4 <__malloc_lock>:
 8011af4:	4770      	bx	lr

08011af6 <__malloc_unlock>:
 8011af6:	4770      	bx	lr

08011af8 <__ssputs_r>:
 8011af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011afc:	688e      	ldr	r6, [r1, #8]
 8011afe:	429e      	cmp	r6, r3
 8011b00:	4682      	mov	sl, r0
 8011b02:	460c      	mov	r4, r1
 8011b04:	4690      	mov	r8, r2
 8011b06:	4699      	mov	r9, r3
 8011b08:	d837      	bhi.n	8011b7a <__ssputs_r+0x82>
 8011b0a:	898a      	ldrh	r2, [r1, #12]
 8011b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b10:	d031      	beq.n	8011b76 <__ssputs_r+0x7e>
 8011b12:	6825      	ldr	r5, [r4, #0]
 8011b14:	6909      	ldr	r1, [r1, #16]
 8011b16:	1a6f      	subs	r7, r5, r1
 8011b18:	6965      	ldr	r5, [r4, #20]
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8011b24:	f109 0301 	add.w	r3, r9, #1
 8011b28:	443b      	add	r3, r7
 8011b2a:	429d      	cmp	r5, r3
 8011b2c:	bf38      	it	cc
 8011b2e:	461d      	movcc	r5, r3
 8011b30:	0553      	lsls	r3, r2, #21
 8011b32:	d530      	bpl.n	8011b96 <__ssputs_r+0x9e>
 8011b34:	4629      	mov	r1, r5
 8011b36:	f7ff ff3f 	bl	80119b8 <_malloc_r>
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	b950      	cbnz	r0, 8011b54 <__ssputs_r+0x5c>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	f8ca 3000 	str.w	r3, [sl]
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b54:	463a      	mov	r2, r7
 8011b56:	6921      	ldr	r1, [r4, #16]
 8011b58:	f7ff fecc 	bl	80118f4 <memcpy>
 8011b5c:	89a3      	ldrh	r3, [r4, #12]
 8011b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b66:	81a3      	strh	r3, [r4, #12]
 8011b68:	6126      	str	r6, [r4, #16]
 8011b6a:	6165      	str	r5, [r4, #20]
 8011b6c:	443e      	add	r6, r7
 8011b6e:	1bed      	subs	r5, r5, r7
 8011b70:	6026      	str	r6, [r4, #0]
 8011b72:	60a5      	str	r5, [r4, #8]
 8011b74:	464e      	mov	r6, r9
 8011b76:	454e      	cmp	r6, r9
 8011b78:	d900      	bls.n	8011b7c <__ssputs_r+0x84>
 8011b7a:	464e      	mov	r6, r9
 8011b7c:	4632      	mov	r2, r6
 8011b7e:	4641      	mov	r1, r8
 8011b80:	6820      	ldr	r0, [r4, #0]
 8011b82:	f000 fa93 	bl	80120ac <memmove>
 8011b86:	68a3      	ldr	r3, [r4, #8]
 8011b88:	1b9b      	subs	r3, r3, r6
 8011b8a:	60a3      	str	r3, [r4, #8]
 8011b8c:	6823      	ldr	r3, [r4, #0]
 8011b8e:	441e      	add	r6, r3
 8011b90:	6026      	str	r6, [r4, #0]
 8011b92:	2000      	movs	r0, #0
 8011b94:	e7dc      	b.n	8011b50 <__ssputs_r+0x58>
 8011b96:	462a      	mov	r2, r5
 8011b98:	f000 faa1 	bl	80120de <_realloc_r>
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d1e2      	bne.n	8011b68 <__ssputs_r+0x70>
 8011ba2:	6921      	ldr	r1, [r4, #16]
 8011ba4:	4650      	mov	r0, sl
 8011ba6:	f7ff feb9 	bl	801191c <_free_r>
 8011baa:	e7c8      	b.n	8011b3e <__ssputs_r+0x46>

08011bac <_svfiprintf_r>:
 8011bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb0:	461d      	mov	r5, r3
 8011bb2:	898b      	ldrh	r3, [r1, #12]
 8011bb4:	061f      	lsls	r7, r3, #24
 8011bb6:	b09d      	sub	sp, #116	; 0x74
 8011bb8:	4680      	mov	r8, r0
 8011bba:	460c      	mov	r4, r1
 8011bbc:	4616      	mov	r6, r2
 8011bbe:	d50f      	bpl.n	8011be0 <_svfiprintf_r+0x34>
 8011bc0:	690b      	ldr	r3, [r1, #16]
 8011bc2:	b96b      	cbnz	r3, 8011be0 <_svfiprintf_r+0x34>
 8011bc4:	2140      	movs	r1, #64	; 0x40
 8011bc6:	f7ff fef7 	bl	80119b8 <_malloc_r>
 8011bca:	6020      	str	r0, [r4, #0]
 8011bcc:	6120      	str	r0, [r4, #16]
 8011bce:	b928      	cbnz	r0, 8011bdc <_svfiprintf_r+0x30>
 8011bd0:	230c      	movs	r3, #12
 8011bd2:	f8c8 3000 	str.w	r3, [r8]
 8011bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bda:	e0c8      	b.n	8011d6e <_svfiprintf_r+0x1c2>
 8011bdc:	2340      	movs	r3, #64	; 0x40
 8011bde:	6163      	str	r3, [r4, #20]
 8011be0:	2300      	movs	r3, #0
 8011be2:	9309      	str	r3, [sp, #36]	; 0x24
 8011be4:	2320      	movs	r3, #32
 8011be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bea:	2330      	movs	r3, #48	; 0x30
 8011bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bf0:	9503      	str	r5, [sp, #12]
 8011bf2:	f04f 0b01 	mov.w	fp, #1
 8011bf6:	4637      	mov	r7, r6
 8011bf8:	463d      	mov	r5, r7
 8011bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bfe:	b10b      	cbz	r3, 8011c04 <_svfiprintf_r+0x58>
 8011c00:	2b25      	cmp	r3, #37	; 0x25
 8011c02:	d13e      	bne.n	8011c82 <_svfiprintf_r+0xd6>
 8011c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8011c08:	d00b      	beq.n	8011c22 <_svfiprintf_r+0x76>
 8011c0a:	4653      	mov	r3, sl
 8011c0c:	4632      	mov	r2, r6
 8011c0e:	4621      	mov	r1, r4
 8011c10:	4640      	mov	r0, r8
 8011c12:	f7ff ff71 	bl	8011af8 <__ssputs_r>
 8011c16:	3001      	adds	r0, #1
 8011c18:	f000 80a4 	beq.w	8011d64 <_svfiprintf_r+0x1b8>
 8011c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c1e:	4453      	add	r3, sl
 8011c20:	9309      	str	r3, [sp, #36]	; 0x24
 8011c22:	783b      	ldrb	r3, [r7, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f000 809d 	beq.w	8011d64 <_svfiprintf_r+0x1b8>
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c34:	9304      	str	r3, [sp, #16]
 8011c36:	9307      	str	r3, [sp, #28]
 8011c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011c3e:	462f      	mov	r7, r5
 8011c40:	2205      	movs	r2, #5
 8011c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c46:	4850      	ldr	r0, [pc, #320]	; (8011d88 <_svfiprintf_r+0x1dc>)
 8011c48:	f7ee fb22 	bl	8000290 <memchr>
 8011c4c:	9b04      	ldr	r3, [sp, #16]
 8011c4e:	b9d0      	cbnz	r0, 8011c86 <_svfiprintf_r+0xda>
 8011c50:	06d9      	lsls	r1, r3, #27
 8011c52:	bf44      	itt	mi
 8011c54:	2220      	movmi	r2, #32
 8011c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c5a:	071a      	lsls	r2, r3, #28
 8011c5c:	bf44      	itt	mi
 8011c5e:	222b      	movmi	r2, #43	; 0x2b
 8011c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c64:	782a      	ldrb	r2, [r5, #0]
 8011c66:	2a2a      	cmp	r2, #42	; 0x2a
 8011c68:	d015      	beq.n	8011c96 <_svfiprintf_r+0xea>
 8011c6a:	9a07      	ldr	r2, [sp, #28]
 8011c6c:	462f      	mov	r7, r5
 8011c6e:	2000      	movs	r0, #0
 8011c70:	250a      	movs	r5, #10
 8011c72:	4639      	mov	r1, r7
 8011c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c78:	3b30      	subs	r3, #48	; 0x30
 8011c7a:	2b09      	cmp	r3, #9
 8011c7c:	d94d      	bls.n	8011d1a <_svfiprintf_r+0x16e>
 8011c7e:	b1b8      	cbz	r0, 8011cb0 <_svfiprintf_r+0x104>
 8011c80:	e00f      	b.n	8011ca2 <_svfiprintf_r+0xf6>
 8011c82:	462f      	mov	r7, r5
 8011c84:	e7b8      	b.n	8011bf8 <_svfiprintf_r+0x4c>
 8011c86:	4a40      	ldr	r2, [pc, #256]	; (8011d88 <_svfiprintf_r+0x1dc>)
 8011c88:	1a80      	subs	r0, r0, r2
 8011c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8011c8e:	4318      	orrs	r0, r3
 8011c90:	9004      	str	r0, [sp, #16]
 8011c92:	463d      	mov	r5, r7
 8011c94:	e7d3      	b.n	8011c3e <_svfiprintf_r+0x92>
 8011c96:	9a03      	ldr	r2, [sp, #12]
 8011c98:	1d11      	adds	r1, r2, #4
 8011c9a:	6812      	ldr	r2, [r2, #0]
 8011c9c:	9103      	str	r1, [sp, #12]
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	db01      	blt.n	8011ca6 <_svfiprintf_r+0xfa>
 8011ca2:	9207      	str	r2, [sp, #28]
 8011ca4:	e004      	b.n	8011cb0 <_svfiprintf_r+0x104>
 8011ca6:	4252      	negs	r2, r2
 8011ca8:	f043 0302 	orr.w	r3, r3, #2
 8011cac:	9207      	str	r2, [sp, #28]
 8011cae:	9304      	str	r3, [sp, #16]
 8011cb0:	783b      	ldrb	r3, [r7, #0]
 8011cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cb4:	d10c      	bne.n	8011cd0 <_svfiprintf_r+0x124>
 8011cb6:	787b      	ldrb	r3, [r7, #1]
 8011cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cba:	d133      	bne.n	8011d24 <_svfiprintf_r+0x178>
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	1d1a      	adds	r2, r3, #4
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	9203      	str	r2, [sp, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	bfb8      	it	lt
 8011cc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ccc:	3702      	adds	r7, #2
 8011cce:	9305      	str	r3, [sp, #20]
 8011cd0:	4d2e      	ldr	r5, [pc, #184]	; (8011d8c <_svfiprintf_r+0x1e0>)
 8011cd2:	7839      	ldrb	r1, [r7, #0]
 8011cd4:	2203      	movs	r2, #3
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f7ee fada 	bl	8000290 <memchr>
 8011cdc:	b138      	cbz	r0, 8011cee <_svfiprintf_r+0x142>
 8011cde:	2340      	movs	r3, #64	; 0x40
 8011ce0:	1b40      	subs	r0, r0, r5
 8011ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ce6:	9b04      	ldr	r3, [sp, #16]
 8011ce8:	4303      	orrs	r3, r0
 8011cea:	3701      	adds	r7, #1
 8011cec:	9304      	str	r3, [sp, #16]
 8011cee:	7839      	ldrb	r1, [r7, #0]
 8011cf0:	4827      	ldr	r0, [pc, #156]	; (8011d90 <_svfiprintf_r+0x1e4>)
 8011cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cf6:	2206      	movs	r2, #6
 8011cf8:	1c7e      	adds	r6, r7, #1
 8011cfa:	f7ee fac9 	bl	8000290 <memchr>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d038      	beq.n	8011d74 <_svfiprintf_r+0x1c8>
 8011d02:	4b24      	ldr	r3, [pc, #144]	; (8011d94 <_svfiprintf_r+0x1e8>)
 8011d04:	bb13      	cbnz	r3, 8011d4c <_svfiprintf_r+0x1a0>
 8011d06:	9b03      	ldr	r3, [sp, #12]
 8011d08:	3307      	adds	r3, #7
 8011d0a:	f023 0307 	bic.w	r3, r3, #7
 8011d0e:	3308      	adds	r3, #8
 8011d10:	9303      	str	r3, [sp, #12]
 8011d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d14:	444b      	add	r3, r9
 8011d16:	9309      	str	r3, [sp, #36]	; 0x24
 8011d18:	e76d      	b.n	8011bf6 <_svfiprintf_r+0x4a>
 8011d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8011d1e:	2001      	movs	r0, #1
 8011d20:	460f      	mov	r7, r1
 8011d22:	e7a6      	b.n	8011c72 <_svfiprintf_r+0xc6>
 8011d24:	2300      	movs	r3, #0
 8011d26:	3701      	adds	r7, #1
 8011d28:	9305      	str	r3, [sp, #20]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	250a      	movs	r5, #10
 8011d2e:	4638      	mov	r0, r7
 8011d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d34:	3a30      	subs	r2, #48	; 0x30
 8011d36:	2a09      	cmp	r2, #9
 8011d38:	d903      	bls.n	8011d42 <_svfiprintf_r+0x196>
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d0c8      	beq.n	8011cd0 <_svfiprintf_r+0x124>
 8011d3e:	9105      	str	r1, [sp, #20]
 8011d40:	e7c6      	b.n	8011cd0 <_svfiprintf_r+0x124>
 8011d42:	fb05 2101 	mla	r1, r5, r1, r2
 8011d46:	2301      	movs	r3, #1
 8011d48:	4607      	mov	r7, r0
 8011d4a:	e7f0      	b.n	8011d2e <_svfiprintf_r+0x182>
 8011d4c:	ab03      	add	r3, sp, #12
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	4622      	mov	r2, r4
 8011d52:	4b11      	ldr	r3, [pc, #68]	; (8011d98 <_svfiprintf_r+0x1ec>)
 8011d54:	a904      	add	r1, sp, #16
 8011d56:	4640      	mov	r0, r8
 8011d58:	f3af 8000 	nop.w
 8011d5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011d60:	4681      	mov	r9, r0
 8011d62:	d1d6      	bne.n	8011d12 <_svfiprintf_r+0x166>
 8011d64:	89a3      	ldrh	r3, [r4, #12]
 8011d66:	065b      	lsls	r3, r3, #25
 8011d68:	f53f af35 	bmi.w	8011bd6 <_svfiprintf_r+0x2a>
 8011d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d6e:	b01d      	add	sp, #116	; 0x74
 8011d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d74:	ab03      	add	r3, sp, #12
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	4622      	mov	r2, r4
 8011d7a:	4b07      	ldr	r3, [pc, #28]	; (8011d98 <_svfiprintf_r+0x1ec>)
 8011d7c:	a904      	add	r1, sp, #16
 8011d7e:	4640      	mov	r0, r8
 8011d80:	f000 f882 	bl	8011e88 <_printf_i>
 8011d84:	e7ea      	b.n	8011d5c <_svfiprintf_r+0x1b0>
 8011d86:	bf00      	nop
 8011d88:	08013d68 	.word	0x08013d68
 8011d8c:	08013d6e 	.word	0x08013d6e
 8011d90:	08013d72 	.word	0x08013d72
 8011d94:	00000000 	.word	0x00000000
 8011d98:	08011af9 	.word	0x08011af9

08011d9c <_printf_common>:
 8011d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da0:	4691      	mov	r9, r2
 8011da2:	461f      	mov	r7, r3
 8011da4:	688a      	ldr	r2, [r1, #8]
 8011da6:	690b      	ldr	r3, [r1, #16]
 8011da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dac:	4293      	cmp	r3, r2
 8011dae:	bfb8      	it	lt
 8011db0:	4613      	movlt	r3, r2
 8011db2:	f8c9 3000 	str.w	r3, [r9]
 8011db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	b112      	cbz	r2, 8011dc6 <_printf_common+0x2a>
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	f8c9 3000 	str.w	r3, [r9]
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	0699      	lsls	r1, r3, #26
 8011dca:	bf42      	ittt	mi
 8011dcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011dd0:	3302      	addmi	r3, #2
 8011dd2:	f8c9 3000 	strmi.w	r3, [r9]
 8011dd6:	6825      	ldr	r5, [r4, #0]
 8011dd8:	f015 0506 	ands.w	r5, r5, #6
 8011ddc:	d107      	bne.n	8011dee <_printf_common+0x52>
 8011dde:	f104 0a19 	add.w	sl, r4, #25
 8011de2:	68e3      	ldr	r3, [r4, #12]
 8011de4:	f8d9 2000 	ldr.w	r2, [r9]
 8011de8:	1a9b      	subs	r3, r3, r2
 8011dea:	42ab      	cmp	r3, r5
 8011dec:	dc28      	bgt.n	8011e40 <_printf_common+0xa4>
 8011dee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011df2:	6822      	ldr	r2, [r4, #0]
 8011df4:	3300      	adds	r3, #0
 8011df6:	bf18      	it	ne
 8011df8:	2301      	movne	r3, #1
 8011dfa:	0692      	lsls	r2, r2, #26
 8011dfc:	d42d      	bmi.n	8011e5a <_printf_common+0xbe>
 8011dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e02:	4639      	mov	r1, r7
 8011e04:	4630      	mov	r0, r6
 8011e06:	47c0      	blx	r8
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d020      	beq.n	8011e4e <_printf_common+0xb2>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	68e5      	ldr	r5, [r4, #12]
 8011e10:	f8d9 2000 	ldr.w	r2, [r9]
 8011e14:	f003 0306 	and.w	r3, r3, #6
 8011e18:	2b04      	cmp	r3, #4
 8011e1a:	bf08      	it	eq
 8011e1c:	1aad      	subeq	r5, r5, r2
 8011e1e:	68a3      	ldr	r3, [r4, #8]
 8011e20:	6922      	ldr	r2, [r4, #16]
 8011e22:	bf0c      	ite	eq
 8011e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e28:	2500      	movne	r5, #0
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	bfc4      	itt	gt
 8011e2e:	1a9b      	subgt	r3, r3, r2
 8011e30:	18ed      	addgt	r5, r5, r3
 8011e32:	f04f 0900 	mov.w	r9, #0
 8011e36:	341a      	adds	r4, #26
 8011e38:	454d      	cmp	r5, r9
 8011e3a:	d11a      	bne.n	8011e72 <_printf_common+0xd6>
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	e008      	b.n	8011e52 <_printf_common+0xb6>
 8011e40:	2301      	movs	r3, #1
 8011e42:	4652      	mov	r2, sl
 8011e44:	4639      	mov	r1, r7
 8011e46:	4630      	mov	r0, r6
 8011e48:	47c0      	blx	r8
 8011e4a:	3001      	adds	r0, #1
 8011e4c:	d103      	bne.n	8011e56 <_printf_common+0xba>
 8011e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e56:	3501      	adds	r5, #1
 8011e58:	e7c3      	b.n	8011de2 <_printf_common+0x46>
 8011e5a:	18e1      	adds	r1, r4, r3
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	2030      	movs	r0, #48	; 0x30
 8011e60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e64:	4422      	add	r2, r4
 8011e66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e6e:	3302      	adds	r3, #2
 8011e70:	e7c5      	b.n	8011dfe <_printf_common+0x62>
 8011e72:	2301      	movs	r3, #1
 8011e74:	4622      	mov	r2, r4
 8011e76:	4639      	mov	r1, r7
 8011e78:	4630      	mov	r0, r6
 8011e7a:	47c0      	blx	r8
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	d0e6      	beq.n	8011e4e <_printf_common+0xb2>
 8011e80:	f109 0901 	add.w	r9, r9, #1
 8011e84:	e7d8      	b.n	8011e38 <_printf_common+0x9c>
	...

08011e88 <_printf_i>:
 8011e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011e90:	460c      	mov	r4, r1
 8011e92:	7e09      	ldrb	r1, [r1, #24]
 8011e94:	b085      	sub	sp, #20
 8011e96:	296e      	cmp	r1, #110	; 0x6e
 8011e98:	4617      	mov	r7, r2
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	4698      	mov	r8, r3
 8011e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ea0:	f000 80b3 	beq.w	801200a <_printf_i+0x182>
 8011ea4:	d822      	bhi.n	8011eec <_printf_i+0x64>
 8011ea6:	2963      	cmp	r1, #99	; 0x63
 8011ea8:	d036      	beq.n	8011f18 <_printf_i+0x90>
 8011eaa:	d80a      	bhi.n	8011ec2 <_printf_i+0x3a>
 8011eac:	2900      	cmp	r1, #0
 8011eae:	f000 80b9 	beq.w	8012024 <_printf_i+0x19c>
 8011eb2:	2958      	cmp	r1, #88	; 0x58
 8011eb4:	f000 8083 	beq.w	8011fbe <_printf_i+0x136>
 8011eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ebc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011ec0:	e032      	b.n	8011f28 <_printf_i+0xa0>
 8011ec2:	2964      	cmp	r1, #100	; 0x64
 8011ec4:	d001      	beq.n	8011eca <_printf_i+0x42>
 8011ec6:	2969      	cmp	r1, #105	; 0x69
 8011ec8:	d1f6      	bne.n	8011eb8 <_printf_i+0x30>
 8011eca:	6820      	ldr	r0, [r4, #0]
 8011ecc:	6813      	ldr	r3, [r2, #0]
 8011ece:	0605      	lsls	r5, r0, #24
 8011ed0:	f103 0104 	add.w	r1, r3, #4
 8011ed4:	d52a      	bpl.n	8011f2c <_printf_i+0xa4>
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	6011      	str	r1, [r2, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	da03      	bge.n	8011ee6 <_printf_i+0x5e>
 8011ede:	222d      	movs	r2, #45	; 0x2d
 8011ee0:	425b      	negs	r3, r3
 8011ee2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011ee6:	486f      	ldr	r0, [pc, #444]	; (80120a4 <_printf_i+0x21c>)
 8011ee8:	220a      	movs	r2, #10
 8011eea:	e039      	b.n	8011f60 <_printf_i+0xd8>
 8011eec:	2973      	cmp	r1, #115	; 0x73
 8011eee:	f000 809d 	beq.w	801202c <_printf_i+0x1a4>
 8011ef2:	d808      	bhi.n	8011f06 <_printf_i+0x7e>
 8011ef4:	296f      	cmp	r1, #111	; 0x6f
 8011ef6:	d020      	beq.n	8011f3a <_printf_i+0xb2>
 8011ef8:	2970      	cmp	r1, #112	; 0x70
 8011efa:	d1dd      	bne.n	8011eb8 <_printf_i+0x30>
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	f043 0320 	orr.w	r3, r3, #32
 8011f02:	6023      	str	r3, [r4, #0]
 8011f04:	e003      	b.n	8011f0e <_printf_i+0x86>
 8011f06:	2975      	cmp	r1, #117	; 0x75
 8011f08:	d017      	beq.n	8011f3a <_printf_i+0xb2>
 8011f0a:	2978      	cmp	r1, #120	; 0x78
 8011f0c:	d1d4      	bne.n	8011eb8 <_printf_i+0x30>
 8011f0e:	2378      	movs	r3, #120	; 0x78
 8011f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f14:	4864      	ldr	r0, [pc, #400]	; (80120a8 <_printf_i+0x220>)
 8011f16:	e055      	b.n	8011fc4 <_printf_i+0x13c>
 8011f18:	6813      	ldr	r3, [r2, #0]
 8011f1a:	1d19      	adds	r1, r3, #4
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	6011      	str	r1, [r2, #0]
 8011f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f28:	2301      	movs	r3, #1
 8011f2a:	e08c      	b.n	8012046 <_printf_i+0x1be>
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	6011      	str	r1, [r2, #0]
 8011f30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f34:	bf18      	it	ne
 8011f36:	b21b      	sxthne	r3, r3
 8011f38:	e7cf      	b.n	8011eda <_printf_i+0x52>
 8011f3a:	6813      	ldr	r3, [r2, #0]
 8011f3c:	6825      	ldr	r5, [r4, #0]
 8011f3e:	1d18      	adds	r0, r3, #4
 8011f40:	6010      	str	r0, [r2, #0]
 8011f42:	0628      	lsls	r0, r5, #24
 8011f44:	d501      	bpl.n	8011f4a <_printf_i+0xc2>
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	e002      	b.n	8011f50 <_printf_i+0xc8>
 8011f4a:	0668      	lsls	r0, r5, #25
 8011f4c:	d5fb      	bpl.n	8011f46 <_printf_i+0xbe>
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	4854      	ldr	r0, [pc, #336]	; (80120a4 <_printf_i+0x21c>)
 8011f52:	296f      	cmp	r1, #111	; 0x6f
 8011f54:	bf14      	ite	ne
 8011f56:	220a      	movne	r2, #10
 8011f58:	2208      	moveq	r2, #8
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f60:	6865      	ldr	r5, [r4, #4]
 8011f62:	60a5      	str	r5, [r4, #8]
 8011f64:	2d00      	cmp	r5, #0
 8011f66:	f2c0 8095 	blt.w	8012094 <_printf_i+0x20c>
 8011f6a:	6821      	ldr	r1, [r4, #0]
 8011f6c:	f021 0104 	bic.w	r1, r1, #4
 8011f70:	6021      	str	r1, [r4, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d13d      	bne.n	8011ff2 <_printf_i+0x16a>
 8011f76:	2d00      	cmp	r5, #0
 8011f78:	f040 808e 	bne.w	8012098 <_printf_i+0x210>
 8011f7c:	4665      	mov	r5, ip
 8011f7e:	2a08      	cmp	r2, #8
 8011f80:	d10b      	bne.n	8011f9a <_printf_i+0x112>
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	07db      	lsls	r3, r3, #31
 8011f86:	d508      	bpl.n	8011f9a <_printf_i+0x112>
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	6862      	ldr	r2, [r4, #4]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	bfde      	ittt	le
 8011f90:	2330      	movle	r3, #48	; 0x30
 8011f92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011f9a:	ebac 0305 	sub.w	r3, ip, r5
 8011f9e:	6123      	str	r3, [r4, #16]
 8011fa0:	f8cd 8000 	str.w	r8, [sp]
 8011fa4:	463b      	mov	r3, r7
 8011fa6:	aa03      	add	r2, sp, #12
 8011fa8:	4621      	mov	r1, r4
 8011faa:	4630      	mov	r0, r6
 8011fac:	f7ff fef6 	bl	8011d9c <_printf_common>
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	d14d      	bne.n	8012050 <_printf_i+0x1c8>
 8011fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fb8:	b005      	add	sp, #20
 8011fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fbe:	4839      	ldr	r0, [pc, #228]	; (80120a4 <_printf_i+0x21c>)
 8011fc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011fc4:	6813      	ldr	r3, [r2, #0]
 8011fc6:	6821      	ldr	r1, [r4, #0]
 8011fc8:	1d1d      	adds	r5, r3, #4
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	6015      	str	r5, [r2, #0]
 8011fce:	060a      	lsls	r2, r1, #24
 8011fd0:	d50b      	bpl.n	8011fea <_printf_i+0x162>
 8011fd2:	07ca      	lsls	r2, r1, #31
 8011fd4:	bf44      	itt	mi
 8011fd6:	f041 0120 	orrmi.w	r1, r1, #32
 8011fda:	6021      	strmi	r1, [r4, #0]
 8011fdc:	b91b      	cbnz	r3, 8011fe6 <_printf_i+0x15e>
 8011fde:	6822      	ldr	r2, [r4, #0]
 8011fe0:	f022 0220 	bic.w	r2, r2, #32
 8011fe4:	6022      	str	r2, [r4, #0]
 8011fe6:	2210      	movs	r2, #16
 8011fe8:	e7b7      	b.n	8011f5a <_printf_i+0xd2>
 8011fea:	064d      	lsls	r5, r1, #25
 8011fec:	bf48      	it	mi
 8011fee:	b29b      	uxthmi	r3, r3
 8011ff0:	e7ef      	b.n	8011fd2 <_printf_i+0x14a>
 8011ff2:	4665      	mov	r5, ip
 8011ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ff8:	fb02 3311 	mls	r3, r2, r1, r3
 8011ffc:	5cc3      	ldrb	r3, [r0, r3]
 8011ffe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012002:	460b      	mov	r3, r1
 8012004:	2900      	cmp	r1, #0
 8012006:	d1f5      	bne.n	8011ff4 <_printf_i+0x16c>
 8012008:	e7b9      	b.n	8011f7e <_printf_i+0xf6>
 801200a:	6813      	ldr	r3, [r2, #0]
 801200c:	6825      	ldr	r5, [r4, #0]
 801200e:	6961      	ldr	r1, [r4, #20]
 8012010:	1d18      	adds	r0, r3, #4
 8012012:	6010      	str	r0, [r2, #0]
 8012014:	0628      	lsls	r0, r5, #24
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	d501      	bpl.n	801201e <_printf_i+0x196>
 801201a:	6019      	str	r1, [r3, #0]
 801201c:	e002      	b.n	8012024 <_printf_i+0x19c>
 801201e:	066a      	lsls	r2, r5, #25
 8012020:	d5fb      	bpl.n	801201a <_printf_i+0x192>
 8012022:	8019      	strh	r1, [r3, #0]
 8012024:	2300      	movs	r3, #0
 8012026:	6123      	str	r3, [r4, #16]
 8012028:	4665      	mov	r5, ip
 801202a:	e7b9      	b.n	8011fa0 <_printf_i+0x118>
 801202c:	6813      	ldr	r3, [r2, #0]
 801202e:	1d19      	adds	r1, r3, #4
 8012030:	6011      	str	r1, [r2, #0]
 8012032:	681d      	ldr	r5, [r3, #0]
 8012034:	6862      	ldr	r2, [r4, #4]
 8012036:	2100      	movs	r1, #0
 8012038:	4628      	mov	r0, r5
 801203a:	f7ee f929 	bl	8000290 <memchr>
 801203e:	b108      	cbz	r0, 8012044 <_printf_i+0x1bc>
 8012040:	1b40      	subs	r0, r0, r5
 8012042:	6060      	str	r0, [r4, #4]
 8012044:	6863      	ldr	r3, [r4, #4]
 8012046:	6123      	str	r3, [r4, #16]
 8012048:	2300      	movs	r3, #0
 801204a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801204e:	e7a7      	b.n	8011fa0 <_printf_i+0x118>
 8012050:	6923      	ldr	r3, [r4, #16]
 8012052:	462a      	mov	r2, r5
 8012054:	4639      	mov	r1, r7
 8012056:	4630      	mov	r0, r6
 8012058:	47c0      	blx	r8
 801205a:	3001      	adds	r0, #1
 801205c:	d0aa      	beq.n	8011fb4 <_printf_i+0x12c>
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	079b      	lsls	r3, r3, #30
 8012062:	d413      	bmi.n	801208c <_printf_i+0x204>
 8012064:	68e0      	ldr	r0, [r4, #12]
 8012066:	9b03      	ldr	r3, [sp, #12]
 8012068:	4298      	cmp	r0, r3
 801206a:	bfb8      	it	lt
 801206c:	4618      	movlt	r0, r3
 801206e:	e7a3      	b.n	8011fb8 <_printf_i+0x130>
 8012070:	2301      	movs	r3, #1
 8012072:	464a      	mov	r2, r9
 8012074:	4639      	mov	r1, r7
 8012076:	4630      	mov	r0, r6
 8012078:	47c0      	blx	r8
 801207a:	3001      	adds	r0, #1
 801207c:	d09a      	beq.n	8011fb4 <_printf_i+0x12c>
 801207e:	3501      	adds	r5, #1
 8012080:	68e3      	ldr	r3, [r4, #12]
 8012082:	9a03      	ldr	r2, [sp, #12]
 8012084:	1a9b      	subs	r3, r3, r2
 8012086:	42ab      	cmp	r3, r5
 8012088:	dcf2      	bgt.n	8012070 <_printf_i+0x1e8>
 801208a:	e7eb      	b.n	8012064 <_printf_i+0x1dc>
 801208c:	2500      	movs	r5, #0
 801208e:	f104 0919 	add.w	r9, r4, #25
 8012092:	e7f5      	b.n	8012080 <_printf_i+0x1f8>
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1ac      	bne.n	8011ff2 <_printf_i+0x16a>
 8012098:	7803      	ldrb	r3, [r0, #0]
 801209a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801209e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120a2:	e76c      	b.n	8011f7e <_printf_i+0xf6>
 80120a4:	08013d79 	.word	0x08013d79
 80120a8:	08013d8a 	.word	0x08013d8a

080120ac <memmove>:
 80120ac:	4288      	cmp	r0, r1
 80120ae:	b510      	push	{r4, lr}
 80120b0:	eb01 0302 	add.w	r3, r1, r2
 80120b4:	d807      	bhi.n	80120c6 <memmove+0x1a>
 80120b6:	1e42      	subs	r2, r0, #1
 80120b8:	4299      	cmp	r1, r3
 80120ba:	d00a      	beq.n	80120d2 <memmove+0x26>
 80120bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80120c4:	e7f8      	b.n	80120b8 <memmove+0xc>
 80120c6:	4283      	cmp	r3, r0
 80120c8:	d9f5      	bls.n	80120b6 <memmove+0xa>
 80120ca:	1881      	adds	r1, r0, r2
 80120cc:	1ad2      	subs	r2, r2, r3
 80120ce:	42d3      	cmn	r3, r2
 80120d0:	d100      	bne.n	80120d4 <memmove+0x28>
 80120d2:	bd10      	pop	{r4, pc}
 80120d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80120dc:	e7f7      	b.n	80120ce <memmove+0x22>

080120de <_realloc_r>:
 80120de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e0:	4607      	mov	r7, r0
 80120e2:	4614      	mov	r4, r2
 80120e4:	460e      	mov	r6, r1
 80120e6:	b921      	cbnz	r1, 80120f2 <_realloc_r+0x14>
 80120e8:	4611      	mov	r1, r2
 80120ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120ee:	f7ff bc63 	b.w	80119b8 <_malloc_r>
 80120f2:	b922      	cbnz	r2, 80120fe <_realloc_r+0x20>
 80120f4:	f7ff fc12 	bl	801191c <_free_r>
 80120f8:	4625      	mov	r5, r4
 80120fa:	4628      	mov	r0, r5
 80120fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120fe:	f000 f814 	bl	801212a <_malloc_usable_size_r>
 8012102:	42a0      	cmp	r0, r4
 8012104:	d20f      	bcs.n	8012126 <_realloc_r+0x48>
 8012106:	4621      	mov	r1, r4
 8012108:	4638      	mov	r0, r7
 801210a:	f7ff fc55 	bl	80119b8 <_malloc_r>
 801210e:	4605      	mov	r5, r0
 8012110:	2800      	cmp	r0, #0
 8012112:	d0f2      	beq.n	80120fa <_realloc_r+0x1c>
 8012114:	4631      	mov	r1, r6
 8012116:	4622      	mov	r2, r4
 8012118:	f7ff fbec 	bl	80118f4 <memcpy>
 801211c:	4631      	mov	r1, r6
 801211e:	4638      	mov	r0, r7
 8012120:	f7ff fbfc 	bl	801191c <_free_r>
 8012124:	e7e9      	b.n	80120fa <_realloc_r+0x1c>
 8012126:	4635      	mov	r5, r6
 8012128:	e7e7      	b.n	80120fa <_realloc_r+0x1c>

0801212a <_malloc_usable_size_r>:
 801212a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801212e:	1f18      	subs	r0, r3, #4
 8012130:	2b00      	cmp	r3, #0
 8012132:	bfbc      	itt	lt
 8012134:	580b      	ldrlt	r3, [r1, r0]
 8012136:	18c0      	addlt	r0, r0, r3
 8012138:	4770      	bx	lr
	...

0801213c <sqrtf>:
 801213c:	b510      	push	{r4, lr}
 801213e:	ed2d 8b02 	vpush	{d8}
 8012142:	b08a      	sub	sp, #40	; 0x28
 8012144:	eeb0 8a40 	vmov.f32	s16, s0
 8012148:	f000 f848 	bl	80121dc <__ieee754_sqrtf>
 801214c:	4b21      	ldr	r3, [pc, #132]	; (80121d4 <sqrtf+0x98>)
 801214e:	f993 4000 	ldrsb.w	r4, [r3]
 8012152:	1c63      	adds	r3, r4, #1
 8012154:	d02c      	beq.n	80121b0 <sqrtf+0x74>
 8012156:	eeb4 8a48 	vcmp.f32	s16, s16
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	d627      	bvs.n	80121b0 <sqrtf+0x74>
 8012160:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012168:	d522      	bpl.n	80121b0 <sqrtf+0x74>
 801216a:	2301      	movs	r3, #1
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	4b1a      	ldr	r3, [pc, #104]	; (80121d8 <sqrtf+0x9c>)
 8012170:	9301      	str	r3, [sp, #4]
 8012172:	ee18 0a10 	vmov	r0, s16
 8012176:	2300      	movs	r3, #0
 8012178:	9308      	str	r3, [sp, #32]
 801217a:	f7ee fa3d 	bl	80005f8 <__aeabi_f2d>
 801217e:	2200      	movs	r2, #0
 8012180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012188:	2300      	movs	r3, #0
 801218a:	b9ac      	cbnz	r4, 80121b8 <sqrtf+0x7c>
 801218c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012190:	4668      	mov	r0, sp
 8012192:	f000 f826 	bl	80121e2 <matherr>
 8012196:	b1b8      	cbz	r0, 80121c8 <sqrtf+0x8c>
 8012198:	9b08      	ldr	r3, [sp, #32]
 801219a:	b11b      	cbz	r3, 80121a4 <sqrtf+0x68>
 801219c:	f7ff fb70 	bl	8011880 <__errno>
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	6003      	str	r3, [r0, #0]
 80121a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121a8:	f7ee fc90 	bl	8000acc <__aeabi_d2f>
 80121ac:	ee00 0a10 	vmov	s0, r0
 80121b0:	b00a      	add	sp, #40	; 0x28
 80121b2:	ecbd 8b02 	vpop	{d8}
 80121b6:	bd10      	pop	{r4, pc}
 80121b8:	4610      	mov	r0, r2
 80121ba:	4619      	mov	r1, r3
 80121bc:	f7ee fb9e 	bl	80008fc <__aeabi_ddiv>
 80121c0:	2c02      	cmp	r4, #2
 80121c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80121c6:	d1e3      	bne.n	8012190 <sqrtf+0x54>
 80121c8:	f7ff fb5a 	bl	8011880 <__errno>
 80121cc:	2321      	movs	r3, #33	; 0x21
 80121ce:	6003      	str	r3, [r0, #0]
 80121d0:	e7e2      	b.n	8012198 <sqrtf+0x5c>
 80121d2:	bf00      	nop
 80121d4:	200000f4 	.word	0x200000f4
 80121d8:	08013d9b 	.word	0x08013d9b

080121dc <__ieee754_sqrtf>:
 80121dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80121e0:	4770      	bx	lr

080121e2 <matherr>:
 80121e2:	2000      	movs	r0, #0
 80121e4:	4770      	bx	lr
	...

080121e8 <_init>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	bf00      	nop
 80121ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ee:	bc08      	pop	{r3}
 80121f0:	469e      	mov	lr, r3
 80121f2:	4770      	bx	lr

080121f4 <_fini>:
 80121f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f6:	bf00      	nop
 80121f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121fa:	bc08      	pop	{r3}
 80121fc:	469e      	mov	lr, r3
 80121fe:	4770      	bx	lr
