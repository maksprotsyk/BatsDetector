
Bat_Detector_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002360  080137f4  080137f4  000237f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b54  08015b54  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08015b54  08015b54  00025b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b5c  08015b5c  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b5c  08015b5c  00025b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b60  08015b60  00025b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08015b64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a64  20000264  08015dc8  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003cc8  08015dc8  00033cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .debug_info   000386c2  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e59  00000000  00000000  00068956  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fd0  00000000  00000000  0006f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d10  00000000  00000000  00071780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b823  00000000  00000000  00073490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028bec  00000000  00000000  0009ecb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0963  00000000  00000000  000c789f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001a8202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088b8  00000000  00000000  001a82f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000034e1  00000000  00000000  001b0ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080137dc 	.word	0x080137dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080137dc 	.word	0x080137dc

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800046e:	f1a4 0401 	sub.w	r4, r4, #1
 8000472:	d1e9      	bne.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <MX_ADC1_Init+0xa0>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_ADC1_Init+0x9c>)
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_ADC1_Init+0x9c>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC1_Init+0x9c>)
 800100e:	f001 fe1f 	bl	8002c50 <HAL_ADC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001018:	f001 fa30 	bl	800247c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800101c:	2301      	movs	r3, #1
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_ADC1_Init+0x9c>)
 800102e:	f002 f89f 	bl	8003170 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001038:	f001 fa20 	bl	800247c <Error_Handler>
  }

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200004f4 	.word	0x200004f4
 8001048:	40012000 	.word	0x40012000

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <HAL_ADC_MspInit+0xdc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d157      	bne.n	800111e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_ADC_MspInit+0xe0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0xe4>)
 80010ba:	f003 f96d 	bl	8004398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_ADC_MspInit+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001104:	f002 fc5e 	bl	80039c4 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800110e:	f001 f9b5 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	2000053c 	.word	0x2000053c
 8001138:	40026410 	.word	0x40026410

0800113c <send_signal>:
 */

#include "debug.h"
#include "screen.h"

void send_signal(FRESULT op_res){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if (op_res != FR_OK){
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00f      	beq.n	800116c <send_signal+0x30>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800114c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <send_signal+0x38>)
 8001152:	f003 fc3f 	bl	80049d4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f001 fd58 	bl	8002c0c <HAL_Delay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <send_signal+0x38>)
 8001162:	f003 fc37 	bl	80049d4 <HAL_GPIO_TogglePin>
		clear_print("Error!!!");
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <send_signal+0x3c>)
 8001168:	f001 fa56 	bl	8002618 <clear_print>

	}

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40020c00 	.word	0x40020c00
 8001178:	080137f4 	.word	0x080137f4

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x3c>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2038      	movs	r0, #56	; 0x38
 80011a4:	f002 fbbe 	bl	8003924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a8:	2038      	movs	r0, #56	; 0x38
 80011aa:	f002 fbe7 	bl	800397c <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a6e      	ldr	r2, [pc, #440]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b6c      	ldr	r3, [pc, #432]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a67      	ldr	r2, [pc, #412]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b61      	ldr	r3, [pc, #388]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a60      	ldr	r2, [pc, #384]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a59      	ldr	r2, [pc, #356]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <MX_GPIO_Init+0x1f4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f640 6108 	movw	r1, #3592	; 0xe08
 8001280:	484c      	ldr	r0, [pc, #304]	; (80013b4 <MX_GPIO_Init+0x1f8>)
 8001282:	f003 fb75 	bl	8004970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2101      	movs	r1, #1
 800128a:	484b      	ldr	r0, [pc, #300]	; (80013b8 <MX_GPIO_Init+0x1fc>)
 800128c:	f003 fb70 	bl	8004970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001290:	2200      	movs	r2, #0
 8001292:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001296:	4849      	ldr	r0, [pc, #292]	; (80013bc <MX_GPIO_Init+0x200>)
 8001298:	f003 fb6a 	bl	8004970 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin;
 800129c:	f640 6308 	movw	r3, #3592	; 0xe08
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	483f      	ldr	r0, [pc, #252]	; (80013b4 <MX_GPIO_Init+0x1f8>)
 80012b6:	f003 f86f 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4839      	ldr	r0, [pc, #228]	; (80013b8 <MX_GPIO_Init+0x1fc>)
 80012d2:	f003 f861 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <MX_GPIO_Init+0x204>)
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4836      	ldr	r0, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x208>)
 80012ea:	f003 f855 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012ee:	2310      	movs	r3, #16
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fe:	2306      	movs	r3, #6
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <MX_GPIO_Init+0x208>)
 800130a:	f003 f845 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800130e:	2304      	movs	r3, #4
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4829      	ldr	r0, [pc, #164]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001322:	f003 f839 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001326:	f24f 0310 	movw	r3, #61456	; 0xf010
 800132a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481f      	ldr	r0, [pc, #124]	; (80013bc <MX_GPIO_Init+0x200>)
 8001340:	f003 f82a 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001344:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001356:	2306      	movs	r3, #6
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4815      	ldr	r0, [pc, #84]	; (80013b8 <MX_GPIO_Init+0x1fc>)
 8001362:	f003 f819 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001366:	2320      	movs	r3, #32
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_GPIO_Init+0x200>)
 800137a:	f003 f80d 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_GPIO_Init+0x210>)
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_GPIO_Init+0x1f8>)
 8001392:	f003 f801 	bl	8004398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2006      	movs	r0, #6
 800139c:	f002 fac2 	bl	8003924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013a0:	2006      	movs	r0, #6
 80013a2:	f002 faeb 	bl	800397c <HAL_NVIC_EnableIRQ>

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	10110000 	.word	0x10110000
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	10120000 	.word	0x10120000

080013d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C1_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C1_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_I2C1_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_I2C1_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C1_Init+0x50>)
 800140e:	f005 f825 	bl	800645c <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f001 f830 	bl	800247c <Error_Handler>
  }

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200007c0 	.word	0x200007c0
 8001424:	40005400 	.word	0x40005400
 8001428:	000186a0 	.word	0x000186a0

0800142c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_I2C_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12c      	bne.n	80014a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800146a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147c:	2304      	movs	r3, #4
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_I2C_MspInit+0x8c>)
 8001488:	f002 ff86 	bl	8004398 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <reverse_bytes>:
// generates title using template and current time
void generate_title(char* title , const char* template, uint16_t title_size);



uint16_t reverse_bytes(uint16_t num) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	return ((num & 0x00FF) << 8) | (num >> 8);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	b29b      	uxth	r3, r3
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <get_byte>:


uint8_t get_byte(uint32_t num, uint8_t byte_num) {
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (num >> (8 * byte_num));
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	b2db      	uxtb	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <create_header>:


void create_header(usb_file_t* wav_file, uint32_t frequency, uint32_t duration, uint32_t slowdown) {
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]

	// sample size is 2 bytes
	uint32_t data_size = 2 * duration * frequency;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	64bb      	str	r3, [r7, #72]	; 0x48

	uint32_t full_size = data_size + HEADER_SIZE;
 8001526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001528:	332c      	adds	r3, #44	; 0x2c
 800152a:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t byte_rate = 2 * frequency / slowdown;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	005a      	lsls	r2, r3, #1
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	643b      	str	r3, [r7, #64]	; 0x40

	frequency /= slowdown;
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	60bb      	str	r3, [r7, #8]

	// creating header with 0 on unfilled indices
	uint8_t header[HEADER_SIZE] = {
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <create_header+0x12c>)
 8001544:	f107 0414 	add.w	r4, r7, #20
 8001548:	461d      	mov	r5, r3
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			'd', 'a', 't', 'a',
			0, 0, 0, 0
	};


	for (uint8_t i = 0; i < 4; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001560:	e047      	b.n	80015f2 <create_header+0xe6>
		header[4+i] = get_byte(full_size, i);
 8001562:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001566:	1d1c      	adds	r4, r3, #4
 8001568:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800156c:	4619      	mov	r1, r3
 800156e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001570:	f7ff ffb9 	bl	80014e6 <get_byte>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800157c:	4423      	add	r3, r4
 800157e:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[24+i] = get_byte(frequency, i);
 8001582:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001586:	f103 0418 	add.w	r4, r3, #24
 800158a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800158e:	4619      	mov	r1, r3
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff ffa8 	bl	80014e6 <get_byte>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800159e:	4423      	add	r3, r4
 80015a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[28+i] = get_byte(byte_rate, i);
 80015a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015a8:	f103 041c 	add.w	r4, r3, #28
 80015ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015b0:	4619      	mov	r1, r3
 80015b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015b4:	f7ff ff97 	bl	80014e6 <get_byte>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015c0:	4423      	add	r3, r4
 80015c2:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[40+i] = get_byte(data_size, i);
 80015c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80015ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015d2:	4619      	mov	r1, r3
 80015d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015d6:	f7ff ff86 	bl	80014e6 <get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015e2:	4423      	add	r3, r4
 80015e4:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (uint8_t i = 0; i < 4; i++) {
 80015e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ec:	3301      	adds	r3, #1
 80015ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80015f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d9b3      	bls.n	8001562 <create_header+0x56>

	}
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001600:	e012      	b.n	8001628 <create_header+0x11c>
		wav_file->header[i] = header[i];
 8001602:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001606:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800160a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800160e:	440a      	add	r2, r1
 8001610:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	460a      	mov	r2, r1
 800161a:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 800161e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001622:	3301      	adds	r3, #1
 8001624:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001628:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800162c:	2b2b      	cmp	r3, #43	; 0x2b
 800162e:	d9e8      	bls.n	8001602 <create_header+0xf6>
	}

}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	; 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	08013800 	.word	0x08013800

0800163c <create_file>:


void create_file(usb_file_t* usb_file) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	send_signal(
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1d18      	adds	r0, r3, #4
			f_open(&usb_file->file,
					usb_file->title,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
	send_signal(
 800164c:	220a      	movs	r2, #10
 800164e:	4619      	mov	r1, r3
 8001650:	f00e fd1a 	bl	8010088 <f_open>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fd70 	bl	800113c <send_signal>
				  FA_CREATE_ALWAYS | FA_WRITE)
				  );
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <write_header>:

UINT write_header(usb_file_t* usb_file) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	UINT bytes_written;
	send_signal(
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1d18      	adds	r0, r3, #4
			f_write(
					&usb_file->file,
					usb_file->header,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 710d 	add.w	r1, r3, #564	; 0x234
	send_signal(
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	222c      	movs	r2, #44	; 0x2c
 800167c:	f00f f801 	bl	8010682 <f_write>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fd5a 	bl	800113c <send_signal>
					HEADER_SIZE,
					&bytes_written)
					);
	return bytes_written;
 8001688:	68fb      	ldr	r3, [r7, #12]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <write_data>:


UINT write_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	4613      	mov	r3, r2
 800169e:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	send_signal(
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1d18      	adds	r0, r3, #4
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	005a      	lsls	r2, r3, #1
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	f00e ffe8 	bl	8010682 <f_write>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd41 	bl	800113c <send_signal>
					&usb_file->file,
					data,
					sizeof(uint16_t) * size,
					&bytes_written)
					);
	return bytes_written;
 80016ba:	697b      	ldr	r3, [r7, #20]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <write_little_endian_data>:


UINT write_little_endian_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	3b0c      	subs	r3, #12
 80016d4:	6018      	str	r0, [r3, #0]
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	3b10      	subs	r3, #16
 80016dc:	6019      	str	r1, [r3, #0]
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	3b12      	subs	r3, #18
 80016e4:	801a      	strh	r2, [r3, #0]
	uint16_t little_endian_data[MAX_LITTLE_ENDIAN_SIZE];
	for (uint16_t i = 0; i < size; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016ec:	f102 0216 	add.w	r2, r2, #22
 80016f0:	8013      	strh	r3, [r2, #0]
 80016f2:	e025      	b.n	8001740 <write_little_endian_data+0x7c>
		little_endian_data[i] = reverse_bytes(data[i]);
 80016f4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016f8:	f103 0316 	add.w	r3, r3, #22
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	005a      	lsls	r2, r3, #1
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	3b10      	subs	r3, #16
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4413      	add	r3, r2
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001710:	f102 0216 	add.w	r2, r2, #22
 8001714:	8814      	ldrh	r4, [r2, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fed0 	bl	80014bc <reverse_bytes>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	3b04      	subs	r3, #4
 8001726:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint16_t i = 0; i < size; i++) {
 800172a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800172e:	f103 0316 	add.w	r3, r3, #22
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800173a:	f102 0216 	add.w	r2, r2, #22
 800173e:	8013      	strh	r3, [r2, #0]
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	3b12      	subs	r3, #18
 8001746:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800174a:	f102 0216 	add.w	r2, r2, #22
 800174e:	8812      	ldrh	r2, [r2, #0]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3ce      	bcc.n	80016f4 <write_little_endian_data+0x30>
	}
	return write_data(usb_file, little_endian_data, size);
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	3b12      	subs	r3, #18
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	f107 0118 	add.w	r1, r7, #24
 8001762:	3904      	subs	r1, #4
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	3b0c      	subs	r3, #12
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	f7ff ff91 	bl	8001692 <write_data>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}

0800177e <close_file>:



void close_file(usb_file_t* usb_file) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	send_signal(f_close(&usb_file->file));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f00f f96c 	bl	8010a68 <f_close>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fcd2 	bl	800113c <send_signal>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <read_file>:


void read_file(usb_file_t* usb_file) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	send_signal(
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1d18      	adds	r0, r3, #4
				f_open(&usb_file->file,
						usb_file->title,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
	send_signal(
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	f00e fc68 	bl	8010088 <f_open>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fcbe 	bl	800113c <send_signal>
						FA_OPEN_EXISTING | FA_READ)
				);
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <write_str>:



UINT write_str(usb_file_t* usb_file, char* message, uint16_t size) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	send_signal(
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1d18      	adds	r0, r3, #4
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	f00e ff4e 	bl	8010682 <f_write>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fca7 	bl	800113c <send_signal>
			f_write(&usb_file->file,
			message,
			size,
			&bytes_written)
			);
	return bytes_written;
 80017ee:	697b      	ldr	r3, [r7, #20]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <write_array>:


void write_array(usb_file_t* info_file, float32_t* data, uint16_t size) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	4613      	mov	r3, r2
 8001804:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	for (uint16_t i = 0; i < size; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	82fb      	strh	r3, [r7, #22]
 800180a:	e01d      	b.n	8001848 <write_array+0x50>
		snprintf(message, ONE_MESSAGE, "%ld ", (int32_t) data[i]);
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <write_array+0x78>)
 8001822:	2128      	movs	r1, #40	; 0x28
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <write_array+0x7c>)
 8001826:	f011 f91f 	bl	8012a68 <sniprintf>
		send_signal(
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1d18      	adds	r0, r3, #4
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2228      	movs	r2, #40	; 0x28
 8001834:	490f      	ldr	r1, [pc, #60]	; (8001874 <write_array+0x7c>)
 8001836:	f00e ff24 	bl	8010682 <f_write>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc7d 	bl	800113c <send_signal>
	for (uint16_t i = 0; i < size; i++) {
 8001842:	8afb      	ldrh	r3, [r7, #22]
 8001844:	3301      	adds	r3, #1
 8001846:	82fb      	strh	r3, [r7, #22]
 8001848:	8afa      	ldrh	r2, [r7, #22]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3dd      	bcc.n	800180c <write_array+0x14>
							sizeof(message),
							&bytes_written)
							);
	}

	send_signal(
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1d18      	adds	r0, r3, #4
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2201      	movs	r2, #1
 800185a:	4907      	ldr	r1, [pc, #28]	; (8001878 <write_array+0x80>)
 800185c:	f00e ff11 	bl	8010682 <f_write>
 8001860:	4603      	mov	r3, r0
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fc6a 	bl	800113c <send_signal>
					    "\n",
						1,
						&bytes_written)
						);

}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0801382c 	.word	0x0801382c
 8001874:	20002820 	.word	0x20002820
 8001878:	08013834 	.word	0x08013834

0800187c <read_buffer>:

UINT read_buffer(usb_file_t* info_file, uint16_t* buffer,  uint16_t size) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
	UINT bytes_read;
	send_signal(
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1d18      	adds	r0, r3, #4
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	005a      	lsls	r2, r3, #1
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	f00e fdb4 	bl	8010404 <f_read>
 800189c:	4603      	mov	r3, r0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fc4c 	bl	800113c <send_signal>
					buffer,
					sizeof(uint16_t) * size,
					&bytes_read)
					);

	return bytes_read;
 80018a4:	697b      	ldr	r3, [r7, #20]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <generate_title>:

void generate_title(char* title , const char* template, uint16_t title_size) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80018be:	2200      	movs	r2, #0
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <generate_title+0x4c>)
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <generate_title+0x50>)
 80018c4:	f006 f97a 	bl	8007bbc <HAL_RTC_GetTime>
	snprintf(title, title_size, template, current_time.Hours,
 80018c8:	88f9      	ldrh	r1, [r7, #6]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <generate_title+0x4c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
           	 current_time.Minutes, current_time.Seconds);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <generate_title+0x4c>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
	snprintf(title, title_size, template, current_time.Hours,
 80018d4:	461a      	mov	r2, r3
           	 current_time.Minutes, current_time.Seconds);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <generate_title+0x4c>)
 80018d8:	789b      	ldrb	r3, [r3, #2]
	snprintf(title, title_size, template, current_time.Hours,
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	4603      	mov	r3, r0
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f011 f8c0 	bl	8012a68 <sniprintf>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80018e8:	2200      	movs	r2, #0
 80018ea:	4906      	ldr	r1, [pc, #24]	; (8001904 <generate_title+0x54>)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <generate_title+0x50>)
 80018ee:	f006 fb01 	bl	8007ef4 <HAL_RTC_GetDate>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000280 	.word	0x20000280
 8001900:	200030a8 	.word	0x200030a8
 8001904:	20000294 	.word	0x20000294

08001908 <get_intensity>:
float32_t get_intensity(float32_t magnitude);




float32_t get_intensity(float32_t magnitude) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 20 * log10(magnitude / (FFT_SIZE * MAX_VOLTAGE));
 8001912:	edd7 7a01 	vldr	s15, [r7, #4]
 8001916:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800195c <get_intensity+0x54>
 800191a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800191e:	ee16 0a90 	vmov	r0, s13
 8001922:	f7fe fe69 	bl	80005f8 <__aeabi_f2d>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	ec44 3b10 	vmov	d0, r3, r4
 800192e:	f011 fc3b 	bl	80131a8 <log10>
 8001932:	ec51 0b10 	vmov	r0, r1, d0
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <get_intensity+0x58>)
 800193c:	f7fe feb4 	bl	80006a8 <__aeabi_dmul>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	4618      	mov	r0, r3
 8001946:	4621      	mov	r1, r4
 8001948:	f7ff f95e 	bl	8000c08 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	ee07 3a90 	vmov	s15, r3
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	4a000000 	.word	0x4a000000
 8001960:	40340000 	.word	0x40340000

08001964 <perform_fft>:



void perform_fft(uint16_t* data_buffer, uint32_t start,  float32_t* fft_buffer) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	float32_t mean;
	calculate_mean(data_buffer, &mean);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f832 	bl	80019e0 <calculate_mean>

	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	82fb      	strh	r3, [r7, #22]
 8001980:	e01e      	b.n	80019c0 <perform_fft+0x5c>
		fft_buffer[2 * i] = (float32_t)data_buffer[i] - mean;
 8001982:	8afb      	ldrh	r3, [r7, #22]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001994:	edd7 7a04 	vldr	s15, [r7, #16]
 8001998:	8afb      	ldrh	r3, [r7, #22]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	edc3 7a00 	vstr	s15, [r3]
		fft_buffer[2 * i + 1] = 0;
 80019aa:	8afb      	ldrh	r3, [r7, #22]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	3304      	adds	r3, #4
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80019ba:	8afb      	ldrh	r3, [r7, #22]
 80019bc:	3301      	adds	r3, #1
 80019be:	82fb      	strh	r3, [r7, #22]
 80019c0:	8afb      	ldrh	r3, [r7, #22]
 80019c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c6:	d3dc      	bcc.n	8001982 <perform_fft+0x1e>
	}
	arm_cfft_f32(&arm_cfft_sR_f32_len512, fft_buffer, 0, 1);
 80019c8:	2301      	movs	r3, #1
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <perform_fft+0x78>)
 80019d0:	f010 f86a 	bl	8011aa8 <arm_cfft_f32>

}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	08014678 	.word	0x08014678

080019e0 <calculate_mean>:


void calculate_mean(uint16_t* data_buffer, float32_t* mean) {
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	e00b      	b.n	8001a0c <calculate_mean+0x2c>
		sum += data_buffer[i];
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a12:	dbef      	blt.n	80019f4 <calculate_mean+0x14>
	}
	*mean = ((float32_t) sum) / FFT_SIZE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001a38 <calculate_mean+0x58>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	edc3 7a00 	vstr	s15, [r3]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	44000000 	.word	0x44000000

08001a3c <calculate_magnitudes>:


void calculate_magnitudes(float32_t* fft_buffer, float32_t* magnitude, uint32_t* index){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	6018      	str	r0, [r3, #0]
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	6019      	str	r1, [r3, #0]
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	601a      	str	r2, [r3, #0]
	float32_t magnitudes[FFT_SIZE];
	arm_cmplx_mag_f32(fft_buffer, magnitudes, FFT_SIZE);
 8001a54:	f107 0110 	add.w	r1, r7, #16
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f010 fb11 	bl	8012088 <arm_cmplx_mag_f32>
	arm_max_f32(magnitudes, FFT_SIZE, magnitude, index);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	f107 0010 	add.w	r0, r7, #16
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a78:	f00f fc7e 	bl	8011378 <arm_max_f32>
}
 8001a7c:	bf00      	nop
 8001a7e:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <get_frequency>:


float32_t get_frequency(uint32_t index, uint32_t frequency) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	if (index > (FFT_SIZE / 2)) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d903      	bls.n	8001aa2 <get_frequency+0x1a>
		index = FFT_SIZE - index;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001aa0:	607b      	str	r3, [r7, #4]
	}
	return frequency * ((float32_t) index) / FFT_SIZE;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ad4 <get_frequency+0x4c>
 8001abe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ac2:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	44000000 	.word	0x44000000

08001ad8 <init_filter>:



void init_filter() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af02      	add	r7, sp, #8
	arm_fir_init_f32(
 8001ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <init_filter+0x20>)
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <init_filter+0x24>)
 8001ae8:	2119      	movs	r1, #25
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <init_filter+0x28>)
 8001aec:	f010 f856 	bl	8011b9c <arm_fir_init_f32>
			&FILTER, COEFFICIENTS,
			FILTER_COEFFICIENTS,
			FILTER_STATES, FFT_SIZE
			);
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20002848 	.word	0x20002848
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20002814 	.word	0x20002814

08001b04 <fir_filter>:


void fir_filter(uint16_t* buffer) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	3b0c      	subs	r3, #12
 8001b14:	6018      	str	r0, [r3, #0]
	float32_t float_buffer[FFT_SIZE];
	float32_t float_result[FFT_SIZE];
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b1c:	f102 020e 	add.w	r2, r2, #14
 8001b20:	8013      	strh	r3, [r2, #0]
 8001b22:	e029      	b.n	8001b78 <fir_filter+0x74>
		float_buffer[i] = (float32_t)buffer[i] - MEDIAN;
 8001b24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b28:	f103 030e 	add.w	r3, r3, #14
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	005a      	lsls	r2, r3, #1
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	3b0c      	subs	r3, #12
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b44:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b48:	f103 030e 	add.w	r3, r3, #14
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001c1c <fir_filter+0x118>
 8001b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b56:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001b62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b66:	f103 030e 	add.w	r3, r3, #14
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b72:	f102 020e 	add.w	r2, r2, #14
 8001b76:	8013      	strh	r3, [r2, #0]
 8001b78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b7c:	f103 030e 	add.w	r3, r3, #14
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b86:	d3cd      	bcc.n	8001b24 <fir_filter+0x20>
	}
	arm_fir_f32(&FILTER, float_buffer, float_result, FFT_SIZE);
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	3a04      	subs	r2, #4
 8001b8e:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 8001b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b96:	4822      	ldr	r0, [pc, #136]	; (8001c20 <fir_filter+0x11c>)
 8001b98:	f010 f812 	bl	8011bc0 <arm_fir_f32>
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ba2:	f102 020c 	add.w	r2, r2, #12
 8001ba6:	8013      	strh	r3, [r2, #0]
 8001ba8:	e02a      	b.n	8001c00 <fir_filter+0xfc>
			buffer[i] = (uint16_t) float_result[i] + MEDIAN;
 8001baa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bae:	f103 030c 	add.w	r3, r3, #12
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	3b04      	subs	r3, #4
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bd0:	f103 030c 	add.w	r3, r3, #12
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	0059      	lsls	r1, r3, #1
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	3b0c      	subs	r3, #12
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	440b      	add	r3, r1
 8001be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be6:	b292      	uxth	r2, r2
 8001be8:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001bea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bee:	f103 030c 	add.w	r3, r3, #12
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bfa:	f102 020c 	add.w	r2, r2, #12
 8001bfe:	8013      	strh	r3, [r2, #0]
 8001c00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001c04:	f103 030c 	add.w	r3, r3, #12
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d3cc      	bcc.n	8001baa <fir_filter+0xa6>
		}
}
 8001c10:	bf00      	nop
 8001c12:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	45000000 	.word	0x45000000
 8001c20:	20002814 	.word	0x20002814

08001c24 <linear_filter>:

void linear_filter(uint16_t* buffer, uint16_t prev, uint16_t size, uint16_t* result) {
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	4613      	mov	r3, r2
 8001c34:	813b      	strh	r3, [r7, #8]
	if (prev == FIRST_SIGNAL) {
 8001c36:	897b      	ldrh	r3, [r7, #10]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <linear_filter+0x1e>
		prev = buffer[0];
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	817b      	strh	r3, [r7, #10]
	}
	result[0] = (15 * prev + buffer[0]) >> 4;
 8001c42:	897a      	ldrh	r2, [r7, #10]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	111b      	asrs	r3, r3, #4
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e01b      	b.n	8001c96 <linear_filter+0x72>
		result[i] = (15 * result[i-1] + buffer[i]) >> 4;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001c64:	3b01      	subs	r3, #1
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	0052      	lsls	r2, r2, #1
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	440a      	add	r2, r1
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	1119      	asrs	r1, r3, #4
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b28a      	uxth	r2, r1
 8001c8e:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	893b      	ldrh	r3, [r7, #8]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbdf      	blt.n	8001c5e <linear_filter+0x3a>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS flashdrive;
	usb_file_t wav_file;
	usb_file_t info_file;
	usb_file_t raw_data_file;
	uint32_t written = 0;
 8001cb6:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001cba:	f103 0304 	add.w	r3, r3, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 ff31 	bl	8002b28 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 fa61 	bl	800218c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f7ff fa77 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001cce:	f7ff fa55 	bl	800117c <MX_DMA_Init>
  MX_I2C1_Init();
 8001cd2:	f7ff fb7d 	bl	80013d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001cd6:	f000 fcb5 	bl	8002644 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001cda:	f00f f811 	bl	8010d00 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8001cde:	f000 fbdf 	bl	80024a0 <MX_RTC_Init>
  MX_TIM3_Init();
 8001ce2:	f000 fe81 	bl	80029e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001ce6:	f7ff f95f 	bl	8000fa8 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001cea:	f008 fc67 	bl	800a5bc <MX_FATFS_Init>
  MX_SPI2_Init();
 8001cee:	f000 fcdf 	bl	80026b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001cf2:	4887      	ldr	r0, [pc, #540]	; (8001f10 <main+0x264>)
 8001cf4:	f006 fdc6 	bl	8008884 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buffer, BUFF_SIZE);
 8001cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cfc:	4985      	ldr	r1, [pc, #532]	; (8001f14 <main+0x268>)
 8001cfe:	4886      	ldr	r0, [pc, #536]	; (8001f18 <main+0x26c>)
 8001d00:	f001 f912 	bl	8002f28 <HAL_ADC_Start_DMA>


  create_header(&wav_file, FREQUENCY, TIME, 4);
 8001d04:	f507 50e9 	add.w	r0, r7, #7456	; 0x1d20
 8001d08:	f100 0008 	add.w	r0, r0, #8
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	2203      	movs	r2, #3
 8001d10:	4982      	ldr	r1, [pc, #520]	; (8001f1c <main+0x270>)
 8001d12:	f7ff fbfb 	bl	800150c <create_header>
  raw_data_file.title = "raw_data.wav";
 8001d16:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001d1a:	f103 0308 	add.w	r3, r3, #8
 8001d1e:	4a80      	ldr	r2, [pc, #512]	; (8001f20 <main+0x274>)
 8001d20:	601a      	str	r2, [r3, #0]
  main_screen_init();
 8001d22:	f000 fc2d 	bl	8002580 <main_screen_init>

  println("DEVICE IS\n READY!");
 8001d26:	487f      	ldr	r0, [pc, #508]	; (8001f24 <main+0x278>)
 8001d28:	f000 fc64 	bl	80025f4 <println>
  HAL_Delay(1000);
 8001d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d30:	f000 ff6c 	bl	8002c0c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001d34:	f00f f80a 	bl	8010d4c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(state) {
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <main+0x27c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	2b07      	cmp	r3, #7
 8001d42:	f200 820e 	bhi.w	8002162 <main+0x4b6>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <main+0xa0>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d6d 	.word	0x08001d6d
 8001d50:	08002163 	.word	0x08002163
 8001d54:	08001da3 	.word	0x08001da3
 8001d58:	08002163 	.word	0x08002163
 8001d5c:	08001dcb 	.word	0x08001dcb
 8001d60:	08001df1 	.word	0x08001df1
 8001d64:	08001e19 	.word	0x08001e19
 8001d68:	08001e3f 	.word	0x08001e3f
    case MOUNTING:
    	clear_print("MOUNTING USB\n FLASHDRIVE...");
 8001d6c:	486f      	ldr	r0, [pc, #444]	; (8001f2c <main+0x280>)
 8001d6e:	f000 fc53 	bl	8002618 <clear_print>
    	send_signal(f_mount(&flashdrive, USBHPath, 1));
 8001d72:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d76:	f103 0308 	add.w	r3, r3, #8
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	496c      	ldr	r1, [pc, #432]	; (8001f30 <main+0x284>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00e f93c 	bl	800fffc <f_mount>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f9d8 	bl	800113c <send_signal>
    	println("MOUNTED");
 8001d8c:	4869      	ldr	r0, [pc, #420]	; (8001f34 <main+0x288>)
 8001d8e:	f000 fc31 	bl	80025f4 <println>
    	HAL_Delay(1000);
 8001d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d96:	f000 ff39 	bl	8002c0c <HAL_Delay>

    	state = MOUNTED;
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <main+0x27c>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]
    	break;
 8001da0:	e1e0      	b.n	8002164 <main+0x4b8>

    case RECORDING_START:
    	// creates file for saving samples
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	4863      	ldr	r0, [pc, #396]	; (8001f38 <main+0x28c>)
 8001daa:	f002 fde1 	bl	8004970 <HAL_GPIO_WritePin>
    	create_file(&raw_data_file);
 8001dae:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001db2:	f103 0308 	add.w	r3, r3, #8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fc40 	bl	800163c <create_file>
    	clear_print("RECOR...");
 8001dbc:	485f      	ldr	r0, [pc, #380]	; (8001f3c <main+0x290>)
 8001dbe:	f000 fc2b 	bl	8002618 <clear_print>
    	state = RECORDING;
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <main+0x27c>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	701a      	strb	r2, [r3, #0]
    	break;
 8001dc8:	e1cc      	b.n	8002164 <main+0x4b8>

    case COPY_FIRST_HALF:
    	state = RECORDING;
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <main+0x27c>)
 8001dcc:	2204      	movs	r2, #4
 8001dce:	701a      	strb	r2, [r3, #0]
    	// copying first half of buffer to file
    	write_buffer(&raw_data_file, ADC_Buffer, 0, BUFF_HALF, &written);
 8001dd0:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001dd4:	f100 0008 	add.w	r0, r0, #8
 8001dd8:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001ddc:	f103 0304 	add.w	r3, r3, #4
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de6:	2200      	movs	r2, #0
 8001de8:	494a      	ldr	r1, [pc, #296]	; (8001f14 <main+0x268>)
 8001dea:	f000 fb07 	bl	80023fc <write_buffer>
    	break;
 8001dee:	e1b9      	b.n	8002164 <main+0x4b8>

    case COPY_SECOND_HALF:
    	state = RECORDING;
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <main+0x27c>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	701a      	strb	r2, [r3, #0]
    	// copying second half of buffer to file
    	write_buffer(&raw_data_file, ADC_Buffer, BUFF_HALF, BUFF_HALF, &written);
 8001df6:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001dfa:	f100 0008 	add.w	r0, r0, #8
 8001dfe:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001e02:	f103 0304 	add.w	r3, r3, #4
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e10:	4940      	ldr	r1, [pc, #256]	; (8001f14 <main+0x268>)
 8001e12:	f000 faf3 	bl	80023fc <write_buffer>
    	break;
 8001e16:	e1a5      	b.n	8002164 <main+0x4b8>

    case RECORDING_STOP:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1c:	4846      	ldr	r0, [pc, #280]	; (8001f38 <main+0x28c>)
 8001e1e:	f002 fdd9 	bl	80049d4 <HAL_GPIO_TogglePin>
    	// closing file to save it
    	close_file(&raw_data_file);
 8001e22:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001e26:	f103 0308 	add.w	r3, r3, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fca7 	bl	800177e <close_file>
    	state = PROCESSING;
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <main+0x27c>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	701a      	strb	r2, [r3, #0]
    	clear_print("PROCESSING\nDATA...");
 8001e36:	4842      	ldr	r0, [pc, #264]	; (8001f40 <main+0x294>)
 8001e38:	f000 fbee 	bl	8002618 <clear_print>
    	break;
 8001e3c:	e192      	b.n	8002164 <main+0x4b8>

    case PROCESSING:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e42:	483d      	ldr	r0, [pc, #244]	; (8001f38 <main+0x28c>)
 8001e44:	f002 fdc6 	bl	80049d4 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	483a      	ldr	r0, [pc, #232]	; (8001f38 <main+0x28c>)
 8001e4e:	f002 fdc1 	bl	80049d4 <HAL_GPIO_TogglePin>

    	// creating wav file for our audio
    	generate_title(title, "%dh%dm%ds.wav", TITLE_SIZE);
 8001e52:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001e56:	f103 031c 	add.w	r3, r3, #28
 8001e5a:	2228      	movs	r2, #40	; 0x28
 8001e5c:	4939      	ldr	r1, [pc, #228]	; (8001f44 <main+0x298>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fd26 	bl	80018b0 <generate_title>
    	wav_file.title = title;
 8001e64:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e68:	f103 0308 	add.w	r3, r3, #8
 8001e6c:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001e70:	f102 021c 	add.w	r2, r2, #28
 8001e74:	601a      	str	r2, [r3, #0]
    	create_file(&wav_file);
 8001e76:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e7a:	f103 0308 	add.w	r3, r3, #8
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbdc 	bl	800163c <create_file>
    	write_header(&wav_file);
 8001e84:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e88:	f103 0308 	add.w	r3, r3, #8
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbe9 	bl	8001664 <write_header>

    	// creating info file for measured frequencies and intensities
    	generate_title(info_title, "%dh%dm%ds.txt", TITLE_SIZE);
 8001e92:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001e96:	f103 0314 	add.w	r3, r3, #20
 8001e9a:	2228      	movs	r2, #40	; 0x28
 8001e9c:	492a      	ldr	r1, [pc, #168]	; (8001f48 <main+0x29c>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd06 	bl	80018b0 <generate_title>
    	info_file.title = info_title;
 8001ea4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001ea8:	f103 0308 	add.w	r3, r3, #8
 8001eac:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8001eb0:	f102 0214 	add.w	r2, r2, #20
 8001eb4:	601a      	str	r2, [r3, #0]
    	create_file(&info_file);
 8001eb6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001eba:	f103 0308 	add.w	r3, r3, #8
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fbbc 	bl	800163c <create_file>

    	// opening raw data to read it
    	read_file(&raw_data_file);
 8001ec4:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001ec8:	f103 0308 	add.w	r3, r3, #8
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fc67 	bl	80017a0 <read_file>

    	// initializing FIR filter
    	init_filter();
 8001ed2:	f7ff fe01 	bl	8001ad8 <init_filter>

    	prev = FIRST_SIGNAL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001edc:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001ee0:	8013      	strh	r3, [r2, #0]

    	while (written > 0) {
 8001ee2:	e0fc      	b.n	80020de <main+0x432>
    		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee8:	4813      	ldr	r0, [pc, #76]	; (8001f38 <main+0x28c>)
 8001eea:	f002 fd73 	bl	80049d4 <HAL_GPIO_TogglePin>

    		if (written >= READ_BUFFER_SIZE) {
 8001eee:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001ef2:	f103 0304 	add.w	r3, r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d326      	bcc.n	8001f4c <main+0x2a0>
    			to_read = READ_BUFFER_SIZE;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f06:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001f0a:	8013      	strh	r3, [r2, #0]
 8001f0c:	e028      	b.n	8001f60 <main+0x2b4>
 8001f0e:	bf00      	nop
 8001f10:	20003178 	.word	0x20003178
 8001f14:	20000814 	.word	0x20000814
 8001f18:	200004f4 	.word	0x200004f4
 8001f1c:	00017700 	.word	0x00017700
 8001f20:	08013838 	.word	0x08013838
 8001f24:	08013848 	.word	0x08013848
 8001f28:	20000298 	.word	0x20000298
 8001f2c:	0801385c 	.word	0x0801385c
 8001f30:	200031bc 	.word	0x200031bc
 8001f34:	08013878 	.word	0x08013878
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	08013880 	.word	0x08013880
 8001f40:	0801388c 	.word	0x0801388c
 8001f44:	080138a0 	.word	0x080138a0
 8001f48:	080138b0 	.word	0x080138b0
    		}
    		else {
    			to_read = written;
 8001f4c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f50:	f103 0304 	add.w	r3, r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f5a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001f5e:	8013      	strh	r3, [r2, #0]
    		}

    		written -= to_read;
 8001f60:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f64:	f103 0304 	add.w	r3, r3, #4
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001f6e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	1ad2      	subs	r2, r2, r3
 8001f76:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f7a:	f103 0304 	add.w	r3, r3, #4
 8001f7e:	601a      	str	r2, [r3, #0]


    		// reading data and filtering it with linear filter for
    		// calculating frequencies
    		read_buffer(&raw_data_file, Read_Buffer, to_read);
 8001f80:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001f84:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001f8e:	f101 0104 	add.w	r1, r1, #4
 8001f92:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f96:	f103 0308 	add.w	r3, r3, #8
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fc6e 	bl	800187c <read_buffer>
    		linear_filter(Read_Buffer, prev, READ_BUFFER_SIZE, Temporary_Buffer);
 8001fa0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001fa4:	3b1c      	subs	r3, #28
 8001fa6:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001faa:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001fae:	8811      	ldrh	r1, [r2, #0]
 8001fb0:	f507 50a0 	add.w	r0, r7, #5120	; 0x1400
 8001fb4:	f100 0004 	add.w	r0, r0, #4
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	f7ff fe32 	bl	8001c24 <linear_filter>

    		// using High-Pass filter on our data
    		fir_filter(Read_Buffer);
 8001fc0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8001fc4:	f103 0304 	add.w	r3, r3, #4
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd9b 	bl	8001b04 <fir_filter>
    		// saving  filtered data to wav file
    		write_little_endian_data(&wav_file, Read_Buffer, to_read);
 8001fce:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001fd2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001fdc:	f101 0104 	add.w	r1, r1, #4
 8001fe0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001fe4:	f103 0308 	add.w	r3, r3, #8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fb6b 	bl	80016c4 <write_little_endian_data>

    		// performing FFT and calculating main frequency
    		// and intensity for data filtered with linear filter
    		perform_fft(Temporary_Buffer, 0, FFT_Buffer);
 8001fee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ff2:	3a3c      	subs	r2, #60	; 0x3c
 8001ff4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ff8:	3b1c      	subs	r3, #28
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fcb1 	bl	8001964 <perform_fft>
    		calculate_magnitudes(FFT_Buffer, &magnitude, &index);
 8002002:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8002006:	f102 0208 	add.w	r2, r2, #8
 800200a:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 800200e:	f101 0110 	add.w	r1, r1, #16
 8002012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002016:	3b3c      	subs	r3, #60	; 0x3c
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fd0f 	bl	8001a3c <calculate_magnitudes>
    		frequency = get_frequency(index, FREQUENCY);
 800201e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002022:	f103 0308 	add.w	r3, r3, #8
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	494f      	ldr	r1, [pc, #316]	; (8002168 <main+0x4bc>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fd2c 	bl	8001a88 <get_frequency>
 8002030:	eef0 7a40 	vmov.f32	s15, s0
 8002034:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002038:	f103 0304 	add.w	r3, r3, #4
 800203c:	edc3 7a00 	vstr	s15, [r3]
    		intensity = get_intensity(magnitude);
 8002040:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002044:	f103 0310 	add.w	r3, r3, #16
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	f7ff fc5a 	bl	8001908 <get_intensity>
 8002054:	eef0 7a40 	vmov.f32	s15, s0
 8002058:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800205c:	f103 030c 	add.w	r3, r3, #12
 8002060:	edc3 7a00 	vstr	s15, [r3]

    		// writing information to file
    		write_str(&info_file, "Frequency: ", 11);
 8002064:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002068:	f103 0308 	add.w	r3, r3, #8
 800206c:	220b      	movs	r2, #11
 800206e:	493f      	ldr	r1, [pc, #252]	; (800216c <main+0x4c0>)
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fba9 	bl	80017c8 <write_str>
    		write_array(&info_file, &frequency, 1);
 8002076:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 800207a:	f101 0104 	add.w	r1, r1, #4
 800207e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002082:	f103 0308 	add.w	r3, r3, #8
 8002086:	2201      	movs	r2, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fbb5 	bl	80017f8 <write_array>
    		write_str(&info_file, "Intensity: ", 11);
 800208e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002092:	f103 0308 	add.w	r3, r3, #8
 8002096:	220b      	movs	r2, #11
 8002098:	4935      	ldr	r1, [pc, #212]	; (8002170 <main+0x4c4>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fb94 	bl	80017c8 <write_str>
    		write_array(&info_file, &intensity, 1);
 80020a0:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 80020a4:	f101 010c 	add.w	r1, r1, #12
 80020a8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80020ac:	f103 0308 	add.w	r3, r3, #8
 80020b0:	2201      	movs	r2, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fba0 	bl	80017f8 <write_array>
    		write_str(&info_file, "\n", 1);
 80020b8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80020bc:	f103 0308 	add.w	r3, r3, #8
 80020c0:	2201      	movs	r2, #1
 80020c2:	492c      	ldr	r1, [pc, #176]	; (8002174 <main+0x4c8>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb7f 	bl	80017c8 <write_str>


    		// setting prev variable for next linear filter
    		// cycle
    		prev = Temporary_Buffer[READ_BUFFER_SIZE - 1];
 80020ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80020ce:	3b1c      	subs	r3, #28
 80020d0:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	; 0x3fe
 80020d4:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80020d8:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80020dc:	8013      	strh	r3, [r2, #0]
    	while (written > 0) {
 80020de:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80020e2:	f103 0304 	add.w	r3, r3, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aefb 	bne.w	8001ee4 <main+0x238>


    	}
    	// closing all files
    	close_file(&raw_data_file);
 80020ee:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80020f2:	f103 0308 	add.w	r3, r3, #8
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fb41 	bl	800177e <close_file>
    	close_file(&wav_file);
 80020fc:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8002100:	f103 0308 	add.w	r3, r3, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb3a 	bl	800177e <close_file>
    	close_file(&info_file);
 800210a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800210e:	f103 0308 	add.w	r3, r3, #8
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fb33 	bl	800177e <close_file>

    	clear_print("WRITTEN TO");
 8002118:	4817      	ldr	r0, [pc, #92]	; (8002178 <main+0x4cc>)
 800211a:	f000 fa7d 	bl	8002618 <clear_print>
    	println(title);
 800211e:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8002122:	f103 031c 	add.w	r3, r3, #28
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fa64 	bl	80025f4 <println>
    	println("and");
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <main+0x4d0>)
 800212e:	f000 fa61 	bl	80025f4 <println>
    	println(info_title);
 8002132:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002136:	f103 0314 	add.w	r3, r3, #20
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa5a 	bl	80025f4 <println>
    	println("WAITING...");
 8002140:	480f      	ldr	r0, [pc, #60]	; (8002180 <main+0x4d4>)
 8002142:	f000 fa57 	bl	80025f4 <println>

    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8002146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <main+0x4d8>)
 800214c:	f002 fc42 	bl	80049d4 <HAL_GPIO_TogglePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <main+0x4d8>)
 8002158:	f002 fc0a 	bl	8004970 <HAL_GPIO_WritePin>
    	state = MOUNTED;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <main+0x4dc>)
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
    default:
    	break;
 8002162:	bf00      	nop
    MX_USB_HOST_Process();
 8002164:	e5e6      	b.n	8001d34 <main+0x88>
 8002166:	bf00      	nop
 8002168:	00017700 	.word	0x00017700
 800216c:	080138c0 	.word	0x080138c0
 8002170:	080138cc 	.word	0x080138cc
 8002174:	08013834 	.word	0x08013834
 8002178:	080138d8 	.word	0x080138d8
 800217c:	080138e4 	.word	0x080138e4
 8002180:	080138e8 	.word	0x080138e8
 8002184:	40020c00 	.word	0x40020c00
 8002188:	20000298 	.word	0x20000298

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b098      	sub	sp, #96	; 0x60
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f010 fba3 	bl	80128e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <SystemClock_Config+0xfc>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <SystemClock_Config+0xfc>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <SystemClock_Config+0xfc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <SystemClock_Config+0x100>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2a      	ldr	r2, [pc, #168]	; (800228c <SystemClock_Config+0x100>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <SystemClock_Config+0x100>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021f6:	2309      	movs	r3, #9
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002200:	2301      	movs	r3, #1
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002204:	2302      	movs	r3, #2
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002208:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800220e:	2304      	movs	r3, #4
 8002210:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002212:	23a8      	movs	r3, #168	; 0xa8
 8002214:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002216:	2302      	movs	r3, #2
 8002218:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800221a:	2307      	movs	r3, #7
 800221c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fada 	bl	80067dc <HAL_RCC_OscConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800222e:	f000 f925 	bl	800247c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002232:	230f      	movs	r3, #15
 8002234:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800223e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	2105      	movs	r1, #5
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fde3 	bl	8006e1c <HAL_RCC_ClockConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800225c:	f000 f90e 	bl	800247c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002260:	2302      	movs	r3, #2
 8002262:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002268:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f005 f85a 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800227a:	f000 f8ff 	bl	800247c <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3760      	adds	r7, #96	; 0x60
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000

08002290 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == BUTTON_Pin){
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d123      	bne.n	80022e8 <HAL_GPIO_EXTI_Callback+0x58>

		switch(state) {
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_GPIO_EXTI_Callback+0x20>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			state = RECORDING_START;
			break;

		default:
			break;
 80022ae:	e01c      	b.n	80022ea <HAL_GPIO_EXTI_Callback+0x5a>
			if (Appli_state == APPLICATION_READY) {
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_GPIO_EXTI_Callback+0x68>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d108      	bne.n	80022ca <HAL_GPIO_EXTI_Callback+0x3a>
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80022b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022bc:	480f      	ldr	r0, [pc, #60]	; (80022fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80022be:	f002 fb89 	bl	80049d4 <HAL_GPIO_TogglePin>
			    state = MOUNTING;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
			break;
 80022c8:	e00f      	b.n	80022ea <HAL_GPIO_EXTI_Callback+0x5a>
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80022ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ce:	480b      	ldr	r0, [pc, #44]	; (80022fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80022d0:	f002 fb80 	bl	80049d4 <HAL_GPIO_TogglePin>
			break;
 80022d4:	e009      	b.n	80022ea <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80022d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022da:	4808      	ldr	r0, [pc, #32]	; (80022fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80022dc:	f002 fb7a 	bl	80049d4 <HAL_GPIO_TogglePin>
			state = RECORDING_START;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	701a      	strb	r2, [r3, #0]
			break;
 80022e6:	e000      	b.n	80022ea <HAL_GPIO_EXTI_Callback+0x5a>
		}

	}
 80022e8:	bf00      	nop
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000298 	.word	0x20000298
 80022f8:	200004e8 	.word	0x200004e8
 80022fc:	40020c00 	.word	0x40020c00

08002300 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d131      	bne.n	8002376 <HAL_TIM_PeriodElapsedCallback+0x76>
		if (current_index >= BUFF_SIZE){
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231c:	d302      	bcc.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x24>
			current_index = 0;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
		}
		// ultrasound detected
		if (
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
		if (
 800232a:	2b02      	cmp	r3, #2
 800232c:	d11c      	bne.n	8002368 <HAL_TIM_PeriodElapsedCallback+0x68>
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002338:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800233c:	f240 52db 	movw	r2, #1499	; 0x5db
 8002340:	4293      	cmp	r3, r2
 8002342:	d809      	bhi.n	8002358 <HAL_TIM_PeriodElapsedCallback+0x58>
			|| ADC_Buffer[current_index] <= RECORD_MIN_LIM)
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800234e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002352:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002356:	d807      	bhi.n	8002368 <HAL_TIM_PeriodElapsedCallback+0x68>

		) {
			state = RECORDING_START;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800235a:	2203      	movs	r2, #3
 800235c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800235e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002362:	480b      	ldr	r0, [pc, #44]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002364:	f002 fb36 	bl	80049d4 <HAL_GPIO_TogglePin>
		}
		current_index += 1;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002374:	801a      	strh	r2, [r3, #0]
	}
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40000400 	.word	0x40000400
 8002384:	2000029a 	.word	0x2000029a
 8002388:	20000298 	.word	0x20000298
 800238c:	20000814 	.word	0x20000814
 8002390:	40020c00 	.word	0x40020c00

08002394 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d102      	bne.n	80023ac <HAL_ADC_ConvHalfCpltCallback+0x18>
		state = COPY_FIRST_HALF;
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80023a8:	2205      	movs	r2, #5
 80023aa:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80023ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80023b2:	f002 fb0f 	bl	80049d4 <HAL_GPIO_TogglePin>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000298 	.word	0x20000298
 80023c4:	40020c00 	.word	0x40020c00

080023c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d102      	bne.n	80023e0 <HAL_ADC_ConvCpltCallback+0x18>
		state = COPY_SECOND_HALF;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80023dc:	2206      	movs	r2, #6
 80023de:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80023e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <HAL_ADC_ConvCpltCallback+0x30>)
 80023e6:	f002 faf5 	bl	80049d4 <HAL_GPIO_TogglePin>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000298 	.word	0x20000298
 80023f8:	40020c00 	.word	0x40020c00

080023fc <write_buffer>:


void write_buffer(
		usb_file_t* usb_file, uint16_t* buffer,
		uint16_t start, uint16_t amount, uint32_t* written)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	4611      	mov	r1, r2
 8002408:	461a      	mov	r2, r3
 800240a:	460b      	mov	r3, r1
 800240c:	80fb      	strh	r3, [r7, #6]
 800240e:	4613      	mov	r3, r2
 8002410:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002418:	4815      	ldr	r0, [pc, #84]	; (8002470 <write_buffer+0x74>)
 800241a:	f002 faa9 	bl	8004970 <HAL_GPIO_WritePin>

	// if we don't have enough memory in our file
	// for full buffer
	if (*written + amount > SAMPLES_NUM) {
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <write_buffer+0x78>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d908      	bls.n	800243e <write_buffer+0x42>
		amount = SAMPLES_NUM - *written;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f5c3 43ca 	rsb	r3, r3, #25856	; 0x6500
 8002436:	80bb      	strh	r3, [r7, #4]
		state = RECORDING_STOP;
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <write_buffer+0x7c>)
 800243a:	2207      	movs	r2, #7
 800243c:	701a      	strb	r2, [r3, #0]
	}

	write_data(usb_file, buffer + start, amount);
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	88ba      	ldrh	r2, [r7, #4]
 8002448:	4619      	mov	r1, r3
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7ff f921 	bl	8001692 <write_data>
	*written += amount;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	441a      	add	r2, r3
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <write_buffer+0x74>)
 8002464:	f002 fa84 	bl	8004970 <HAL_GPIO_WritePin>

}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020c00 	.word	0x40020c00
 8002474:	00046500 	.word	0x00046500
 8002478:	20000298 	.word	0x20000298

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <MX_RTC_Init+0xac>)
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <MX_RTC_Init+0xb0>)
 80024bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <MX_RTC_Init+0xac>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <MX_RTC_Init+0xac>)
 80024c6:	227f      	movs	r2, #127	; 0x7f
 80024c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_RTC_Init+0xac>)
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_RTC_Init+0xac>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_RTC_Init+0xac>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_RTC_Init+0xac>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024e2:	481a      	ldr	r0, [pc, #104]	; (800254c <MX_RTC_Init+0xac>)
 80024e4:	f005 f918 	bl	8007718 <HAL_RTC_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80024ee:	f7ff ffc5 	bl	800247c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2201      	movs	r2, #1
 800250a:	4619      	mov	r1, r3
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <MX_RTC_Init+0xac>)
 800250e:	f005 f9e9 	bl	80078e4 <HAL_RTC_SetTime>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002518:	f7ff ffb0 	bl	800247c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800251c:	2301      	movs	r3, #1
 800251e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002520:	2301      	movs	r3, #1
 8002522:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002524:	2301      	movs	r3, #1
 8002526:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002528:	2300      	movs	r3, #0
 800252a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	2201      	movs	r2, #1
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_RTC_Init+0xac>)
 8002534:	f005 fbae 	bl	8007c94 <HAL_RTC_SetDate>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800253e:	f7ff ff9d 	bl	800247c <Error_Handler>
  }

}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200030a8 	.word	0x200030a8
 8002550:	40002800 	.word	0x40002800

08002554 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_RTC_MspInit+0x24>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d102      	bne.n	800256c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RTC_MspInit+0x28>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40002800 	.word	0x40002800
 800257c:	42470e3c 	.word	0x42470e3c

08002580 <main_screen_init>:

#include "screen.h"



void main_screen_init() {
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af02      	add	r7, sp, #8
	  MAIN_SCREEN.hw_conf.spi_handle = &hspi2;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <main_screen_init+0x64>)
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <main_screen_init+0x68>)
 800258a:	601a      	str	r2, [r3, #0]
	  MAIN_SCREEN.hw_conf.spi_cs_pin =  CS_Pin;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <main_screen_init+0x64>)
 800258e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002592:	809a      	strh	r2, [r3, #4]
	  MAIN_SCREEN.hw_conf.spi_cs_port = CS_GPIO_Port;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <main_screen_init+0x64>)
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <main_screen_init+0x6c>)
 8002598:	609a      	str	r2, [r3, #8]
	  MAIN_SCREEN.hw_conf.rst_pin =  RST_Pin;
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <main_screen_init+0x64>)
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	819a      	strh	r2, [r3, #12]
	  MAIN_SCREEN.hw_conf.rst_port = RST_GPIO_Port;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <main_screen_init+0x64>)
 80025a4:	4a11      	ldr	r2, [pc, #68]	; (80025ec <main_screen_init+0x6c>)
 80025a6:	611a      	str	r2, [r3, #16]
	  MAIN_SCREEN.hw_conf.dc_pin =  DC_Pin;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <main_screen_init+0x64>)
 80025aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ae:	829a      	strh	r2, [r3, #20]
	  MAIN_SCREEN.hw_conf.dc_port = DC_GPIO_Port;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <main_screen_init+0x64>)
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <main_screen_init+0x6c>)
 80025b4:	619a      	str	r2, [r3, #24]
	  MAIN_SCREEN.def_scr = lcd5110_def_scr;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <main_screen_init+0x64>)
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <main_screen_init+0x70>)
 80025ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025be:	4614      	mov	r4, r2
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	6861      	ldr	r1, [r4, #4]
 80025c4:	68a2      	ldr	r2, [r4, #8]
 80025c6:	c307      	stmia	r3!, {r0, r1, r2}
 80025c8:	89a2      	ldrh	r2, [r4, #12]
 80025ca:	801a      	strh	r2, [r3, #0]
	  LCD5110_init(&MAIN_SCREEN.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 80025cc:	2303      	movs	r3, #3
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2302      	movs	r3, #2
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	210c      	movs	r1, #12
 80025d6:	4803      	ldr	r0, [pc, #12]	; (80025e4 <main_screen_init+0x64>)
 80025d8:	f008 fcb3 	bl	800af42 <LCD5110_init>
}
 80025dc:	bf00      	nop
 80025de:	3704      	adds	r7, #4
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	2000059c 	.word	0x2000059c
 80025e8:	200030c8 	.word	0x200030c8
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08014228 	.word	0x08014228

080025f4 <println>:



void println(char* str) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	LCD5110_printf(&MAIN_SCREEN, BLACK, "%s\n", str);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <println+0x1c>)
 8002600:	2101      	movs	r1, #1
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <println+0x20>)
 8002604:	f008 fa39 	bl	800aa7a <LCD5110_printf>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	080138f4 	.word	0x080138f4
 8002614:	2000059c 	.word	0x2000059c

08002618 <clear_print>:

void clear_print(char* str) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	LCD5110_clear_scr(&MAIN_SCREEN);
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <clear_print+0x28>)
 8002622:	f008 f911 	bl	800a848 <LCD5110_clear_scr>
	LCD5110_set_cursor(0, 0, &MAIN_SCREEN);
 8002626:	4a06      	ldr	r2, [pc, #24]	; (8002640 <clear_print+0x28>)
 8002628:	2100      	movs	r1, #0
 800262a:	2000      	movs	r0, #0
 800262c:	f008 f8fa 	bl	800a824 <LCD5110_set_cursor>
	println(str);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ffdf 	bl	80025f4 <println>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000059c 	.word	0x2000059c

08002644 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <MX_SPI1_Init+0x64>)
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <MX_SPI1_Init+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_SPI1_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_SPI1_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_SPI1_Init+0x64>)
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002690:	220a      	movs	r2, #10
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_SPI1_Init+0x64>)
 8002696:	f005 fd19 	bl	80080cc <HAL_SPI_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026a0:	f7ff feec 	bl	800247c <Error_Handler>
  }

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20003120 	.word	0x20003120
 80026ac:	40013000 	.word	0x40013000

080026b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_SPI2_Init+0x64>)
 80026b6:	4a18      	ldr	r2, [pc, #96]	; (8002718 <MX_SPI2_Init+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_SPI2_Init+0x64>)
 80026bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_SPI2_Init+0x64>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_SPI2_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_SPI2_Init+0x64>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_SPI2_Init+0x64>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_SPI2_Init+0x64>)
 80026dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_SPI2_Init+0x64>)
 80026e4:	2218      	movs	r2, #24
 80026e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_SPI2_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_SPI2_Init+0x64>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_SPI2_Init+0x64>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_SPI2_Init+0x64>)
 80026fc:	220a      	movs	r2, #10
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_SPI2_Init+0x64>)
 8002702:	f005 fce3 	bl	80080cc <HAL_SPI_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800270c:	f7ff feb6 	bl	800247c <Error_Handler>
  }

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200030c8 	.word	0x200030c8
 8002718:	40003800 	.word	0x40003800

0800271c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a41      	ldr	r2, [pc, #260]	; (8002840 <HAL_SPI_MspInit+0x124>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d12c      	bne.n	8002798 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_SPI_MspInit+0x128>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002776:	23e0      	movs	r3, #224	; 0xe0
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002786:	2305      	movs	r3, #5
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	4619      	mov	r1, r3
 8002790:	482d      	ldr	r0, [pc, #180]	; (8002848 <HAL_SPI_MspInit+0x12c>)
 8002792:	f001 fe01 	bl	8004398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002796:	e04f      	b.n	8002838 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_SPI_MspInit+0x130>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d14a      	bne.n	8002838 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DATA_Pin;
 80027f6:	2308      	movs	r3, #8
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002806:	2305      	movs	r3, #5
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 031c 	add.w	r3, r7, #28
 800280e:	4619      	mov	r1, r3
 8002810:	480f      	ldr	r0, [pc, #60]	; (8002850 <HAL_SPI_MspInit+0x134>)
 8002812:	f001 fdc1 	bl	8004398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CLK_Pin;
 8002816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002828:	2305      	movs	r3, #5
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	4808      	ldr	r0, [pc, #32]	; (8002854 <HAL_SPI_MspInit+0x138>)
 8002834:	f001 fdb0 	bl	8004398 <HAL_GPIO_Init>
}
 8002838:	bf00      	nop
 800283a:	3730      	adds	r7, #48	; 0x30
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40013000 	.word	0x40013000
 8002844:	40023800 	.word	0x40023800
 8002848:	40020000 	.word	0x40020000
 800284c:	40003800 	.word	0x40003800
 8002850:	40020800 	.word	0x40020800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_MspInit+0x4c>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002896:	2007      	movs	r0, #7
 8002898:	f001 f824 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <MemManage_Handler+0x4>

080028c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <BusFault_Handler+0x4>

080028c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <UsageFault_Handler+0x4>

080028ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fc:	f000 f966 	bl	8002bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002908:	2001      	movs	r0, #1
 800290a:	f002 f88b 	bl	8004a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM3_IRQHandler+0x10>)
 800291a:	f006 f83d 	bl	8008998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20003178 	.word	0x20003178

08002928 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA2_Stream0_IRQHandler+0x10>)
 800292e:	f001 facb 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000053c 	.word	0x2000053c

0800293c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <OTG_FS_IRQHandler+0x10>)
 8002942:	f002 fb29 	bl	8004f98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20003a00 	.word	0x20003a00

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f00f ff4c 	bl	801281c <__errno>
 8002984:	4602      	mov	r2, r0
 8002986:	230c      	movs	r3, #12
 8002988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20020000 	.word	0x20020000
 80029b0:	00000800 	.word	0x00000800
 80029b4:	2000029c 	.word	0x2000029c
 80029b8:	20003cc8 	.word	0x20003cc8

080029bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <SystemInit+0x28>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <SystemInit+0x28>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SystemInit+0x28>)
 80029d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d6:	609a      	str	r2, [r3, #8]
#endif
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <MX_TIM3_Init+0x98>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 874;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a18:	f240 326a 	movw	r2, #874	; 0x36a
 8002a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a2a:	4814      	ldr	r0, [pc, #80]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a2c:	f005 fe5e 	bl	80086ec <HAL_TIM_Base_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a36:	f7ff fd21 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a48:	f006 f8ae 	bl	8008ba8 <HAL_TIM_ConfigClockSource>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a52:	f7ff fd13 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a56:	2320      	movs	r3, #32
 8002a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a64:	f006 fd6a 	bl	800953c <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a6e:	f7ff fd05 	bl	800247c <Error_Handler>
  }

}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20003178 	.word	0x20003178
 8002a80:	40000400 	.word	0x40000400

08002a84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <HAL_TIM_Base_MspInit+0x48>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d115      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	201d      	movs	r0, #29
 8002ab8:	f000 ff34 	bl	8003924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002abc:	201d      	movs	r0, #29
 8002abe:	f000 ff5d 	bl	800397c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ada:	e003      	b.n	8002ae4 <LoopCopyDataInit>

08002adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ae2:	3104      	adds	r1, #4

08002ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002aec:	d3f6      	bcc.n	8002adc <CopyDataInit>
  ldr  r2, =_sbss
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002af0:	e002      	b.n	8002af8 <LoopFillZerobss>

08002af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002af4:	f842 3b04 	str.w	r3, [r2], #4

08002af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002afc:	d3f9      	bcc.n	8002af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002afe:	f7ff ff5d 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b02:	f00f fe91 	bl	8012828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b06:	f7ff f8d1 	bl	8001cac <main>
  bx  lr    
 8002b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b10:	08015b64 	.word	0x08015b64
  ldr  r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b18:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8002b1c:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 8002b20:	20003cc8 	.word	0x20003cc8

08002b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 fec7 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f000 f808 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff fe7c 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x54>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x58>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 ff0e 	bl	80039ac <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00e      	b.n	8002bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d80a      	bhi.n	8002bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	f000 febc 	bl	8003924 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_InitTick+0x5c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000064 	.word	0x20000064
 8002bc4:	2000006c 	.word	0x2000006c
 8002bc8:	20000068 	.word	0x20000068

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	2000006c 	.word	0x2000006c
 8002bf0:	200031b8 	.word	0x200031b8

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200031b8 	.word	0x200031b8

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_Delay+0x40>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	2000006c 	.word	0x2000006c

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e15b      	b.n	8002f1e <HAL_ADC_Init+0x2ce>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4aa4      	ldr	r2, [pc, #656]	; (8002efc <HAL_ADC_Init+0x2ac>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_ADC_Init+0x3e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4aa2      	ldr	r2, [pc, #648]	; (8002f00 <HAL_ADC_Init+0x2b0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_ADC_Init+0x3e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4aa1      	ldr	r2, [pc, #644]	; (8002f04 <HAL_ADC_Init+0x2b4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_Init+0x3e>
 8002c84:	f240 1143 	movw	r1, #323	; 0x143
 8002c88:	489f      	ldr	r0, [pc, #636]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002c8a:	f7ff fbfe 	bl	800248a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <HAL_ADC_Init+0x6e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9e:	d00e      	beq.n	8002cbe <HAL_ADC_Init+0x6e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca8:	d009      	beq.n	8002cbe <HAL_ADC_Init+0x6e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_Init+0x6e>
 8002cb4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002cb8:	4893      	ldr	r0, [pc, #588]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002cba:	f7ff fbe6 	bl	800248a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d013      	beq.n	8002cee <HAL_ADC_Init+0x9e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cce:	d00e      	beq.n	8002cee <HAL_ADC_Init+0x9e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cd8:	d009      	beq.n	8002cee <HAL_ADC_Init+0x9e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Init+0x9e>
 8002ce4:	f240 1145 	movw	r1, #325	; 0x145
 8002ce8:	4887      	ldr	r0, [pc, #540]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002cea:	f7ff fbce 	bl	800248a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_ADC_Init+0xb8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_Init+0xb8>
 8002cfe:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002d02:	4881      	ldr	r0, [pc, #516]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002d04:	f7ff fbc1 	bl	800248a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e1b      	ldrb	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_ADC_Init+0xd2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e1b      	ldrb	r3, [r3, #24]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d004      	beq.n	8002d22 <HAL_ADC_Init+0xd2>
 8002d18:	f240 1147 	movw	r1, #327	; 0x147
 8002d1c:	487a      	ldr	r0, [pc, #488]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002d1e:	f7ff fbb4 	bl	800248a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d054      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d32:	d04f      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d3c:	d04a      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d46:	d045      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d50:	d040      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002d5a:	d03b      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d64:	d036      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002d6e:	d031      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d78:	d02c      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002d82:	d027      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002d8c:	d022      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002d96:	d01d      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002da0:	d018      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002daa:	d013      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002db4:	d00e      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002dbe:	d009      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_ADC_Init+0x2bc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
 8002dca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002dce:	484e      	ldr	r0, [pc, #312]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002dd0:	f7ff fb5b 	bl	800248a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_ADC_Init+0x1a0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_Init+0x1a0>
 8002de6:	f240 1149 	movw	r1, #329	; 0x149
 8002dea:	4847      	ldr	r0, [pc, #284]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002dec:	f7ff fb4d 	bl	800248a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_ADC_Init+0x1b0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d904      	bls.n	8002e0a <HAL_ADC_Init+0x1ba>
 8002e00:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002e04:	4840      	ldr	r0, [pc, #256]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002e06:	f7ff fb40 	bl	800248a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_ADC_Init+0x1d8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_Init+0x1d8>
 8002e1e:	f240 114b 	movw	r1, #331	; 0x14b
 8002e22:	4839      	ldr	r0, [pc, #228]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002e24:	f7ff fb31 	bl	800248a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d00c      	beq.n	8002e4a <HAL_ADC_Init+0x1fa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_ADC_Init+0x1fa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d004      	beq.n	8002e4a <HAL_ADC_Init+0x1fa>
 8002e40:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002e44:	4830      	ldr	r0, [pc, #192]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002e46:	f7ff fb20 	bl	800248a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_ADC_Init+0x218>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_Init+0x218>
 8002e5e:	f240 114d 	movw	r1, #333	; 0x14d
 8002e62:	4829      	ldr	r0, [pc, #164]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002e64:	f7ff fb11 	bl	800248a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_ADC_Init+0x2bc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d017      	beq.n	8002ea2 <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_ADC_Init+0x252>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e82:	d00e      	beq.n	8002ea2 <HAL_ADC_Init+0x252>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d009      	beq.n	8002ea2 <HAL_ADC_Init+0x252>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e96:	d004      	beq.n	8002ea2 <HAL_ADC_Init+0x252>
 8002e98:	f240 1151 	movw	r1, #337	; 0x151
 8002e9c:	481a      	ldr	r0, [pc, #104]	; (8002f08 <HAL_ADC_Init+0x2b8>)
 8002e9e:	f7ff faf4 	bl	800248a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_ADC_Init+0x26e>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe f8ce 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d122      	bne.n	8002f10 <HAL_ADC_Init+0x2c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed2:	f023 0302 	bic.w	r3, r3, #2
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 faa4 	bl	800342c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8002efa:	e00b      	b.n	8002f14 <HAL_ADC_Init+0x2c4>
 8002efc:	40012000 	.word	0x40012000
 8002f00:	40012100 	.word	0x40012100
 8002f04:	40012200 	.word	0x40012200
 8002f08:	080138f8 	.word	0x080138f8
 8002f0c:	0f000001 	.word	0x0f000001
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	7e1b      	ldrb	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_ADC_Start_DMA+0x2a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	7e1b      	ldrb	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_Start_DMA+0x2a>
 8002f48:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8002f4c:	4879      	ldr	r0, [pc, #484]	; (8003134 <HAL_ADC_Start_DMA+0x20c>)
 8002f4e:	f7ff fa9c 	bl	800248a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d013      	beq.n	8002f82 <HAL_ADC_Start_DMA+0x5a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f62:	d00e      	beq.n	8002f82 <HAL_ADC_Start_DMA+0x5a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d009      	beq.n	8002f82 <HAL_ADC_Start_DMA+0x5a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_Start_DMA+0x5a>
 8002f78:	f240 5141 	movw	r1, #1345	; 0x541
 8002f7c:	486d      	ldr	r0, [pc, #436]	; (8003134 <HAL_ADC_Start_DMA+0x20c>)
 8002f7e:	f7ff fa84 	bl	800248a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_Start_DMA+0x68>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e0cc      	b.n	800312a <HAL_ADC_Start_DMA+0x202>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d018      	beq.n	8002fd8 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb6:	4b60      	ldr	r3, [pc, #384]	; (8003138 <HAL_ADC_Start_DMA+0x210>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a60      	ldr	r2, [pc, #384]	; (800313c <HAL_ADC_Start_DMA+0x214>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9a      	lsrs	r2, r3, #18
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fca:	e002      	b.n	8002fd2 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	f040 80a0 	bne.w	8003128 <HAL_ADC_Start_DMA+0x200>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_ADC_Start_DMA+0xf2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d106      	bne.n	8003036 <HAL_ADC_Start_DMA+0x10e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f023 0206 	bic.w	r2, r3, #6
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
 8003034:	e002      	b.n	800303c <HAL_ADC_Start_DMA+0x114>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_ADC_Start_DMA+0x218>)
 8003046:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_ADC_Start_DMA+0x21c>)
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_ADC_Start_DMA+0x220>)
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_ADC_Start_DMA+0x224>)
 800305e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003068:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003078:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003088:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	334c      	adds	r3, #76	; 0x4c
 8003094:	4619      	mov	r1, r3
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f000 feaf 	bl	8003dfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12a      	bne.n	8003100 <HAL_ADC_Start_DMA+0x1d8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_ADC_Start_DMA+0x228>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d015      	beq.n	80030e0 <HAL_ADC_Start_DMA+0x1b8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_ADC_Start_DMA+0x22c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_Start_DMA+0x1a2>
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_ADC_Start_DMA+0x218>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_ADC_Start_DMA+0x1b8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_ADC_Start_DMA+0x230>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d129      	bne.n	8003128 <HAL_ADC_Start_DMA+0x200>
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_ADC_Start_DMA+0x218>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d823      	bhi.n	8003128 <HAL_ADC_Start_DMA+0x200>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11c      	bne.n	8003128 <HAL_ADC_Start_DMA+0x200>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	e013      	b.n	8003128 <HAL_ADC_Start_DMA+0x200>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_ADC_Start_DMA+0x228>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10e      	bne.n	8003128 <HAL_ADC_Start_DMA+0x200>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_ADC_Start_DMA+0x200>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003126:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	080138f8 	.word	0x080138f8
 8003138:	20000064 	.word	0x20000064
 800313c:	431bde83 	.word	0x431bde83
 8003140:	40012300 	.word	0x40012300
 8003144:	08003641 	.word	0x08003641
 8003148:	080036fb 	.word	0x080036fb
 800314c:	08003717 	.word	0x08003717
 8003150:	40012000 	.word	0x40012000
 8003154:	40012100 	.word	0x40012100
 8003158:	40012200 	.word	0x40012200

0800315c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b12      	cmp	r3, #18
 8003184:	d904      	bls.n	8003190 <HAL_ADC_ConfigChannel+0x20>
 8003186:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 800318a:	489b      	ldr	r0, [pc, #620]	; (80033f8 <HAL_ADC_ConfigChannel+0x288>)
 800318c:	f7ff f97d 	bl	800248a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0x30>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d904      	bls.n	80031aa <HAL_ADC_ConfigChannel+0x3a>
 80031a0:	f240 6159 	movw	r1, #1625	; 0x659
 80031a4:	4894      	ldr	r0, [pc, #592]	; (80033f8 <HAL_ADC_ConfigChannel+0x288>)
 80031a6:	f7ff f970 	bl	800248a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d020      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d01c      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d018      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d014      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d010      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d00c      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d008      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d004      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x84>
 80031ea:	f240 615a 	movw	r1, #1626	; 0x65a
 80031ee:	4882      	ldr	r0, [pc, #520]	; (80033f8 <HAL_ADC_ConfigChannel+0x288>)
 80031f0:	f7ff f94b 	bl	800248a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x92>
 80031fe:	2302      	movs	r3, #2
 8003200:	e10f      	b.n	8003422 <HAL_ADC_ConfigChannel+0x2b2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b09      	cmp	r3, #9
 8003210:	d925      	bls.n	800325e <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	3b1e      	subs	r3, #30
 8003228:	2207      	movs	r2, #7
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	4603      	mov	r3, r0
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4403      	add	r3, r0
 8003250:	3b1e      	subs	r3, #30
 8003252:	409a      	lsls	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e022      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	2207      	movs	r2, #7
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43da      	mvns	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	400a      	ands	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6919      	ldr	r1, [r3, #16]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	4603      	mov	r3, r0
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4403      	add	r3, r0
 800329a:	409a      	lsls	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d824      	bhi.n	80032f6 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b05      	subs	r3, #5
 80032be:	221f      	movs	r2, #31
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43da      	mvns	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	400a      	ands	r2, r1
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b05      	subs	r3, #5
 80032e8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	635a      	str	r2, [r3, #52]	; 0x34
 80032f4:	e04c      	b.n	8003390 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d824      	bhi.n	8003348 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b23      	subs	r3, #35	; 0x23
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
 8003346:	e023      	b.n	8003390 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b41      	subs	r3, #65	; 0x41
 800335a:	221f      	movs	r2, #31
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43da      	mvns	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	400a      	ands	r2, r1
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	; 0x41
 8003384:	fa00 f203 	lsl.w	r2, r0, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_ADC_ConfigChannel+0x28c>)
 8003392:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_ADC_ConfigChannel+0x290>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d109      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x242>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d105      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x242>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_ADC_ConfigChannel+0x290>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d12d      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x2a8>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d003      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x25c>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d125      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x2a8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d11b      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x2a8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_ADC_ConfigChannel+0x294>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_ADC_ConfigChannel+0x298>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9a      	lsrs	r2, r3, #18
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f6:	e00c      	b.n	8003412 <HAL_ADC_ConfigChannel+0x2a2>
 80033f8:	080138f8 	.word	0x080138f8
 80033fc:	40012300 	.word	0x40012300
 8003400:	40012000 	.word	0x40012000
 8003404:	20000064 	.word	0x20000064
 8003408:	431bde83 	.word	0x431bde83
      {
        counter--;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3b01      	subs	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f9      	bne.n	800340c <HAL_ADC_ConfigChannel+0x29c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003434:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <ADC_Init+0x208>)
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <ADC_Init+0x20c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6899      	ldr	r1, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	e00f      	b.n	800352a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0202 	bic.w	r2, r2, #2
 8003538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e1b      	ldrb	r3, [r3, #24]
 8003544:	005a      	lsls	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <ADC_Init+0x13c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b08      	cmp	r3, #8
 8003566:	d904      	bls.n	8003572 <ADC_Init+0x146>
 8003568:	f240 7175 	movw	r1, #1909	; 0x775
 800356c:	4833      	ldr	r0, [pc, #204]	; (800363c <ADC_Init+0x210>)
 800356e:	f7fe ff8c 	bl	800248a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003590:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	3b01      	subs	r3, #1
 800359e:	035a      	lsls	r2, r3, #13
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	e007      	b.n	80035ba <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	051a      	lsls	r2, r3, #20
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035fc:	025a      	lsls	r2, r3, #9
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	029a      	lsls	r2, r3, #10
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40012300 	.word	0x40012300
 8003638:	0f000001 	.word	0x0f000001
 800363c:	080138f8 	.word	0x080138f8

08003640 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13c      	bne.n	80036d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d12b      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d127      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003694:	2b00      	cmp	r3, #0
 8003696:	d119      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0220 	bic.w	r2, r2, #32
 80036a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7fe fe7b 	bl	80023c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036d2:	e00e      	b.n	80036f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff fd3b 	bl	800315c <HAL_ADC_ErrorCallback>
}
 80036e6:	e004      	b.n	80036f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7fe fe43 	bl	8002394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fd10 	bl	800315c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0b      	blt.n	80037d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4907      	ldr	r1, [pc, #28]	; (80037e0 <__NVIC_EnableIRQ+0x38>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100

080037e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db0a      	blt.n	800380e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	490c      	ldr	r1, [pc, #48]	; (8003830 <__NVIC_SetPriority+0x4c>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	440b      	add	r3, r1
 8003808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800380c:	e00a      	b.n	8003824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4908      	ldr	r1, [pc, #32]	; (8003834 <__NVIC_SetPriority+0x50>)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	3b04      	subs	r3, #4
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	440b      	add	r3, r1
 8003822:	761a      	strb	r2, [r3, #24]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000e100 	.word	0xe000e100
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f1c3 0307 	rsb	r3, r3, #7
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf28      	it	cs
 8003856:	2304      	movcs	r3, #4
 8003858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3304      	adds	r3, #4
 800385e:	2b06      	cmp	r3, #6
 8003860:	d902      	bls.n	8003868 <NVIC_EncodePriority+0x30>
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3b03      	subs	r3, #3
 8003866:	e000      	b.n	800386a <NVIC_EncodePriority+0x32>
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	43d9      	mvns	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	4313      	orrs	r3, r2
         );
}
 8003892:	4618      	mov	r0, r3
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c4:	f7ff ff8e 	bl	80037e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d00f      	beq.n	8003912 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d00c      	beq.n	8003912 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d009      	beq.n	8003912 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d006      	beq.n	8003912 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d003      	beq.n	8003912 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800390a:	2192      	movs	r1, #146	; 0x92
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800390e:	f7fe fdbc 	bl	800248a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff16 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	08013930 	.word	0x08013930

08003924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d903      	bls.n	8003944 <HAL_NVIC_SetPriority+0x20>
 800393c:	21aa      	movs	r1, #170	; 0xaa
 800393e:	480e      	ldr	r0, [pc, #56]	; (8003978 <HAL_NVIC_SetPriority+0x54>)
 8003940:	f7fe fda3 	bl	800248a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d903      	bls.n	8003952 <HAL_NVIC_SetPriority+0x2e>
 800394a:	21ab      	movs	r1, #171	; 0xab
 800394c:	480a      	ldr	r0, [pc, #40]	; (8003978 <HAL_NVIC_SetPriority+0x54>)
 800394e:	f7fe fd9c 	bl	800248a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003952:	f7ff ff1b 	bl	800378c <__NVIC_GetPriorityGrouping>
 8003956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	6978      	ldr	r0, [r7, #20]
 800395e:	f7ff ff6b 	bl	8003838 <NVIC_EncodePriority>
 8003962:	4602      	mov	r2, r0
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff3a 	bl	80037e4 <__NVIC_SetPriority>
}
 8003970:	bf00      	nop
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	08013930 	.word	0x08013930

0800397c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da03      	bge.n	8003996 <HAL_NVIC_EnableIRQ+0x1a>
 800398e:	21be      	movs	r1, #190	; 0xbe
 8003990:	4805      	ldr	r0, [pc, #20]	; (80039a8 <HAL_NVIC_EnableIRQ+0x2c>)
 8003992:	f7fe fd7a 	bl	800248a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff04 	bl	80037a8 <__NVIC_EnableIRQ>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08013930 	.word	0x08013930

080039ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff73 	bl	80038a0 <SysTick_Config>
 80039ba:	4603      	mov	r3, r0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff f910 	bl	8002bf4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e204      	b.n	8003dea <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a97      	ldr	r2, [pc, #604]	; (8003c44 <HAL_DMA_Init+0x280>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04e      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a96      	ldr	r2, [pc, #600]	; (8003c48 <HAL_DMA_Init+0x284>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d049      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a94      	ldr	r2, [pc, #592]	; (8003c4c <HAL_DMA_Init+0x288>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d044      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a93      	ldr	r2, [pc, #588]	; (8003c50 <HAL_DMA_Init+0x28c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03f      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a91      	ldr	r2, [pc, #580]	; (8003c54 <HAL_DMA_Init+0x290>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03a      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a90      	ldr	r2, [pc, #576]	; (8003c58 <HAL_DMA_Init+0x294>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d035      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a8e      	ldr	r2, [pc, #568]	; (8003c5c <HAL_DMA_Init+0x298>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d030      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a8d      	ldr	r2, [pc, #564]	; (8003c60 <HAL_DMA_Init+0x29c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02b      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8b      	ldr	r2, [pc, #556]	; (8003c64 <HAL_DMA_Init+0x2a0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d026      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_DMA_Init+0x2a4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d021      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a88      	ldr	r2, [pc, #544]	; (8003c6c <HAL_DMA_Init+0x2a8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01c      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_DMA_Init+0x2ac>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d017      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a85      	ldr	r2, [pc, #532]	; (8003c74 <HAL_DMA_Init+0x2b0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d012      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a84      	ldr	r2, [pc, #528]	; (8003c78 <HAL_DMA_Init+0x2b4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00d      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a82      	ldr	r2, [pc, #520]	; (8003c7c <HAL_DMA_Init+0x2b8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d008      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <HAL_DMA_Init+0x2bc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <HAL_DMA_Init+0xc4>
 8003a80:	21b8      	movs	r1, #184	; 0xb8
 8003a82:	4880      	ldr	r0, [pc, #512]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003a84:	f7fe fd01 	bl	800248a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d026      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a98:	d021      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa2:	d01c      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003aac:	d017      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab6:	d012      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003ac0:	d00d      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003ad4:	d003      	beq.n	8003ade <HAL_DMA_Init+0x11a>
 8003ad6:	21b9      	movs	r1, #185	; 0xb9
 8003ad8:	486a      	ldr	r0, [pc, #424]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003ada:	f7fe fcd6 	bl	800248a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_DMA_Init+0x13a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d007      	beq.n	8003afe <HAL_DMA_Init+0x13a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b80      	cmp	r3, #128	; 0x80
 8003af4:	d003      	beq.n	8003afe <HAL_DMA_Init+0x13a>
 8003af6:	21ba      	movs	r1, #186	; 0xba
 8003af8:	4862      	ldr	r0, [pc, #392]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003afa:	f7fe fcc6 	bl	800248a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b06:	d007      	beq.n	8003b18 <HAL_DMA_Init+0x154>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_Init+0x154>
 8003b10:	21bb      	movs	r1, #187	; 0xbb
 8003b12:	485c      	ldr	r0, [pc, #368]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003b14:	f7fe fcb9 	bl	800248a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_Init+0x16e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_DMA_Init+0x16e>
 8003b2a:	21bc      	movs	r1, #188	; 0xbc
 8003b2c:	4855      	ldr	r0, [pc, #340]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003b2e:	f7fe fcac 	bl	800248a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <HAL_DMA_Init+0x192>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d008      	beq.n	8003b56 <HAL_DMA_Init+0x192>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d003      	beq.n	8003b56 <HAL_DMA_Init+0x192>
 8003b4e:	21bd      	movs	r1, #189	; 0xbd
 8003b50:	484c      	ldr	r0, [pc, #304]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003b52:	f7fe fc9a 	bl	800248a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_DMA_Init+0x1b6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Init+0x1b6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b70:	d003      	beq.n	8003b7a <HAL_DMA_Init+0x1b6>
 8003b72:	21be      	movs	r1, #190	; 0xbe
 8003b74:	4843      	ldr	r0, [pc, #268]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003b76:	f7fe fc88 	bl	800248a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <HAL_DMA_Init+0x1d8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d007      	beq.n	8003b9c <HAL_DMA_Init+0x1d8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA_Init+0x1d8>
 8003b94:	21bf      	movs	r1, #191	; 0xbf
 8003b96:	483b      	ldr	r0, [pc, #236]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003b98:	f7fe fc77 	bl	800248a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_DMA_Init+0x206>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d00d      	beq.n	8003bca <HAL_DMA_Init+0x206>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb6:	d008      	beq.n	8003bca <HAL_DMA_Init+0x206>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc0:	d003      	beq.n	8003bca <HAL_DMA_Init+0x206>
 8003bc2:	21c0      	movs	r1, #192	; 0xc0
 8003bc4:	482f      	ldr	r0, [pc, #188]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003bc6:	f7fe fc60 	bl	800248a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_Init+0x21e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_DMA_Init+0x21e>
 8003bda:	21c1      	movs	r1, #193	; 0xc1
 8003bdc:	4829      	ldr	r0, [pc, #164]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003bde:	f7fe fc54 	bl	800248a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d065      	beq.n	8003cb6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00f      	beq.n	8003c12 <HAL_DMA_Init+0x24e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d00b      	beq.n	8003c12 <HAL_DMA_Init+0x24e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Init+0x24e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA_Init+0x24e>
 8003c0a:	21c6      	movs	r1, #198	; 0xc6
 8003c0c:	481d      	ldr	r0, [pc, #116]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003c0e:	f7fe fc3c 	bl	800248a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d036      	beq.n	8003c88 <HAL_DMA_Init+0x2c4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_Init+0x2c4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d02c      	beq.n	8003c88 <HAL_DMA_Init+0x2c4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c36:	d027      	beq.n	8003c88 <HAL_DMA_Init+0x2c4>
 8003c38:	21c7      	movs	r1, #199	; 0xc7
 8003c3a:	4812      	ldr	r0, [pc, #72]	; (8003c84 <HAL_DMA_Init+0x2c0>)
 8003c3c:	f7fe fc25 	bl	800248a <assert_failed>
 8003c40:	e022      	b.n	8003c88 <HAL_DMA_Init+0x2c4>
 8003c42:	bf00      	nop
 8003c44:	40026010 	.word	0x40026010
 8003c48:	40026028 	.word	0x40026028
 8003c4c:	40026040 	.word	0x40026040
 8003c50:	40026058 	.word	0x40026058
 8003c54:	40026070 	.word	0x40026070
 8003c58:	40026088 	.word	0x40026088
 8003c5c:	400260a0 	.word	0x400260a0
 8003c60:	400260b8 	.word	0x400260b8
 8003c64:	40026410 	.word	0x40026410
 8003c68:	40026428 	.word	0x40026428
 8003c6c:	40026440 	.word	0x40026440
 8003c70:	40026458 	.word	0x40026458
 8003c74:	40026470 	.word	0x40026470
 8003c78:	40026488 	.word	0x40026488
 8003c7c:	400264a0 	.word	0x400264a0
 8003c80:	400264b8 	.word	0x400264b8
 8003c84:	0801396c 	.word	0x0801396c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_Init+0x2f2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c98:	d00d      	beq.n	8003cb6 <HAL_DMA_Init+0x2f2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca2:	d008      	beq.n	8003cb6 <HAL_DMA_Init+0x2f2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cac:	d003      	beq.n	8003cb6 <HAL_DMA_Init+0x2f2>
 8003cae:	21c8      	movs	r1, #200	; 0xc8
 8003cb0:	4850      	ldr	r0, [pc, #320]	; (8003df4 <HAL_DMA_Init+0x430>)
 8003cb2:	f7fe fbea 	bl	800248a <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd6:	e00f      	b.n	8003cf8 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cd8:	f7fe ff8c 	bl	8002bf4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d908      	bls.n	8003cf8 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e078      	b.n	8003dea <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e8      	bne.n	8003cd8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_DMA_Init+0x434>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 0307 	bic.w	r3, r3, #7
 8003d78:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d117      	bne.n	8003dbc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa80 	bl	80042a4 <DMA_CheckFifoParam>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003db8:	2301      	movs	r3, #1
 8003dba:	e016      	b.n	8003dea <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa37 	bl	8004238 <DMA_CalcBaseAndBitshift>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	223f      	movs	r2, #63	; 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0801396c 	.word	0x0801396c
 8003df8:	f010803f 	.word	0xf010803f

08003dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_DMA_Start_IT+0x26>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d304      	bcc.n	8003e2c <HAL_DMA_Start_IT+0x30>
 8003e22:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003e26:	4827      	ldr	r0, [pc, #156]	; (8003ec4 <HAL_DMA_Start_IT+0xc8>)
 8003e28:	f7fe fb2f 	bl	800248a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA_Start_IT+0x3e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e040      	b.n	8003ebc <HAL_DMA_Start_IT+0xc0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12f      	bne.n	8003eae <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f9ba 	bl	80041dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0216 	orr.w	r2, r2, #22
 8003e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e005      	b.n	8003eba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0801396c 	.word	0x0801396c

08003ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ed4:	4b92      	ldr	r3, [pc, #584]	; (8004120 <HAL_DMA_IRQHandler+0x258>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a92      	ldr	r2, [pc, #584]	; (8004124 <HAL_DMA_IRQHandler+0x25c>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0204 	bic.w	r2, r2, #4
 8003f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2208      	movs	r2, #8
 8003f22:	409a      	lsls	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	2201      	movs	r2, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	2201      	movs	r2, #1
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	2204      	movs	r2, #4
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d043      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d03c      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e01f      	b.n	8004038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
 8004008:	e016      	b.n	8004038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0208 	bic.w	r2, r2, #8
 8004026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	2220      	movs	r2, #32
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 808e 	beq.w	8004166 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8086 	beq.w	8004166 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2220      	movs	r2, #32
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b05      	cmp	r3, #5
 8004070:	d136      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0216 	bic.w	r2, r2, #22
 8004080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x1da>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	223f      	movs	r2, #63	; 0x3f
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07d      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
        }
        return;
 80040de:	e078      	b.n	80041d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01c      	beq.n	8004128 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d108      	bne.n	800410e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	2b00      	cmp	r3, #0
 8004102:	d030      	beq.n	8004166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e02b      	b.n	8004166 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d027      	beq.n	8004166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
 800411e:	e022      	b.n	8004166 <HAL_DMA_IRQHandler+0x29e>
 8004120:	20000064 	.word	0x20000064
 8004124:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0210 	bic.w	r2, r2, #16
 8004144:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	2b00      	cmp	r3, #0
 800416c:	d032      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d022      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2205      	movs	r2, #5
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3301      	adds	r3, #1
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d307      	bcc.n	80041ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f2      	bne.n	8004192 <HAL_DMA_IRQHandler+0x2ca>
 80041ac:	e000      	b.n	80041b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e000      	b.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041d2:	bf00      	nop
    }
  }
}
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop

080041dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d108      	bne.n	800421c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800421a:	e007      	b.n	800422c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3b10      	subs	r3, #16
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <DMA_CalcBaseAndBitshift+0x64>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004252:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d909      	bls.n	800427a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58
 8004278:	e007      	b.n	800428a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	aaaaaaab 	.word	0xaaaaaaab
 80042a0:	08013c0c 	.word	0x08013c0c

080042a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d855      	bhi.n	8004370 <DMA_CheckFifoParam+0xcc>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <DMA_CheckFifoParam+0x28>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ef 	.word	0x080042ef
 80042d4:	080042dd 	.word	0x080042dd
 80042d8:	08004371 	.word	0x08004371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d045      	beq.n	8004374 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ec:	e042      	b.n	8004374 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042f6:	d13f      	bne.n	8004378 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e03c      	b.n	8004378 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	d121      	bne.n	800434c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d836      	bhi.n	800437c <DMA_CheckFifoParam+0xd8>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <DMA_CheckFifoParam+0x70>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004325 	.word	0x08004325
 8004318:	0800432b 	.word	0x0800432b
 800431c:	08004325 	.word	0x08004325
 8004320:	0800433d 	.word	0x0800433d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e02f      	b.n	800438a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d024      	beq.n	8004380 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433a:	e021      	b.n	8004380 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004344:	d11e      	bne.n	8004384 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800434a:	e01b      	b.n	8004384 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d902      	bls.n	8004358 <DMA_CheckFifoParam+0xb4>
 8004352:	2b03      	cmp	r3, #3
 8004354:	d003      	beq.n	800435e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004356:	e018      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      break;
 800435c:	e015      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00e      	beq.n	8004388 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
      break;
 800436e:	e00b      	b.n	8004388 <DMA_CheckFifoParam+0xe4>
      break;
 8004370:	bf00      	nop
 8004372:	e00a      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004374:	bf00      	nop
 8004376:	e008      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004378:	bf00      	nop
 800437a:	e006      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 800437c:	bf00      	nop
 800437e:	e004      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004380:	bf00      	nop
 8004382:	e002      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;   
 8004384:	bf00      	nop
 8004386:	e000      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004388:	bf00      	nop
    }
  } 
  
  return status; 
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <HAL_GPIO_Init+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d023      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a40      	ldr	r2, [pc, #256]	; (80044bc <HAL_GPIO_Init+0x124>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <HAL_GPIO_Init+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01b      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <HAL_GPIO_Init+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d017      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <HAL_GPIO_Init+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <HAL_GPIO_Init+0x134>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00f      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <HAL_GPIO_Init+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a3a      	ldr	r2, [pc, #232]	; (80044d4 <HAL_GPIO_Init+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a39      	ldr	r2, [pc, #228]	; (80044d8 <HAL_GPIO_Init+0x140>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x66>
 80043f6:	21b3      	movs	r1, #179	; 0xb3
 80043f8:	4838      	ldr	r0, [pc, #224]	; (80044dc <HAL_GPIO_Init+0x144>)
 80043fa:	f7fe f846 	bl	800248a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_GPIO_Init+0x7c>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x84>
 8004414:	21b4      	movs	r1, #180	; 0xb4
 8004416:	4831      	ldr	r0, [pc, #196]	; (80044dc <HAL_GPIO_Init+0x144>)
 8004418:	f7fe f837 	bl	800248a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d035      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d031      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b11      	cmp	r3, #17
 8004432:	d02d      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d029      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b12      	cmp	r3, #18
 8004442:	d025      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_GPIO_Init+0x148>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d020      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_GPIO_Init+0x14c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d01b      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_GPIO_Init+0x150>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d016      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_GPIO_Init+0x154>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d011      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <HAL_GPIO_Init+0x158>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00c      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <HAL_GPIO_Init+0x15c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0xf8>
 8004488:	21b5      	movs	r1, #181	; 0xb5
 800448a:	4814      	ldr	r0, [pc, #80]	; (80044dc <HAL_GPIO_Init+0x144>)
 800448c:	f7fd fffd 	bl	800248a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_GPIO_Init+0x118>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d007      	beq.n	80044b0 <HAL_GPIO_Init+0x118>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x118>
 80044a8:	21b6      	movs	r1, #182	; 0xb6
 80044aa:	480c      	ldr	r0, [pc, #48]	; (80044dc <HAL_GPIO_Init+0x144>)
 80044ac:	f7fd ffed 	bl	800248a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	e23f      	b.n	8004936 <HAL_GPIO_Init+0x59e>
 80044b6:	bf00      	nop
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40021400 	.word	0x40021400
 80044d0:	40021800 	.word	0x40021800
 80044d4:	40021c00 	.word	0x40021c00
 80044d8:	40022000 	.word	0x40022000
 80044dc:	080139a4 	.word	0x080139a4
 80044e0:	10110000 	.word	0x10110000
 80044e4:	10210000 	.word	0x10210000
 80044e8:	10310000 	.word	0x10310000
 80044ec:	10120000 	.word	0x10120000
 80044f0:	10220000 	.word	0x10220000
 80044f4:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044f8:	2201      	movs	r2, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	f040 820d 	bne.w	8004930 <HAL_GPIO_Init+0x598>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d00b      	beq.n	8004536 <HAL_GPIO_Init+0x19e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d007      	beq.n	8004536 <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800452a:	2b11      	cmp	r3, #17
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b12      	cmp	r3, #18
 8004534:	d144      	bne.n	80045c0 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00f      	beq.n	800455e <HAL_GPIO_Init+0x1c6>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00b      	beq.n	800455e <HAL_GPIO_Init+0x1c6>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x1c6>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x1c6>
 8004556:	21c8      	movs	r1, #200	; 0xc8
 8004558:	489f      	ldr	r0, [pc, #636]	; (80047d8 <HAL_GPIO_Init+0x440>)
 800455a:	f7fd ff96 	bl	800248a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004594:	2201      	movs	r2, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 0201 	and.w	r2, r3, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d004      	beq.n	8004602 <HAL_GPIO_Init+0x26a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b12      	cmp	r3, #18
 80045fe:	f040 80bc 	bne.w	800477a <HAL_GPIO_Init+0x3e2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8093 	beq.w	8004732 <HAL_GPIO_Init+0x39a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b09      	cmp	r3, #9
 8004612:	f000 808e 	beq.w	8004732 <HAL_GPIO_Init+0x39a>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8089 	beq.w	8004732 <HAL_GPIO_Init+0x39a>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8084 	beq.w	8004732 <HAL_GPIO_Init+0x39a>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d07f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d077      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d073      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d06f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d06b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d067      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d063      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b04      	cmp	r3, #4
 8004670:	d05f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d05b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d057      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d053      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b05      	cmp	r3, #5
 8004690:	d04f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b09      	cmp	r3, #9
 8004698:	d04b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d047      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d043      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d03f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b07      	cmp	r3, #7
 80046b8:	d03b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b07      	cmp	r3, #7
 80046c0:	d037      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d033      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d02f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d02b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b09      	cmp	r3, #9
 80046e0:	d027      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d023      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b0a      	cmp	r3, #10
 80046f0:	d01f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d01b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b0b      	cmp	r3, #11
 8004700:	d017      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d013      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d00f      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b0d      	cmp	r3, #13
 8004718:	d00b      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d007      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x39a>
 800472a:	21e0      	movs	r1, #224	; 0xe0
 800472c:	482a      	ldr	r0, [pc, #168]	; (80047d8 <HAL_GPIO_Init+0x440>)
 800472e:	f7fd feac 	bl	800248a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	08da      	lsrs	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3208      	adds	r2, #8
 800473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	2203      	movs	r2, #3
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0203 	and.w	r2, r3, #3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80ba 	beq.w	8004930 <HAL_GPIO_Init+0x598>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_GPIO_Init+0x444>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	4a05      	ldr	r2, [pc, #20]	; (80047dc <HAL_GPIO_Init+0x444>)
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ca:	6453      	str	r3, [r2, #68]	; 0x44
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_GPIO_Init+0x444>)
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_Init+0x448>
 80047d6:	bf00      	nop
 80047d8:	080139a4 	.word	0x080139a4
 80047dc:	40023800 	.word	0x40023800
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e4:	4a58      	ldr	r2, [pc, #352]	; (8004948 <HAL_GPIO_Init+0x5b0>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	220f      	movs	r2, #15
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a50      	ldr	r2, [pc, #320]	; (800494c <HAL_GPIO_Init+0x5b4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02b      	beq.n	8004868 <HAL_GPIO_Init+0x4d0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a4f      	ldr	r2, [pc, #316]	; (8004950 <HAL_GPIO_Init+0x5b8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d025      	beq.n	8004864 <HAL_GPIO_Init+0x4cc>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a4e      	ldr	r2, [pc, #312]	; (8004954 <HAL_GPIO_Init+0x5bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01f      	beq.n	8004860 <HAL_GPIO_Init+0x4c8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <HAL_GPIO_Init+0x5c0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d019      	beq.n	800485c <HAL_GPIO_Init+0x4c4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a4c      	ldr	r2, [pc, #304]	; (800495c <HAL_GPIO_Init+0x5c4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_GPIO_Init+0x4c0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a4b      	ldr	r2, [pc, #300]	; (8004960 <HAL_GPIO_Init+0x5c8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00d      	beq.n	8004854 <HAL_GPIO_Init+0x4bc>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_GPIO_Init+0x5cc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <HAL_GPIO_Init+0x4b8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a49      	ldr	r2, [pc, #292]	; (8004968 <HAL_GPIO_Init+0x5d0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_GPIO_Init+0x4b4>
 8004848:	2307      	movs	r3, #7
 800484a:	e00e      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 800484c:	2308      	movs	r3, #8
 800484e:	e00c      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004850:	2306      	movs	r3, #6
 8004852:	e00a      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004854:	2305      	movs	r3, #5
 8004856:	e008      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004858:	2304      	movs	r3, #4
 800485a:	e006      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 800485c:	2303      	movs	r3, #3
 800485e:	e004      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004860:	2302      	movs	r3, #2
 8004862:	e002      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_GPIO_Init+0x4d2>
 8004868:	2300      	movs	r3, #0
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	f002 0203 	and.w	r2, r2, #3
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	4093      	lsls	r3, r2
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487a:	4933      	ldr	r1, [pc, #204]	; (8004948 <HAL_GPIO_Init+0x5b0>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004888:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_GPIO_Init+0x5d4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x514>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ac:	4a2f      	ldr	r2, [pc, #188]	; (800496c <HAL_GPIO_Init+0x5d4>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048b2:	4b2e      	ldr	r3, [pc, #184]	; (800496c <HAL_GPIO_Init+0x5d4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x53e>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d6:	4a25      	ldr	r2, [pc, #148]	; (800496c <HAL_GPIO_Init+0x5d4>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <HAL_GPIO_Init+0x5d4>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x568>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004900:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_GPIO_Init+0x5d4>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004906:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_GPIO_Init+0x5d4>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x592>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_GPIO_Init+0x5d4>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	f67f addd 	bls.w	80044f8 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 800493e:	bf00      	nop
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40013800 	.word	0x40013800
 800494c:	40020000 	.word	0x40020000
 8004950:	40020400 	.word	0x40020400
 8004954:	40020800 	.word	0x40020800
 8004958:	40020c00 	.word	0x40020c00
 800495c:	40021000 	.word	0x40021000
 8004960:	40021400 	.word	0x40021400
 8004964:	40021800 	.word	0x40021800
 8004968:	40021c00 	.word	0x40021c00
 800496c:	40013c00 	.word	0x40013c00

08004970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
 800497c:	4613      	mov	r3, r2
 800497e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_GPIO_WritePin+0x20>
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <HAL_GPIO_WritePin+0x2a>
 8004990:	f240 119f 	movw	r1, #415	; 0x19f
 8004994:	480e      	ldr	r0, [pc, #56]	; (80049d0 <HAL_GPIO_WritePin+0x60>)
 8004996:	f7fd fd78 	bl	800248a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800499a:	787b      	ldrb	r3, [r7, #1]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_GPIO_WritePin+0x40>
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d004      	beq.n	80049b0 <HAL_GPIO_WritePin+0x40>
 80049a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80049aa:	4809      	ldr	r0, [pc, #36]	; (80049d0 <HAL_GPIO_WritePin+0x60>)
 80049ac:	f7fd fd6d 	bl	800248a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049bc:	e003      	b.n	80049c6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	619a      	str	r2, [r3, #24]
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	080139a4 	.word	0x080139a4

080049d4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d004      	beq.n	80049f0 <HAL_GPIO_TogglePin+0x1c>
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_GPIO_TogglePin+0x26>
 80049f0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80049f4:	480a      	ldr	r0, [pc, #40]	; (8004a20 <HAL_GPIO_TogglePin+0x4c>)
 80049f6:	f7fd fd48 	bl	800248a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	401a      	ands	r2, r3
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d104      	bne.n	8004a12 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	041a      	lsls	r2, r3, #16
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	080139a4 	.word	0x080139a4

08004a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d006      	beq.n	8004a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fc24 	bl	8002290 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40013c00 	.word	0x40013c00

08004a54 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b08f      	sub	sp, #60	; 0x3c
 8004a58:	af0a      	add	r7, sp, #40	; 0x28
 8004a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e062      	b.n	8004b2c <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a6e:	d008      	beq.n	8004a82 <HAL_HCD_Init+0x2e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_HCD_Init+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <HAL_HCD_Init+0x2e>
 8004a7a:	217a      	movs	r1, #122	; 0x7a
 8004a7c:	482e      	ldr	r0, [pc, #184]	; (8004b38 <HAL_HCD_Init+0xe4>)
 8004a7e:	f7fd fd04 	bl	800248a <assert_failed>

  USBx = hhcd->Instance;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_HCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f00c f98d 	bl	8010dbc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_HCD_Init+0x68>
  {
    hhcd->Init.dma_enable = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 fe9f 	bl	8009804 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	687e      	ldr	r6, [r7, #4]
 8004ace:	466d      	mov	r5, sp
 8004ad0:	f106 0410 	add.w	r4, r6, #16
 8004ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ae4:	1d33      	adds	r3, r6, #4
 8004ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	f004 fe19 	bl	8009720 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f004 fe96 	bl	8009826 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	687e      	ldr	r6, [r7, #4]
 8004b02:	466d      	mov	r5, sp
 8004b04:	f106 0410 	add.w	r4, r6, #16
 8004b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b18:	1d33      	adds	r3, r6, #4
 8004b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	f004 ffa9 	bl	8009a74 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b34:	40040000 	.word	0x40040000
 8004b38:	080139e0 	.word	0x080139e0

08004b3c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	af04      	add	r7, sp, #16
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	70fb      	strb	r3, [r7, #3]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70bb      	strb	r3, [r7, #2]
 8004b52:	4613      	mov	r3, r2
 8004b54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_HCD_HC_Init+0x28>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e07f      	b.n	8004c64 <HAL_HCD_HC_Init+0x128>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	440b      	add	r3, r1
 8004b7a:	333d      	adds	r3, #61	; 0x3d
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3338      	adds	r3, #56	; 0x38
 8004b90:	787a      	ldrb	r2, [r7, #1]
 8004b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	440b      	add	r3, r1
 8004ba2:	3340      	adds	r3, #64	; 0x40
 8004ba4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ba6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3339      	adds	r3, #57	; 0x39
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	333f      	adds	r3, #63	; 0x3f
 8004bcc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004bd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	78bb      	ldrb	r3, [r7, #2]
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	b2d8      	uxtb	r0, r3
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	440b      	add	r3, r1
 8004be8:	333a      	adds	r3, #58	; 0x3a
 8004bea:	4602      	mov	r2, r0
 8004bec:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004bee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0a      	bge.n	8004c0c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	440b      	add	r3, r1
 8004c04:	333b      	adds	r3, #59	; 0x3b
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e009      	b.n	8004c20 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	333b      	adds	r3, #59	; 0x3b
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	440b      	add	r3, r1
 8004c2e:	333c      	adds	r3, #60	; 0x3c
 8004c30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c34:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	787c      	ldrb	r4, [r7, #1]
 8004c3c:	78ba      	ldrb	r2, [r7, #2]
 8004c3e:	78f9      	ldrb	r1, [r7, #3]
 8004c40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c42:	9302      	str	r3, [sp, #8]
 8004c44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4623      	mov	r3, r4
 8004c52:	f005 f891 	bl	8009d78 <USB_HC_Init>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}

08004c6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_HCD_HC_Halt+0x1e>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e00f      	b.n	8004caa <HAL_HCD_HC_Halt+0x3e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f005 facd 	bl	800a23a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	70fb      	strb	r3, [r7, #3]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70bb      	strb	r3, [r7, #2]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	440b      	add	r3, r1
 8004cdc:	333b      	adds	r3, #59	; 0x3b
 8004cde:	78ba      	ldrb	r2, [r7, #2]
 8004ce0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	333f      	adds	r3, #63	; 0x3f
 8004cf2:	787a      	ldrb	r2, [r7, #1]
 8004cf4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004cf6:	7c3b      	ldrb	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d114      	bne.n	8004d26 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3342      	adds	r3, #66	; 0x42
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	333d      	adds	r3, #61	; 0x3d
 8004d20:	7f3a      	ldrb	r2, [r7, #28]
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e009      	b.n	8004d3a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	440b      	add	r3, r1
 8004d34:	3342      	adds	r3, #66	; 0x42
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d3a:	787b      	ldrb	r3, [r7, #1]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	f200 80d6 	bhi.w	8004eee <HAL_HCD_HC_SubmitRequest+0x23a>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004ed9 	.word	0x08004ed9
 8004d50:	08004dc5 	.word	0x08004dc5
 8004d54:	08004e4f 	.word	0x08004e4f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d58:	7c3b      	ldrb	r3, [r7, #16]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	f040 80c9 	bne.w	8004ef2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004d60:	78bb      	ldrb	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 80c5 	bne.w	8004ef2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004d68:	8b3b      	ldrh	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3351      	adds	r3, #81	; 0x51
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	440b      	add	r3, r1
 8004d90:	3351      	adds	r3, #81	; 0x51
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	3342      	adds	r3, #66	; 0x42
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004dac:	e0a1      	b.n	8004ef2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	3342      	adds	r3, #66	; 0x42
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	701a      	strb	r2, [r3, #0]
      break;
 8004dc2:	e096      	b.n	8004ef2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004dc4:	78bb      	ldrb	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d120      	bne.n	8004e0c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3351      	adds	r3, #81	; 0x51
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	440b      	add	r3, r1
 8004dee:	3342      	adds	r3, #66	; 0x42
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004df4:	e07e      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	440b      	add	r3, r1
 8004e04:	3342      	adds	r3, #66	; 0x42
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
      break;
 8004e0a:	e073      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	440b      	add	r3, r1
 8004e1a:	3350      	adds	r3, #80	; 0x50
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3342      	adds	r3, #66	; 0x42
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	e05d      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	440b      	add	r3, r1
 8004e46:	3342      	adds	r3, #66	; 0x42
 8004e48:	2202      	movs	r2, #2
 8004e4a:	701a      	strb	r2, [r3, #0]
      break;
 8004e4c:	e052      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e4e:	78bb      	ldrb	r3, [r7, #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d120      	bne.n	8004e96 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	440b      	add	r3, r1
 8004e62:	3351      	adds	r3, #81	; 0x51
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	3342      	adds	r3, #66	; 0x42
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e7e:	e039      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3342      	adds	r3, #66	; 0x42
 8004e90:	2202      	movs	r2, #2
 8004e92:	701a      	strb	r2, [r3, #0]
      break;
 8004e94:	e02e      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	440b      	add	r3, r1
 8004ea4:	3350      	adds	r3, #80	; 0x50
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	440b      	add	r3, r1
 8004eba:	3342      	adds	r3, #66	; 0x42
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
      break;
 8004ec0:	e018      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	440b      	add	r3, r1
 8004ed0:	3342      	adds	r3, #66	; 0x42
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e00d      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3342      	adds	r3, #66	; 0x42
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
      break;
 8004eec:	e002      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004ef2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	3344      	adds	r3, #68	; 0x44
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	8b39      	ldrh	r1, [r7, #24]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4403      	add	r3, r0
 8004f18:	3348      	adds	r3, #72	; 0x48
 8004f1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	440b      	add	r3, r1
 8004f2a:	335c      	adds	r3, #92	; 0x5c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	334c      	adds	r3, #76	; 0x4c
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	3339      	adds	r3, #57	; 0x39
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	335d      	adds	r3, #93	; 0x5d
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	3338      	adds	r3, #56	; 0x38
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	18d1      	adds	r1, r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	f005 f800 	bl	8009f8c <USB_HC_StartXfer>
 8004f8c:	4603      	mov	r3, r0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop

08004f98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 fd1d 	bl	80099ee <USB_GetMode>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 80ef 	bne.w	800519a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f004 fd01 	bl	80099c8 <USB_ReadInterrupts>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80e5 	beq.w	8005198 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f004 fcf8 	bl	80099c8 <USB_ReadInterrupts>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe2:	d104      	bne.n	8004fee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 fce8 	bl	80099c8 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005002:	d104      	bne.n	800500e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800500c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f004 fcd8 	bl	80099c8 <USB_ReadInterrupts>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800501e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005022:	d104      	bne.n	800502e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800502c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f004 fcc8 	bl	80099c8 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d103      	bne.n	800504a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f004 fcba 	bl	80099c8 <USB_ReadInterrupts>
 8005054:	4603      	mov	r3, r0
 8005056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505e:	d115      	bne.n	800508c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005068:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d108      	bne.n	800508c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f00b ff1c 	bl	8010eb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f004 fdb0 	bl	8009bec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f004 fc99 	bl	80099c8 <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800509c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a0:	d102      	bne.n	80050a8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f966 	bl	8006374 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f004 fc8b 	bl	80099c8 <USB_ReadInterrupts>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d106      	bne.n	80050ca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f00b fedf 	bl	8010e80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2208      	movs	r2, #8
 80050c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f004 fc7a 	bl	80099c8 <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050de:	d138      	bne.n	8005152 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 f897 	bl	800a218 <USB_HC_ReadInterrupt>
 80050ea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e025      	b.n	800513e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	d106      	bne.n	800512c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8cf 	bl	80052c8 <HCD_HC_IN_IRQHandler>
 800512a:	e005      	b.n	8005138 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fcfd 	bl	8005b32 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	3301      	adds	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	429a      	cmp	r2, r3
 8005146:	d3d4      	bcc.n	80050f2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f004 fc36 	bl	80099c8 <USB_ReadInterrupts>
 800515c:	4603      	mov	r3, r0
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d101      	bne.n	800516a <HAL_HCD_IRQHandler+0x1d2>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_HCD_IRQHandler+0x1d4>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d014      	beq.n	800519a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0210 	bic.w	r2, r2, #16
 800517e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 f84b 	bl	800621c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0210 	orr.w	r2, r2, #16
 8005194:	619a      	str	r2, [r3, #24]
 8005196:	e000      	b.n	800519a <HAL_HCD_IRQHandler+0x202>
      return;
 8005198:	bf00      	nop
    }
  }
}
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_HCD_Start+0x16>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e013      	b.n	80051de <HAL_HCD_Start+0x3e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 fb0d 	bl	80097e2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 fd70 	bl	8009cb4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_HCD_Stop+0x16>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e00d      	b.n	8005218 <HAL_HCD_Stop+0x32>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f005 f951 	bl	800a4b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f004 fd17 	bl	8009c60 <USB_ResetPort>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	335c      	adds	r3, #92	; 0x5c
 8005258:	781b      	ldrb	r3, [r3, #0]
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	334c      	adds	r3, #76	; 0x4c
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f004 fd59 	bl	8009d54 <USB_GetCurrentFrame>
 80052a2:	4603      	mov	r3, r0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f004 fd34 	bl	8009d26 <USB_GetHostSpeed>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d119      	bne.n	800532c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	2304      	movs	r3, #4
 8005308:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	440a      	add	r2, r1
 8005320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	e0ce      	b.n	80054ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d12c      	bne.n	800539e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	461a      	mov	r2, r3
 8005352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005356:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	335d      	adds	r3, #93	; 0x5d
 8005368:	2207      	movs	r2, #7
 800536a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f004 ff4f 	bl	800a23a <USB_HC_Halt>
 800539c:	e095      	b.n	80054ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d109      	bne.n	80053c8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	461a      	mov	r2, r3
 80053c2:	2320      	movs	r3, #32
 80053c4:	6093      	str	r3, [r2, #8]
 80053c6:	e080      	b.n	80054ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d134      	bne.n	8005448 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	335d      	adds	r3, #93	; 0x5d
 800540e:	2205      	movs	r2, #5
 8005410:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	461a      	mov	r2, r3
 8005420:	2310      	movs	r3, #16
 8005422:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	2308      	movs	r3, #8
 8005434:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f004 fefa 	bl	800a23a <USB_HC_Halt>
 8005446:	e040      	b.n	80054ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d134      	bne.n	80054ca <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	440a      	add	r2, r1
 8005476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fed5 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549c:	461a      	mov	r2, r3
 800549e:	2310      	movs	r3, #16
 80054a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	335d      	adds	r3, #93	; 0x5d
 80054b2:	2208      	movs	r2, #8
 80054b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e0:	d122      	bne.n	8005528 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f004 fe94 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005526:	e300      	b.n	8005b2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	f040 80fd 	bne.w	800573a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	440b      	add	r3, r1
 8005556:	3348      	adds	r3, #72	; 0x48
 8005558:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0159      	lsls	r1, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	440b      	add	r3, r1
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800556c:	1ad1      	subs	r1, r2, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4403      	add	r3, r0
 800557c:	334c      	adds	r3, #76	; 0x4c
 800557e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	440b      	add	r3, r1
 800558e:	335d      	adds	r3, #93	; 0x5d
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	440b      	add	r3, r1
 80055a2:	3358      	adds	r3, #88	; 0x58
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	461a      	mov	r2, r3
 80055b6:	2301      	movs	r3, #1
 80055b8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	333f      	adds	r3, #63	; 0x3f
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	333f      	adds	r3, #63	; 0x3f
 80055e0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d121      	bne.n	800562a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f004 fe12 	bl	800a23a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4413      	add	r3, r2
 800561e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005622:	461a      	mov	r2, r3
 8005624:	2310      	movs	r3, #16
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	e070      	b.n	800570c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	333f      	adds	r3, #63	; 0x3f
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d12a      	bne.n	8005696 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	440a      	add	r2, r1
 8005656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800565e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	440b      	add	r3, r1
 800566e:	335c      	adds	r3, #92	; 0x5c
 8005670:	2201      	movs	r2, #1
 8005672:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	b2d8      	uxtb	r0, r3
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	440b      	add	r3, r1
 8005686:	335c      	adds	r3, #92	; 0x5c
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	4601      	mov	r1, r0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f00b fc20 	bl	8010ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005694:	e03a      	b.n	800570c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	333f      	adds	r3, #63	; 0x3f
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d12f      	bne.n	800570c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	335c      	adds	r3, #92	; 0x5c
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	3350      	adds	r3, #80	; 0x50
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2d8      	uxtb	r0, r3
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3350      	adds	r3, #80	; 0x50
 80056e8:	4602      	mov	r2, r0
 80056ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	b2d8      	uxtb	r0, r3
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	440b      	add	r3, r1
 80056fe:	335c      	adds	r3, #92	; 0x5c
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4601      	mov	r1, r0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f00b fbe4 	bl	8010ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	440b      	add	r3, r1
 800571a:	3350      	adds	r3, #80	; 0x50
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f083 0301 	eor.w	r3, r3, #1
 8005722:	b2d8      	uxtb	r0, r3
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	440b      	add	r3, r1
 8005732:	3350      	adds	r3, #80	; 0x50
 8005734:	4602      	mov	r2, r0
 8005736:	701a      	strb	r2, [r3, #0]
}
 8005738:	e1f7      	b.n	8005b2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	f040 811a 	bne.w	8005986 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	440a      	add	r2, r1
 8005768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576c:	f023 0302 	bic.w	r3, r3, #2
 8005770:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	335d      	adds	r3, #93	; 0x5d
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10a      	bne.n	800579e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	440b      	add	r3, r1
 8005796:	335c      	adds	r3, #92	; 0x5c
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e0d9      	b.n	8005952 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	440b      	add	r3, r1
 80057ac:	335d      	adds	r3, #93	; 0x5d
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b05      	cmp	r3, #5
 80057b2:	d10a      	bne.n	80057ca <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	335c      	adds	r3, #92	; 0x5c
 80057c4:	2205      	movs	r2, #5
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e0c3      	b.n	8005952 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	440b      	add	r3, r1
 80057d8:	335d      	adds	r3, #93	; 0x5d
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d00a      	beq.n	80057f6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	335d      	adds	r3, #93	; 0x5d
 80057f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d156      	bne.n	80058a4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	3358      	adds	r3, #88	; 0x58
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4403      	add	r3, r0
 8005818:	3358      	adds	r3, #88	; 0x58
 800581a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	3358      	adds	r3, #88	; 0x58
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d914      	bls.n	800585c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	3358      	adds	r3, #88	; 0x58
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	335c      	adds	r3, #92	; 0x5c
 8005856:	2204      	movs	r2, #4
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e009      	b.n	8005870 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	335c      	adds	r3, #92	; 0x5c
 800586c:	2202      	movs	r2, #2
 800586e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005886:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800588e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589c:	461a      	mov	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e056      	b.n	8005952 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	335d      	adds	r3, #93	; 0x5d
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d123      	bne.n	8005902 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	335c      	adds	r3, #92	; 0x5c
 80058ca:	2202      	movs	r2, #2
 80058cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e027      	b.n	8005952 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	335d      	adds	r3, #93	; 0x5d
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b07      	cmp	r3, #7
 8005916:	d11c      	bne.n	8005952 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	3358      	adds	r3, #88	; 0x58
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4403      	add	r3, r0
 800593a:	3358      	adds	r3, #88	; 0x58
 800593c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	335c      	adds	r3, #92	; 0x5c
 800594e:	2204      	movs	r2, #4
 8005950:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	461a      	mov	r2, r3
 8005960:	2302      	movs	r3, #2
 8005962:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	b2d8      	uxtb	r0, r3
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	440b      	add	r3, r1
 8005976:	335c      	adds	r3, #92	; 0x5c
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	4601      	mov	r1, r0
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f00b faa8 	bl	8010ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005984:	e0d1      	b.n	8005b2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d13e      	bne.n	8005a1a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	440b      	add	r3, r1
 80059ca:	3358      	adds	r3, #88	; 0x58
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4403      	add	r3, r0
 80059de:	3358      	adds	r3, #88	; 0x58
 80059e0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	335d      	adds	r3, #93	; 0x5d
 80059f2:	2206      	movs	r2, #6
 80059f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f004 fc1a 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	461a      	mov	r2, r3
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	6093      	str	r3, [r2, #8]
}
 8005a18:	e087      	b.n	8005b2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d17c      	bne.n	8005b2a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	440b      	add	r3, r1
 8005a3e:	333f      	adds	r3, #63	; 0x3f
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d122      	bne.n	8005a8c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	440b      	add	r3, r1
 8005a54:	3358      	adds	r3, #88	; 0x58
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f004 fbd8 	bl	800a23a <USB_HC_Halt>
 8005a8a:	e045      	b.n	8005b18 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	440b      	add	r3, r1
 8005a9a:	333f      	adds	r3, #63	; 0x3f
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	440b      	add	r3, r1
 8005ab0:	333f      	adds	r3, #63	; 0x3f
 8005ab2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d12f      	bne.n	8005b18 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3358      	adds	r3, #88	; 0x58
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d121      	bne.n	8005b18 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	440b      	add	r3, r1
 8005ae2:	335d      	adds	r3, #93	; 0x5d
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f043 0302 	orr.w	r3, r3, #2
 8005b06:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f004 fb91 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	461a      	mov	r2, r3
 8005b26:	2310      	movs	r3, #16
 8005b28:	6093      	str	r3, [r2, #8]
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d119      	bne.n	8005b96 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2304      	movs	r3, #4
 8005b72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b94:	e33e      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d141      	bne.n	8005c30 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2320      	movs	r3, #32
 8005bbc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	333d      	adds	r3, #61	; 0x3d
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	f040 831f 	bne.w	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	333d      	adds	r3, #61	; 0x3d
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	335c      	adds	r3, #92	; 0x5c
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f004 fb06 	bl	800a23a <USB_HC_Halt>
}
 8005c2e:	e2f1      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d13f      	bne.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	440b      	add	r3, r1
 8005c54:	335d      	adds	r3, #93	; 0x5d
 8005c56:	2204      	movs	r2, #4
 8005c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	440b      	add	r3, r1
 8005c68:	333d      	adds	r3, #61	; 0x3d
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3358      	adds	r3, #88	; 0x58
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f043 0302 	orr.w	r3, r3, #2
 8005ca0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f004 fac4 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	6093      	str	r3, [r2, #8]
}
 8005cc4:	e2a6      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cdc:	d122      	bne.n	8005d24 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f004 fa96 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d20:	6093      	str	r3, [r2, #8]
}
 8005d22:	e277      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d135      	bne.n	8005da6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	3358      	adds	r3, #88	; 0x58
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f004 fa5e 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	440b      	add	r3, r1
 8005d9e:	335d      	adds	r3, #93	; 0x5d
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
}
 8005da4:	e236      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d12b      	bne.n	8005e14 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2308      	movs	r3, #8
 8005dcc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f004 fa1e 	bl	800a23a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	440b      	add	r3, r1
 8005e0c:	335d      	adds	r3, #93	; 0x5d
 8005e0e:	2205      	movs	r2, #5
 8005e10:	701a      	strb	r2, [r3, #0]
}
 8005e12:	e1ff      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d155      	bne.n	8005ed6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3358      	adds	r3, #88	; 0x58
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	335d      	adds	r3, #93	; 0x5d
 8005e4e:	2203      	movs	r2, #3
 8005e50:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	333d      	adds	r3, #61	; 0x3d
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d114      	bne.n	8005e92 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	333c      	adds	r3, #60	; 0x3c
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	333d      	adds	r3, #61	; 0x3d
 8005e8e:	2201      	movs	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eac:	f043 0302 	orr.w	r3, r3, #2
 8005eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f004 f9bc 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	6093      	str	r3, [r2, #8]
}
 8005ed4:	e19e      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d12b      	bne.n	8005f44 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f004 f98f 	bl	800a23a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	335d      	adds	r3, #93	; 0x5d
 8005f2c:	2206      	movs	r2, #6
 8005f2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	6093      	str	r3, [r2, #8]
}
 8005f42:	e167      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5a:	d135      	bne.n	8005fc8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f004 f957 	bl	800a23a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	461a      	mov	r2, r3
 8005fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	335d      	adds	r3, #93	; 0x5d
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	701a      	strb	r2, [r3, #0]
}
 8005fc6:	e125      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	f040 811a 	bne.w	8006214 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffa:	f023 0302 	bic.w	r3, r3, #2
 8005ffe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	440b      	add	r3, r1
 800600e:	335d      	adds	r3, #93	; 0x5d
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d137      	bne.n	8006086 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	440b      	add	r3, r1
 8006024:	335c      	adds	r3, #92	; 0x5c
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	333f      	adds	r3, #63	; 0x3f
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d00b      	beq.n	8006058 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	333f      	adds	r3, #63	; 0x3f
 8006050:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006052:	2b03      	cmp	r3, #3
 8006054:	f040 80c5 	bne.w	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	440b      	add	r3, r1
 8006066:	3351      	adds	r3, #81	; 0x51
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f083 0301 	eor.w	r3, r3, #1
 800606e:	b2d8      	uxtb	r0, r3
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	3351      	adds	r3, #81	; 0x51
 8006080:	4602      	mov	r2, r0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e0ad      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	440b      	add	r3, r1
 8006094:	335d      	adds	r3, #93	; 0x5d
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d10a      	bne.n	80060b2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	335c      	adds	r3, #92	; 0x5c
 80060ac:	2202      	movs	r2, #2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e097      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	440b      	add	r3, r1
 80060c0:	335d      	adds	r3, #93	; 0x5d
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d10a      	bne.n	80060de <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	440b      	add	r3, r1
 80060d6:	335c      	adds	r3, #92	; 0x5c
 80060d8:	2202      	movs	r2, #2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e081      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	440b      	add	r3, r1
 80060ec:	335d      	adds	r3, #93	; 0x5d
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d10a      	bne.n	800610a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	440b      	add	r3, r1
 8006102:	335c      	adds	r3, #92	; 0x5c
 8006104:	2205      	movs	r2, #5
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e06b      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	335d      	adds	r3, #93	; 0x5d
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d00a      	beq.n	8006136 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	335d      	adds	r3, #93	; 0x5d
 8006130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006132:	2b08      	cmp	r3, #8
 8006134:	d155      	bne.n	80061e2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	440b      	add	r3, r1
 8006144:	3358      	adds	r3, #88	; 0x58
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4403      	add	r3, r0
 8006158:	3358      	adds	r3, #88	; 0x58
 800615a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	440b      	add	r3, r1
 800616a:	3358      	adds	r3, #88	; 0x58
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d914      	bls.n	800619c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	440b      	add	r3, r1
 8006180:	3358      	adds	r3, #88	; 0x58
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	440b      	add	r3, r1
 8006194:	335c      	adds	r3, #92	; 0x5c
 8006196:	2204      	movs	r2, #4
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e009      	b.n	80061b0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	335c      	adds	r3, #92	; 0x5c
 80061ac:	2202      	movs	r2, #2
 80061ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	2302      	movs	r3, #2
 80061f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	b2d8      	uxtb	r0, r3
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	440b      	add	r3, r1
 8006206:	335c      	adds	r3, #92	; 0x5c
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	4601      	mov	r1, r0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f00a fe60 	bl	8010ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	0c5b      	lsrs	r3, r3, #17
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	091b      	lsrs	r3, r3, #4
 800624c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006250:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d003      	beq.n	8006260 <HCD_RXQLVL_IRQHandler+0x44>
 8006258:	2b05      	cmp	r3, #5
 800625a:	f000 8082 	beq.w	8006362 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800625e:	e083      	b.n	8006368 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d07f      	beq.n	8006366 <HCD_RXQLVL_IRQHandler+0x14a>
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	440b      	add	r3, r1
 8006274:	3344      	adds	r3, #68	; 0x44
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d074      	beq.n	8006366 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	440b      	add	r3, r1
 800628e:	3344      	adds	r3, #68	; 0x44
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	b292      	uxth	r2, r2
 8006296:	4619      	mov	r1, r3
 8006298:	f003 fb6d 	bl	8009976 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	440b      	add	r3, r1
 80062aa:	3344      	adds	r3, #68	; 0x44
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	18d1      	adds	r1, r2, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4403      	add	r3, r0
 80062c0:	3344      	adds	r3, #68	; 0x44
 80062c2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	440b      	add	r3, r1
 80062d2:	334c      	adds	r3, #76	; 0x4c
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	18d1      	adds	r1, r2, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4403      	add	r3, r0
 80062e8:	334c      	adds	r3, #76	; 0x4c
 80062ea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HCD_RXQLVL_IRQHandler+0x154>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d031      	beq.n	8006366 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006318:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006320:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	440b      	add	r3, r1
 8006342:	3350      	adds	r3, #80	; 0x50
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2d8      	uxtb	r0, r3
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	440b      	add	r3, r1
 800635a:	3350      	adds	r3, #80	; 0x50
 800635c:	4602      	mov	r2, r0
 800635e:	701a      	strb	r2, [r3, #0]
      break;
 8006360:	e001      	b.n	8006366 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006366:	bf00      	nop
  }
}
 8006368:	bf00      	nop
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	1ff80000 	.word	0x1ff80000

08006374 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d10b      	bne.n	80063c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d102      	bne.n	80063bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f00a fd70 	bl	8010e9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d132      	bne.n	8006434 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d126      	bne.n	800642e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d113      	bne.n	8006410 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80063ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063f2:	d106      	bne.n	8006402 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2102      	movs	r1, #2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f003 fbf6 	bl	8009bec <USB_InitFSLSPClkSel>
 8006400:	e011      	b.n	8006426 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2101      	movs	r1, #1
 8006408:	4618      	mov	r0, r3
 800640a:	f003 fbef 	bl	8009bec <USB_InitFSLSPClkSel>
 800640e:	e00a      	b.n	8006426 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d106      	bne.n	8006426 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641e:	461a      	mov	r2, r3
 8006420:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006424:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f00a fd62 	bl	8010ef0 <HAL_HCD_PortEnabled_Callback>
 800642c:	e002      	b.n	8006434 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f00a fd6c 	bl	8010f0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d103      	bne.n	8006446 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f043 0320 	orr.w	r3, r3, #32
 8006444:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6013      	str	r3, [r2, #0]
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e1b1      	b.n	80067d2 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4aa2      	ldr	r2, [pc, #648]	; (80066fc <HAL_I2C_Init+0x2a0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_I2C_Init+0x3a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4aa0      	ldr	r2, [pc, #640]	; (8006700 <HAL_I2C_Init+0x2a4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_I2C_Init+0x3a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a9f      	ldr	r2, [pc, #636]	; (8006704 <HAL_I2C_Init+0x2a8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_I2C_Init+0x3a>
 800648c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006490:	489d      	ldr	r0, [pc, #628]	; (8006708 <HAL_I2C_Init+0x2ac>)
 8006492:	f7fb fffa 	bl	800248a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_I2C_Init+0x4c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4a9a      	ldr	r2, [pc, #616]	; (800670c <HAL_I2C_Init+0x2b0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d904      	bls.n	80064b2 <HAL_I2C_Init+0x56>
 80064a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80064ac:	4896      	ldr	r0, [pc, #600]	; (8006708 <HAL_I2C_Init+0x2ac>)
 80064ae:	f7fb ffec 	bl	800248a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_I2C_Init+0x72>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064c2:	d004      	beq.n	80064ce <HAL_I2C_Init+0x72>
 80064c4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80064c8:	488f      	ldr	r0, [pc, #572]	; (8006708 <HAL_I2C_Init+0x2ac>)
 80064ca:	f7fb ffde 	bl	800248a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_I2C_Init+0x8c>
 80064de:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80064e2:	4889      	ldr	r0, [pc, #548]	; (8006708 <HAL_I2C_Init+0x2ac>)
 80064e4:	f7fb ffd1 	bl	800248a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f0:	d009      	beq.n	8006506 <HAL_I2C_Init+0xaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064fa:	d004      	beq.n	8006506 <HAL_I2C_Init+0xaa>
 80064fc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006500:	4881      	ldr	r0, [pc, #516]	; (8006708 <HAL_I2C_Init+0x2ac>)
 8006502:	f7fb ffc2 	bl	800248a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <HAL_I2C_Init+0xc4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d004      	beq.n	8006520 <HAL_I2C_Init+0xc4>
 8006516:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800651a:	487b      	ldr	r0, [pc, #492]	; (8006708 <HAL_I2C_Init+0x2ac>)
 800651c:	f7fb ffb5 	bl	800248a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <HAL_I2C_Init+0xda>
 800652c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006530:	4875      	ldr	r0, [pc, #468]	; (8006708 <HAL_I2C_Init+0x2ac>)
 8006532:	f7fb ffaa 	bl	800248a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_I2C_Init+0xf4>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	d004      	beq.n	8006550 <HAL_I2C_Init+0xf4>
 8006546:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800654a:	486f      	ldr	r0, [pc, #444]	; (8006708 <HAL_I2C_Init+0x2ac>)
 800654c:	f7fb ff9d 	bl	800248a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_I2C_Init+0x10e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d004      	beq.n	800656a <HAL_I2C_Init+0x10e>
 8006560:	f240 11c7 	movw	r1, #455	; 0x1c7
 8006564:	4868      	ldr	r0, [pc, #416]	; (8006708 <HAL_I2C_Init+0x2ac>)
 8006566:	f7fb ff90 	bl	800248a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fa ff54 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	; 0x24
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065bc:	f000 fea0 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4a52      	ldr	r2, [pc, #328]	; (8006710 <HAL_I2C_Init+0x2b4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d807      	bhi.n	80065dc <HAL_I2C_Init+0x180>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a51      	ldr	r2, [pc, #324]	; (8006714 <HAL_I2C_Init+0x2b8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	bf94      	ite	ls
 80065d4:	2301      	movls	r3, #1
 80065d6:	2300      	movhi	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e006      	b.n	80065ea <HAL_I2C_Init+0x18e>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a4e      	ldr	r2, [pc, #312]	; (8006718 <HAL_I2C_Init+0x2bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bf94      	ite	ls
 80065e4:	2301      	movls	r3, #1
 80065e6:	2300      	movhi	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0ef      	b.n	80067d2 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a49      	ldr	r2, [pc, #292]	; (800671c <HAL_I2C_Init+0x2c0>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0c9b      	lsrs	r3, r3, #18
 80065fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a3b      	ldr	r2, [pc, #236]	; (8006710 <HAL_I2C_Init+0x2b4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d802      	bhi.n	800662c <HAL_I2C_Init+0x1d0>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3301      	adds	r3, #1
 800662a:	e009      	b.n	8006640 <HAL_I2C_Init+0x1e4>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	4a3a      	ldr	r2, [pc, #232]	; (8006720 <HAL_I2C_Init+0x2c4>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	3301      	adds	r3, #1
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	492d      	ldr	r1, [pc, #180]	; (8006710 <HAL_I2C_Init+0x2b4>)
 800665c:	428b      	cmp	r3, r1
 800665e:	d80d      	bhi.n	800667c <HAL_I2C_Init+0x220>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e59      	subs	r1, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fbb1 f3f3 	udiv	r3, r1, r3
 800666e:	3301      	adds	r3, #1
 8006670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006674:	2b04      	cmp	r3, #4
 8006676:	bf38      	it	cc
 8006678:	2304      	movcc	r3, #4
 800667a:	e063      	b.n	8006744 <HAL_I2C_Init+0x2e8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d111      	bne.n	80066a8 <HAL_I2C_Init+0x24c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1e58      	subs	r0, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6859      	ldr	r1, [r3, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	440b      	add	r3, r1
 8006692:	fbb0 f3f3 	udiv	r3, r0, r3
 8006696:	3301      	adds	r3, #1
 8006698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800669c:	2b00      	cmp	r3, #0
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e012      	b.n	80066ce <HAL_I2C_Init+0x272>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	1e58      	subs	r0, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6859      	ldr	r1, [r3, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	0099      	lsls	r1, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80066be:	3301      	adds	r3, #1
 80066c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_I2C_Init+0x27a>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e036      	b.n	8006744 <HAL_I2C_Init+0x2e8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d122      	bne.n	8006724 <HAL_I2C_Init+0x2c8>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1e58      	subs	r0, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	440b      	add	r3, r1
 80066ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f0:	3301      	adds	r3, #1
 80066f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fa:	e023      	b.n	8006744 <HAL_I2C_Init+0x2e8>
 80066fc:	40005400 	.word	0x40005400
 8006700:	40005800 	.word	0x40005800
 8006704:	40005c00 	.word	0x40005c00
 8006708:	08013a18 	.word	0x08013a18
 800670c:	00061a80 	.word	0x00061a80
 8006710:	000186a0 	.word	0x000186a0
 8006714:	001e847f 	.word	0x001e847f
 8006718:	003d08ff 	.word	0x003d08ff
 800671c:	431bde83 	.word	0x431bde83
 8006720:	10624dd3 	.word	0x10624dd3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1e58      	subs	r0, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6859      	ldr	r1, [r3, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	0099      	lsls	r1, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	fbb0 f3f3 	udiv	r3, r0, r3
 800673a:	3301      	adds	r3, #1
 800673c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	6809      	ldr	r1, [r1, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6911      	ldr	r1, [r2, #16]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68d2      	ldr	r2, [r2, #12]
 800677e:	4311      	orrs	r1, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	430b      	orrs	r3, r1
 8006786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop

080067dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e30d      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d903      	bls.n	80067fe <HAL_RCC_OscConfig+0x22>
 80067f6:	21e8      	movs	r1, #232	; 0xe8
 80067f8:	48a3      	ldr	r0, [pc, #652]	; (8006a88 <HAL_RCC_OscConfig+0x2ac>)
 80067fa:	f7fb fe46 	bl	800248a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8088 	beq.w	800691c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <HAL_RCC_OscConfig+0x54>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d008      	beq.n	8006830 <HAL_RCC_OscConfig+0x54>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006826:	d003      	beq.n	8006830 <HAL_RCC_OscConfig+0x54>
 8006828:	21ed      	movs	r1, #237	; 0xed
 800682a:	4897      	ldr	r0, [pc, #604]	; (8006a88 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	f7fb fe2d 	bl	800248a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006830:	4b96      	ldr	r3, [pc, #600]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	2b04      	cmp	r3, #4
 800683a:	d00c      	beq.n	8006856 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683c:	4b93      	ldr	r3, [pc, #588]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006844:	2b08      	cmp	r3, #8
 8006846:	d112      	bne.n	800686e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006848:	4b90      	ldr	r3, [pc, #576]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006854:	d10b      	bne.n	800686e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006856:	4b8d      	ldr	r3, [pc, #564]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d05b      	beq.n	800691a <HAL_RCC_OscConfig+0x13e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d157      	bne.n	800691a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e2cd      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006876:	d106      	bne.n	8006886 <HAL_RCC_OscConfig+0xaa>
 8006878:	4b84      	ldr	r3, [pc, #528]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a83      	ldr	r2, [pc, #524]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800687e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e01d      	b.n	80068c2 <HAL_RCC_OscConfig+0xe6>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800688e:	d10c      	bne.n	80068aa <HAL_RCC_OscConfig+0xce>
 8006890:	4b7e      	ldr	r3, [pc, #504]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a7d      	ldr	r2, [pc, #500]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b7b      	ldr	r3, [pc, #492]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a7a      	ldr	r2, [pc, #488]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e00b      	b.n	80068c2 <HAL_RCC_OscConfig+0xe6>
 80068aa:	4b78      	ldr	r3, [pc, #480]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a77      	ldr	r2, [pc, #476]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4b75      	ldr	r3, [pc, #468]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a74      	ldr	r2, [pc, #464]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ca:	f7fc f993 	bl	8002bf4 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d2:	f7fc f98f 	bl	8002bf4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b64      	cmp	r3, #100	; 0x64
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e292      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e4:	4b69      	ldr	r3, [pc, #420]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCC_OscConfig+0xf6>
 80068f0:	e014      	b.n	800691c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f2:	f7fc f97f 	bl	8002bf4 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068fa:	f7fc f97b 	bl	8002bf4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b64      	cmp	r3, #100	; 0x64
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e27e      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690c:	4b5f      	ldr	r3, [pc, #380]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x11e>
 8006918:	e000      	b.n	800691c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d079      	beq.n	8006a1c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_RCC_OscConfig+0x166>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d004      	beq.n	8006942 <HAL_RCC_OscConfig+0x166>
 8006938:	f240 111f 	movw	r1, #287	; 0x11f
 800693c:	4852      	ldr	r0, [pc, #328]	; (8006a88 <HAL_RCC_OscConfig+0x2ac>)
 800693e:	f7fb fda4 	bl	800248a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b1f      	cmp	r3, #31
 8006948:	d904      	bls.n	8006954 <HAL_RCC_OscConfig+0x178>
 800694a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800694e:	484e      	ldr	r0, [pc, #312]	; (8006a88 <HAL_RCC_OscConfig+0x2ac>)
 8006950:	f7fb fd9b 	bl	800248a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006954:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006960:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006968:	2b08      	cmp	r3, #8
 800696a:	d11c      	bne.n	80069a6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800696c:	4b47      	ldr	r3, [pc, #284]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d116      	bne.n	80069a6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006978:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_OscConfig+0x1b4>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e23c      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006990:	4b3e      	ldr	r3, [pc, #248]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	493b      	ldr	r1, [pc, #236]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a4:	e03a      	b.n	8006a1c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d020      	beq.n	80069f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069ae:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <HAL_RCC_OscConfig+0x2b4>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b4:	f7fc f91e 	bl	8002bf4 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069bc:	f7fc f91a 	bl	8002bf4 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e21d      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069da:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4928      	ldr	r1, [pc, #160]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]
 80069ee:	e015      	b.n	8006a1c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <HAL_RCC_OscConfig+0x2b4>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f6:	f7fc f8fd 	bl	8002bf4 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069fe:	f7fc f8f9 	bl	8002bf4 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e1fc      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a10:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1f0      	bne.n	80069fe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d046      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_RCC_OscConfig+0x266>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d004      	beq.n	8006a42 <HAL_RCC_OscConfig+0x266>
 8006a38:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006a3c:	4812      	ldr	r0, [pc, #72]	; (8006a88 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	f7fb fd24 	bl	800248a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <HAL_RCC_OscConfig+0x2b8>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a50:	f7fc f8d0 	bl	8002bf4 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a58:	f7fc f8cc 	bl	8002bf4 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1cf      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6a:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <HAL_RCC_OscConfig+0x2b0>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x27c>
 8006a76:	e01e      	b.n	8006ab6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <HAL_RCC_OscConfig+0x2b8>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7e:	f7fc f8b9 	bl	8002bf4 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a84:	e011      	b.n	8006aaa <HAL_RCC_OscConfig+0x2ce>
 8006a86:	bf00      	nop
 8006a88:	08013a50 	.word	0x08013a50
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	42470000 	.word	0x42470000
 8006a94:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a98:	f7fc f8ac 	bl	8002bf4 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1af      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aaa:	4b97      	ldr	r3, [pc, #604]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80a8 	beq.w	8006c14 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00c      	beq.n	8006aea <HAL_RCC_OscConfig+0x30e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d008      	beq.n	8006aea <HAL_RCC_OscConfig+0x30e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b05      	cmp	r3, #5
 8006ade:	d004      	beq.n	8006aea <HAL_RCC_OscConfig+0x30e>
 8006ae0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006ae4:	4889      	ldr	r0, [pc, #548]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006ae6:	f7fb fcd0 	bl	800248a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aea:	4b87      	ldr	r3, [pc, #540]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	4b83      	ldr	r3, [pc, #524]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	4a82      	ldr	r2, [pc, #520]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b04:	6413      	str	r3, [r2, #64]	; 0x40
 8006b06:	4b80      	ldr	r3, [pc, #512]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b16:	4b7e      	ldr	r3, [pc, #504]	; (8006d10 <HAL_RCC_OscConfig+0x534>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d118      	bne.n	8006b54 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCC_OscConfig+0x534>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a7a      	ldr	r2, [pc, #488]	; (8006d10 <HAL_RCC_OscConfig+0x534>)
 8006b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b2e:	f7fc f861 	bl	8002bf4 <HAL_GetTick>
 8006b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b36:	f7fc f85d 	bl	8002bf4 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e160      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b48:	4b71      	ldr	r3, [pc, #452]	; (8006d10 <HAL_RCC_OscConfig+0x534>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0f0      	beq.n	8006b36 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d106      	bne.n	8006b6a <HAL_RCC_OscConfig+0x38e>
 8006b5c:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	4a69      	ldr	r2, [pc, #420]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	6713      	str	r3, [r2, #112]	; 0x70
 8006b68:	e01c      	b.n	8006ba4 <HAL_RCC_OscConfig+0x3c8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCC_OscConfig+0x3b0>
 8006b72:	4b65      	ldr	r3, [pc, #404]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b78:	f043 0304 	orr.w	r3, r3, #4
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7e:	4b62      	ldr	r3, [pc, #392]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a61      	ldr	r2, [pc, #388]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8a:	e00b      	b.n	8006ba4 <HAL_RCC_OscConfig+0x3c8>
 8006b8c:	4b5e      	ldr	r3, [pc, #376]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	4a5d      	ldr	r2, [pc, #372]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b92:	f023 0301 	bic.w	r3, r3, #1
 8006b96:	6713      	str	r3, [r2, #112]	; 0x70
 8006b98:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	4a5a      	ldr	r2, [pc, #360]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006b9e:	f023 0304 	bic.w	r3, r3, #4
 8006ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bac:	f7fc f822 	bl	8002bf4 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb2:	e00a      	b.n	8006bca <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb4:	f7fc f81e 	bl	8002bf4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e11f      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bca:	4b4f      	ldr	r3, [pc, #316]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0ee      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x3d8>
 8006bd6:	e014      	b.n	8006c02 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd8:	f7fc f80c 	bl	8002bf4 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be0:	f7fc f808 	bl	8002bf4 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e109      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf6:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ee      	bne.n	8006be0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d105      	bne.n	8006c14 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c08:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	4a3e      	ldr	r2, [pc, #248]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00c      	beq.n	8006c36 <HAL_RCC_OscConfig+0x45a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d008      	beq.n	8006c36 <HAL_RCC_OscConfig+0x45a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d004      	beq.n	8006c36 <HAL_RCC_OscConfig+0x45a>
 8006c2c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006c30:	4836      	ldr	r0, [pc, #216]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006c32:	f7fb fc2a 	bl	800248a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80e4 	beq.w	8006e08 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c40:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <HAL_RCC_OscConfig+0x52c>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	f000 80ae 	beq.w	8006daa <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	f040 8092 	bne.w	8006d7c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <HAL_RCC_OscConfig+0x498>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c68:	d004      	beq.n	8006c74 <HAL_RCC_OscConfig+0x498>
 8006c6a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006c6e:	4827      	ldr	r0, [pc, #156]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006c70:	f7fb fc0b 	bl	800248a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	2b3f      	cmp	r3, #63	; 0x3f
 8006c7a:	d904      	bls.n	8006c86 <HAL_RCC_OscConfig+0x4aa>
 8006c7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c80:	4822      	ldr	r0, [pc, #136]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006c82:	f7fb fc02 	bl	800248a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b31      	cmp	r3, #49	; 0x31
 8006c8c:	d904      	bls.n	8006c98 <HAL_RCC_OscConfig+0x4bc>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006c96:	d904      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x4c6>
 8006c98:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006c9c:	481b      	ldr	r0, [pc, #108]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006c9e:	f7fb fbf4 	bl	800248a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d010      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4f0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d00c      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4f0>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	2b06      	cmp	r3, #6
 8006cb8:	d008      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4f0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4f0>
 8006cc2:	f240 11db 	movw	r1, #475	; 0x1db
 8006cc6:	4811      	ldr	r0, [pc, #68]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006cc8:	f7fb fbdf 	bl	800248a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d903      	bls.n	8006cdc <HAL_RCC_OscConfig+0x500>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	2b0f      	cmp	r3, #15
 8006cda:	d904      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x50a>
 8006cdc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8006ce0:	480a      	ldr	r0, [pc, #40]	; (8006d0c <HAL_RCC_OscConfig+0x530>)
 8006ce2:	f7fb fbd2 	bl	800248a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <HAL_RCC_OscConfig+0x538>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cec:	f7fb ff82 	bl	8002bf4 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf2:	e011      	b.n	8006d18 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fb ff7e 	bl	8002bf4 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d90a      	bls.n	8006d18 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e081      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
 8006d06:	bf00      	nop
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	08013a50 	.word	0x08013a50
 8006d10:	40007000 	.word	0x40007000
 8006d14:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d18:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <HAL_RCC_OscConfig+0x638>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e7      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	019b      	lsls	r3, r3, #6
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	4932      	ldr	r1, [pc, #200]	; (8006e14 <HAL_RCC_OscConfig+0x638>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d4e:	4b32      	ldr	r3, [pc, #200]	; (8006e18 <HAL_RCC_OscConfig+0x63c>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d54:	f7fb ff4e 	bl	8002bf4 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d5c:	f7fb ff4a 	bl	8002bf4 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e04d      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d6e:	4b29      	ldr	r3, [pc, #164]	; (8006e14 <HAL_RCC_OscConfig+0x638>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x580>
 8006d7a:	e045      	b.n	8006e08 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d7c:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <HAL_RCC_OscConfig+0x63c>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d82:	f7fb ff37 	bl	8002bf4 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fb ff33 	bl	8002bf4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e036      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <HAL_RCC_OscConfig+0x638>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x5ae>
 8006da8:	e02e      	b.n	8006e08 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e029      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <HAL_RCC_OscConfig+0x638>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d11c      	bne.n	8006e04 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d115      	bne.n	8006e04 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dde:	4013      	ands	r3, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10d      	bne.n	8006e04 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800
 8006e18:	42470060 	.word	0x42470060

08006e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e174      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x24>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b0f      	cmp	r3, #15
 8006e3e:	d904      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x2e>
 8006e40:	f240 2151 	movw	r1, #593	; 0x251
 8006e44:	487b      	ldr	r0, [pc, #492]	; (8007034 <HAL_RCC_ClockConfig+0x218>)
 8006e46:	f7fb fb20 	bl	800248a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d016      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d013      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d010      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d00d      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b05      	cmp	r3, #5
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	d007      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	d004      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
 8006e7a:	f240 2152 	movw	r1, #594	; 0x252
 8006e7e:	486d      	ldr	r0, [pc, #436]	; (8007034 <HAL_RCC_ClockConfig+0x218>)
 8006e80:	f7fb fb03 	bl	800248a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e84:	4b6c      	ldr	r3, [pc, #432]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d90c      	bls.n	8006eac <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	4b69      	ldr	r3, [pc, #420]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9a:	4b67      	ldr	r3, [pc, #412]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d001      	beq.n	8006eac <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e136      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d049      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ec4:	4b5d      	ldr	r3, [pc, #372]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a5c      	ldr	r2, [pc, #368]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006edc:	4b57      	ldr	r3, [pc, #348]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	4a56      	ldr	r2, [pc, #344]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d024      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d020      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b90      	cmp	r3, #144	; 0x90
 8006efe:	d01c      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2ba0      	cmp	r3, #160	; 0xa0
 8006f06:	d018      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2bb0      	cmp	r3, #176	; 0xb0
 8006f0e:	d014      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2bc0      	cmp	r3, #192	; 0xc0
 8006f16:	d010      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2bd0      	cmp	r3, #208	; 0xd0
 8006f1e:	d00c      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2be0      	cmp	r3, #224	; 0xe0
 8006f26:	d008      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2bf0      	cmp	r3, #240	; 0xf0
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x11e>
 8006f30:	f240 2175 	movw	r1, #629	; 0x275
 8006f34:	483f      	ldr	r0, [pc, #252]	; (8007034 <HAL_RCC_ClockConfig+0x218>)
 8006f36:	f7fb faa8 	bl	800248a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3a:	4b40      	ldr	r3, [pc, #256]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	493d      	ldr	r1, [pc, #244]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d059      	beq.n	800700c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x166>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d00c      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x166>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d008      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x166>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d004      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x166>
 8006f78:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8006f7c:	482d      	ldr	r0, [pc, #180]	; (8007034 <HAL_RCC_ClockConfig+0x218>)
 8006f7e:	f7fb fa84 	bl	800248a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	4b2c      	ldr	r3, [pc, #176]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d119      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e0bf      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d003      	beq.n	8006faa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d107      	bne.n	8006fba <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e0af      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fba:	4b20      	ldr	r3, [pc, #128]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e0a7      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fca:	4b1c      	ldr	r3, [pc, #112]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 0203 	bic.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4919      	ldr	r1, [pc, #100]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fdc:	f7fb fe0a 	bl	8002bf4 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe2:	e00a      	b.n	8006ffa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe4:	f7fb fe06 	bl	8002bf4 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e08f      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <HAL_RCC_ClockConfig+0x220>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 020c 	and.w	r2, r3, #12
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	429a      	cmp	r2, r3
 800700a:	d1eb      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d212      	bcs.n	8007040 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCC_ClockConfig+0x21c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d007      	beq.n	8007040 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e072      	b.n	800711a <HAL_RCC_ClockConfig+0x2fe>
 8007034:	08013a50 	.word	0x08013a50
 8007038:	40023c00 	.word	0x40023c00
 800703c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d025      	beq.n	8007098 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d018      	beq.n	8007086 <HAL_RCC_ClockConfig+0x26a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705c:	d013      	beq.n	8007086 <HAL_RCC_ClockConfig+0x26a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007066:	d00e      	beq.n	8007086 <HAL_RCC_ClockConfig+0x26a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007070:	d009      	beq.n	8007086 <HAL_RCC_ClockConfig+0x26a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800707a:	d004      	beq.n	8007086 <HAL_RCC_ClockConfig+0x26a>
 800707c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007080:	4828      	ldr	r0, [pc, #160]	; (8007124 <HAL_RCC_ClockConfig+0x308>)
 8007082:	f7fb fa02 	bl	800248a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007086:	4b28      	ldr	r3, [pc, #160]	; (8007128 <HAL_RCC_ClockConfig+0x30c>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4925      	ldr	r1, [pc, #148]	; (8007128 <HAL_RCC_ClockConfig+0x30c>)
 8007094:	4313      	orrs	r3, r2
 8007096:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d026      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d018      	beq.n	80070de <HAL_RCC_ClockConfig+0x2c2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b4:	d013      	beq.n	80070de <HAL_RCC_ClockConfig+0x2c2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070be:	d00e      	beq.n	80070de <HAL_RCC_ClockConfig+0x2c2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80070c8:	d009      	beq.n	80070de <HAL_RCC_ClockConfig+0x2c2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80070d2:	d004      	beq.n	80070de <HAL_RCC_ClockConfig+0x2c2>
 80070d4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80070d8:	4812      	ldr	r0, [pc, #72]	; (8007124 <HAL_RCC_ClockConfig+0x308>)
 80070da:	f7fb f9d6 	bl	800248a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <HAL_RCC_ClockConfig+0x30c>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	490e      	ldr	r1, [pc, #56]	; (8007128 <HAL_RCC_ClockConfig+0x30c>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070f2:	f000 f821 	bl	8007138 <HAL_RCC_GetSysClockFreq>
 80070f6:	4601      	mov	r1, r0
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_RCC_ClockConfig+0x30c>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	4a0a      	ldr	r2, [pc, #40]	; (800712c <HAL_RCC_ClockConfig+0x310>)
 8007104:	5cd3      	ldrb	r3, [r2, r3]
 8007106:	fa21 f303 	lsr.w	r3, r1, r3
 800710a:	4a09      	ldr	r2, [pc, #36]	; (8007130 <HAL_RCC_ClockConfig+0x314>)
 800710c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCC_ClockConfig+0x318>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fb fd2a 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	08013a50 	.word	0x08013a50
 8007128:	40023800 	.word	0x40023800
 800712c:	08013bf4 	.word	0x08013bf4
 8007130:	20000064 	.word	0x20000064
 8007134:	20000068 	.word	0x20000068

08007138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	2300      	movs	r3, #0
 8007148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800714e:	4b63      	ldr	r3, [pc, #396]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b04      	cmp	r3, #4
 8007158:	d007      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0x32>
 800715a:	2b08      	cmp	r3, #8
 800715c:	d008      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x38>
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 80b4 	bne.w	80072cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007164:	4b5e      	ldr	r3, [pc, #376]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007166:	60bb      	str	r3, [r7, #8]
       break;
 8007168:	e0b3      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716a:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800716c:	60bb      	str	r3, [r7, #8]
      break;
 800716e:	e0b0      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007170:	4b5a      	ldr	r3, [pc, #360]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800717a:	4b58      	ldr	r3, [pc, #352]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d04a      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007186:	4b55      	ldr	r3, [pc, #340]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	f04f 0400 	mov.w	r4, #0
 8007190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	ea03 0501 	and.w	r5, r3, r1
 800719c:	ea04 0602 	and.w	r6, r4, r2
 80071a0:	4629      	mov	r1, r5
 80071a2:	4632      	mov	r2, r6
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	0154      	lsls	r4, r2, #5
 80071ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071b2:	014b      	lsls	r3, r1, #5
 80071b4:	4619      	mov	r1, r3
 80071b6:	4622      	mov	r2, r4
 80071b8:	1b49      	subs	r1, r1, r5
 80071ba:	eb62 0206 	sbc.w	r2, r2, r6
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	f04f 0400 	mov.w	r4, #0
 80071c6:	0194      	lsls	r4, r2, #6
 80071c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071cc:	018b      	lsls	r3, r1, #6
 80071ce:	1a5b      	subs	r3, r3, r1
 80071d0:	eb64 0402 	sbc.w	r4, r4, r2
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	00e2      	lsls	r2, r4, #3
 80071de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071e2:	00d9      	lsls	r1, r3, #3
 80071e4:	460b      	mov	r3, r1
 80071e6:	4614      	mov	r4, r2
 80071e8:	195b      	adds	r3, r3, r5
 80071ea:	eb44 0406 	adc.w	r4, r4, r6
 80071ee:	f04f 0100 	mov.w	r1, #0
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	0262      	lsls	r2, r4, #9
 80071f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80071fc:	0259      	lsls	r1, r3, #9
 80071fe:	460b      	mov	r3, r1
 8007200:	4614      	mov	r4, r2
 8007202:	4618      	mov	r0, r3
 8007204:	4621      	mov	r1, r4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f04f 0400 	mov.w	r4, #0
 800720c:	461a      	mov	r2, r3
 800720e:	4623      	mov	r3, r4
 8007210:	f7f9 fd4a 	bl	8000ca8 <__aeabi_uldivmod>
 8007214:	4603      	mov	r3, r0
 8007216:	460c      	mov	r4, r1
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e049      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800721c:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	099b      	lsrs	r3, r3, #6
 8007222:	f04f 0400 	mov.w	r4, #0
 8007226:	f240 11ff 	movw	r1, #511	; 0x1ff
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	ea03 0501 	and.w	r5, r3, r1
 8007232:	ea04 0602 	and.w	r6, r4, r2
 8007236:	4629      	mov	r1, r5
 8007238:	4632      	mov	r2, r6
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	f04f 0400 	mov.w	r4, #0
 8007242:	0154      	lsls	r4, r2, #5
 8007244:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007248:	014b      	lsls	r3, r1, #5
 800724a:	4619      	mov	r1, r3
 800724c:	4622      	mov	r2, r4
 800724e:	1b49      	subs	r1, r1, r5
 8007250:	eb62 0206 	sbc.w	r2, r2, r6
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	0194      	lsls	r4, r2, #6
 800725e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007262:	018b      	lsls	r3, r1, #6
 8007264:	1a5b      	subs	r3, r3, r1
 8007266:	eb64 0402 	sbc.w	r4, r4, r2
 800726a:	f04f 0100 	mov.w	r1, #0
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	00e2      	lsls	r2, r4, #3
 8007274:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007278:	00d9      	lsls	r1, r3, #3
 800727a:	460b      	mov	r3, r1
 800727c:	4614      	mov	r4, r2
 800727e:	195b      	adds	r3, r3, r5
 8007280:	eb44 0406 	adc.w	r4, r4, r6
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	02a2      	lsls	r2, r4, #10
 800728e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007292:	0299      	lsls	r1, r3, #10
 8007294:	460b      	mov	r3, r1
 8007296:	4614      	mov	r4, r2
 8007298:	4618      	mov	r0, r3
 800729a:	4621      	mov	r1, r4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f04f 0400 	mov.w	r4, #0
 80072a2:	461a      	mov	r2, r3
 80072a4:	4623      	mov	r3, r4
 80072a6:	f7f9 fcff 	bl	8000ca8 <__aeabi_uldivmod>
 80072aa:	4603      	mov	r3, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	3301      	adds	r3, #1
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c8:	60bb      	str	r3, [r7, #8]
      break;
 80072ca:	e002      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072ce:	60bb      	str	r3, [r7, #8]
      break;
 80072d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072d2:	68bb      	ldr	r3, [r7, #8]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072dc:	40023800 	.word	0x40023800
 80072e0:	00f42400 	.word	0x00f42400
 80072e4:	007a1200 	.word	0x007a1200

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ec:	4b03      	ldr	r3, [pc, #12]	; (80072fc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000064 	.word	0x20000064

08007300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007304:	f7ff fff0 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007308:	4601      	mov	r1, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0a9b      	lsrs	r3, r3, #10
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4a03      	ldr	r2, [pc, #12]	; (8007324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007316:	5cd3      	ldrb	r3, [r2, r3]
 8007318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	08013c04 	.word	0x08013c04

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b07      	cmp	r3, #7
 8007346:	d904      	bls.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8007348:	f640 11d9 	movw	r1, #2521	; 0x9d9
 800734c:	4899      	ldr	r0, [pc, #612]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800734e:	f7fb f89c 	bl	800248a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007366:	2b00      	cmp	r3, #0
 8007368:	d050      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d903      	bls.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b07      	cmp	r3, #7
 8007378:	d904      	bls.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800737a:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800737e:	488d      	ldr	r0, [pc, #564]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8007380:	f7fb f883 	bl	800248a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b31      	cmp	r3, #49	; 0x31
 800738a:	d904      	bls.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007394:	d904      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007396:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800739a:	4886      	ldr	r0, [pc, #536]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800739c:	f7fb f875 	bl	800248a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073a0:	4b85      	ldr	r3, [pc, #532]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073a6:	f7fb fc25 	bl	8002bf4 <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ac:	e008      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ae:	f7fb fc21 	bl	8002bf4 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e1a0      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073c0:	4b7e      	ldr	r3, [pc, #504]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	019a      	lsls	r2, r3, #6
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	071b      	lsls	r3, r3, #28
 80073d8:	4978      	ldr	r1, [pc, #480]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073e0:	4b75      	ldr	r3, [pc, #468]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073e6:	f7fb fc05 	bl	8002bf4 <HAL_GetTick>
 80073ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ec:	e008      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ee:	f7fb fc01 	bl	8002bf4 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e180      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007400:	4b6e      	ldr	r3, [pc, #440]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8173 	beq.w	8007700 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007422:	f000 80a6 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742e:	f000 80a0 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	4a62      	ldr	r2, [pc, #392]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8007438:	4293      	cmp	r3, r2
 800743a:	f000 809a 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	4a60      	ldr	r2, [pc, #384]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	f000 8094 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4a5e      	ldr	r2, [pc, #376]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007450:	4293      	cmp	r3, r2
 8007452:	f000 808e 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4a5c      	ldr	r2, [pc, #368]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	f000 8088 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4a5a      	ldr	r2, [pc, #360]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	f000 8082 	beq.w	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	4a58      	ldr	r2, [pc, #352]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d07c      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4a56      	ldr	r2, [pc, #344]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d077      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4a55      	ldr	r2, [pc, #340]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d072      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a53      	ldr	r2, [pc, #332]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d06d      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4a52      	ldr	r2, [pc, #328]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d068      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4a50      	ldr	r2, [pc, #320]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d063      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	4a4f      	ldr	r2, [pc, #316]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d05e      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a4d      	ldr	r2, [pc, #308]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d059      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4a4c      	ldr	r2, [pc, #304]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d054      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a4a      	ldr	r2, [pc, #296]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d04f      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4a49      	ldr	r2, [pc, #292]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d04a      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4a47      	ldr	r2, [pc, #284]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d045      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4a46      	ldr	r2, [pc, #280]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d040      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a44      	ldr	r2, [pc, #272]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d03b      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a43      	ldr	r2, [pc, #268]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d036      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a41      	ldr	r2, [pc, #260]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d031      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4a40      	ldr	r2, [pc, #256]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d02c      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a3e      	ldr	r2, [pc, #248]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d027      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	4a3d      	ldr	r2, [pc, #244]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d022      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4a3b      	ldr	r2, [pc, #236]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01d      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	4a3a      	ldr	r2, [pc, #232]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d018      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4a38      	ldr	r2, [pc, #224]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	4a37      	ldr	r2, [pc, #220]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00e      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a35      	ldr	r2, [pc, #212]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d009      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	4a34      	ldr	r2, [pc, #208]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d004      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007568:	f640 2112 	movw	r1, #2578	; 0xa12
 800756c:	4811      	ldr	r0, [pc, #68]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800756e:	f7fa ff8c 	bl	800248a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800757c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007580:	6413      	str	r3, [r2, #64]	; 0x40
 8007582:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800758e:	4b2a      	ldr	r3, [pc, #168]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a29      	ldr	r2, [pc, #164]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007598:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800759a:	f7fb fb2b 	bl	8002bf4 <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075a0:	e04c      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x314>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075a2:	f7fb fb27 	bl	8002bf4 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d945      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0a6      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80075b4:	08013a88 	.word	0x08013a88
 80075b8:	42470068 	.word	0x42470068
 80075bc:	40023800 	.word	0x40023800
 80075c0:	00020300 	.word	0x00020300
 80075c4:	00030300 	.word	0x00030300
 80075c8:	00040300 	.word	0x00040300
 80075cc:	00050300 	.word	0x00050300
 80075d0:	00060300 	.word	0x00060300
 80075d4:	00070300 	.word	0x00070300
 80075d8:	00080300 	.word	0x00080300
 80075dc:	00090300 	.word	0x00090300
 80075e0:	000a0300 	.word	0x000a0300
 80075e4:	000b0300 	.word	0x000b0300
 80075e8:	000c0300 	.word	0x000c0300
 80075ec:	000d0300 	.word	0x000d0300
 80075f0:	000e0300 	.word	0x000e0300
 80075f4:	000f0300 	.word	0x000f0300
 80075f8:	00100300 	.word	0x00100300
 80075fc:	00110300 	.word	0x00110300
 8007600:	00120300 	.word	0x00120300
 8007604:	00130300 	.word	0x00130300
 8007608:	00140300 	.word	0x00140300
 800760c:	00150300 	.word	0x00150300
 8007610:	00160300 	.word	0x00160300
 8007614:	00170300 	.word	0x00170300
 8007618:	00180300 	.word	0x00180300
 800761c:	00190300 	.word	0x00190300
 8007620:	001a0300 	.word	0x001a0300
 8007624:	001b0300 	.word	0x001b0300
 8007628:	001c0300 	.word	0x001c0300
 800762c:	001d0300 	.word	0x001d0300
 8007630:	001e0300 	.word	0x001e0300
 8007634:	001f0300 	.word	0x001f0300
 8007638:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800763c:	4b33      	ldr	r3, [pc, #204]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ac      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007648:	4b31      	ldr	r3, [pc, #196]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007650:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d02f      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d028      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007676:	4b27      	ldr	r3, [pc, #156]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800767c:	4a24      	ldr	r2, [pc, #144]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007682:	4b23      	ldr	r3, [pc, #140]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d114      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800768e:	f7fb fab1 	bl	8002bf4 <HAL_GetTick>
 8007692:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007694:	e00a      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fb faad 	bl	8002bf4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e02a      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0ee      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x36e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c4:	d10d      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80076c6:	4b12      	ldr	r3, [pc, #72]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076da:	490d      	ldr	r1, [pc, #52]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	608b      	str	r3, [r1, #8]
 80076e0:	e005      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076ec:	6093      	str	r3, [r2, #8]
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fa:	4905      	ldr	r1, [pc, #20]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40007000 	.word	0x40007000
 8007710:	40023800 	.word	0x40023800
 8007714:	42470e40 	.word	0x42470e40

08007718 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e0d6      	b.n	80078d8 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d007      	beq.n	8007742 <HAL_RTC_Init+0x2a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_RTC_Init+0x2a>
 800773a:	21ff      	movs	r1, #255	; 0xff
 800773c:	4868      	ldr	r0, [pc, #416]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 800773e:	f7fa fea4 	bl	800248a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b7f      	cmp	r3, #127	; 0x7f
 8007748:	d904      	bls.n	8007754 <HAL_RTC_Init+0x3c>
 800774a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800774e:	4864      	ldr	r0, [pc, #400]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 8007750:	f7fa fe9b 	bl	800248a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775c:	d304      	bcc.n	8007768 <HAL_RTC_Init+0x50>
 800775e:	f240 1101 	movw	r1, #257	; 0x101
 8007762:	485f      	ldr	r0, [pc, #380]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 8007764:	f7fa fe91 	bl	800248a <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d013      	beq.n	8007798 <HAL_RTC_Init+0x80>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007778:	d00e      	beq.n	8007798 <HAL_RTC_Init+0x80>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007782:	d009      	beq.n	8007798 <HAL_RTC_Init+0x80>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800778c:	d004      	beq.n	8007798 <HAL_RTC_Init+0x80>
 800778e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007792:	4853      	ldr	r0, [pc, #332]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 8007794:	f7fa fe79 	bl	800248a <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <HAL_RTC_Init+0x9c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a8:	d004      	beq.n	80077b4 <HAL_RTC_Init+0x9c>
 80077aa:	f240 1103 	movw	r1, #259	; 0x103
 80077ae:	484c      	ldr	r0, [pc, #304]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 80077b0:	f7fa fe6b 	bl	800248a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <HAL_RTC_Init+0xb8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077c4:	d004      	beq.n	80077d0 <HAL_RTC_Init+0xb8>
 80077c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80077ca:	4845      	ldr	r0, [pc, #276]	; (80078e0 <HAL_RTC_Init+0x1c8>)
 80077cc:	f7fa fe5d 	bl	800248a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7f5b      	ldrb	r3, [r3, #29]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fa feb7 	bl	8002554 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	22ca      	movs	r2, #202	; 0xca
 80077f2:	625a      	str	r2, [r3, #36]	; 0x24
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2253      	movs	r2, #83	; 0x53
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fbfd 	bl	8007ffc <RTC_EnterInitMode>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2204      	movs	r2, #4
 8007814:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e05e      	b.n	80078d8 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800782c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6899      	ldr	r1, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68d2      	ldr	r2, [r2, #12]
 8007854:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6919      	ldr	r1, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	041a      	lsls	r2, r3, #16
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007878:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10e      	bne.n	80078a6 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb8f 	bl	8007fac <HAL_RTC_WaitForSynchro>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d008      	beq.n	80078a6 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	22ff      	movs	r2, #255	; 0xff
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e018      	b.n	80078d8 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	22ff      	movs	r2, #255	; 0xff
 80078ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
  }
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08013ac4 	.word	0x08013ac4

080078e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078e4:	b590      	push	{r4, r7, lr}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <HAL_RTC_SetTime+0x26>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d004      	beq.n	800790a <HAL_RTC_SetTime+0x26>
 8007900:	f240 21da 	movw	r1, #730	; 0x2da
 8007904:	48a4      	ldr	r0, [pc, #656]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007906:	f7fa fdc0 	bl	800248a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007912:	d00d      	beq.n	8007930 <HAL_RTC_SetTime+0x4c>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791c:	d008      	beq.n	8007930 <HAL_RTC_SetTime+0x4c>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <HAL_RTC_SetTime+0x4c>
 8007926:	f240 21db 	movw	r1, #731	; 0x2db
 800792a:	489b      	ldr	r0, [pc, #620]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 800792c:	f7fa fdad 	bl	800248a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <HAL_RTC_SetTime+0x68>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007940:	d004      	beq.n	800794c <HAL_RTC_SetTime+0x68>
 8007942:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8007946:	4894      	ldr	r0, [pc, #592]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007948:	f7fa fd9f 	bl	800248a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	7f1b      	ldrb	r3, [r3, #28]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_RTC_SetTime+0x74>
 8007954:	2302      	movs	r3, #2
 8007956:	e12c      	b.n	8007bb2 <HAL_RTC_SetTime+0x2ce>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2202      	movs	r2, #2
 8007962:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d15c      	bne.n	8007a24 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_RTC_SetTime+0xa4>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d904      	bls.n	8007992 <HAL_RTC_SetTime+0xae>
 8007988:	f240 21e7 	movw	r1, #743	; 0x2e7
 800798c:	4882      	ldr	r0, [pc, #520]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 800798e:	f7fa fd7c 	bl	800248a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <HAL_RTC_SetTime+0xe2>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	78db      	ldrb	r3, [r3, #3]
 800799e:	2b40      	cmp	r3, #64	; 0x40
 80079a0:	d011      	beq.n	80079c6 <HAL_RTC_SetTime+0xe2>
 80079a2:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80079a6:	487c      	ldr	r0, [pc, #496]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 80079a8:	f7fa fd6f 	bl	800248a <assert_failed>
 80079ac:	e00b      	b.n	80079c6 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2200      	movs	r2, #0
 80079b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b17      	cmp	r3, #23
 80079ba:	d904      	bls.n	80079c6 <HAL_RTC_SetTime+0xe2>
 80079bc:	f240 21ed 	movw	r1, #749	; 0x2ed
 80079c0:	4875      	ldr	r0, [pc, #468]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 80079c2:	f7fa fd62 	bl	800248a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b3b      	cmp	r3, #59	; 0x3b
 80079cc:	d904      	bls.n	80079d8 <HAL_RTC_SetTime+0xf4>
 80079ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079d2:	4871      	ldr	r0, [pc, #452]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 80079d4:	f7fa fd59 	bl	800248a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	789b      	ldrb	r3, [r3, #2]
 80079dc:	2b3b      	cmp	r3, #59	; 0x3b
 80079de:	d904      	bls.n	80079ea <HAL_RTC_SetTime+0x106>
 80079e0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80079e4:	486c      	ldr	r0, [pc, #432]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 80079e6:	f7fa fd50 	bl	800248a <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fb30 	bl	8008054 <RTC_ByteToBcd2>
 80079f4:	4603      	mov	r3, r0
 80079f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fb29 	bl	8008054 <RTC_ByteToBcd2>
 8007a02:	4603      	mov	r3, r0
 8007a04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a06:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	789b      	ldrb	r3, [r3, #2]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fb21 	bl	8008054 <RTC_ByteToBcd2>
 8007a12:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e062      	b.n	8007aea <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d022      	beq.n	8007a78 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fb2a 	bl	8008090 <RTC_Bcd2ToByte>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <HAL_RTC_SetTime+0x16e>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fb22 	bl	8008090 <RTC_Bcd2ToByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b0c      	cmp	r3, #12
 8007a50:	d904      	bls.n	8007a5c <HAL_RTC_SetTime+0x178>
 8007a52:	f240 21fb 	movw	r1, #763	; 0x2fb
 8007a56:	4850      	ldr	r0, [pc, #320]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007a58:	f7fa fd17 	bl	800248a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	78db      	ldrb	r3, [r3, #3]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d019      	beq.n	8007a98 <HAL_RTC_SetTime+0x1b4>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	2b40      	cmp	r3, #64	; 0x40
 8007a6a:	d015      	beq.n	8007a98 <HAL_RTC_SetTime+0x1b4>
 8007a6c:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8007a70:	4849      	ldr	r0, [pc, #292]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007a72:	f7fa fd0a 	bl	800248a <assert_failed>
 8007a76:	e00f      	b.n	8007a98 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fb04 	bl	8008090 <RTC_Bcd2ToByte>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b17      	cmp	r3, #23
 8007a8c:	d904      	bls.n	8007a98 <HAL_RTC_SetTime+0x1b4>
 8007a8e:	f240 3101 	movw	r1, #769	; 0x301
 8007a92:	4841      	ldr	r0, [pc, #260]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007a94:	f7fa fcf9 	bl	800248a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 faf7 	bl	8008090 <RTC_Bcd2ToByte>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b3b      	cmp	r3, #59	; 0x3b
 8007aa6:	d904      	bls.n	8007ab2 <HAL_RTC_SetTime+0x1ce>
 8007aa8:	f240 3103 	movw	r1, #771	; 0x303
 8007aac:	483a      	ldr	r0, [pc, #232]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007aae:	f7fa fcec 	bl	800248a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	789b      	ldrb	r3, [r3, #2]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 faea 	bl	8008090 <RTC_Bcd2ToByte>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b3b      	cmp	r3, #59	; 0x3b
 8007ac0:	d904      	bls.n	8007acc <HAL_RTC_SetTime+0x1e8>
 8007ac2:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007ac6:	4834      	ldr	r0, [pc, #208]	; (8007b98 <HAL_RTC_SetTime+0x2b4>)
 8007ac8:	f7fa fcdf 	bl	800248a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ad8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ade:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	22ca      	movs	r2, #202	; 0xca
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2253      	movs	r2, #83	; 0x53
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fa7e 	bl	8007ffc <RTC_EnterInitMode>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	22ff      	movs	r2, #255	; 0xff
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2204      	movs	r2, #4
 8007b12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e049      	b.n	8007bb2 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b2c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6899      	ldr	r1, [r3, #8]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d113      	bne.n	8007b9c <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fa19 	bl	8007fac <HAL_RTC_WaitForSynchro>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e00c      	b.n	8007bb2 <HAL_RTC_SetTime+0x2ce>
 8007b98:	08013ac4 	.word	0x08013ac4
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	22ff      	movs	r2, #255	; 0xff
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd90      	pop	{r4, r7, pc}
 8007bba:	bf00      	nop

08007bbc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <HAL_RTC_GetTime+0x26>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d004      	beq.n	8007be2 <HAL_RTC_GetTime+0x26>
 8007bd8:	f240 315d 	movw	r1, #861	; 0x35d
 8007bdc:	482c      	ldr	r0, [pc, #176]	; (8007c90 <HAL_RTC_GetTime+0xd4>)
 8007bde:	f7fa fc54 	bl	800248a <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007c04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d11a      	bne.n	8007c84 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fa1c 	bl	8008090 <RTC_Bcd2ToByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fa13 	bl	8008090 <RTC_Bcd2ToByte>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	789b      	ldrb	r3, [r3, #2]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fa0a 	bl	8008090 <RTC_Bcd2ToByte>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08013ac4 	.word	0x08013ac4

08007c94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_RTC_SetDate+0x26>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d004      	beq.n	8007cba <HAL_RTC_SetDate+0x26>
 8007cb0:	f240 318a 	movw	r1, #906	; 0x38a
 8007cb4:	488e      	ldr	r0, [pc, #568]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007cb6:	f7fa fbe8 	bl	800248a <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7f1b      	ldrb	r3, [r3, #28]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RTC_SetDate+0x32>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e10f      	b.n	8007ee6 <HAL_RTC_SetDate+0x252>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <HAL_RTC_SetDate+0x62>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	f023 0310 	bic.w	r3, r3, #16
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	330a      	adds	r3, #10
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d01c      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d018      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d014      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d010      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d00c      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d008      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b07      	cmp	r3, #7
 8007d2c:	d004      	beq.n	8007d38 <HAL_RTC_SetDate+0xa4>
 8007d2e:	f240 3196 	movw	r1, #918	; 0x396
 8007d32:	486f      	ldr	r0, [pc, #444]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007d34:	f7fa fba9 	bl	800248a <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d13f      	bne.n	8007dbe <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	78db      	ldrb	r3, [r3, #3]
 8007d42:	2b63      	cmp	r3, #99	; 0x63
 8007d44:	d904      	bls.n	8007d50 <HAL_RTC_SetDate+0xbc>
 8007d46:	f240 319a 	movw	r1, #922	; 0x39a
 8007d4a:	4869      	ldr	r0, [pc, #420]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007d4c:	f7fa fb9d 	bl	800248a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_RTC_SetDate+0xcc>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b0c      	cmp	r3, #12
 8007d5e:	d904      	bls.n	8007d6a <HAL_RTC_SetDate+0xd6>
 8007d60:	f240 319b 	movw	r1, #923	; 0x39b
 8007d64:	4862      	ldr	r0, [pc, #392]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007d66:	f7fa fb90 	bl	800248a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	789b      	ldrb	r3, [r3, #2]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_RTC_SetDate+0xe6>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	789b      	ldrb	r3, [r3, #2]
 8007d76:	2b1f      	cmp	r3, #31
 8007d78:	d904      	bls.n	8007d84 <HAL_RTC_SetDate+0xf0>
 8007d7a:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8007d7e:	485c      	ldr	r0, [pc, #368]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007d80:	f7fa fb83 	bl	800248a <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	78db      	ldrb	r3, [r3, #3]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 f963 	bl	8008054 <RTC_ByteToBcd2>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f95c 	bl	8008054 <RTC_ByteToBcd2>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007da0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	789b      	ldrb	r3, [r3, #2]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f954 	bl	8008054 <RTC_ByteToBcd2>
 8007dac:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007dae:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e045      	b.n	8007e4a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	78db      	ldrb	r3, [r3, #3]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f964 	bl	8008090 <RTC_Bcd2ToByte>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b63      	cmp	r3, #99	; 0x63
 8007dcc:	d904      	bls.n	8007dd8 <HAL_RTC_SetDate+0x144>
 8007dce:	f240 31a5 	movw	r1, #933	; 0x3a5
 8007dd2:	4847      	ldr	r0, [pc, #284]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007dd4:	f7fa fb59 	bl	800248a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f957 	bl	8008090 <RTC_Bcd2ToByte>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d007      	beq.n	8007df8 <HAL_RTC_SetDate+0x164>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f94f 	bl	8008090 <RTC_Bcd2ToByte>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b0c      	cmp	r3, #12
 8007df6:	d904      	bls.n	8007e02 <HAL_RTC_SetDate+0x16e>
 8007df8:	f240 31a6 	movw	r1, #934	; 0x3a6
 8007dfc:	483c      	ldr	r0, [pc, #240]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007dfe:	f7fa fb44 	bl	800248a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f942 	bl	8008090 <RTC_Bcd2ToByte>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_RTC_SetDate+0x18e>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	789b      	ldrb	r3, [r3, #2]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f93a 	bl	8008090 <RTC_Bcd2ToByte>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b1f      	cmp	r3, #31
 8007e20:	d904      	bls.n	8007e2c <HAL_RTC_SetDate+0x198>
 8007e22:	f240 31a7 	movw	r1, #935	; 0x3a7
 8007e26:	4832      	ldr	r0, [pc, #200]	; (8007ef0 <HAL_RTC_SetDate+0x25c>)
 8007e28:	f7fa fb2f 	bl	800248a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	22ca      	movs	r2, #202	; 0xca
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2253      	movs	r2, #83	; 0x53
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f8ce 	bl	8007ffc <RTC_EnterInitMode>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	22ff      	movs	r2, #255	; 0xff
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2204      	movs	r2, #4
 8007e72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e033      	b.n	8007ee6 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d111      	bne.n	8007ed0 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f87d 	bl	8007fac <HAL_RTC_WaitForSynchro>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	22ff      	movs	r2, #255	; 0xff
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e00a      	b.n	8007ee6 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd90      	pop	{r4, r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08013ac4 	.word	0x08013ac4

08007ef4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_RTC_GetDate+0x26>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d004      	beq.n	8007f1a <HAL_RTC_GetDate+0x26>
 8007f10:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007f14:	4824      	ldr	r0, [pc, #144]	; (8007fa8 <HAL_RTC_GetDate+0xb4>)
 8007f16:	f7fa fab8 	bl	800248a <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f28:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	0b5b      	lsrs	r3, r3, #13
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d11a      	bne.n	8007f9e <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	78db      	ldrb	r3, [r3, #3]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f88f 	bl	8008090 <RTC_Bcd2ToByte>
 8007f72:	4603      	mov	r3, r0
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f886 	bl	8008090 <RTC_Bcd2ToByte>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	789b      	ldrb	r3, [r3, #2]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f87d 	bl	8008090 <RTC_Bcd2ToByte>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	08013ac4 	.word	0x08013ac4

08007fac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fc8:	f7fa fe14 	bl	8002bf4 <HAL_GetTick>
 8007fcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fce:	e009      	b.n	8007fe4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fd0:	f7fa fe10 	bl	8002bf4 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fde:	d901      	bls.n	8007fe4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e007      	b.n	8007ff4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0ee      	beq.n	8007fd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d119      	bne.n	800804a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008020:	f7fa fde8 	bl	8002bf4 <HAL_GetTick>
 8008024:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008026:	e009      	b.n	800803c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008028:	f7fa fde4 	bl	8002bf4 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008036:	d901      	bls.n	800803c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e007      	b.n	800804c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0ee      	beq.n	8008028 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008062:	e005      	b.n	8008070 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	3b0a      	subs	r3, #10
 800806e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b09      	cmp	r3, #9
 8008074:	d8f6      	bhi.n	8008064 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	b2da      	uxtb	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	4313      	orrs	r3, r2
 8008082:	b2db      	uxtb	r3, r3
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	4413      	add	r3, r2
 80080be:	b2db      	uxtb	r3, r3
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e109      	b.n	80082f2 <HAL_SPI_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a86      	ldr	r2, [pc, #536]	; (80082fc <HAL_SPI_Init+0x230>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00e      	beq.n	8008106 <HAL_SPI_Init+0x3a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a84      	ldr	r2, [pc, #528]	; (8008300 <HAL_SPI_Init+0x234>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_SPI_Init+0x3a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a83      	ldr	r2, [pc, #524]	; (8008304 <HAL_SPI_Init+0x238>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d004      	beq.n	8008106 <HAL_SPI_Init+0x3a>
 80080fc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008100:	4881      	ldr	r0, [pc, #516]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008102:	f7fa f9c2 	bl	800248a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_SPI_Init+0x56>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008116:	d004      	beq.n	8008122 <HAL_SPI_Init+0x56>
 8008118:	f240 1143 	movw	r1, #323	; 0x143
 800811c:	487a      	ldr	r0, [pc, #488]	; (8008308 <HAL_SPI_Init+0x23c>)
 800811e:	f7fa f9b4 	bl	800248a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <HAL_SPI_Init+0x7c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d009      	beq.n	8008148 <HAL_SPI_Init+0x7c>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813c:	d004      	beq.n	8008148 <HAL_SPI_Init+0x7c>
 800813e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008142:	4871      	ldr	r0, [pc, #452]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008144:	f7fa f9a1 	bl	800248a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008150:	d008      	beq.n	8008164 <HAL_SPI_Init+0x98>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <HAL_SPI_Init+0x98>
 800815a:	f240 1145 	movw	r1, #325	; 0x145
 800815e:	486a      	ldr	r0, [pc, #424]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008160:	f7fa f993 	bl	800248a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d00d      	beq.n	800818a <HAL_SPI_Init+0xbe>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_SPI_Init+0xbe>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800817e:	d004      	beq.n	800818a <HAL_SPI_Init+0xbe>
 8008180:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008184:	4860      	ldr	r0, [pc, #384]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008186:	f7fa f980 	bl	800248a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d020      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	2b08      	cmp	r3, #8
 8008198:	d01c      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d018      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	2b18      	cmp	r3, #24
 80081a8:	d014      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d010      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	2b28      	cmp	r3, #40	; 0x28
 80081b8:	d00c      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	2b30      	cmp	r3, #48	; 0x30
 80081c0:	d008      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	2b38      	cmp	r3, #56	; 0x38
 80081c8:	d004      	beq.n	80081d4 <HAL_SPI_Init+0x108>
 80081ca:	f240 1147 	movw	r1, #327	; 0x147
 80081ce:	484e      	ldr	r0, [pc, #312]	; (8008308 <HAL_SPI_Init+0x23c>)
 80081d0:	f7fa f95b 	bl	800248a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d008      	beq.n	80081ee <HAL_SPI_Init+0x122>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d004      	beq.n	80081ee <HAL_SPI_Init+0x122>
 80081e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081e8:	4847      	ldr	r0, [pc, #284]	; (8008308 <HAL_SPI_Init+0x23c>)
 80081ea:	f7fa f94e 	bl	800248a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_SPI_Init+0x13c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d004      	beq.n	8008208 <HAL_SPI_Init+0x13c>
 80081fe:	f240 1149 	movw	r1, #329	; 0x149
 8008202:	4841      	ldr	r0, [pc, #260]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008204:	f7fa f941 	bl	800248a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	d119      	bne.n	8008244 <HAL_SPI_Init+0x178>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_SPI_Init+0x15e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d004      	beq.n	800822a <HAL_SPI_Init+0x15e>
 8008220:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008224:	4838      	ldr	r0, [pc, #224]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008226:	f7fa f930 	bl	800248a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <HAL_SPI_Init+0x178>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d004      	beq.n	8008244 <HAL_SPI_Init+0x178>
 800823a:	f240 114d 	movw	r1, #333	; 0x14d
 800823e:	4832      	ldr	r0, [pc, #200]	; (8008308 <HAL_SPI_Init+0x23c>)
 8008240:	f7fa f923 	bl	800248a <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_SPI_Init+0x198>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7fa fa5c 	bl	800271c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800827a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	ea42 0103 	orr.w	r1, r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	f003 0104 	and.w	r1, r3, #4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40013000 	.word	0x40013000
 8008300:	40003800 	.word	0x40003800
 8008304:	40003c00 	.word	0x40003c00
 8008308:	08013afc 	.word	0x08013afc

0800830c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d009      	beq.n	800833c <HAL_SPI_Transmit+0x30>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008330:	d004      	beq.n	800833c <HAL_SPI_Transmit+0x30>
 8008332:	f240 21f2 	movw	r1, #754	; 0x2f2
 8008336:	4896      	ldr	r0, [pc, #600]	; (8008590 <HAL_SPI_Transmit+0x284>)
 8008338:	f7fa f8a7 	bl	800248a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_SPI_Transmit+0x3e>
 8008346:	2302      	movs	r3, #2
 8008348:	e11e      	b.n	8008588 <HAL_SPI_Transmit+0x27c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008352:	f7fa fc4f 	bl	8002bf4 <HAL_GetTick>
 8008356:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	d002      	beq.n	800836e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8008368:	2302      	movs	r3, #2
 800836a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800836c:	e103      	b.n	8008576 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_SPI_Transmit+0x6e>
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800837e:	e0fa      	b.n	8008576 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2203      	movs	r2, #3
 8008384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c6:	d107      	bne.n	80083d8 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d007      	beq.n	80083f6 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fe:	d14b      	bne.n	8008498 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <HAL_SPI_Transmit+0x102>
 8008408:	8afb      	ldrh	r3, [r7, #22]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d13e      	bne.n	800848c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841e:	1c9a      	adds	r2, r3, #2
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008432:	e02b      	b.n	800848c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b02      	cmp	r3, #2
 8008440:	d112      	bne.n	8008468 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	881a      	ldrh	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	1c9a      	adds	r2, r3, #2
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	86da      	strh	r2, [r3, #54]	; 0x36
 8008466:	e011      	b.n	800848c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008468:	f7fa fbc4 	bl	8002bf4 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	429a      	cmp	r2, r3
 8008476:	d803      	bhi.n	8008480 <HAL_SPI_Transmit+0x174>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800847e:	d102      	bne.n	8008486 <HAL_SPI_Transmit+0x17a>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	77fb      	strb	r3, [r7, #31]
          goto error;
 800848a:	e074      	b.n	8008576 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1ce      	bne.n	8008434 <HAL_SPI_Transmit+0x128>
 8008496:	e04c      	b.n	8008532 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_SPI_Transmit+0x19a>
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d140      	bne.n	8008528 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084cc:	e02c      	b.n	8008528 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d113      	bne.n	8008504 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	86da      	strh	r2, [r3, #54]	; 0x36
 8008502:	e011      	b.n	8008528 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008504:	f7fa fb76 	bl	8002bf4 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d803      	bhi.n	800851c <HAL_SPI_Transmit+0x210>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851a:	d102      	bne.n	8008522 <HAL_SPI_Transmit+0x216>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008526:	e026      	b.n	8008576 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1cd      	bne.n	80084ce <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f896 	bl	8008668 <SPI_EndRxTxTransaction>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008550:	2300      	movs	r3, #0
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	77fb      	strb	r3, [r7, #31]
 8008572:	e000      	b.n	8008576 <HAL_SPI_Transmit+0x26a>
  }

error:
 8008574:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008586:	7ffb      	ldrb	r3, [r7, #31]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	08013afc 	.word	0x08013afc

08008594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	4613      	mov	r3, r2
 80085a2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085a4:	e04c      	b.n	8008640 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ac:	d048      	beq.n	8008640 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80085ae:	f7fa fb21 	bl	8002bf4 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d902      	bls.n	80085c4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d13d      	bne.n	8008640 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085dc:	d111      	bne.n	8008602 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e6:	d004      	beq.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085f0:	d107      	bne.n	8008602 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008600:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	d10f      	bne.n	800862c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800862a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e00f      	b.n	8008660 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4013      	ands	r3, r2
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	429a      	cmp	r2, r3
 800865c:	d1a3      	bne.n	80085a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <SPI_EndRxTxTransaction+0x7c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1b      	ldr	r2, [pc, #108]	; (80086e8 <SPI_EndRxTxTransaction+0x80>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	0d5b      	lsrs	r3, r3, #21
 8008680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008684:	fb02 f303 	mul.w	r3, r2, r3
 8008688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008692:	d112      	bne.n	80086ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	2180      	movs	r1, #128	; 0x80
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff ff78 	bl	8008594 <SPI_WaitFlagStateUntilTimeout>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d016      	beq.n	80086d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e00f      	b.n	80086da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d0:	2b80      	cmp	r3, #128	; 0x80
 80086d2:	d0f2      	beq.n	80086ba <SPI_EndRxTxTransaction+0x52>
 80086d4:	e000      	b.n	80086d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80086d6:	bf00      	nop
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000064 	.word	0x20000064
 80086e8:	165e9f81 	.word	0x165e9f81

080086ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e0a1      	b.n	8008842 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a52      	ldr	r2, [pc, #328]	; (800884c <HAL_TIM_Base_Init+0x160>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d045      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008710:	d040      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4e      	ldr	r2, [pc, #312]	; (8008850 <HAL_TIM_Base_Init+0x164>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d03b      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a4c      	ldr	r2, [pc, #304]	; (8008854 <HAL_TIM_Base_Init+0x168>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d036      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a4b      	ldr	r2, [pc, #300]	; (8008858 <HAL_TIM_Base_Init+0x16c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d031      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a49      	ldr	r2, [pc, #292]	; (800885c <HAL_TIM_Base_Init+0x170>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d02c      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a48      	ldr	r2, [pc, #288]	; (8008860 <HAL_TIM_Base_Init+0x174>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d027      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a46      	ldr	r2, [pc, #280]	; (8008864 <HAL_TIM_Base_Init+0x178>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d022      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a45      	ldr	r2, [pc, #276]	; (8008868 <HAL_TIM_Base_Init+0x17c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01d      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a43      	ldr	r2, [pc, #268]	; (800886c <HAL_TIM_Base_Init+0x180>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d018      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a42      	ldr	r2, [pc, #264]	; (8008870 <HAL_TIM_Base_Init+0x184>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a40      	ldr	r2, [pc, #256]	; (8008874 <HAL_TIM_Base_Init+0x188>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3f      	ldr	r2, [pc, #252]	; (8008878 <HAL_TIM_Base_Init+0x18c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a3d      	ldr	r2, [pc, #244]	; (800887c <HAL_TIM_Base_Init+0x190>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_TIM_Base_Init+0xa8>
 800878a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800878e:	483c      	ldr	r0, [pc, #240]	; (8008880 <HAL_TIM_Base_Init+0x194>)
 8008790:	f7f9 fe7b 	bl	800248a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d014      	beq.n	80087c6 <HAL_TIM_Base_Init+0xda>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d010      	beq.n	80087c6 <HAL_TIM_Base_Init+0xda>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	d00c      	beq.n	80087c6 <HAL_TIM_Base_Init+0xda>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	d008      	beq.n	80087c6 <HAL_TIM_Base_Init+0xda>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b60      	cmp	r3, #96	; 0x60
 80087ba:	d004      	beq.n	80087c6 <HAL_TIM_Base_Init+0xda>
 80087bc:	f240 1113 	movw	r1, #275	; 0x113
 80087c0:	482f      	ldr	r0, [pc, #188]	; (8008880 <HAL_TIM_Base_Init+0x194>)
 80087c2:	f7f9 fe62 	bl	800248a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <HAL_TIM_Base_Init+0x100>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d6:	d009      	beq.n	80087ec <HAL_TIM_Base_Init+0x100>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e0:	d004      	beq.n	80087ec <HAL_TIM_Base_Init+0x100>
 80087e2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80087e6:	4826      	ldr	r0, [pc, #152]	; (8008880 <HAL_TIM_Base_Init+0x194>)
 80087e8:	f7f9 fe4f 	bl	800248a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <HAL_TIM_Base_Init+0x11a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d004      	beq.n	8008806 <HAL_TIM_Base_Init+0x11a>
 80087fc:	f240 1115 	movw	r1, #277	; 0x115
 8008800:	481f      	ldr	r0, [pc, #124]	; (8008880 <HAL_TIM_Base_Init+0x194>)
 8008802:	f7f9 fe42 	bl	800248a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fa f932 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3304      	adds	r3, #4
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f000 fd48 	bl	80092c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40001000 	.word	0x40001000
 8008860:	40001400 	.word	0x40001400
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800
 8008874:	40001800 	.word	0x40001800
 8008878:	40001c00 	.word	0x40001c00
 800887c:	40002000 	.word	0x40002000
 8008880:	08013b34 	.word	0x08013b34

08008884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a33      	ldr	r2, [pc, #204]	; (8008960 <HAL_TIM_Base_Start_IT+0xdc>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d045      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d040      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a2f      	ldr	r2, [pc, #188]	; (8008964 <HAL_TIM_Base_Start_IT+0xe0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d03b      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a2e      	ldr	r2, [pc, #184]	; (8008968 <HAL_TIM_Base_Start_IT+0xe4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d036      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a2c      	ldr	r2, [pc, #176]	; (800896c <HAL_TIM_Base_Start_IT+0xe8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d031      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a2b      	ldr	r2, [pc, #172]	; (8008970 <HAL_TIM_Base_Start_IT+0xec>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d02c      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a29      	ldr	r2, [pc, #164]	; (8008974 <HAL_TIM_Base_Start_IT+0xf0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d027      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a28      	ldr	r2, [pc, #160]	; (8008978 <HAL_TIM_Base_Start_IT+0xf4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d022      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a26      	ldr	r2, [pc, #152]	; (800897c <HAL_TIM_Base_Start_IT+0xf8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01d      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a25      	ldr	r2, [pc, #148]	; (8008980 <HAL_TIM_Base_Start_IT+0xfc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d018      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a23      	ldr	r2, [pc, #140]	; (8008984 <HAL_TIM_Base_Start_IT+0x100>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a22      	ldr	r2, [pc, #136]	; (8008988 <HAL_TIM_Base_Start_IT+0x104>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00e      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a20      	ldr	r2, [pc, #128]	; (800898c <HAL_TIM_Base_Start_IT+0x108>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1f      	ldr	r2, [pc, #124]	; (8008990 <HAL_TIM_Base_Start_IT+0x10c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x9e>
 8008918:	f240 11b9 	movw	r1, #441	; 0x1b9
 800891c:	481d      	ldr	r0, [pc, #116]	; (8008994 <HAL_TIM_Base_Start_IT+0x110>)
 800891e:	f7f9 fdb4 	bl	800248a <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b06      	cmp	r3, #6
 8008942:	d007      	beq.n	8008954 <HAL_TIM_Base_Start_IT+0xd0>
  {
    __HAL_TIM_ENABLE(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40010000 	.word	0x40010000
 8008964:	40000400 	.word	0x40000400
 8008968:	40000800 	.word	0x40000800
 800896c:	40000c00 	.word	0x40000c00
 8008970:	40001000 	.word	0x40001000
 8008974:	40001400 	.word	0x40001400
 8008978:	40010400 	.word	0x40010400
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400
 8008984:	40014800 	.word	0x40014800
 8008988:	40001800 	.word	0x40001800
 800898c:	40001c00 	.word	0x40001c00
 8008990:	40002000 	.word	0x40002000
 8008994:	08013b34 	.word	0x08013b34

08008998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0202 	mvn.w	r2, #2
 80089c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc56 	bl	800928c <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc48 	bl	8009278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc59 	bl	80092a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0204 	mvn.w	r2, #4
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc2c 	bl	800928c <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc1e 	bl	8009278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc2f 	bl	80092a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0208 	mvn.w	r2, #8
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2204      	movs	r2, #4
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc02 	bl	800928c <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fbf4 	bl	8009278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fc05 	bl	80092a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d122      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d11b      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0210 	mvn.w	r2, #16
 8008ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbd8 	bl	800928c <HAL_TIM_IC_CaptureCallback>
 8008adc:	e005      	b.n	8008aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fbca 	bl	8009278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fbdb 	bl	80092a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10e      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d107      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f06f 0201 	mvn.w	r2, #1
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7f9 fbf2 	bl	8002300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d10e      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b34:	2b80      	cmp	r3, #128	; 0x80
 8008b36:	d107      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fde2 	bl	800970c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b40      	cmp	r3, #64	; 0x40
 8008b54:	d10e      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d107      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fba0 	bl	80092b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d10e      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d107      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0220 	mvn.w	r2, #32
 8008b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fdac 	bl	80096f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_TIM_ConfigClockSource+0x18>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e347      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x6a8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd8:	d029      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be2:	d024      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d020      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b10      	cmp	r3, #16
 8008bf2:	d01c      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d018      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d014      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b40      	cmp	r3, #64	; 0x40
 8008c0a:	d010      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b50      	cmp	r3, #80	; 0x50
 8008c12:	d00c      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b60      	cmp	r3, #96	; 0x60
 8008c1a:	d008      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b70      	cmp	r3, #112	; 0x70
 8008c22:	d004      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x86>
 8008c24:	f241 118b 	movw	r1, #4491	; 0x118b
 8008c28:	488a      	ldr	r0, [pc, #552]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008c2a:	f7f9 fc2e 	bl	800248a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	f000 825c 	beq.w	8009110 <HAL_TIM_ConfigClockSource+0x568>
 8008c58:	2b40      	cmp	r3, #64	; 0x40
 8008c5a:	d80f      	bhi.n	8008c7c <HAL_TIM_ConfigClockSource+0xd4>
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	f000 82b7 	beq.w	80091d0 <HAL_TIM_ConfigClockSource+0x628>
 8008c62:	2b10      	cmp	r3, #16
 8008c64:	d803      	bhi.n	8008c6e <HAL_TIM_ConfigClockSource+0xc6>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 82b2 	beq.w	80091d0 <HAL_TIM_ConfigClockSource+0x628>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c6c:	e2e7      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	f000 82ae 	beq.w	80091d0 <HAL_TIM_ConfigClockSource+0x628>
 8008c74:	2b30      	cmp	r3, #48	; 0x30
 8008c76:	f000 82ab 	beq.w	80091d0 <HAL_TIM_ConfigClockSource+0x628>
      break;
 8008c7a:	e2e0      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008c7c:	2b70      	cmp	r3, #112	; 0x70
 8008c7e:	d06a      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0x1ae>
 8008c80:	2b70      	cmp	r3, #112	; 0x70
 8008c82:	d806      	bhi.n	8008c92 <HAL_TIM_ConfigClockSource+0xea>
 8008c84:	2b50      	cmp	r3, #80	; 0x50
 8008c86:	f000 8172 	beq.w	8008f6e <HAL_TIM_ConfigClockSource+0x3c6>
 8008c8a:	2b60      	cmp	r3, #96	; 0x60
 8008c8c:	f000 81cf 	beq.w	800902e <HAL_TIM_ConfigClockSource+0x486>
      break;
 8008c90:	e2d5      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d004      	beq.n	8008ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8008c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9c:	f000 80f6 	beq.w	8008e8c <HAL_TIM_ConfigClockSource+0x2e4>
      break;
 8008ca0:	e2cd      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a6c      	ldr	r2, [pc, #432]	; (8008e58 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	f000 82c7 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb6:	f000 82c1 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a67      	ldr	r2, [pc, #412]	; (8008e5c <HAL_TIM_ConfigClockSource+0x2b4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f000 82bb 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a65      	ldr	r2, [pc, #404]	; (8008e60 <HAL_TIM_ConfigClockSource+0x2b8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	f000 82b5 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a63      	ldr	r2, [pc, #396]	; (8008e64 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	f000 82af 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a61      	ldr	r2, [pc, #388]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2c0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	f000 82a9 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a5f      	ldr	r2, [pc, #380]	; (8008e6c <HAL_TIM_ConfigClockSource+0x2c4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	f000 82a3 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a5d      	ldr	r2, [pc, #372]	; (8008e70 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	f000 829d 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a5b      	ldr	r2, [pc, #364]	; (8008e74 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f000 8297 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a59      	ldr	r2, [pc, #356]	; (8008e78 <HAL_TIM_ConfigClockSource+0x2d0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	f000 8291 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a57      	ldr	r2, [pc, #348]	; (8008e7c <HAL_TIM_ConfigClockSource+0x2d4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f000 828b 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a55      	ldr	r2, [pc, #340]	; (8008e80 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	f000 8285 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a53      	ldr	r2, [pc, #332]	; (8008e84 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f000 827f 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a51      	ldr	r2, [pc, #324]	; (8008e88 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	f000 8279 	beq.w	800923c <HAL_TIM_ConfigClockSource+0x694>
 8008d4a:	f241 1197 	movw	r1, #4503	; 0x1197
 8008d4e:	4841      	ldr	r0, [pc, #260]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008d50:	f7f9 fb9b 	bl	800248a <assert_failed>
      break;
 8008d54:	e272      	b.n	800923c <HAL_TIM_ConfigClockSource+0x694>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a3f      	ldr	r2, [pc, #252]	; (8008e58 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d027      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d022      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <HAL_TIM_ConfigClockSource+0x2b4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d01d      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a39      	ldr	r2, [pc, #228]	; (8008e60 <HAL_TIM_ConfigClockSource+0x2b8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d018      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a38      	ldr	r2, [pc, #224]	; (8008e64 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d013      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a38      	ldr	r2, [pc, #224]	; (8008e70 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00e      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a37      	ldr	r2, [pc, #220]	; (8008e74 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d009      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a37      	ldr	r2, [pc, #220]	; (8008e80 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x208>
 8008da6:	f241 119e 	movw	r1, #4510	; 0x119e
 8008daa:	482a      	ldr	r0, [pc, #168]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008dac:	f7f9 fb6d 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d013      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0x238>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc0:	d00e      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0x238>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dca:	d009      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0x238>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd4:	d004      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0x238>
 8008dd6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8008dda:	481e      	ldr	r0, [pc, #120]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008ddc:	f7f9 fb55 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de8:	d014      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0x26c>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d010      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0x26c>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00c      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0x26c>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d008      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0x26c>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b0a      	cmp	r3, #10
 8008e08:	d004      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0x26c>
 8008e0a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8008e0e:	4811      	ldr	r0, [pc, #68]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008e10:	f7f9 fb3b 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b0f      	cmp	r3, #15
 8008e1a:	d904      	bls.n	8008e26 <HAL_TIM_ConfigClockSource+0x27e>
 8008e1c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008e20:	480c      	ldr	r0, [pc, #48]	; (8008e54 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008e22:	f7f9 fb32 	bl	800248a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6899      	ldr	r1, [r3, #8]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f000 fb61 	bl	80094fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	609a      	str	r2, [r3, #8]
      break;
 8008e52:	e1f4      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
 8008e54:	08013b34 	.word	0x08013b34
 8008e58:	40010000 	.word	0x40010000
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	40000c00 	.word	0x40000c00
 8008e68:	40001000 	.word	0x40001000
 8008e6c:	40001400 	.word	0x40001400
 8008e70:	40010400 	.word	0x40010400
 8008e74:	40014000 	.word	0x40014000
 8008e78:	40014400 	.word	0x40014400
 8008e7c:	40014800 	.word	0x40014800
 8008e80:	40001800 	.word	0x40001800
 8008e84:	40001c00 	.word	0x40001c00
 8008e88:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a97      	ldr	r2, [pc, #604]	; (80090f0 <HAL_TIM_ConfigClockSource+0x548>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01d      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9e:	d018      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a93      	ldr	r2, [pc, #588]	; (80090f4 <HAL_TIM_ConfigClockSource+0x54c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a92      	ldr	r2, [pc, #584]	; (80090f8 <HAL_TIM_ConfigClockSource+0x550>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a90      	ldr	r2, [pc, #576]	; (80090fc <HAL_TIM_ConfigClockSource+0x554>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a8f      	ldr	r2, [pc, #572]	; (8009100 <HAL_TIM_ConfigClockSource+0x558>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x32a>
 8008ec8:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8008ecc:	488d      	ldr	r0, [pc, #564]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008ece:	f7f9 fadc 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d013      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0x35a>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee2:	d00e      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0x35a>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eec:	d009      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0x35a>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ef6:	d004      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0x35a>
 8008ef8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8008efc:	4881      	ldr	r0, [pc, #516]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008efe:	f7f9 fac4 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f0a:	d014      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x38e>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d010      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x38e>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x38e>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d008      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x38e>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b0a      	cmp	r3, #10
 8008f2a:	d004      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x38e>
 8008f2c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008f30:	4874      	ldr	r0, [pc, #464]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f32:	f7f9 faaa 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	d904      	bls.n	8008f48 <HAL_TIM_ConfigClockSource+0x3a0>
 8008f3e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008f42:	4870      	ldr	r0, [pc, #448]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f44:	f7f9 faa1 	bl	800248a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	6899      	ldr	r1, [r3, #8]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f000 fad0 	bl	80094fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f6a:	609a      	str	r2, [r3, #8]
      break;
 8008f6c:	e167      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a5f      	ldr	r2, [pc, #380]	; (80090f0 <HAL_TIM_ConfigClockSource+0x548>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d027      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d022      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a5b      	ldr	r2, [pc, #364]	; (80090f4 <HAL_TIM_ConfigClockSource+0x54c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d01d      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a59      	ldr	r2, [pc, #356]	; (80090f8 <HAL_TIM_ConfigClockSource+0x550>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d018      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a58      	ldr	r2, [pc, #352]	; (80090fc <HAL_TIM_ConfigClockSource+0x554>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d013      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a56      	ldr	r2, [pc, #344]	; (8009100 <HAL_TIM_ConfigClockSource+0x558>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a56      	ldr	r2, [pc, #344]	; (8009108 <HAL_TIM_ConfigClockSource+0x560>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a54      	ldr	r2, [pc, #336]	; (800910c <HAL_TIM_ConfigClockSource+0x564>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x420>
 8008fbe:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8008fc2:	4850      	ldr	r0, [pc, #320]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008fc4:	f7f9 fa61 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd0:	d014      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x454>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x454>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x454>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d008      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x454>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2b0a      	cmp	r3, #10
 8008ff0:	d004      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x454>
 8008ff2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8008ff6:	4843      	ldr	r0, [pc, #268]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8008ff8:	f7f9 fa47 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b0f      	cmp	r3, #15
 8009002:	d904      	bls.n	800900e <HAL_TIM_ConfigClockSource+0x466>
 8009004:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8009008:	483e      	ldr	r0, [pc, #248]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 800900a:	f7f9 fa3e 	bl	800248a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	6859      	ldr	r1, [r3, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	461a      	mov	r2, r3
 800901c:	f000 f9f4 	bl	8009408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2150      	movs	r1, #80	; 0x50
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fa4d 	bl	80094c6 <TIM_ITRx_SetConfig>
      break;
 800902c:	e107      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a2f      	ldr	r2, [pc, #188]	; (80090f0 <HAL_TIM_ConfigClockSource+0x548>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d027      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009040:	d022      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2b      	ldr	r2, [pc, #172]	; (80090f4 <HAL_TIM_ConfigClockSource+0x54c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d01d      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a29      	ldr	r2, [pc, #164]	; (80090f8 <HAL_TIM_ConfigClockSource+0x550>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d018      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a28      	ldr	r2, [pc, #160]	; (80090fc <HAL_TIM_ConfigClockSource+0x554>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d013      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a26      	ldr	r2, [pc, #152]	; (8009100 <HAL_TIM_ConfigClockSource+0x558>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00e      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a26      	ldr	r2, [pc, #152]	; (8009108 <HAL_TIM_ConfigClockSource+0x560>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d009      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a24      	ldr	r2, [pc, #144]	; (800910c <HAL_TIM_ConfigClockSource+0x564>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <HAL_TIM_ConfigClockSource+0x4e0>
 800907e:	f241 11da 	movw	r1, #4570	; 0x11da
 8009082:	4820      	ldr	r0, [pc, #128]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 8009084:	f7f9 fa01 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009090:	d014      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x514>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d010      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x514>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x514>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d008      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x514>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b0a      	cmp	r3, #10
 80090b0:	d004      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x514>
 80090b2:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80090b6:	4813      	ldr	r0, [pc, #76]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 80090b8:	f7f9 f9e7 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b0f      	cmp	r3, #15
 80090c2:	d904      	bls.n	80090ce <HAL_TIM_ConfigClockSource+0x526>
 80090c4:	f241 11de 	movw	r1, #4574	; 0x11de
 80090c8:	480e      	ldr	r0, [pc, #56]	; (8009104 <HAL_TIM_ConfigClockSource+0x55c>)
 80090ca:	f7f9 f9de 	bl	800248a <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6859      	ldr	r1, [r3, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	461a      	mov	r2, r3
 80090dc:	f000 f9c3 	bl	8009466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2160      	movs	r1, #96	; 0x60
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 f9ed 	bl	80094c6 <TIM_ITRx_SetConfig>
      break;
 80090ec:	e0a7      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
 80090ee:	bf00      	nop
 80090f0:	40010000 	.word	0x40010000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40010400 	.word	0x40010400
 8009104:	08013b34 	.word	0x08013b34
 8009108:	40014000 	.word	0x40014000
 800910c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a50      	ldr	r2, [pc, #320]	; (8009258 <HAL_TIM_ConfigClockSource+0x6b0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d027      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009122:	d022      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a4c      	ldr	r2, [pc, #304]	; (800925c <HAL_TIM_ConfigClockSource+0x6b4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01d      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a4b      	ldr	r2, [pc, #300]	; (8009260 <HAL_TIM_ConfigClockSource+0x6b8>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d018      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a49      	ldr	r2, [pc, #292]	; (8009264 <HAL_TIM_ConfigClockSource+0x6bc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d013      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a48      	ldr	r2, [pc, #288]	; (8009268 <HAL_TIM_ConfigClockSource+0x6c0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00e      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a46      	ldr	r2, [pc, #280]	; (800926c <HAL_TIM_ConfigClockSource+0x6c4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d009      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a45      	ldr	r2, [pc, #276]	; (8009270 <HAL_TIM_ConfigClockSource+0x6c8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d004      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x5c2>
 8009160:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8009164:	4843      	ldr	r0, [pc, #268]	; (8009274 <HAL_TIM_ConfigClockSource+0x6cc>)
 8009166:	f7f9 f990 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009172:	d014      	beq.n	800919e <HAL_TIM_ConfigClockSource+0x5f6>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <HAL_TIM_ConfigClockSource+0x5f6>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00c      	beq.n	800919e <HAL_TIM_ConfigClockSource+0x5f6>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d008      	beq.n	800919e <HAL_TIM_ConfigClockSource+0x5f6>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	2b0a      	cmp	r3, #10
 8009192:	d004      	beq.n	800919e <HAL_TIM_ConfigClockSource+0x5f6>
 8009194:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8009198:	4836      	ldr	r0, [pc, #216]	; (8009274 <HAL_TIM_ConfigClockSource+0x6cc>)
 800919a:	f7f9 f976 	bl	800248a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	2b0f      	cmp	r3, #15
 80091a4:	d904      	bls.n	80091b0 <HAL_TIM_ConfigClockSource+0x608>
 80091a6:	f241 11ee 	movw	r1, #4590	; 0x11ee
 80091aa:	4832      	ldr	r0, [pc, #200]	; (8009274 <HAL_TIM_ConfigClockSource+0x6cc>)
 80091ac:	f7f9 f96d 	bl	800248a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	6859      	ldr	r1, [r3, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	461a      	mov	r2, r3
 80091be:	f000 f923 	bl	8009408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2140      	movs	r1, #64	; 0x40
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f97c 	bl	80094c6 <TIM_ITRx_SetConfig>
      break;
 80091ce:	e036      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a20      	ldr	r2, [pc, #128]	; (8009258 <HAL_TIM_ConfigClockSource+0x6b0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d027      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e2:	d022      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <HAL_TIM_ConfigClockSource+0x6b4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d01d      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <HAL_TIM_ConfigClockSource+0x6b8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d018      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a19      	ldr	r2, [pc, #100]	; (8009264 <HAL_TIM_ConfigClockSource+0x6bc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a18      	ldr	r2, [pc, #96]	; (8009268 <HAL_TIM_ConfigClockSource+0x6c0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00e      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a16      	ldr	r2, [pc, #88]	; (800926c <HAL_TIM_ConfigClockSource+0x6c4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d009      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a15      	ldr	r2, [pc, #84]	; (8009270 <HAL_TIM_ConfigClockSource+0x6c8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d004      	beq.n	800922a <HAL_TIM_ConfigClockSource+0x682>
 8009220:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8009224:	4813      	ldr	r0, [pc, #76]	; (8009274 <HAL_TIM_ConfigClockSource+0x6cc>)
 8009226:	f7f9 f930 	bl	800248a <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f000 f946 	bl	80094c6 <TIM_ITRx_SetConfig>
      break;
 800923a:	e000      	b.n	800923e <HAL_TIM_ConfigClockSource+0x696>
      break;
 800923c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40010000 	.word	0x40010000
 800925c:	40000400 	.word	0x40000400
 8009260:	40000800 	.word	0x40000800
 8009264:	40000c00 	.word	0x40000c00
 8009268:	40010400 	.word	0x40010400
 800926c:	40014000 	.word	0x40014000
 8009270:	40001800 	.word	0x40001800
 8009274:	08013b34 	.word	0x08013b34

08009278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a40      	ldr	r2, [pc, #256]	; (80093dc <TIM_Base_SetConfig+0x114>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d013      	beq.n	8009308 <TIM_Base_SetConfig+0x40>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e6:	d00f      	beq.n	8009308 <TIM_Base_SetConfig+0x40>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a3d      	ldr	r2, [pc, #244]	; (80093e0 <TIM_Base_SetConfig+0x118>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d00b      	beq.n	8009308 <TIM_Base_SetConfig+0x40>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a3c      	ldr	r2, [pc, #240]	; (80093e4 <TIM_Base_SetConfig+0x11c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d007      	beq.n	8009308 <TIM_Base_SetConfig+0x40>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a3b      	ldr	r2, [pc, #236]	; (80093e8 <TIM_Base_SetConfig+0x120>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_Base_SetConfig+0x40>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a3a      	ldr	r2, [pc, #232]	; (80093ec <TIM_Base_SetConfig+0x124>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d108      	bne.n	800931a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a2f      	ldr	r2, [pc, #188]	; (80093dc <TIM_Base_SetConfig+0x114>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d02b      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009328:	d027      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a2c      	ldr	r2, [pc, #176]	; (80093e0 <TIM_Base_SetConfig+0x118>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d023      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a2b      	ldr	r2, [pc, #172]	; (80093e4 <TIM_Base_SetConfig+0x11c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d01f      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a2a      	ldr	r2, [pc, #168]	; (80093e8 <TIM_Base_SetConfig+0x120>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d01b      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a29      	ldr	r2, [pc, #164]	; (80093ec <TIM_Base_SetConfig+0x124>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d017      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a28      	ldr	r2, [pc, #160]	; (80093f0 <TIM_Base_SetConfig+0x128>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d013      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a27      	ldr	r2, [pc, #156]	; (80093f4 <TIM_Base_SetConfig+0x12c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00f      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a26      	ldr	r2, [pc, #152]	; (80093f8 <TIM_Base_SetConfig+0x130>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00b      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a25      	ldr	r2, [pc, #148]	; (80093fc <TIM_Base_SetConfig+0x134>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d007      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a24      	ldr	r2, [pc, #144]	; (8009400 <TIM_Base_SetConfig+0x138>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d003      	beq.n	800937a <TIM_Base_SetConfig+0xb2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a23      	ldr	r2, [pc, #140]	; (8009404 <TIM_Base_SetConfig+0x13c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d108      	bne.n	800938c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4313      	orrs	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a0a      	ldr	r2, [pc, #40]	; (80093dc <TIM_Base_SetConfig+0x114>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_Base_SetConfig+0xf8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <TIM_Base_SetConfig+0x124>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d103      	bne.n	80093c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	615a      	str	r2, [r3, #20]
}
 80093ce:	bf00      	nop
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40000400 	.word	0x40000400
 80093e4:	40000800 	.word	0x40000800
 80093e8:	40000c00 	.word	0x40000c00
 80093ec:	40010400 	.word	0x40010400
 80093f0:	40014000 	.word	0x40014000
 80093f4:	40014400 	.word	0x40014400
 80093f8:	40014800 	.word	0x40014800
 80093fc:	40001800 	.word	0x40001800
 8009400:	40001c00 	.word	0x40001c00
 8009404:	40002000 	.word	0x40002000

08009408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	f023 0201 	bic.w	r2, r3, #1
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 030a 	bic.w	r3, r3, #10
 8009444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009466:	b480      	push	{r7}
 8009468:	b087      	sub	sp, #28
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0210 	bic.w	r2, r3, #16
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	031b      	lsls	r3, r3, #12
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	621a      	str	r2, [r3, #32]
}
 80094ba:	bf00      	nop
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f043 0307 	orr.w	r3, r3, #7
 80094e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	609a      	str	r2, [r3, #8]
}
 80094f0:	bf00      	nop
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	021a      	lsls	r2, r3, #8
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	431a      	orrs	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4313      	orrs	r3, r2
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a61      	ldr	r2, [pc, #388]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d027      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009558:	d022      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a5d      	ldr	r2, [pc, #372]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d01d      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a5b      	ldr	r2, [pc, #364]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d018      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a5a      	ldr	r2, [pc, #360]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d013      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a58      	ldr	r2, [pc, #352]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00e      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a57      	ldr	r2, [pc, #348]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d009      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a55      	ldr	r2, [pc, #340]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009596:	f240 6164 	movw	r1, #1636	; 0x664
 800959a:	4854      	ldr	r0, [pc, #336]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800959c:	f7f8 ff75 	bl	800248a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d020      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b10      	cmp	r3, #16
 80095ae:	d01c      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d018      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b30      	cmp	r3, #48	; 0x30
 80095be:	d014      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b40      	cmp	r3, #64	; 0x40
 80095c6:	d010      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b50      	cmp	r3, #80	; 0x50
 80095ce:	d00c      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b60      	cmp	r3, #96	; 0x60
 80095d6:	d008      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b70      	cmp	r3, #112	; 0x70
 80095de:	d004      	beq.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095e0:	f240 6165 	movw	r1, #1637	; 0x665
 80095e4:	4841      	ldr	r0, [pc, #260]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80095e6:	f7f8 ff50 	bl	800248a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d008      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095fa:	f240 6166 	movw	r1, #1638	; 0x666
 80095fe:	483b      	ldr	r0, [pc, #236]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009600:	f7f8 ff43 	bl	800248a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800960e:	2302      	movs	r3, #2
 8009610:	e05a      	b.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009638:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1f      	ldr	r2, [pc, #124]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d022      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965e:	d01d      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d018      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d013      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00e      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a19      	ldr	r2, [pc, #100]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d009      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a18      	ldr	r2, [pc, #96]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d004      	beq.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a17      	ldr	r2, [pc, #92]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d10c      	bne.n	80096b6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	40010000 	.word	0x40010000
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	40001000 	.word	0x40001000
 80096e4:	40001400 	.word	0x40001400
 80096e8:	40010400 	.word	0x40010400
 80096ec:	08013b6c 	.word	0x08013b6c
 80096f0:	40014000 	.word	0x40014000
 80096f4:	40001800 	.word	0x40001800

080096f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009720:	b084      	sub	sp, #16
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	f107 001c 	add.w	r0, r7, #28
 800972e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	2b01      	cmp	r3, #1
 8009736:	d122      	bne.n	800977e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800974c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009762:	2b01      	cmp	r3, #1
 8009764:	d105      	bne.n	8009772 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f94a 	bl	8009a0c <USB_CoreReset>
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]
 800977c:	e01a      	b.n	80097b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f93e 	bl	8009a0c <USB_CoreReset>
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	639a      	str	r2, [r3, #56]	; 0x38
 80097a6:	e005      	b.n	80097b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d10b      	bne.n	80097d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f043 0206 	orr.w	r2, r3, #6
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097de:	b004      	add	sp, #16
 80097e0:	4770      	bx	lr

080097e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f043 0201 	orr.w	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f023 0201 	bic.w	r2, r3, #1
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d106      	bne.n	8009852 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	60da      	str	r2, [r3, #12]
 8009850:	e00b      	b.n	800986a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]
 8009864:	e001      	b.n	800986a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e003      	b.n	8009872 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800986a:	2032      	movs	r0, #50	; 0x32
 800986c:	f7f9 f9ce 	bl	8002c0c <HAL_Delay>

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	019b      	lsls	r3, r3, #6
 800988e:	f043 0220 	orr.w	r2, r3, #32
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3301      	adds	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4a09      	ldr	r2, [pc, #36]	; (80098c4 <USB_FlushTxFifo+0x48>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d901      	bls.n	80098a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e006      	b.n	80098b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d0f0      	beq.n	8009896 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	00030d40 	.word	0x00030d40

080098c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2210      	movs	r2, #16
 80098d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a09      	ldr	r2, [pc, #36]	; (8009908 <USB_FlushRxFifo+0x40>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d901      	bls.n	80098ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e006      	b.n	80098fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b10      	cmp	r3, #16
 80098f6:	d0f0      	beq.n	80098da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	00030d40 	.word	0x00030d40

0800990c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800990c:	b480      	push	{r7}
 800990e:	b089      	sub	sp, #36	; 0x24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4611      	mov	r1, r2
 8009918:	461a      	mov	r2, r3
 800991a:	460b      	mov	r3, r1
 800991c:	71fb      	strb	r3, [r7, #7]
 800991e:	4613      	mov	r3, r2
 8009920:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800992a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11a      	bne.n	8009968 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009932:	88bb      	ldrh	r3, [r7, #4]
 8009934:	3303      	adds	r3, #3
 8009936:	089b      	lsrs	r3, r3, #2
 8009938:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800993a:	2300      	movs	r3, #0
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	e00f      	b.n	8009960 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	031a      	lsls	r2, r3, #12
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994c:	461a      	mov	r2, r3
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3304      	adds	r3, #4
 8009958:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	3301      	adds	r3, #1
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	429a      	cmp	r2, r3
 8009966:	d3eb      	bcc.n	8009940 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3724      	adds	r7, #36	; 0x24
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009976:	b480      	push	{r7}
 8009978:	b089      	sub	sp, #36	; 0x24
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	4613      	mov	r3, r2
 8009982:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	3303      	adds	r3, #3
 8009990:	089b      	lsrs	r3, r3, #2
 8009992:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e00b      	b.n	80099b2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	3304      	adds	r3, #4
 80099aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61bb      	str	r3, [r7, #24]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d3ef      	bcc.n	800999a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80099ba:	69fb      	ldr	r3, [r7, #28]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3724      	adds	r7, #36	; 0x24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4013      	ands	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099e0:	68fb      	ldr	r3, [r7, #12]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	f003 0301 	and.w	r3, r3, #1
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
	...

08009a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4a13      	ldr	r2, [pc, #76]	; (8009a70 <USB_CoreReset+0x64>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d901      	bls.n	8009a2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e01b      	b.n	8009a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	daf2      	bge.n	8009a18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f043 0201 	orr.w	r2, r3, #1
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3301      	adds	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4a09      	ldr	r2, [pc, #36]	; (8009a70 <USB_CoreReset+0x64>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d901      	bls.n	8009a54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e006      	b.n	8009a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d0f0      	beq.n	8009a42 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	00030d40 	.word	0x00030d40

08009a74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a74:	b084      	sub	sp, #16
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	f107 001c 	add.w	r0, r7, #28
 8009a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a90:	461a      	mov	r2, r3
 8009a92:	2300      	movs	r3, #0
 8009a94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d10a      	bne.n	8009ae2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ada:	f043 0304 	orr.w	r3, r3, #4
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	e014      	b.n	8009b0c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009af0:	f023 0304 	bic.w	r3, r3, #4
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	e009      	b.n	8009b0c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b06:	f023 0304 	bic.w	r3, r3, #4
 8009b0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009b0c:	2110      	movs	r1, #16
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff feb4 	bl	800987c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff fed7 	bl	80098c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e015      	b.n	8009b4c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	461a      	mov	r2, r3
 8009b42:	2300      	movs	r3, #0
 8009b44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d3e5      	bcc.n	8009b20 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009b54:	2101      	movs	r1, #1
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8ac 	bl	8009cb4 <USB_DriveVbus>

  HAL_Delay(200U);
 8009b5c:	20c8      	movs	r0, #200	; 0xc8
 8009b5e:	f7f9 f855 	bl	8002c0c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b6e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a14      	ldr	r2, [pc, #80]	; (8009bd8 <USB_HostInit+0x164>)
 8009b88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a13      	ldr	r2, [pc, #76]	; (8009bdc <USB_HostInit+0x168>)
 8009b8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009b92:	e009      	b.n	8009ba8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2280      	movs	r2, #128	; 0x80
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a10      	ldr	r2, [pc, #64]	; (8009be0 <USB_HostInit+0x16c>)
 8009b9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a10      	ldr	r2, [pc, #64]	; (8009be4 <USB_HostInit+0x170>)
 8009ba4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d105      	bne.n	8009bba <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f043 0210 	orr.w	r2, r3, #16
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <USB_HostInit+0x174>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bd2:	b004      	add	sp, #16
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	01000200 	.word	0x01000200
 8009bdc:	00e00300 	.word	0x00e00300
 8009be0:	00600080 	.word	0x00600080
 8009be4:	004000e0 	.word	0x004000e0
 8009be8:	a3200008 	.word	0xa3200008

08009bec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c24:	4313      	orrs	r3, r2
 8009c26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d107      	bne.n	8009c3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c34:	461a      	mov	r2, r3
 8009c36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009c3a:	6053      	str	r3, [r2, #4]
 8009c3c:	e009      	b.n	8009c52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d106      	bne.n	8009c52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009c50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c90:	2064      	movs	r0, #100	; 0x64
 8009c92:	f7f8 ffbb 	bl	8002c0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ca4:	200a      	movs	r0, #10
 8009ca6:	f7f8 ffb1 	bl	8002c0c <HAL_Delay>

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009cd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d109      	bne.n	8009cf8 <USB_DriveVbus+0x44>
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d106      	bne.n	8009cf8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cf6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	d109      	bne.n	8009d18 <USB_DriveVbus+0x64>
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	0c5b      	lsrs	r3, r3, #17
 8009d44:	f003 0303 	and.w	r3, r3, #3
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	b29b      	uxth	r3, r3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
	...

08009d78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	461a      	mov	r2, r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	70fb      	strb	r3, [r7, #3]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	70bb      	strb	r3, [r7, #2]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009d9a:	78fb      	ldrb	r3, [r7, #3]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da6:	461a      	mov	r2, r3
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d87e      	bhi.n	8009eb4 <USB_HC_Init+0x13c>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <USB_HC_Init+0x44>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009e77 	.word	0x08009e77
 8009dc4:	08009dcd 	.word	0x08009dcd
 8009dc8:	08009e39 	.word	0x08009e39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f240 439d 	movw	r3, #1181	; 0x49d
 8009dde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da10      	bge.n	8009e0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	78fa      	ldrb	r2, [r7, #3]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e06:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009e08:	e057      	b.n	8009eba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d051      	beq.n	8009eba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e34:	60d3      	str	r3, [r2, #12]
      break;
 8009e36:	e040      	b.n	8009eba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e44:	461a      	mov	r2, r3
 8009e46:	f240 639d 	movw	r3, #1693	; 0x69d
 8009e4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da34      	bge.n	8009ebe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e74:	e023      	b.n	8009ebe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e82:	461a      	mov	r2, r3
 8009e84:	f240 2325 	movw	r3, #549	; 0x225
 8009e88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da17      	bge.n	8009ec2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	78fa      	ldrb	r2, [r7, #3]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009eb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009eb2:	e006      	b.n	8009ec2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb8:	e004      	b.n	8009ec4 <USB_HC_Init+0x14c>
      break;
 8009eba:	bf00      	nop
 8009ebc:	e002      	b.n	8009ec4 <USB_HC_Init+0x14c>
      break;
 8009ebe:	bf00      	nop
 8009ec0:	e000      	b.n	8009ec4 <USB_HC_Init+0x14c>
      break;
 8009ec2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eca:	699a      	ldr	r2, [r3, #24]
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009eee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da03      	bge.n	8009efe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	e001      	b.n	8009f02 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009f02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d103      	bne.n	8009f12 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e001      	b.n	8009f16 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f16:	787b      	ldrb	r3, [r7, #1]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f1e:	78bb      	ldrb	r3, [r7, #2]
 8009f20:	02db      	lsls	r3, r3, #11
 8009f22:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f2c:	049b      	lsls	r3, r3, #18
 8009f2e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	0159      	lsls	r1, r3, #5
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	440b      	add	r3, r1
 8009f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f4c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f52:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009f54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d10f      	bne.n	8009f7c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f7a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop

08009f8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4613      	mov	r3, r2
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fa8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d028      	beq.n	800a008 <USB_HC_StartXfer+0x7c>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	791b      	ldrb	r3, [r3, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d124      	bne.n	800a008 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10b      	bne.n	8009fdc <USB_HC_StartXfer+0x50>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d107      	bne.n	8009fdc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fa30 	bl	800a438 <USB_DoPing>
      return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e114      	b.n	800a206 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d112      	bne.n	800a008 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ffc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a000:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d018      	beq.n	800a042 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	8912      	ldrh	r2, [r2, #8]
 800a018:	4413      	add	r3, r2
 800a01a:	3b01      	subs	r3, #1
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	8912      	ldrh	r2, [r2, #8]
 800a020:	fbb3 f3f2 	udiv	r3, r3, r2
 800a024:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a026:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a028:	8b7b      	ldrh	r3, [r7, #26]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d90b      	bls.n	800a046 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a02e:	8b7b      	ldrh	r3, [r7, #26]
 800a030:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	8912      	ldrh	r2, [r2, #8]
 800a038:	fb02 f203 	mul.w	r2, r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	611a      	str	r2, [r3, #16]
 800a040:	e001      	b.n	800a046 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a042:	2301      	movs	r3, #1
 800a044:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	78db      	ldrb	r3, [r3, #3]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d006      	beq.n	800a05c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a04e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	8912      	ldrh	r2, [r2, #8]
 800a054:	fb02 f203 	mul.w	r2, r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a066:	04d9      	lsls	r1, r3, #19
 800a068:	4b69      	ldr	r3, [pc, #420]	; (800a210 <USB_HC_StartXfer+0x284>)
 800a06a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a06c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	7a9b      	ldrb	r3, [r3, #10]
 800a072:	075b      	lsls	r3, r3, #29
 800a074:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a078:	69f9      	ldr	r1, [r7, #28]
 800a07a:	0148      	lsls	r0, r1, #5
 800a07c:	6a39      	ldr	r1, [r7, #32]
 800a07e:	4401      	add	r1, r0
 800a080:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a084:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a086:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	68d9      	ldr	r1, [r3, #12]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09e:	460a      	mov	r2, r1
 800a0a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bf0c      	ite	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	2300      	movne	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69fa      	ldr	r2, [r7, #28]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	6a3a      	ldr	r2, [r7, #32]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	7e7b      	ldrb	r3, [r7, #25]
 800a0ea:	075b      	lsls	r3, r3, #29
 800a0ec:	69f9      	ldr	r1, [r7, #28]
 800a0ee:	0148      	lsls	r0, r1, #5
 800a0f0:	6a39      	ldr	r1, [r7, #32]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	4413      	add	r3, r2
 800a104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a42      	ldr	r2, [pc, #264]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a10c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a10e:	4b41      	ldr	r3, [pc, #260]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a116:	4a3f      	ldr	r2, [pc, #252]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a118:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	78db      	ldrb	r3, [r3, #3]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a122:	4b3c      	ldr	r3, [pc, #240]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12a:	4a3a      	ldr	r2, [pc, #232]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e005      	b.n	800a13c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a130:	4b38      	ldr	r3, [pc, #224]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a138:	4a36      	ldr	r2, [pc, #216]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a13a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a13c:	4b35      	ldr	r3, [pc, #212]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a144:	4a33      	ldr	r2, [pc, #204]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a146:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a154:	461a      	mov	r2, r3
 800a156:	4b2f      	ldr	r3, [pc, #188]	; (800a214 <USB_HC_StartXfer+0x288>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	e04f      	b.n	800a206 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	78db      	ldrb	r3, [r3, #3]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d14a      	bne.n	800a204 <USB_HC_StartXfer+0x278>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d046      	beq.n	800a204 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	79db      	ldrb	r3, [r3, #7]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d830      	bhi.n	800a1e0 <USB_HC_StartXfer+0x254>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <USB_HC_StartXfer+0x1f8>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a195 	.word	0x0800a195
 800a188:	0800a1b9 	.word	0x0800a1b9
 800a18c:	0800a195 	.word	0x0800a195
 800a190:	0800a1b9 	.word	0x0800a1b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	3303      	adds	r3, #3
 800a19a:	089b      	lsrs	r3, r3, #2
 800a19c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a19e:	8afa      	ldrh	r2, [r7, #22]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d91c      	bls.n	800a1e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f043 0220 	orr.w	r2, r3, #32
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1b6:	e015      	b.n	800a1e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	3303      	adds	r3, #3
 800a1be:	089b      	lsrs	r3, r3, #2
 800a1c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a1c2:	8afa      	ldrh	r2, [r7, #22]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d90a      	bls.n	800a1e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1de:	e003      	b.n	800a1e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <USB_HC_StartXfer+0x25e>
        break;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <USB_HC_StartXfer+0x25e>
        break;
 800a1e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	68d9      	ldr	r1, [r3, #12]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	785a      	ldrb	r2, [r3, #1]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	b298      	uxth	r0, r3
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff fb84 	bl	800990c <USB_WritePacket>
  }

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3728      	adds	r7, #40	; 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	1ff80000 	.word	0x1ff80000
 800a214:	200002a0 	.word	0x200002a0

0800a218 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	b29b      	uxth	r3, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b087      	sub	sp, #28
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	0c9b      	lsrs	r3, r3, #18
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <USB_HC_Halt+0x3a>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d16c      	bne.n	800a34e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a28e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a292:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d143      	bne.n	800a328 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	0151      	lsls	r1, r2, #5
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	440a      	add	r2, r1
 800a2b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	0151      	lsls	r1, r2, #5
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	440a      	add	r2, r1
 800a2f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3301      	adds	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a30c:	d81d      	bhi.n	800a34a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	4413      	add	r3, r2
 800a316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a324:	d0ec      	beq.n	800a300 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a326:	e080      	b.n	800a42a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a346:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a348:	e06f      	b.n	800a42a <USB_HC_Halt+0x1f0>
          break;
 800a34a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a34c:	e06d      	b.n	800a42a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	440a      	add	r2, r1
 800a364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d143      	bne.n	800a406 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	4413      	add	r3, r2
 800a386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	0151      	lsls	r1, r2, #5
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	440a      	add	r2, r1
 800a394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a39c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	0151      	lsls	r1, r2, #5
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	440a      	add	r2, r1
 800a3d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3dc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3ea:	d81d      	bhi.n	800a428 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a402:	d0ec      	beq.n	800a3de <USB_HC_Halt+0x1a4>
 800a404:	e011      	b.n	800a42a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	e000      	b.n	800a42a <USB_HC_Halt+0x1f0>
          break;
 800a428:	bf00      	nop
    }
  }

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a44c:	2301      	movs	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	04da      	lsls	r2, r3, #19
 800a454:	4b15      	ldr	r3, [pc, #84]	; (800a4ac <USB_DoPing+0x74>)
 800a456:	4013      	ands	r3, r2
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	0151      	lsls	r1, r2, #5
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	440a      	add	r2, r1
 800a460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a468:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a480:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a488:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	461a      	mov	r2, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	1ff80000 	.word	0x1ff80000

0800a4b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff f99f 	bl	8009804 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a4c6:	2110      	movs	r1, #16
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff f9d7 	bl	800987c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff f9fa 	bl	80098c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	e01f      	b.n	800a51a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a500:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50e:	461a      	mov	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3301      	adds	r3, #1
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b0f      	cmp	r3, #15
 800a51e:	d9dc      	bls.n	800a4da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a520:	2300      	movs	r3, #0
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	e034      	b.n	800a590 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a53c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a544:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a54c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a55a:	461a      	mov	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	3301      	adds	r3, #1
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a56c:	d80c      	bhi.n	800a588 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4413      	add	r3, r2
 800a576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a584:	d0ec      	beq.n	800a560 <USB_StopHost+0xb0>
 800a586:	e000      	b.n	800a58a <USB_StopHost+0xda>
        break;
 800a588:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	3301      	adds	r3, #1
 800a58e:	613b      	str	r3, [r7, #16]
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d9c7      	bls.n	800a526 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a59c:	461a      	mov	r2, r3
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff f918 	bl	80097e2 <USB_EnableGlobalInt>

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a5c0:	4904      	ldr	r1, [pc, #16]	; (800a5d4 <MX_FATFS_Init+0x18>)
 800a5c2:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <MX_FATFS_Init+0x1c>)
 800a5c4:	f006 fac6 	bl	8010b54 <FATFS_LinkDriver>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <MX_FATFS_Init+0x20>)
 800a5ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a5d0:	bf00      	nop
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200031bc 	.word	0x200031bc
 800a5d8:	08013c14 	.word	0x08013c14
 800a5dc:	20003624 	.word	0x20003624

0800a5e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a5e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	4619      	mov	r1, r3
 800a61a:	4808      	ldr	r0, [pc, #32]	; (800a63c <USBH_status+0x34>)
 800a61c:	f001 fa0f 	bl	800ba3e <USBH_MSC_UnitIsReady>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <USBH_status+0x24>
  {
    res = RES_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
 800a62a:	e001      	b.n	800a630 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20003628 	.word	0x20003628

0800a640 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b094      	sub	sp, #80	; 0x50
 800a644:	af02      	add	r7, sp, #8
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a656:	7bf9      	ldrb	r1, [r7, #15]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	4812      	ldr	r0, [pc, #72]	; (800a6ac <USBH_read+0x6c>)
 800a662:	f001 fa36 	bl	800bad2 <USBH_MSC_Read>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <USBH_read+0x34>
  {
    res = RES_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a672:	e015      	b.n	800a6a0 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a674:	f107 0210 	add.w	r2, r7, #16
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	4619      	mov	r1, r3
 800a67c:	480b      	ldr	r0, [pc, #44]	; (800a6ac <USBH_read+0x6c>)
 800a67e:	f001 fa04 	bl	800ba8a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a682:	7f7b      	ldrb	r3, [r7, #29]
 800a684:	2b28      	cmp	r3, #40	; 0x28
 800a686:	d003      	beq.n	800a690 <USBH_read+0x50>
 800a688:	2b3a      	cmp	r3, #58	; 0x3a
 800a68a:	d001      	beq.n	800a690 <USBH_read+0x50>
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d103      	bne.n	800a698 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a690:	2303      	movs	r3, #3
 800a692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a696:	e003      	b.n	800a6a0 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a69e:	bf00      	nop
    }
  }

  return res;
 800a6a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3748      	adds	r7, #72	; 0x48
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20003628 	.word	0x20003628

0800a6b0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b094      	sub	sp, #80	; 0x50
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a6c6:	7bf9      	ldrb	r1, [r7, #15]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	4817      	ldr	r0, [pc, #92]	; (800a730 <USBH_write+0x80>)
 800a6d2:	f001 fa67 	bl	800bba4 <USBH_MSC_Write>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d103      	bne.n	800a6e4 <USBH_write+0x34>
  {
    res = RES_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a6e2:	e01f      	b.n	800a724 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a6e4:	f107 0210 	add.w	r2, r7, #16
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4810      	ldr	r0, [pc, #64]	; (800a730 <USBH_write+0x80>)
 800a6ee:	f001 f9cc 	bl	800ba8a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a6f2:	7f7b      	ldrb	r3, [r7, #29]
 800a6f4:	2b27      	cmp	r3, #39	; 0x27
 800a6f6:	d009      	beq.n	800a70c <USBH_write+0x5c>
 800a6f8:	2b27      	cmp	r3, #39	; 0x27
 800a6fa:	dc02      	bgt.n	800a702 <USBH_write+0x52>
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d009      	beq.n	800a714 <USBH_write+0x64>
 800a700:	e00c      	b.n	800a71c <USBH_write+0x6c>
 800a702:	2b28      	cmp	r3, #40	; 0x28
 800a704:	d006      	beq.n	800a714 <USBH_write+0x64>
 800a706:	2b3a      	cmp	r3, #58	; 0x3a
 800a708:	d004      	beq.n	800a714 <USBH_write+0x64>
 800a70a:	e007      	b.n	800a71c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a70c:	2302      	movs	r3, #2
 800a70e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a712:	e007      	b.n	800a724 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a714:	2303      	movs	r3, #3
 800a716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a71a:	e003      	b.n	800a724 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a722:	bf00      	nop
    }
  }

  return res;
 800a724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3748      	adds	r7, #72	; 0x48
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20003628 	.word	0x20003628

0800a734 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b090      	sub	sp, #64	; 0x40
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	603a      	str	r2, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
 800a740:	460b      	mov	r3, r1
 800a742:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a74a:	79bb      	ldrb	r3, [r7, #6]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d852      	bhi.n	800a7f6 <USBH_ioctl+0xc2>
 800a750:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <USBH_ioctl+0x24>)
 800a752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a756:	bf00      	nop
 800a758:	0800a769 	.word	0x0800a769
 800a75c:	0800a771 	.word	0x0800a771
 800a760:	0800a79b 	.word	0x0800a79b
 800a764:	0800a7c7 	.word	0x0800a7c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a76e:	e045      	b.n	800a7fc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a770:	f107 0208 	add.w	r2, r7, #8
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	4619      	mov	r1, r3
 800a778:	4823      	ldr	r0, [pc, #140]	; (800a808 <USBH_ioctl+0xd4>)
 800a77a:	f001 f986 	bl	800ba8a <USBH_MSC_GetLUNInfo>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d106      	bne.n	800a792 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a790:	e034      	b.n	800a7fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a798:	e030      	b.n	800a7fc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a79a:	f107 0208 	add.w	r2, r7, #8
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4819      	ldr	r0, [pc, #100]	; (800a808 <USBH_ioctl+0xd4>)
 800a7a4:	f001 f971 	bl	800ba8a <USBH_MSC_GetLUNInfo>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d107      	bne.n	800a7be <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a7ae:	8a3b      	ldrh	r3, [r7, #16]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7bc:	e01e      	b.n	800a7fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7c4:	e01a      	b.n	800a7fc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a7c6:	f107 0208 	add.w	r2, r7, #8
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	480e      	ldr	r0, [pc, #56]	; (800a808 <USBH_ioctl+0xd4>)
 800a7d0:	f001 f95b 	bl	800ba8a <USBH_MSC_GetLUNInfo>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a7da:	8a3b      	ldrh	r3, [r7, #16]
 800a7dc:	0a5b      	lsrs	r3, r3, #9
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7ec:	e006      	b.n	800a7fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7f4:	e002      	b.n	800a7fc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a7f6:	2304      	movs	r3, #4
 800a7f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a800:	4618      	mov	r0, r3
 800a802:	3740      	adds	r7, #64	; 0x40
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20003628 	.word	0x20003628

0800a80c <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fbd8 	bl	800afcc <LCD5110_refresh_ll>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68b9      	ldr	r1, [r7, #8]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f880 	bl	800a940 <LCD5110_wset_cursor>
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f95e 	bl	800ab14 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	2100      	movs	r1, #0
 800a85c:	2000      	movs	r0, #0
 800a85e:	f7ff ffe1 	bl	800a824 <LCD5110_set_cursor>
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f892 	bl	800a9aa <LCD5110_wprint>
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800a890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a892:	b08b      	sub	sp, #44	; 0x2c
 800a894:	af04      	add	r7, sp, #16
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4613      	mov	r3, r2
 800a89e:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	db41      	blt.n	800a92e <LCD5110_wputchar+0x9e>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	db3c      	blt.n	800a92e <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	2306      	movs	r3, #6
 800a8be:	4413      	add	r3, r2
 800a8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d833      	bhi.n	800a932 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	2308      	movs	r3, #8
 800a8d4:	4413      	add	r3, r2
 800a8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d828      	bhi.n	800a932 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 800a8e0:	4b16      	ldr	r3, [pc, #88]	; (800a93c <LCD5110_wputchar+0xac>)
 800a8e2:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	18d0      	adds	r0, r2, r3
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	18d1      	adds	r1, r2, r3
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	2206      	movs	r2, #6
 800a900:	fb02 f303 	mul.w	r3, r2, r3
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	441a      	add	r2, r3
 800a908:	2306      	movs	r3, #6
 800a90a:	461e      	mov	r6, r3
 800a90c:	2308      	movs	r3, #8
 800a90e:	461c      	mov	r4, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	bf0c      	ite	eq
 800a916:	2301      	moveq	r3, #1
 800a918:	2300      	movne	r3, #0
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	461d      	mov	r5, r3
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	9302      	str	r3, [sp, #8]
 800a922:	9501      	str	r5, [sp, #4]
 800a924:	9400      	str	r4, [sp, #0]
 800a926:	4633      	mov	r3, r6
 800a928:	f000 f94e 	bl	800abc8 <LCD5110_drawBitmap>
 800a92c:	e002      	b.n	800a934 <LCD5110_wputchar+0xa4>
		return;
 800a92e:	bf00      	nop
 800a930:	e000      	b.n	800a934 <LCD5110_wputchar+0xa4>
		return;
 800a932:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93a:	bf00      	nop
 800a93c:	08013c28 	.word	0x08013c28

0800a940 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	b21a      	sxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	b21a      	sxth	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	815a      	strh	r2, [r3, #10]
}
 800a95e:	bf00      	nop
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	2308      	movs	r3, #8
 800a97e:	b29b      	uxth	r3, r3
 800a980:	4413      	add	r3, r2
 800a982:	b29b      	uxth	r3, r3
 800a984:	3301      	adds	r3, #1
 800a986:	b29b      	uxth	r3, r3
 800a988:	b21a      	sxth	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2202      	movs	r2, #2
 800a992:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	7b1b      	ldrb	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800a99c:	6838      	ldr	r0, [r7, #0]
 800a99e:	f7ff ff35 	bl	800a80c <LCD5110_refresh>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af02      	add	r7, sp, #8
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	607a      	str	r2, [r7, #4]
 800a9b6:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 800a9b8:	e055      	b.n	800aa66 <LCD5110_wprint+0xbc>
		if (*str != '\n') {
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b0a      	cmp	r3, #10
 800a9c0:	d010      	beq.n	800a9e4 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f7ff ff56 	bl	800a890 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	2306      	movs	r3, #6
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	b21a      	sxth	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa00:	461a      	mov	r2, r3
 800aa02:	2306      	movs	r3, #6
 800aa04:	4413      	add	r3, r2
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d904      	bls.n	800aa1a <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3301      	adds	r3, #1
 800aa14:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800aa16:	2b0a      	cmp	r3, #10
 800aa18:	d103      	bne.n	800aa22 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b0a      	cmp	r3, #10
 800aa20:	d113      	bne.n	800aa4a <LCD5110_wprint+0xa0>
		{
			LCD5110_wendl(win, lcd_conf);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ffa0 	bl	800a96a <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 800aa2a:	f007 ff21 	bl	8012870 <__locale_ctype_ptr>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	4413      	add	r3, r2
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <LCD5110_wprint+0xa0>
				++str;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800aa50:	461a      	mov	r2, r3
 800aa52:	2308      	movs	r3, #8
 800aa54:	4413      	add	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d807      	bhi.n	800aa70 <LCD5110_wprint+0xc6>
			break;
		str++;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3301      	adds	r3, #1
 800aa64:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1a5      	bne.n	800a9ba <LCD5110_wprint+0x10>

	}
}
 800aa6e:	e000      	b.n	800aa72 <LCD5110_wprint+0xc8>
			break;
 800aa70:	bf00      	nop
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 800aa7a:	b40c      	push	{r2, r3}
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b09e      	sub	sp, #120	; 0x78
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 800aa86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aa8a:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 800aa8c:	f107 0010 	add.w	r0, r7, #16
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa96:	2164      	movs	r1, #100	; 0x64
 800aa98:	f008 f846 	bl	8012b28 <vsniprintf>
 800aa9c:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 800aa9e:	f107 0310 	add.w	r3, r7, #16
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fedf 	bl	800a86a <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff fea8 	bl	800a80c <LCD5110_refresh>

	va_end(vargs);

	return res;
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3778      	adds	r7, #120	; 0x78
 800aac2:	46bd      	mov	sp, r7
 800aac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aac8:	b002      	add	sp, #8
 800aaca:	4770      	bx	lr

0800aacc <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	10db      	asrs	r3, r3, #3
 800aadc:	2254      	movs	r2, #84	; 0x54
 800aade:	fb02 f203 	mul.w	r2, r2, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	4413      	add	r3, r2
 800aae6:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2201      	movs	r2, #1
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	753b      	strb	r3, [r7, #20]

	return res;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	461a      	mov	r2, r3
 800aafc:	f107 0310 	add.w	r3, r7, #16
 800ab00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab04:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e008      	b.n	800ab34 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	331c      	adds	r3, #28
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800ab3a:	dbf2      	blt.n	800ab22 <LCD5110_clrscr+0xe>
	}
}
 800ab3c:	bf00      	nop
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	db31      	blt.n	800abc0 <LCD5110_putpix+0x78>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	db2e      	blt.n	800abc0 <LCD5110_putpix+0x78>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b53      	cmp	r3, #83	; 0x53
 800ab66:	dc2b      	bgt.n	800abc0 <LCD5110_putpix+0x78>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b2f      	cmp	r3, #47	; 0x2f
 800ab6c:	dc28      	bgt.n	800abc0 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 800ab6e:	f107 0310 	add.w	r3, r7, #16
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	68f9      	ldr	r1, [r7, #12]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff ffa8 	bl	800aacc <xy_to_pix>

	if (color)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00c      	beq.n	800ab9c <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	4413      	add	r3, r2
 800ab88:	7f19      	ldrb	r1, [r3, #28]
 800ab8a:	7d3a      	ldrb	r2, [r7, #20]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	b2d1      	uxtb	r1, r2
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	4413      	add	r3, r2
 800ab96:	460a      	mov	r2, r1
 800ab98:	771a      	strb	r2, [r3, #28]
 800ab9a:	e012      	b.n	800abc2 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4413      	add	r3, r2
 800aba2:	7f1b      	ldrb	r3, [r3, #28]
 800aba4:	b25a      	sxtb	r2, r3
 800aba6:	7d3b      	ldrb	r3, [r7, #20]
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	43db      	mvns	r3, r3
 800abac:	b25b      	sxtb	r3, r3
 800abae:	4013      	ands	r3, r2
 800abb0:	b25a      	sxtb	r2, r3
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	b2d1      	uxtb	r1, r2
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4413      	add	r3, r2
 800abba:	460a      	mov	r2, r1
 800abbc:	771a      	strb	r2, [r3, #28]
 800abbe:	e000      	b.n	800abc2 <LCD5110_putpix+0x7a>
		return;
 800abc0:	bf00      	nop
}
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800abd6:	2300      	movs	r3, #0
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	e042      	b.n	800ac62 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 800abdc:	2300      	movs	r3, #0
 800abde:	61bb      	str	r3, [r7, #24]
 800abe0:	e038      	b.n	800ac54 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da00      	bge.n	800abea <LCD5110_drawBitmap+0x22>
 800abe8:	3307      	adds	r3, #7
 800abea:	10db      	asrs	r3, r3, #3
 800abec:	461a      	mov	r2, r3
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	fb03 f202 	mul.w	r2, r3, r2
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	4413      	add	r3, r2
 800abf8:	461a      	mov	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	425a      	negs	r2, r3
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	f002 0207 	and.w	r2, r2, #7
 800ac0e:	bf58      	it	pl
 800ac10:	4253      	negpl	r3, r2
 800ac12:	2201      	movs	r2, #1
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	b25a      	sxtb	r2, r3
 800ac1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	b25b      	sxtb	r3, r3
 800ac22:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	18d0      	adds	r0, r2, r3
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	18d1      	adds	r1, r2, r3
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <LCD5110_drawBitmap+0x7e>
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2301      	moveq	r3, #1
 800ac3e:	2300      	movne	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	461a      	mov	r2, r3
 800ac44:	e000      	b.n	800ac48 <LCD5110_drawBitmap+0x80>
 800ac46:	7dfa      	ldrb	r2, [r7, #23]
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f7ff ff7d 	bl	800ab48 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	3301      	adds	r3, #1
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	dbc2      	blt.n	800abe2 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	69fa      	ldr	r2, [r7, #28]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	dbb8      	blt.n	800abdc <LCD5110_drawBitmap+0x14>
		}
	}
}
 800ac6a:	bf00      	nop
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	4603      	mov	r3, r0
 800ac7a:	6039      	str	r1, [r7, #0]
 800ac7c:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	1df9      	adds	r1, r7, #7
 800ac84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f7fd fb3f 	bl	800830c <HAL_SPI_Transmit>
 800ac8e:	4603      	mov	r3, r0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	460b      	mov	r3, r1
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	897a      	ldrh	r2, [r7, #10]
 800acac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800acb0:	68f9      	ldr	r1, [r7, #12]
 800acb2:	f7fd fb2b 	bl	800830c <HAL_SPI_Transmit>
 800acb6:	4603      	mov	r3, r0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6898      	ldr	r0, [r3, #8]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	889b      	ldrh	r3, [r3, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	4619      	mov	r1, r3
 800acd4:	f7f9 fe4c 	bl	8004970 <HAL_GPIO_WritePin>
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6998      	ldr	r0, [r3, #24]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	8a9b      	ldrh	r3, [r3, #20]
 800acf0:	2201      	movs	r2, #1
 800acf2:	4619      	mov	r1, r3
 800acf4:	f7f9 fe3c 	bl	8004970 <HAL_GPIO_WritePin>
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6998      	ldr	r0, [r3, #24]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	8a9b      	ldrh	r3, [r3, #20]
 800ad10:	2200      	movs	r2, #0
 800ad12:	4619      	mov	r1, r3
 800ad14:	f7f9 fe2c 	bl	8004970 <HAL_GPIO_WritePin>
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6918      	ldr	r0, [r3, #16]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	899b      	ldrh	r3, [r3, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	4619      	mov	r1, r3
 800ad34:	f7f9 fe1c 	bl	8004970 <HAL_GPIO_WritePin>
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6918      	ldr	r0, [r3, #16]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	899b      	ldrh	r3, [r3, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	4619      	mov	r1, r3
 800ad54:	f7f9 fe0c 	bl	8004970 <HAL_GPIO_WritePin>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	f023 0320 	bic.w	r3, r3, #32
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	dd01      	ble.n	800ad7a <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e008      	b.n	800ad8c <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	f043 0320 	orr.w	r3, r3, #32
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ff74 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	6039      	str	r1, [r7, #0]
 800ad9e:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	f023 030d 	bic.w	r3, r3, #13
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 800adaa:	2302      	movs	r3, #2
 800adac:	e005      	b.n	800adba <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff ff5d 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	4603      	mov	r3, r0
 800adca:	6039      	str	r1, [r7, #0]
 800adcc:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 800adce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da01      	bge.n	800adda <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 800add6:	2303      	movs	r3, #3
 800add8:	e008      	b.n	800adec <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff ff44 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	6039      	str	r1, [r7, #0]
 800adfe:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d901      	bls.n	800ae0a <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 800ae06:	2304      	movs	r3, #4
 800ae08:	e008      	b.n	800ae1c <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	f043 0304 	orr.w	r3, r3, #4
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ff2c 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6039      	str	r1, [r7, #0]
 800ae2e:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	2b07      	cmp	r3, #7
 800ae34:	d901      	bls.n	800ae3a <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 800ae36:	2305      	movs	r3, #5
 800ae38:	e008      	b.n	800ae4c <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	f043 0310 	orr.w	r3, r3, #16
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ff14 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 800ae60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	db03      	blt.n	800ae70 <LCD5110_set_X_base+0x1c>
 800ae68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae6c:	2b53      	cmp	r3, #83	; 0x53
 800ae6e:	dd01      	ble.n	800ae74 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 800ae70:	2307      	movs	r3, #7
 800ae72:	e00a      	b.n	800ae8a <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 800ae74:	88fb      	ldrh	r3, [r7, #6]
 800ae76:	b25b      	sxtb	r3, r3
 800ae78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff fef5 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	4603      	mov	r3, r0
 800ae9a:	6039      	str	r1, [r7, #0]
 800ae9c:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800ae9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	db03      	blt.n	800aeae <LCD5110_set_Y_base+0x1c>
 800aea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	dd01      	ble.n	800aeb2 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800aeae:	2307      	movs	r3, #7
 800aeb0:	e00a      	b.n	800aec8 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fed6 	bl	800ac72 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	603a      	str	r2, [r7, #0]
 800aeda:	80fb      	strh	r3, [r7, #6]
 800aedc:	460b      	mov	r3, r1
 800aede:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800aee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff ffb4 	bl	800ae54 <LCD5110_set_X_base>
 800aeec:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <LCD5110_set_XY_base+0x28>
		return res;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	e00c      	b.n	800af12 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 800aef8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff ffc7 	bl	800ae92 <LCD5110_set_Y_base>
 800af04:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <LCD5110_set_XY_base+0x40>
		return res;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	e000      	b.n	800af12 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af34:	601a      	str	r2, [r3, #0]
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	4608      	mov	r0, r1
 800af4c:	4611      	mov	r1, r2
 800af4e:	461a      	mov	r2, r3
 800af50:	4603      	mov	r3, r0
 800af52:	70fb      	strb	r3, [r7, #3]
 800af54:	460b      	mov	r3, r1
 800af56:	70bb      	strb	r3, [r7, #2]
 800af58:	4613      	mov	r3, r2
 800af5a:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ffdc 	bl	800af1a <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff feac 	bl	800acc0 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fee9 	bl	800ad40 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 800af6e:	2364      	movs	r3, #100	; 0x64
 800af70:	60fb      	str	r3, [r7, #12]
	while (--i){}
 800af72:	bf00      	nop
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3b01      	subs	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1fa      	bne.n	800af74 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fece 	bl	800ad20 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff febb 	bl	800ad00 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	2001      	movs	r0, #1
 800af8e:	f7ff fee7 	bl	800ad60 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 800af92:	78bb      	ldrb	r3, [r7, #2]
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff ff13 	bl	800adc2 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800af9c:	787b      	ldrb	r3, [r7, #1]
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff ff27 	bl	800adf4 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 800afa6:	7e3b      	ldrb	r3, [r7, #24]
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff ff3a 	bl	800ae24 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	2000      	movs	r0, #0
 800afb4:	f7ff fed4 	bl	800ad60 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fee9 	bl	800ad94 <LCD5110_set_mode_base>

	return LCD5110_OK;
 800afc2:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff fe73 	bl	800acc0 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fe90 	bl	800ad00 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	2100      	movs	r1, #0
 800afe4:	2000      	movs	r0, #0
 800afe6:	f7ff ff73 	bl	800aed0 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fe78 	bl	800ace0 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	331c      	adds	r3, #28
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fe4c 	bl	800ac98 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b008:	b590      	push	{r4, r7, lr}
 800b00a:	b089      	sub	sp, #36	; 0x24
 800b00c:	af04      	add	r7, sp, #16
 800b00e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b016:	7919      	ldrb	r1, [r3, #4]
 800b018:	2350      	movs	r3, #80	; 0x50
 800b01a:	2206      	movs	r2, #6
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fc4f 	bl	800c8c0 <USBH_FindInterface>
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	2bff      	cmp	r3, #255	; 0xff
 800b02a:	d002      	beq.n	800b032 <USBH_MSC_InterfaceInit+0x2a>
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d901      	bls.n	800b036 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b032:	2302      	movs	r3, #2
 800b034:	e0ef      	b.n	800b216 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 fc24 	bl	800c888 <USBH_SelectInterface>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b04a:	2302      	movs	r3, #2
 800b04c:	e0e3      	b.n	800b216 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b054:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b058:	f007 fc18 	bl	801288c <malloc>
 800b05c:	4603      	mov	r3, r0
 800b05e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b070:	2302      	movs	r3, #2
 800b072:	e0d0      	b.n	800b216 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b074:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b078:	2100      	movs	r1, #0
 800b07a:	68b8      	ldr	r0, [r7, #8]
 800b07c:	f007 fc33 	bl	80128e6 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	211a      	movs	r1, #26
 800b086:	fb01 f303 	mul.w	r3, r1, r3
 800b08a:	4413      	add	r3, r2
 800b08c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b25b      	sxtb	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	da16      	bge.n	800b0c6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	211a      	movs	r1, #26
 800b09e:	fb01 f303 	mul.w	r3, r1, r3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0a8:	781a      	ldrb	r2, [r3, #0]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	211a      	movs	r1, #26
 800b0b4:	fb01 f303 	mul.w	r3, r1, r3
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b0be:	881a      	ldrh	r2, [r3, #0]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	815a      	strh	r2, [r3, #10]
 800b0c4:	e015      	b.n	800b0f2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	211a      	movs	r1, #26
 800b0cc:	fb01 f303 	mul.w	r3, r1, r3
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	211a      	movs	r1, #26
 800b0e2:	fb01 f303 	mul.w	r3, r1, r3
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b0ec:	881a      	ldrh	r2, [r3, #0]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	211a      	movs	r1, #26
 800b0f8:	fb01 f303 	mul.w	r3, r1, r3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b25b      	sxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	da16      	bge.n	800b138 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	211a      	movs	r1, #26
 800b110:	fb01 f303 	mul.w	r3, r1, r3
 800b114:	4413      	add	r3, r2
 800b116:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	211a      	movs	r1, #26
 800b126:	fb01 f303 	mul.w	r3, r1, r3
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b130:	881a      	ldrh	r2, [r3, #0]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	815a      	strh	r2, [r3, #10]
 800b136:	e015      	b.n	800b164 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	211a      	movs	r1, #26
 800b13e:	fb01 f303 	mul.w	r3, r1, r3
 800b142:	4413      	add	r3, r2
 800b144:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b148:	781a      	ldrb	r2, [r3, #0]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	211a      	movs	r1, #26
 800b154:	fb01 f303 	mul.w	r3, r1, r3
 800b158:	4413      	add	r3, r2
 800b15a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b15e:	881a      	ldrh	r2, [r3, #0]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2200      	movs	r2, #0
 800b16e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	799b      	ldrb	r3, [r3, #6]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 fdc2 	bl	800dd06 <USBH_AllocPipe>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	79db      	ldrb	r3, [r3, #7]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f002 fdb8 	bl	800dd06 <USBH_AllocPipe>
 800b196:	4603      	mov	r3, r0
 800b198:	461a      	mov	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fda4 	bl	800bcec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	7959      	ldrb	r1, [r3, #5]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	7998      	ldrb	r0, [r3, #6]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	8912      	ldrh	r2, [r2, #8]
 800b1bc:	9202      	str	r2, [sp, #8]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	9201      	str	r2, [sp, #4]
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f002 fd6d 	bl	800dca8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	7919      	ldrb	r1, [r3, #4]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	79d8      	ldrb	r0, [r3, #7]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	8952      	ldrh	r2, [r2, #10]
 800b1e6:	9202      	str	r2, [sp, #8]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	9201      	str	r2, [sp, #4]
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f002 fd58 	bl	800dca8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	791b      	ldrb	r3, [r3, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f005 ffff 	bl	8011204 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	795b      	ldrb	r3, [r3, #5]
 800b20a:	2200      	movs	r2, #0
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f005 fff8 	bl	8011204 <USBH_LL_SetToggle>

  return USBH_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd90      	pop	{r4, r7, pc}

0800b21e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	795b      	ldrb	r3, [r3, #5]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00e      	beq.n	800b256 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	795b      	ldrb	r3, [r3, #5]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f002 fd51 	bl	800dce6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	795b      	ldrb	r3, [r3, #5]
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f002 fd7c 	bl	800dd48 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	791b      	ldrb	r3, [r3, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00e      	beq.n	800b27c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	791b      	ldrb	r3, [r3, #4]
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 fd3e 	bl	800dce6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	791b      	ldrb	r3, [r3, #4]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f002 fd69 	bl	800dd48 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	4618      	mov	r0, r3
 800b292:	f007 fb03 	bl	801289c <free>
    phost->pActiveClass->pData = 0U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b29c:	2200      	movs	r2, #0
 800b29e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	7b9b      	ldrb	r3, [r3, #14]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d004      	beq.n	800b2d2 <USBH_MSC_ClassRequest+0x28>
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d03e      	beq.n	800b34a <USBH_MSC_ClassRequest+0xa0>
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d000      	beq.n	800b2d2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800b2d0:	e04a      	b.n	800b368 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fcea 	bl	800bcb0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d104      	bne.n	800b2f0 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d135      	bne.n	800b362 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d804      	bhi.n	800b308 <USBH_MSC_ClassRequest+0x5e>
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	b2da      	uxtb	r2, r3
 800b306:	e000      	b.n	800b30a <USBH_MSC_ClassRequest+0x60>
 800b308:	2202      	movs	r2, #2
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b30e:	2300      	movs	r3, #0
 800b310:	73bb      	strb	r3, [r7, #14]
 800b312:	e014      	b.n	800b33e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	2134      	movs	r1, #52	; 0x34
 800b31a:	fb01 f303 	mul.w	r3, r1, r3
 800b31e:	4413      	add	r3, r2
 800b320:	3392      	adds	r3, #146	; 0x92
 800b322:	2202      	movs	r2, #2
 800b324:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	2134      	movs	r1, #52	; 0x34
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	4413      	add	r3, r2
 800b332:	33c1      	adds	r3, #193	; 0xc1
 800b334:	2200      	movs	r2, #0
 800b336:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	3301      	adds	r3, #1
 800b33c:	73bb      	strb	r3, [r7, #14]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	7bba      	ldrb	r2, [r7, #14]
 800b344:	429a      	cmp	r2, r3
 800b346:	d3e5      	bcc.n	800b314 <USBH_MSC_ClassRequest+0x6a>
      break;
 800b348:	e00b      	b.n	800b362 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b34a:	2100      	movs	r1, #0
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f002 f878 	bl	800d442 <USBH_ClrFeature>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d106      	bne.n	800b366 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	7bda      	ldrb	r2, [r3, #15]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	739a      	strb	r2, [r3, #14]
      break;
 800b360:	e001      	b.n	800b366 <USBH_MSC_ClassRequest+0xbc>
      break;
 800b362:	bf00      	nop
 800b364:	e000      	b.n	800b368 <USBH_MSC_ClassRequest+0xbe>
      break;
 800b366:	bf00      	nop
  }

  return status;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b386:	2301      	movs	r3, #1
 800b388:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b38a:	2301      	movs	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b38e:	2301      	movs	r3, #1
 800b390:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	7b1b      	ldrb	r3, [r3, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <USBH_MSC_Process+0x2e>
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	f000 8271 	beq.w	800b882 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b3a0:	e272      	b.n	800b888 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	f080 824f 	bcs.w	800b852 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	2334      	movs	r3, #52	; 0x34
 800b3c0:	fb03 f301 	mul.w	r3, r3, r1
 800b3c4:	4413      	add	r3, r2
 800b3c6:	3391      	adds	r3, #145	; 0x91
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	2334      	movs	r3, #52	; 0x34
 800b3d8:	fb03 f301 	mul.w	r3, r3, r1
 800b3dc:	4413      	add	r3, r2
 800b3de:	3390      	adds	r3, #144	; 0x90
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	f200 8243 	bhi.w	800b86e <USBH_MSC_Process+0x4fa>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <USBH_MSC_Process+0x7c>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b415 	.word	0x0800b415
 800b3f4:	0800b86f 	.word	0x0800b86f
 800b3f8:	0800b4dd 	.word	0x0800b4dd
 800b3fc:	0800b661 	.word	0x0800b661
 800b400:	0800b43b 	.word	0x0800b43b
 800b404:	0800b72d 	.word	0x0800b72d
 800b408:	0800b86f 	.word	0x0800b86f
 800b40c:	0800b86f 	.word	0x0800b86f
 800b410:	0800b841 	.word	0x0800b841
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b41a:	4619      	mov	r1, r3
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	2334      	movs	r3, #52	; 0x34
 800b420:	fb03 f301 	mul.w	r3, r3, r1
 800b424:	4413      	add	r3, r2
 800b426:	3390      	adds	r3, #144	; 0x90
 800b428:	2204      	movs	r2, #4
 800b42a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b438:	e222      	b.n	800b880 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b440:	b2d9      	uxtb	r1, r3
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b448:	461a      	mov	r2, r3
 800b44a:	2334      	movs	r3, #52	; 0x34
 800b44c:	fb03 f302 	mul.w	r3, r3, r2
 800b450:	3398      	adds	r3, #152	; 0x98
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4413      	add	r3, r2
 800b456:	3307      	adds	r3, #7
 800b458:	461a      	mov	r2, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 ff68 	bl	800c330 <USBH_MSC_SCSI_Inquiry>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b470:	4619      	mov	r1, r3
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	2334      	movs	r3, #52	; 0x34
 800b476:	fb03 f301 	mul.w	r3, r3, r1
 800b47a:	4413      	add	r3, r2
 800b47c:	3390      	adds	r3, #144	; 0x90
 800b47e:	2202      	movs	r2, #2
 800b480:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b02      	cmp	r3, #2
 800b486:	d10c      	bne.n	800b4a2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b48e:	4619      	mov	r1, r3
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	2334      	movs	r3, #52	; 0x34
 800b494:	fb03 f301 	mul.w	r3, r3, r1
 800b498:	4413      	add	r3, r2
 800b49a:	3390      	adds	r3, #144	; 0x90
 800b49c:	2205      	movs	r2, #5
 800b49e:	701a      	strb	r2, [r3, #0]
            break;
 800b4a0:	e1e7      	b.n	800b872 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	f040 81e4 	bne.w	800b872 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	2334      	movs	r3, #52	; 0x34
 800b4b6:	fb03 f301 	mul.w	r3, r3, r1
 800b4ba:	4413      	add	r3, r2
 800b4bc:	3390      	adds	r3, #144	; 0x90
 800b4be:	2201      	movs	r2, #1
 800b4c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	2334      	movs	r3, #52	; 0x34
 800b4ce:	fb03 f301 	mul.w	r3, r3, r1
 800b4d2:	4413      	add	r3, r2
 800b4d4:	3391      	adds	r3, #145	; 0x91
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	701a      	strb	r2, [r3, #0]
            break;
 800b4da:	e1ca      	b.n	800b872 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fe64 	bl	800c1b4 <USBH_MSC_SCSI_TestUnitReady>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d149      	bne.n	800b58a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	2334      	movs	r3, #52	; 0x34
 800b502:	fb03 f301 	mul.w	r3, r3, r1
 800b506:	4413      	add	r3, r2
 800b508:	3392      	adds	r3, #146	; 0x92
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b516:	4619      	mov	r1, r3
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	2334      	movs	r3, #52	; 0x34
 800b51c:	fb03 f301 	mul.w	r3, r3, r1
 800b520:	4413      	add	r3, r2
 800b522:	33c1      	adds	r3, #193	; 0xc1
 800b524:	2201      	movs	r2, #1
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	e00b      	b.n	800b542 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b530:	4619      	mov	r1, r3
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	2334      	movs	r3, #52	; 0x34
 800b536:	fb03 f301 	mul.w	r3, r3, r1
 800b53a:	4413      	add	r3, r2
 800b53c:	33c1      	adds	r3, #193	; 0xc1
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b548:	4619      	mov	r1, r3
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	2334      	movs	r3, #52	; 0x34
 800b54e:	fb03 f301 	mul.w	r3, r3, r1
 800b552:	4413      	add	r3, r2
 800b554:	3390      	adds	r3, #144	; 0x90
 800b556:	2203      	movs	r2, #3
 800b558:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b560:	4619      	mov	r1, r3
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	2334      	movs	r3, #52	; 0x34
 800b566:	fb03 f301 	mul.w	r3, r3, r1
 800b56a:	4413      	add	r3, r2
 800b56c:	3391      	adds	r3, #145	; 0x91
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b578:	4619      	mov	r1, r3
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	2334      	movs	r3, #52	; 0x34
 800b57e:	fb03 f301 	mul.w	r3, r3, r1
 800b582:	4413      	add	r3, r2
 800b584:	3392      	adds	r3, #146	; 0x92
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d14a      	bne.n	800b626 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b596:	4619      	mov	r1, r3
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	2334      	movs	r3, #52	; 0x34
 800b59c:	fb03 f301 	mul.w	r3, r3, r1
 800b5a0:	4413      	add	r3, r2
 800b5a2:	3392      	adds	r3, #146	; 0x92
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d00c      	beq.n	800b5c4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	2334      	movs	r3, #52	; 0x34
 800b5b6:	fb03 f301 	mul.w	r3, r3, r1
 800b5ba:	4413      	add	r3, r2
 800b5bc:	33c1      	adds	r3, #193	; 0xc1
 800b5be:	2201      	movs	r2, #1
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e00b      	b.n	800b5dc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	2334      	movs	r3, #52	; 0x34
 800b5d0:	fb03 f301 	mul.w	r3, r3, r1
 800b5d4:	4413      	add	r3, r2
 800b5d6:	33c1      	adds	r3, #193	; 0xc1
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	2334      	movs	r3, #52	; 0x34
 800b5e8:	fb03 f301 	mul.w	r3, r3, r1
 800b5ec:	4413      	add	r3, r2
 800b5ee:	3390      	adds	r3, #144	; 0x90
 800b5f0:	2205      	movs	r2, #5
 800b5f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	2334      	movs	r3, #52	; 0x34
 800b600:	fb03 f301 	mul.w	r3, r3, r1
 800b604:	4413      	add	r3, r2
 800b606:	3391      	adds	r3, #145	; 0x91
 800b608:	2201      	movs	r2, #1
 800b60a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b612:	4619      	mov	r1, r3
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	2334      	movs	r3, #52	; 0x34
 800b618:	fb03 f301 	mul.w	r3, r3, r1
 800b61c:	4413      	add	r3, r2
 800b61e:	3392      	adds	r3, #146	; 0x92
 800b620:	2202      	movs	r2, #2
 800b622:	701a      	strb	r2, [r3, #0]
            break;
 800b624:	e127      	b.n	800b876 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b04      	cmp	r3, #4
 800b62a:	f040 8124 	bne.w	800b876 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b634:	4619      	mov	r1, r3
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	2334      	movs	r3, #52	; 0x34
 800b63a:	fb03 f301 	mul.w	r3, r3, r1
 800b63e:	4413      	add	r3, r2
 800b640:	3390      	adds	r3, #144	; 0x90
 800b642:	2201      	movs	r2, #1
 800b644:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b64c:	4619      	mov	r1, r3
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	2334      	movs	r3, #52	; 0x34
 800b652:	fb03 f301 	mul.w	r3, r3, r1
 800b656:	4413      	add	r3, r2
 800b658:	3391      	adds	r3, #145	; 0x91
 800b65a:	2202      	movs	r2, #2
 800b65c:	701a      	strb	r2, [r3, #0]
            break;
 800b65e:	e10a      	b.n	800b876 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b666:	b2d9      	uxtb	r1, r3
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b66e:	461a      	mov	r2, r3
 800b670:	2334      	movs	r3, #52	; 0x34
 800b672:	fb03 f302 	mul.w	r3, r3, r2
 800b676:	3390      	adds	r3, #144	; 0x90
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	4413      	add	r3, r2
 800b67c:	3304      	adds	r3, #4
 800b67e:	461a      	mov	r2, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fdda 	bl	800c23a <USBH_MSC_SCSI_ReadCapacity>
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d120      	bne.n	800b6d2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b696:	4619      	mov	r1, r3
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	2334      	movs	r3, #52	; 0x34
 800b69c:	fb03 f301 	mul.w	r3, r3, r1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	3390      	adds	r3, #144	; 0x90
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	2334      	movs	r3, #52	; 0x34
 800b6b4:	fb03 f301 	mul.w	r3, r3, r1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	3391      	adds	r3, #145	; 0x91
 800b6bc:	2200      	movs	r2, #0
 800b6be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b6d0:	e0d3      	b.n	800b87a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d10c      	bne.n	800b6f2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6de:	4619      	mov	r1, r3
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	2334      	movs	r3, #52	; 0x34
 800b6e4:	fb03 f301 	mul.w	r3, r3, r1
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3390      	adds	r3, #144	; 0x90
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	701a      	strb	r2, [r3, #0]
            break;
 800b6f0:	e0c3      	b.n	800b87a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	f040 80c0 	bne.w	800b87a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b700:	4619      	mov	r1, r3
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	2334      	movs	r3, #52	; 0x34
 800b706:	fb03 f301 	mul.w	r3, r3, r1
 800b70a:	4413      	add	r3, r2
 800b70c:	3390      	adds	r3, #144	; 0x90
 800b70e:	2201      	movs	r2, #1
 800b710:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b718:	4619      	mov	r1, r3
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	2334      	movs	r3, #52	; 0x34
 800b71e:	fb03 f301 	mul.w	r3, r3, r1
 800b722:	4413      	add	r3, r2
 800b724:	3391      	adds	r3, #145	; 0x91
 800b726:	2202      	movs	r2, #2
 800b728:	701a      	strb	r2, [r3, #0]
            break;
 800b72a:	e0a6      	b.n	800b87a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b732:	b2d9      	uxtb	r1, r3
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b73a:	461a      	mov	r2, r3
 800b73c:	2334      	movs	r3, #52	; 0x34
 800b73e:	fb03 f302 	mul.w	r3, r3, r2
 800b742:	3398      	adds	r3, #152	; 0x98
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4413      	add	r3, r2
 800b748:	3304      	adds	r3, #4
 800b74a:	461a      	mov	r2, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fe94 	bl	800c47a <USBH_MSC_SCSI_RequestSense>
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d145      	bne.n	800b7e8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b762:	4619      	mov	r1, r3
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	2334      	movs	r3, #52	; 0x34
 800b768:	fb03 f301 	mul.w	r3, r3, r1
 800b76c:	4413      	add	r3, r2
 800b76e:	339c      	adds	r3, #156	; 0x9c
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b06      	cmp	r3, #6
 800b774:	d00c      	beq.n	800b790 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b77c:	4619      	mov	r1, r3
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	2334      	movs	r3, #52	; 0x34
 800b782:	fb03 f301 	mul.w	r3, r3, r1
 800b786:	4413      	add	r3, r2
 800b788:	339c      	adds	r3, #156	; 0x9c
 800b78a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d117      	bne.n	800b7c0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d80c      	bhi.n	800b7c0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	2334      	movs	r3, #52	; 0x34
 800b7b2:	fb03 f301 	mul.w	r3, r3, r1
 800b7b6:	4413      	add	r3, r2
 800b7b8:	3390      	adds	r3, #144	; 0x90
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	701a      	strb	r2, [r3, #0]
                  break;
 800b7be:	e05f      	b.n	800b880 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	2334      	movs	r3, #52	; 0x34
 800b7cc:	fb03 f301 	mul.w	r3, r3, r1
 800b7d0:	4413      	add	r3, r2
 800b7d2:	3390      	adds	r3, #144	; 0x90
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7de:	3301      	adds	r3, #1
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d10c      	bne.n	800b808 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	2334      	movs	r3, #52	; 0x34
 800b7fa:	fb03 f301 	mul.w	r3, r3, r1
 800b7fe:	4413      	add	r3, r2
 800b800:	3390      	adds	r3, #144	; 0x90
 800b802:	2208      	movs	r2, #8
 800b804:	701a      	strb	r2, [r3, #0]
            break;
 800b806:	e03a      	b.n	800b87e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	d137      	bne.n	800b87e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b814:	4619      	mov	r1, r3
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	2334      	movs	r3, #52	; 0x34
 800b81a:	fb03 f301 	mul.w	r3, r3, r1
 800b81e:	4413      	add	r3, r2
 800b820:	3390      	adds	r3, #144	; 0x90
 800b822:	2201      	movs	r2, #1
 800b824:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b82c:	4619      	mov	r1, r3
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	2334      	movs	r3, #52	; 0x34
 800b832:	fb03 f301 	mul.w	r3, r3, r1
 800b836:	4413      	add	r3, r2
 800b838:	3391      	adds	r3, #145	; 0x91
 800b83a:	2202      	movs	r2, #2
 800b83c:	701a      	strb	r2, [r3, #0]
            break;
 800b83e:	e01e      	b.n	800b87e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b846:	3301      	adds	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b850:	e016      	b.n	800b880 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2200      	movs	r2, #0
 800b856:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2201      	movs	r2, #1
 800b85e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b866:	2102      	movs	r1, #2
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
      break;
 800b86c:	e00c      	b.n	800b888 <USBH_MSC_Process+0x514>
            break;
 800b86e:	bf00      	nop
 800b870:	e00a      	b.n	800b888 <USBH_MSC_Process+0x514>
            break;
 800b872:	bf00      	nop
 800b874:	e008      	b.n	800b888 <USBH_MSC_Process+0x514>
            break;
 800b876:	bf00      	nop
 800b878:	e006      	b.n	800b888 <USBH_MSC_Process+0x514>
            break;
 800b87a:	bf00      	nop
 800b87c:	e004      	b.n	800b888 <USBH_MSC_Process+0x514>
            break;
 800b87e:	bf00      	nop
      break;
 800b880:	e002      	b.n	800b888 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
      break;
 800b886:	bf00      	nop
  }
  return error;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop

0800b894 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b088      	sub	sp, #32
 800b8ae:	af02      	add	r7, sp, #8
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	2134      	movs	r1, #52	; 0x34
 800b8ce:	fb01 f303 	mul.w	r3, r1, r3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3390      	adds	r3, #144	; 0x90
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b06      	cmp	r3, #6
 800b8da:	d004      	beq.n	800b8e6 <USBH_MSC_RdWrProcess+0x3c>
 800b8dc:	2b07      	cmp	r3, #7
 800b8de:	d037      	beq.n	800b950 <USBH_MSC_RdWrProcess+0xa6>
 800b8e0:	2b05      	cmp	r3, #5
 800b8e2:	d06a      	beq.n	800b9ba <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800b8e4:	e0a6      	b.n	800ba34 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b8e6:	78f9      	ldrb	r1, [r7, #3]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fea6 	bl	800c642 <USBH_MSC_SCSI_Read>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10b      	bne.n	800b918 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	2134      	movs	r1, #52	; 0x34
 800b906:	fb01 f303 	mul.w	r3, r1, r3
 800b90a:	4413      	add	r3, r2
 800b90c:	3390      	adds	r3, #144	; 0x90
 800b90e:	2201      	movs	r2, #1
 800b910:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	75fb      	strb	r3, [r7, #23]
      break;
 800b916:	e088      	b.n	800ba2a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d109      	bne.n	800b932 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b91e:	78fb      	ldrb	r3, [r7, #3]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	2134      	movs	r1, #52	; 0x34
 800b924:	fb01 f303 	mul.w	r3, r1, r3
 800b928:	4413      	add	r3, r2
 800b92a:	3390      	adds	r3, #144	; 0x90
 800b92c:	2205      	movs	r2, #5
 800b92e:	701a      	strb	r2, [r3, #0]
      break;
 800b930:	e07b      	b.n	800ba2a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b932:	7bfb      	ldrb	r3, [r7, #15]
 800b934:	2b04      	cmp	r3, #4
 800b936:	d178      	bne.n	800ba2a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b938:	78fb      	ldrb	r3, [r7, #3]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	2134      	movs	r1, #52	; 0x34
 800b93e:	fb01 f303 	mul.w	r3, r1, r3
 800b942:	4413      	add	r3, r2
 800b944:	3390      	adds	r3, #144	; 0x90
 800b946:	2208      	movs	r2, #8
 800b948:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b94a:	2302      	movs	r3, #2
 800b94c:	75fb      	strb	r3, [r7, #23]
      break;
 800b94e:	e06c      	b.n	800ba2a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b950:	78f9      	ldrb	r1, [r7, #3]
 800b952:	2300      	movs	r3, #0
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	2300      	movs	r3, #0
 800b958:	2200      	movs	r2, #0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fe06 	bl	800c56c <USBH_MSC_SCSI_Write>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	2134      	movs	r1, #52	; 0x34
 800b970:	fb01 f303 	mul.w	r3, r1, r3
 800b974:	4413      	add	r3, r2
 800b976:	3390      	adds	r3, #144	; 0x90
 800b978:	2201      	movs	r2, #1
 800b97a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	75fb      	strb	r3, [r7, #23]
      break;
 800b980:	e055      	b.n	800ba2e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d109      	bne.n	800b99c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b988:	78fb      	ldrb	r3, [r7, #3]
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	2134      	movs	r1, #52	; 0x34
 800b98e:	fb01 f303 	mul.w	r3, r1, r3
 800b992:	4413      	add	r3, r2
 800b994:	3390      	adds	r3, #144	; 0x90
 800b996:	2205      	movs	r2, #5
 800b998:	701a      	strb	r2, [r3, #0]
      break;
 800b99a:	e048      	b.n	800ba2e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d145      	bne.n	800ba2e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	2134      	movs	r1, #52	; 0x34
 800b9a8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ac:	4413      	add	r3, r2
 800b9ae:	3390      	adds	r3, #144	; 0x90
 800b9b0:	2208      	movs	r2, #8
 800b9b2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b8:	e039      	b.n	800ba2e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	2234      	movs	r2, #52	; 0x34
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	3398      	adds	r3, #152	; 0x98
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	1d1a      	adds	r2, r3, #4
 800b9ca:	78fb      	ldrb	r3, [r7, #3]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fd53 	bl	800c47a <USBH_MSC_SCSI_RequestSense>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d113      	bne.n	800ba06 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	2134      	movs	r1, #52	; 0x34
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	4413      	add	r3, r2
 800b9ea:	3390      	adds	r3, #144	; 0x90
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	2134      	movs	r1, #52	; 0x34
 800b9f6:	fb01 f303 	mul.w	r3, r1, r3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	3391      	adds	r3, #145	; 0x91
 800b9fe:	2202      	movs	r2, #2
 800ba00:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800ba02:	2302      	movs	r3, #2
 800ba04:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d012      	beq.n	800ba32 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d10f      	bne.n	800ba32 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	2134      	movs	r1, #52	; 0x34
 800ba18:	fb01 f303 	mul.w	r3, r1, r3
 800ba1c:	4413      	add	r3, r2
 800ba1e:	3390      	adds	r3, #144	; 0x90
 800ba20:	2208      	movs	r2, #8
 800ba22:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ba24:	2302      	movs	r3, #2
 800ba26:	75fb      	strb	r3, [r7, #23]
      break;
 800ba28:	e003      	b.n	800ba32 <USBH_MSC_RdWrProcess+0x188>
      break;
 800ba2a:	bf00      	nop
 800ba2c:	e002      	b.n	800ba34 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800ba2e:	bf00      	nop
 800ba30:	e000      	b.n	800ba34 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800ba32:	bf00      	nop

  }
  return error;
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b0b      	cmp	r3, #11
 800ba5c:	d10c      	bne.n	800ba78 <USBH_MSC_UnitIsReady+0x3a>
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	2134      	movs	r1, #52	; 0x34
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	4413      	add	r3, r2
 800ba6a:	3391      	adds	r3, #145	; 0x91
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ba72:	2301      	movs	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
 800ba76:	e001      	b.n	800ba7c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	460b      	mov	r3, r1
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b0b      	cmp	r3, #11
 800baaa:	d10d      	bne.n	800bac8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800baac:	7afb      	ldrb	r3, [r7, #11]
 800baae:	2234      	movs	r2, #52	; 0x34
 800bab0:	fb02 f303 	mul.w	r3, r2, r3
 800bab4:	3390      	adds	r3, #144	; 0x90
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	2234      	movs	r2, #52	; 0x34
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f006 ff06 	bl	80128d0 <memcpy>
    return USBH_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	e000      	b.n	800baca <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bac8:	2302      	movs	r3, #2
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b088      	sub	sp, #32
 800bad6:	af02      	add	r7, sp, #8
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
 800bade:	460b      	mov	r3, r1
 800bae0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00e      	beq.n	800bb16 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bafe:	2b0b      	cmp	r3, #11
 800bb00:	d109      	bne.n	800bb16 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bb02:	7afb      	ldrb	r3, [r7, #11]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	2134      	movs	r1, #52	; 0x34
 800bb08:	fb01 f303 	mul.w	r3, r1, r3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	3390      	adds	r3, #144	; 0x90
 800bb10:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d001      	beq.n	800bb1a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bb16:	2302      	movs	r3, #2
 800bb18:	e040      	b.n	800bb9c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2206      	movs	r2, #6
 800bb1e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	2134      	movs	r1, #52	; 0x34
 800bb26:	fb01 f303 	mul.w	r3, r1, r3
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3390      	adds	r3, #144	; 0x90
 800bb2e:	2206      	movs	r2, #6
 800bb30:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bb3c:	7af9      	ldrb	r1, [r7, #11]
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fd7b 	bl	800c642 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb52:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb54:	e016      	b.n	800bb84 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	1ad2      	subs	r2, r2, r3
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	f242 7110 	movw	r1, #10000	; 0x2710
 800bb66:	fb01 f303 	mul.w	r3, r1, r3
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d805      	bhi.n	800bb7a <USBH_MSC_Read+0xa8>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bb80:	2302      	movs	r3, #2
 800bb82:	e00b      	b.n	800bb9c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb84:	7afb      	ldrb	r3, [r7, #11]
 800bb86:	4619      	mov	r1, r3
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fe8e 	bl	800b8aa <USBH_MSC_RdWrProcess>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d0e0      	beq.n	800bb56 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2201      	movs	r2, #1
 800bb98:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3718      	adds	r7, #24
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b088      	sub	sp, #32
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	607a      	str	r2, [r7, #4]
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00e      	beq.n	800bbe8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bbd0:	2b0b      	cmp	r3, #11
 800bbd2:	d109      	bne.n	800bbe8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bbd4:	7afb      	ldrb	r3, [r7, #11]
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	2134      	movs	r1, #52	; 0x34
 800bbda:	fb01 f303 	mul.w	r3, r1, r3
 800bbde:	4413      	add	r3, r2
 800bbe0:	3390      	adds	r3, #144	; 0x90
 800bbe2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d001      	beq.n	800bbec <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e040      	b.n	800bc6e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2207      	movs	r2, #7
 800bbf0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	2134      	movs	r1, #52	; 0x34
 800bbf8:	fb01 f303 	mul.w	r3, r1, r3
 800bbfc:	4413      	add	r3, r2
 800bbfe:	3390      	adds	r3, #144	; 0x90
 800bc00:	2207      	movs	r2, #7
 800bc02:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bc0e:	7af9      	ldrb	r1, [r7, #11]
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 fca7 	bl	800c56c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc24:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc26:	e016      	b.n	800bc56 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	1ad2      	subs	r2, r2, r3
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	f242 7110 	movw	r1, #10000	; 0x2710
 800bc38:	fb01 f303 	mul.w	r3, r1, r3
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d805      	bhi.n	800bc4c <USBH_MSC_Write+0xa8>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	e00b      	b.n	800bc6e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f7ff fe25 	bl	800b8aa <USBH_MSC_RdWrProcess>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d0e0      	beq.n	800bc28 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2221      	movs	r2, #33	; 0x21
 800bc82:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	22ff      	movs	r2, #255	; 0xff
 800bc88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2100      	movs	r1, #0
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 fdae 	bl	800d802 <USBH_CtlReq>
 800bca6:	4603      	mov	r3, r0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	22a1      	movs	r2, #161	; 0xa1
 800bcbe:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	22fe      	movs	r2, #254	; 0xfe
 800bcc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bcd8:	2201      	movs	r2, #1
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 fd90 	bl	800d802 <USBH_CtlReq>
 800bce2:	4603      	mov	r3, r0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4a09      	ldr	r2, [pc, #36]	; (800bd28 <USBH_MSC_BOT_Init+0x3c>)
 800bd02:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4a09      	ldr	r2, [pc, #36]	; (800bd2c <USBH_MSC_BOT_Init+0x40>)
 800bd08:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	43425355 	.word	0x43425355
 800bd2c:	20304050 	.word	0x20304050

0800bd30 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bd40:	2301      	movs	r3, #1
 800bd42:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bd44:	2301      	movs	r3, #1
 800bd46:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd52:	69db      	ldr	r3, [r3, #28]
 800bd54:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd60:	3b01      	subs	r3, #1
 800bd62:	2b0a      	cmp	r3, #10
 800bd64:	f200 81a1 	bhi.w	800c0aa <USBH_MSC_BOT_Process+0x37a>
 800bd68:	a201      	add	r2, pc, #4	; (adr r2, 800bd70 <USBH_MSC_BOT_Process+0x40>)
 800bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6e:	bf00      	nop
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	0800bdc7 	.word	0x0800bdc7
 800bd78:	0800be31 	.word	0x0800be31
 800bd7c:	0800be4f 	.word	0x0800be4f
 800bd80:	0800bed3 	.word	0x0800bed3
 800bd84:	0800bef7 	.word	0x0800bef7
 800bd88:	0800bf91 	.word	0x0800bf91
 800bd8c:	0800bfad 	.word	0x0800bfad
 800bd90:	0800bfff 	.word	0x0800bfff
 800bd94:	0800c02f 	.word	0x0800c02f
 800bd98:	0800c091 	.word	0x0800c091
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	2202      	movs	r2, #2
 800bda8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	795a      	ldrb	r2, [r3, #5]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	221f      	movs	r2, #31
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 ff2f 	bl	800dc22 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bdc4:	e180      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	795b      	ldrb	r3, [r3, #5]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f005 f9ef 	bl	80111b0 <USBH_LL_GetURBState>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bdd6:	7d3b      	ldrb	r3, [r7, #20]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d118      	bne.n	800be0e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00f      	beq.n	800be04 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bdea:	b25b      	sxtb	r3, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da04      	bge.n	800bdfa <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bdf8:	e159      	b.n	800c0ae <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be02:	e154      	b.n	800c0ae <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2207      	movs	r2, #7
 800be08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be0c:	e14f      	b.n	800c0ae <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be0e:	7d3b      	ldrb	r3, [r7, #20]
 800be10:	2b02      	cmp	r3, #2
 800be12:	d104      	bne.n	800be1e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be1c:	e147      	b.n	800c0ae <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800be1e:	7d3b      	ldrb	r3, [r7, #20]
 800be20:	2b05      	cmp	r3, #5
 800be22:	f040 8144 	bne.w	800c0ae <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	220a      	movs	r2, #10
 800be2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be2e:	e13e      	b.n	800c0ae <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	895a      	ldrh	r2, [r3, #10]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	791b      	ldrb	r3, [r3, #4]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 ff14 	bl	800dc6c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	2204      	movs	r2, #4
 800be48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800be4c:	e13c      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	791b      	ldrb	r3, [r3, #4]
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f005 f9ab 	bl	80111b0 <USBH_LL_GetURBState>
 800be5a:	4603      	mov	r3, r0
 800be5c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800be5e:	7d3b      	ldrb	r3, [r7, #20]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d12d      	bne.n	800bec0 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	8952      	ldrh	r2, [r2, #10]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d910      	bls.n	800be92 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	8952      	ldrh	r2, [r2, #10]
 800be7a:	441a      	add	r2, r3
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	8952      	ldrh	r2, [r2, #10]
 800be8a:	1a9a      	subs	r2, r3, r2
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	65da      	str	r2, [r3, #92]	; 0x5c
 800be90:	e002      	b.n	800be98 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2200      	movs	r2, #0
 800be96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	895a      	ldrh	r2, [r3, #10]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	791b      	ldrb	r3, [r3, #4]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f001 fedc 	bl	800dc6c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800beb4:	e0fd      	b.n	800c0b2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2207      	movs	r2, #7
 800beba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bebe:	e0f8      	b.n	800c0b2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800bec0:	7d3b      	ldrb	r3, [r7, #20]
 800bec2:	2b05      	cmp	r3, #5
 800bec4:	f040 80f5 	bne.w	800c0b2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	2209      	movs	r2, #9
 800becc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bed0:	e0ef      	b.n	800c0b2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	891a      	ldrh	r2, [r3, #8]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	7958      	ldrb	r0, [r3, #5]
 800bee0:	2301      	movs	r3, #1
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	4603      	mov	r3, r0
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f001 fe9b 	bl	800dc22 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	2206      	movs	r2, #6
 800bef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bef4:	e0e8      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	795b      	ldrb	r3, [r3, #5]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f005 f957 	bl	80111b0 <USBH_LL_GetURBState>
 800bf02:	4603      	mov	r3, r0
 800bf04:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf06:	7d3b      	ldrb	r3, [r7, #20]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d130      	bne.n	800bf6e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	8912      	ldrh	r2, [r2, #8]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d910      	bls.n	800bf3a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	8912      	ldrh	r2, [r2, #8]
 800bf22:	441a      	add	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	8912      	ldrh	r2, [r2, #8]
 800bf32:	1a9a      	subs	r2, r3, r2
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf38:	e002      	b.n	800bf40 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00d      	beq.n	800bf64 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	891a      	ldrh	r2, [r3, #8]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	7958      	ldrb	r0, [r3, #5]
 800bf56:	2301      	movs	r3, #1
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f001 fe60 	bl	800dc22 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bf62:	e0a8      	b.n	800c0b6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2207      	movs	r2, #7
 800bf68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf6c:	e0a3      	b.n	800c0b6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf6e:	7d3b      	ldrb	r3, [r7, #20]
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d104      	bne.n	800bf7e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	2205      	movs	r2, #5
 800bf78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf7c:	e09b      	b.n	800c0b6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800bf7e:	7d3b      	ldrb	r3, [r7, #20]
 800bf80:	2b05      	cmp	r3, #5
 800bf82:	f040 8098 	bne.w	800c0b6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	220a      	movs	r2, #10
 800bf8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf8e:	e092      	b.n	800c0b6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	791b      	ldrb	r3, [r3, #4]
 800bf9a:	220d      	movs	r2, #13
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f001 fe65 	bl	800dc6c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2208      	movs	r2, #8
 800bfa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfaa:	e08d      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	791b      	ldrb	r3, [r3, #4]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f005 f8fc 	bl	80111b0 <USBH_LL_GetURBState>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bfbc:	7d3b      	ldrb	r3, [r7, #20]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d115      	bne.n	800bfee <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f8aa 	bl	800c12c <USBH_MSC_DecodeCSW>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bfdc:	7d7b      	ldrb	r3, [r7, #21]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bfe6:	e068      	b.n	800c0ba <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	75fb      	strb	r3, [r7, #23]
      break;
 800bfec:	e065      	b.n	800c0ba <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800bfee:	7d3b      	ldrb	r3, [r7, #20]
 800bff0:	2b05      	cmp	r3, #5
 800bff2:	d162      	bne.n	800c0ba <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	2209      	movs	r2, #9
 800bff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bffc:	e05d      	b.n	800c0ba <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	2200      	movs	r2, #0
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f865 	bl	800c0d4 <USBH_MSC_BOT_Abort>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c00e:	7dbb      	ldrb	r3, [r7, #22]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d104      	bne.n	800c01e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2207      	movs	r2, #7
 800c018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c01c:	e04f      	b.n	800c0be <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c01e:	7dbb      	ldrb	r3, [r7, #22]
 800c020:	2b04      	cmp	r3, #4
 800c022:	d14c      	bne.n	800c0be <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	220b      	movs	r2, #11
 800c028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c02c:	e047      	b.n	800c0be <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c02e:	78fb      	ldrb	r3, [r7, #3]
 800c030:	2201      	movs	r2, #1
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f84d 	bl	800c0d4 <USBH_MSC_BOT_Abort>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c03e:	7dbb      	ldrb	r3, [r7, #22]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d11d      	bne.n	800c080 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	795b      	ldrb	r3, [r3, #5]
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f005 f90d 	bl	801126a <USBH_LL_GetToggle>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	7959      	ldrb	r1, [r3, #5]
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	f1c3 0301 	rsb	r3, r3, #1
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	461a      	mov	r2, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f005 f8ce 	bl	8011204 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f005 f8c7 	bl	8011204 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2209      	movs	r2, #9
 800c07a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c07e:	e020      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800c080:	7dbb      	ldrb	r3, [r7, #22]
 800c082:	2b04      	cmp	r3, #4
 800c084:	d11d      	bne.n	800c0c2 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	220b      	movs	r2, #11
 800c08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c08e:	e018      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff fdf0 	bl	800bc76 <USBH_MSC_BOT_REQ_Reset>
 800c096:	4603      	mov	r3, r0
 800c098:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d112      	bne.n	800c0c6 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c0a8:	e00d      	b.n	800c0c6 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800c0aa:	bf00      	nop
 800c0ac:	e00c      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0ae:	bf00      	nop
 800c0b0:	e00a      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0b2:	bf00      	nop
 800c0b4:	e008      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0b6:	bf00      	nop
 800c0b8:	e006      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0ba:	bf00      	nop
 800c0bc:	e004      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0be:	bf00      	nop
 800c0c0:	e002      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0c2:	bf00      	nop
 800c0c4:	e000      	b.n	800c0c8 <USBH_MSC_BOT_Process+0x398>
      break;
 800c0c6:	bf00      	nop
  }
  return status;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop

0800c0d4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c0f2:	78bb      	ldrb	r3, [r7, #2]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <USBH_MSC_BOT_Abort+0x2a>
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d009      	beq.n	800c110 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c0fc:	e011      	b.n	800c122 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	79db      	ldrb	r3, [r3, #7]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 f99c 	bl	800d442 <USBH_ClrFeature>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
      break;
 800c10e:	e008      	b.n	800c122 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	799b      	ldrb	r3, [r3, #6]
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f001 f993 	bl	800d442 <USBH_ClrFeature>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]
      break;
 800c120:	bf00      	nop
  }
  return status;
 800c122:	7bfb      	ldrb	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c13e:	2301      	movs	r3, #1
 800c140:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	791b      	ldrb	r3, [r3, #4]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f004 ff9f 	bl	801108c <USBH_LL_GetLastXferSize>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b0d      	cmp	r3, #13
 800c152:	d002      	beq.n	800c15a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c154:	2302      	movs	r3, #2
 800c156:	73fb      	strb	r3, [r7, #15]
 800c158:	e024      	b.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c15e:	4a14      	ldr	r2, [pc, #80]	; (800c1b0 <USBH_MSC_DecodeCSW+0x84>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d11d      	bne.n	800c1a0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d119      	bne.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
 800c17e:	e011      	b.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c186:	2b01      	cmp	r3, #1
 800c188:	d102      	bne.n	800c190 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
 800c18e:	e009      	b.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c196:	2b02      	cmp	r3, #2
 800c198:	d104      	bne.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c19a:	2302      	movs	r3, #2
 800c19c:	73fb      	strb	r3, [r7, #15]
 800c19e:	e001      	b.n	800c1a4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	53425355 	.word	0x53425355

0800c1b4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d002      	beq.n	800c1de <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d021      	beq.n	800c220 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c1dc:	e028      	b.n	800c230 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	220a      	movs	r2, #10
 800c1f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	3363      	adds	r3, #99	; 0x63
 800c1f8:	2210      	movs	r2, #16
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f006 fb72 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c21a:	2301      	movs	r3, #1
 800c21c:	73fb      	strb	r3, [r7, #15]
      break;
 800c21e:	e007      	b.n	800c230 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff fd83 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]
      break;
 800c22e:	bf00      	nop
  }

  return error;
 800c230:	7bfb      	ldrb	r3, [r7, #15]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b086      	sub	sp, #24
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	460b      	mov	r3, r1
 800c244:	607a      	str	r2, [r7, #4]
 800c246:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c248:	2301      	movs	r3, #1
 800c24a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c252:	69db      	ldr	r3, [r3, #28]
 800c254:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d002      	beq.n	800c266 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c260:	2b02      	cmp	r3, #2
 800c262:	d027      	beq.n	800c2b4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c264:	e05f      	b.n	800c326 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2208      	movs	r2, #8
 800c26a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	2280      	movs	r2, #128	; 0x80
 800c270:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	220a      	movs	r2, #10
 800c278:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	3363      	adds	r3, #99	; 0x63
 800c280:	2210      	movs	r2, #16
 800c282:	2100      	movs	r1, #0
 800c284:	4618      	mov	r0, r3
 800c286:	f006 fb2e 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2225      	movs	r2, #37	; 0x25
 800c28e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2202      	movs	r2, #2
 800c29e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f103 0210 	add.w	r2, r3, #16
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2b2:	e038      	b.n	800c326 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c2b4:	7afb      	ldrb	r3, [r7, #11]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f7ff fd39 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d12d      	bne.n	800c324 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ce:	3303      	adds	r3, #3
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2da:	3302      	adds	r3, #2
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	021b      	lsls	r3, r3, #8
 800c2e0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c2ee:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	061b      	lsls	r3, r3, #24
 800c2fa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c306:	3307      	adds	r3, #7
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c312:	3306      	adds	r3, #6
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	b29b      	uxth	r3, r3
 800c318:	021b      	lsls	r3, r3, #8
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	4313      	orrs	r3, r2
 800c31e:	b29a      	uxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	809a      	strh	r2, [r3, #4]
      break;
 800c324:	bf00      	nop
  }

  return error;
 800c326:	7dfb      	ldrb	r3, [r7, #23]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	460b      	mov	r3, r1
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c33e:	2302      	movs	r3, #2
 800c340:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c352:	2b01      	cmp	r3, #1
 800c354:	d002      	beq.n	800c35c <USBH_MSC_SCSI_Inquiry+0x2c>
 800c356:	2b02      	cmp	r3, #2
 800c358:	d03d      	beq.n	800c3d6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c35a:	e089      	b.n	800c470 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2224      	movs	r2, #36	; 0x24
 800c360:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2280      	movs	r2, #128	; 0x80
 800c366:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	220a      	movs	r2, #10
 800c36e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	3363      	adds	r3, #99	; 0x63
 800c376:	220a      	movs	r2, #10
 800c378:	2100      	movs	r1, #0
 800c37a:	4618      	mov	r0, r3
 800c37c:	f006 fab3 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	2212      	movs	r2, #18
 800c384:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	015b      	lsls	r3, r3, #5
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2224      	movs	r2, #36	; 0x24
 800c3a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f103 0210 	add.w	r2, r3, #16
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3d4:	e04c      	b.n	800c470 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7ff fca8 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d141      	bne.n	800c46e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c3ea:	2222      	movs	r2, #34	; 0x22
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f006 fa79 	bl	80128e6 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	f003 031f 	and.w	r3, r3, #31
 800c400:	b2da      	uxtb	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	095b      	lsrs	r3, r3, #5
 800c410:	b2da      	uxtb	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c41c:	3301      	adds	r3, #1
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	b25b      	sxtb	r3, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	da03      	bge.n	800c42e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	709a      	strb	r2, [r3, #2]
 800c42c:	e002      	b.n	800c434 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	1cd8      	adds	r0, r3, #3
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c43e:	3308      	adds	r3, #8
 800c440:	2208      	movs	r2, #8
 800c442:	4619      	mov	r1, r3
 800c444:	f006 fa44 	bl	80128d0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f103 000c 	add.w	r0, r3, #12
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c454:	3310      	adds	r3, #16
 800c456:	2210      	movs	r2, #16
 800c458:	4619      	mov	r1, r3
 800c45a:	f006 fa39 	bl	80128d0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	331d      	adds	r3, #29
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c468:	3220      	adds	r2, #32
 800c46a:	6812      	ldr	r2, [r2, #0]
 800c46c:	601a      	str	r2, [r3, #0]
      break;
 800c46e:	bf00      	nop
  }

  return error;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b086      	sub	sp, #24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	460b      	mov	r3, r1
 800c484:	607a      	str	r2, [r7, #4]
 800c486:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c488:	2302      	movs	r3, #2
 800c48a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d002      	beq.n	800c4a6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d03d      	beq.n	800c520 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c4a4:	e05d      	b.n	800c562 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	220e      	movs	r2, #14
 800c4aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	2280      	movs	r2, #128	; 0x80
 800c4b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	220a      	movs	r2, #10
 800c4b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	3363      	adds	r3, #99	; 0x63
 800c4c0:	2210      	movs	r2, #16
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f006 fa0e 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2203      	movs	r2, #3
 800c4ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	015b      	lsls	r3, r3, #5
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	220e      	movs	r2, #14
 800c4f2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2202      	movs	r2, #2
 800c50a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f103 0210 	add.w	r2, r3, #16
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c51a:	2301      	movs	r3, #1
 800c51c:	75fb      	strb	r3, [r7, #23]
      break;
 800c51e:	e020      	b.n	800c562 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	4619      	mov	r1, r3
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff fc03 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d115      	bne.n	800c560 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53a:	3302      	adds	r3, #2
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	f003 030f 	and.w	r3, r3, #15
 800c542:	b2da      	uxtb	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54e:	7b1a      	ldrb	r2, [r3, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c55a:	7b5a      	ldrb	r2, [r3, #13]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	709a      	strb	r2, [r3, #2]
      break;
 800c560:	bf00      	nop
  }

  return error;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	460b      	mov	r3, r1
 800c57a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c57c:	2302      	movs	r3, #2
 800c57e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c590:	2b01      	cmp	r3, #1
 800c592:	d002      	beq.n	800c59a <USBH_MSC_SCSI_Write+0x2e>
 800c594:	2b02      	cmp	r3, #2
 800c596:	d047      	beq.n	800c628 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c598:	e04e      	b.n	800c638 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	fb03 f202 	mul.w	r2, r3, r2
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	220a      	movs	r2, #10
 800c5b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	3363      	adds	r3, #99	; 0x63
 800c5c0:	2210      	movs	r2, #16
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f006 f98e 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	222a      	movs	r2, #42	; 0x2a
 800c5ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c5d2:	79fa      	ldrb	r2, [r7, #7]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c5da:	79ba      	ldrb	r2, [r7, #6]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c5e2:	797a      	ldrb	r2, [r7, #5]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c5ea:	1d3b      	adds	r3, r7, #4
 800c5ec:	781a      	ldrb	r2, [r3, #0]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c5f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c5fe:	f107 0320 	add.w	r3, r7, #32
 800c602:	781a      	ldrb	r2, [r3, #0]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2202      	movs	r2, #2
 800c616:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c622:	2301      	movs	r3, #1
 800c624:	75fb      	strb	r3, [r7, #23]
      break;
 800c626:	e007      	b.n	800c638 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff fb7f 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c632:	4603      	mov	r3, r0
 800c634:	75fb      	strb	r3, [r7, #23]
      break;
 800c636:	bf00      	nop
  }

  return error;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
 800c64e:	460b      	mov	r3, r1
 800c650:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c652:	2302      	movs	r3, #2
 800c654:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c65c:	69db      	ldr	r3, [r3, #28]
 800c65e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c666:	2b01      	cmp	r3, #1
 800c668:	d002      	beq.n	800c670 <USBH_MSC_SCSI_Read+0x2e>
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d047      	beq.n	800c6fe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c66e:	e04e      	b.n	800c70e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c676:	461a      	mov	r2, r3
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	fb03 f202 	mul.w	r2, r3, r2
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2280      	movs	r2, #128	; 0x80
 800c686:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	220a      	movs	r2, #10
 800c68e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	3363      	adds	r3, #99	; 0x63
 800c696:	2210      	movs	r2, #16
 800c698:	2100      	movs	r1, #0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f006 f923 	bl	80128e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2228      	movs	r2, #40	; 0x28
 800c6a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c6a8:	79fa      	ldrb	r2, [r7, #7]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c6b0:	79ba      	ldrb	r2, [r7, #6]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c6b8:	797a      	ldrb	r2, [r7, #5]
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c6c0:	1d3b      	adds	r3, r7, #4
 800c6c2:	781a      	ldrb	r2, [r3, #0]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c6ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c6d4:	f107 0320 	add.w	r3, r7, #32
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c6fc:	e007      	b.n	800c70e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c6fe:	7afb      	ldrb	r3, [r7, #11]
 800c700:	4619      	mov	r1, r3
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7ff fb14 	bl	800bd30 <USBH_MSC_BOT_Process>
 800c708:	4603      	mov	r3, r0
 800c70a:	75fb      	strb	r3, [r7, #23]
      break;
 800c70c:	bf00      	nop
  }

  return error;
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c72c:	2302      	movs	r3, #2
 800c72e:	e029      	b.n	800c784 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	79fa      	ldrb	r2, [r7, #7]
 800c734:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f81f 	bl	800c78c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f004 fbd3 	bl	8010f28 <USBH_LL_Init>

  return USBH_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c798:	2300      	movs	r3, #0
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	e009      	b.n	800c7b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	33e0      	adds	r3, #224	; 0xe0
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b0e      	cmp	r3, #14
 800c7b6:	d9f2      	bls.n	800c79e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	e009      	b.n	800c7d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d8:	d3f1      	bcc.n	800c7be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2240      	movs	r2, #64	; 0x40
 800c7fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d016      	beq.n	800c876 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10e      	bne.n	800c870 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c858:	1c59      	adds	r1, r3, #1
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	33de      	adds	r3, #222	; 0xde
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73fb      	strb	r3, [r7, #15]
 800c86e:	e004      	b.n	800c87a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c870:	2302      	movs	r3, #2
 800c872:	73fb      	strb	r3, [r7, #15]
 800c874:	e001      	b.n	800c87a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c876:	2302      	movs	r3, #2
 800c878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c89e:	78fa      	ldrb	r2, [r7, #3]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d204      	bcs.n	800c8ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c8ac:	e001      	b.n	800c8b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	70fb      	strb	r3, [r7, #3]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	70bb      	strb	r3, [r7, #2]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c8e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8ea:	e025      	b.n	800c938 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	221a      	movs	r2, #26
 800c8f0:	fb02 f303 	mul.w	r3, r2, r3
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	3302      	adds	r3, #2
 800c8fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	795b      	ldrb	r3, [r3, #5]
 800c902:	78fa      	ldrb	r2, [r7, #3]
 800c904:	429a      	cmp	r2, r3
 800c906:	d002      	beq.n	800c90e <USBH_FindInterface+0x4e>
 800c908:	78fb      	ldrb	r3, [r7, #3]
 800c90a:	2bff      	cmp	r3, #255	; 0xff
 800c90c:	d111      	bne.n	800c932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c912:	78ba      	ldrb	r2, [r7, #2]
 800c914:	429a      	cmp	r2, r3
 800c916:	d002      	beq.n	800c91e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c918:	78bb      	ldrb	r3, [r7, #2]
 800c91a:	2bff      	cmp	r3, #255	; 0xff
 800c91c:	d109      	bne.n	800c932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c922:	787a      	ldrb	r2, [r7, #1]
 800c924:	429a      	cmp	r2, r3
 800c926:	d002      	beq.n	800c92e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c928:	787b      	ldrb	r3, [r7, #1]
 800c92a:	2bff      	cmp	r3, #255	; 0xff
 800c92c:	d101      	bne.n	800c932 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	e006      	b.n	800c940 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	3301      	adds	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d9d6      	bls.n	800c8ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c93e:	23ff      	movs	r3, #255	; 0xff
}
 800c940:	4618      	mov	r0, r3
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f004 fb23 	bl	8010fa0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c95a:	2101      	movs	r1, #1
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f004 fc3a 	bl	80111d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af04      	add	r7, sp, #16
 800c972:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c974:	2302      	movs	r3, #2
 800c976:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b01      	cmp	r3, #1
 800c986:	d102      	bne.n	800c98e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2203      	movs	r2, #3
 800c98c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b0b      	cmp	r3, #11
 800c996:	f200 81b3 	bhi.w	800cd00 <USBH_Process+0x394>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <USBH_Process+0x34>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9d1 	.word	0x0800c9d1
 800c9a4:	0800ca03 	.word	0x0800ca03
 800c9a8:	0800ca6b 	.word	0x0800ca6b
 800c9ac:	0800cc9b 	.word	0x0800cc9b
 800c9b0:	0800cd01 	.word	0x0800cd01
 800c9b4:	0800cb0f 	.word	0x0800cb0f
 800c9b8:	0800cc41 	.word	0x0800cc41
 800c9bc:	0800cb45 	.word	0x0800cb45
 800c9c0:	0800cb65 	.word	0x0800cb65
 800c9c4:	0800cb85 	.word	0x0800cb85
 800c9c8:	0800cbb3 	.word	0x0800cbb3
 800c9cc:	0800cc83 	.word	0x0800cc83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f000 8193 	beq.w	800cd04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c9e4:	20c8      	movs	r0, #200	; 0xc8
 800c9e6:	f004 fc73 	bl	80112d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f004 fb33 	bl	8011056 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ca00:	e180      	b.n	800cd04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d107      	bne.n	800ca1c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca1a:	e182      	b.n	800cd22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca26:	d914      	bls.n	800ca52 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca2e:	3301      	adds	r3, #1
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d903      	bls.n	800ca4a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	220d      	movs	r2, #13
 800ca46:	701a      	strb	r2, [r3, #0]
      break;
 800ca48:	e16b      	b.n	800cd22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
      break;
 800ca50:	e167      	b.n	800cd22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca58:	f103 020a 	add.w	r2, r3, #10
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ca62:	200a      	movs	r0, #10
 800ca64:	f004 fc34 	bl	80112d0 <USBH_Delay>
      break;
 800ca68:	e15b      	b.n	800cd22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca7a:	2104      	movs	r1, #4
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca80:	2064      	movs	r0, #100	; 0x64
 800ca82:	f004 fc25 	bl	80112d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f004 fac0 	bl	801100c <USBH_LL_GetSpeed>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2205      	movs	r2, #5
 800ca9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f001 f931 	bl	800dd06 <USBH_AllocPipe>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800caac:	2180      	movs	r1, #128	; 0x80
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 f929 	bl	800dd06 <USBH_AllocPipe>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7919      	ldrb	r1, [r3, #4]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cad0:	b292      	uxth	r2, r2
 800cad2:	9202      	str	r2, [sp, #8]
 800cad4:	2200      	movs	r2, #0
 800cad6:	9201      	str	r2, [sp, #4]
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	4603      	mov	r3, r0
 800cadc:	2280      	movs	r2, #128	; 0x80
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 f8e2 	bl	800dca8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7959      	ldrb	r1, [r3, #5]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800caf8:	b292      	uxth	r2, r2
 800cafa:	9202      	str	r2, [sp, #8]
 800cafc:	2200      	movs	r2, #0
 800cafe:	9201      	str	r2, [sp, #4]
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4603      	mov	r3, r0
 800cb04:	2200      	movs	r2, #0
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 f8ce 	bl	800dca8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb0c:	e109      	b.n	800cd22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f90c 	bl	800cd2c <USBH_HandleEnum>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 80f3 	bne.w	800cd08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d103      	bne.n	800cb3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2208      	movs	r2, #8
 800cb38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cb3a:	e0e5      	b.n	800cd08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2207      	movs	r2, #7
 800cb40:	701a      	strb	r2, [r3, #0]
      break;
 800cb42:	e0e1      	b.n	800cd08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 80de 	beq.w	800cd0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb56:	2101      	movs	r1, #1
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2208      	movs	r2, #8
 800cb60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cb62:	e0d3      	b.n	800cd0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fc20 	bl	800d3b4 <USBH_SetCfg>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f040 80ca 	bne.w	800cd10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2209      	movs	r2, #9
 800cb80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb82:	e0c5      	b.n	800cd10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cb8a:	f003 0320 	and.w	r3, r3, #32
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cb92:	2101      	movs	r1, #1
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fc30 	bl	800d3fa <USBH_SetFeature>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 80b9 	bne.w	800cd14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	220a      	movs	r2, #10
 800cba6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cba8:	e0b4      	b.n	800cd14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	220a      	movs	r2, #10
 800cbae:	701a      	strb	r2, [r3, #0]
      break;
 800cbb0:	e0b0      	b.n	800cd14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 80ad 	beq.w	800cd18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
 800cbca:	e016      	b.n	800cbfa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cbcc:	7bfa      	ldrb	r2, [r7, #15]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	32de      	adds	r2, #222	; 0xde
 800cbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd6:	791a      	ldrb	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d108      	bne.n	800cbf4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cbe2:	7bfa      	ldrb	r2, [r7, #15]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	32de      	adds	r2, #222	; 0xde
 800cbe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cbf2:	e005      	b.n	800cc00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	73fb      	strb	r3, [r7, #15]
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d0e5      	beq.n	800cbcc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d016      	beq.n	800cc38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	4798      	blx	r3
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d109      	bne.n	800cc30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2206      	movs	r2, #6
 800cc20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc28:	2103      	movs	r1, #3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc2e:	e073      	b.n	800cd18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	220d      	movs	r2, #13
 800cc34:	701a      	strb	r2, [r3, #0]
      break;
 800cc36:	e06f      	b.n	800cd18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	220d      	movs	r2, #13
 800cc3c:	701a      	strb	r2, [r3, #0]
      break;
 800cc3e:	e06b      	b.n	800cd18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d017      	beq.n	800cc7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
 800cc56:	4603      	mov	r3, r0
 800cc58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cc5a:	7bbb      	ldrb	r3, [r7, #14]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	220b      	movs	r2, #11
 800cc66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc68:	e058      	b.n	800cd1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d154      	bne.n	800cd1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	220d      	movs	r2, #13
 800cc76:	701a      	strb	r2, [r3, #0]
      break;
 800cc78:	e050      	b.n	800cd1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	220d      	movs	r2, #13
 800cc7e:	701a      	strb	r2, [r3, #0]
      break;
 800cc80:	e04c      	b.n	800cd1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d049      	beq.n	800cd20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc92:	695b      	ldr	r3, [r3, #20]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	4798      	blx	r3
      }
      break;
 800cc98:	e042      	b.n	800cd20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff fd72 	bl	800c78c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d009      	beq.n	800ccc6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccd6:	2105      	movs	r1, #5
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d107      	bne.n	800ccf8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff fe2b 	bl	800c94c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ccf6:	e014      	b.n	800cd22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f004 f951 	bl	8010fa0 <USBH_LL_Start>
      break;
 800ccfe:	e010      	b.n	800cd22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd00:	bf00      	nop
 800cd02:	e00e      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd04:	bf00      	nop
 800cd06:	e00c      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd08:	bf00      	nop
 800cd0a:	e00a      	b.n	800cd22 <USBH_Process+0x3b6>
    break;
 800cd0c:	bf00      	nop
 800cd0e:	e008      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd10:	bf00      	nop
 800cd12:	e006      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd14:	bf00      	nop
 800cd16:	e004      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd18:	bf00      	nop
 800cd1a:	e002      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd1c:	bf00      	nop
 800cd1e:	e000      	b.n	800cd22 <USBH_Process+0x3b6>
      break;
 800cd20:	bf00      	nop
  }
  return USBH_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af04      	add	r7, sp, #16
 800cd32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cd34:	2301      	movs	r3, #1
 800cd36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b07      	cmp	r3, #7
 800cd42:	f200 81c1 	bhi.w	800d0c8 <USBH_HandleEnum+0x39c>
 800cd46:	a201      	add	r2, pc, #4	; (adr r2, 800cd4c <USBH_HandleEnum+0x20>)
 800cd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4c:	0800cd6d 	.word	0x0800cd6d
 800cd50:	0800ce2b 	.word	0x0800ce2b
 800cd54:	0800ce95 	.word	0x0800ce95
 800cd58:	0800cf23 	.word	0x0800cf23
 800cd5c:	0800cf8d 	.word	0x0800cf8d
 800cd60:	0800cffd 	.word	0x0800cffd
 800cd64:	0800d043 	.word	0x0800d043
 800cd68:	0800d089 	.word	0x0800d089
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cd6c:	2108      	movs	r1, #8
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fa50 	bl	800d214 <USBH_Get_DevDesc>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d130      	bne.n	800cde0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	7919      	ldrb	r1, [r3, #4]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cda2:	b292      	uxth	r2, r2
 800cda4:	9202      	str	r2, [sp, #8]
 800cda6:	2200      	movs	r2, #0
 800cda8:	9201      	str	r2, [sp, #4]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	4603      	mov	r3, r0
 800cdae:	2280      	movs	r2, #128	; 0x80
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 ff79 	bl	800dca8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7959      	ldrb	r1, [r3, #5]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdca:	b292      	uxth	r2, r2
 800cdcc:	9202      	str	r2, [sp, #8]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	9201      	str	r2, [sp, #4]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 ff65 	bl	800dca8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cdde:	e175      	b.n	800d0cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	f040 8172 	bne.w	800d0cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdee:	3301      	adds	r3, #1
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d903      	bls.n	800ce0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	220d      	movs	r2, #13
 800ce06:	701a      	strb	r2, [r3, #0]
      break;
 800ce08:	e160      	b.n	800d0cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	795b      	ldrb	r3, [r3, #5]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 ff99 	bl	800dd48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	791b      	ldrb	r3, [r3, #4]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 ff93 	bl	800dd48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
      break;
 800ce28:	e150      	b.n	800d0cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ce2a:	2112      	movs	r1, #18
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f9f1 	bl	800d214 <USBH_Get_DevDesc>
 800ce32:	4603      	mov	r3, r0
 800ce34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d103      	bne.n	800ce44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce42:	e145      	b.n	800d0d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	f040 8142 	bne.w	800d0d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce52:	3301      	adds	r3, #1
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d903      	bls.n	800ce6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	220d      	movs	r2, #13
 800ce6a:	701a      	strb	r2, [r3, #0]
      break;
 800ce6c:	e130      	b.n	800d0d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	795b      	ldrb	r3, [r3, #5]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 ff67 	bl	800dd48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	791b      	ldrb	r3, [r3, #4]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 ff61 	bl	800dd48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	701a      	strb	r2, [r3, #0]
      break;
 800ce92:	e11d      	b.n	800d0d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ce94:	2101      	movs	r1, #1
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa68 	bl	800d36c <USBH_SetAddress>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d132      	bne.n	800cf0c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cea6:	2002      	movs	r0, #2
 800cea8:	f004 fa12 	bl	80112d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2203      	movs	r2, #3
 800ceb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7919      	ldrb	r1, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cece:	b292      	uxth	r2, r2
 800ced0:	9202      	str	r2, [sp, #8]
 800ced2:	2200      	movs	r2, #0
 800ced4:	9201      	str	r2, [sp, #4]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	4603      	mov	r3, r0
 800ceda:	2280      	movs	r2, #128	; 0x80
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fee3 	bl	800dca8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7959      	ldrb	r1, [r3, #5]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cef6:	b292      	uxth	r2, r2
 800cef8:	9202      	str	r2, [sp, #8]
 800cefa:	2200      	movs	r2, #0
 800cefc:	9201      	str	r2, [sp, #4]
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	4603      	mov	r3, r0
 800cf02:	2200      	movs	r2, #0
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fecf 	bl	800dca8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf0a:	e0e3      	b.n	800d0d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	f040 80e0 	bne.w	800d0d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	220d      	movs	r2, #13
 800cf18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	705a      	strb	r2, [r3, #1]
      break;
 800cf20:	e0d8      	b.n	800d0d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf22:	2109      	movs	r1, #9
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f99d 	bl	800d264 <USBH_Get_CfgDesc>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf2e:	7bbb      	ldrb	r3, [r7, #14]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d103      	bne.n	800cf3c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2204      	movs	r2, #4
 800cf38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf3a:	e0cd      	b.n	800d0d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	f040 80ca 	bne.w	800d0d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	d903      	bls.n	800cf66 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	220d      	movs	r2, #13
 800cf62:	701a      	strb	r2, [r3, #0]
      break;
 800cf64:	e0b8      	b.n	800d0d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	795b      	ldrb	r3, [r3, #5]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 feeb 	bl	800dd48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	791b      	ldrb	r3, [r3, #4]
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fee5 	bl	800dd48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
      break;
 800cf8a:	e0a5      	b.n	800d0d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f965 	bl	800d264 <USBH_Get_CfgDesc>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2205      	movs	r2, #5
 800cfa8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfaa:	e097      	b.n	800d0dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	f040 8094 	bne.w	800d0dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	d903      	bls.n	800cfd6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	220d      	movs	r2, #13
 800cfd2:	701a      	strb	r2, [r3, #0]
      break;
 800cfd4:	e082      	b.n	800d0dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	795b      	ldrb	r3, [r3, #5]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 feb3 	bl	800dd48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	791b      	ldrb	r3, [r3, #4]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fead 	bl	800dd48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	701a      	strb	r2, [r3, #0]
      break;
 800cffa:	e06f      	b.n	800d0dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d002:	2b00      	cmp	r3, #0
 800d004:	d019      	beq.n	800d03a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d012:	23ff      	movs	r3, #255	; 0xff
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f949 	bl	800d2ac <USBH_Get_StringDesc>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2206      	movs	r2, #6
 800d028:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d02a:	e059      	b.n	800d0e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	2b03      	cmp	r3, #3
 800d030:	d156      	bne.n	800d0e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2206      	movs	r2, #6
 800d036:	705a      	strb	r2, [r3, #1]
      break;
 800d038:	e052      	b.n	800d0e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2206      	movs	r2, #6
 800d03e:	705a      	strb	r2, [r3, #1]
      break;
 800d040:	e04e      	b.n	800d0e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d019      	beq.n	800d080 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d058:	23ff      	movs	r3, #255	; 0xff
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f926 	bl	800d2ac <USBH_Get_StringDesc>
 800d060:	4603      	mov	r3, r0
 800d062:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d103      	bne.n	800d072 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2207      	movs	r2, #7
 800d06e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d070:	e038      	b.n	800d0e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	2b03      	cmp	r3, #3
 800d076:	d135      	bne.n	800d0e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2207      	movs	r2, #7
 800d07c:	705a      	strb	r2, [r3, #1]
      break;
 800d07e:	e031      	b.n	800d0e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2207      	movs	r2, #7
 800d084:	705a      	strb	r2, [r3, #1]
      break;
 800d086:	e02d      	b.n	800d0e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d017      	beq.n	800d0c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d09e:	23ff      	movs	r3, #255	; 0xff
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f903 	bl	800d2ac <USBH_Get_StringDesc>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d0b4:	e018      	b.n	800d0e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d115      	bne.n	800d0e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c0:	e012      	b.n	800d0e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c6:	e00f      	b.n	800d0e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d0c8:	bf00      	nop
 800d0ca:	e00e      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0cc:	bf00      	nop
 800d0ce:	e00c      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0d0:	bf00      	nop
 800d0d2:	e00a      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0d4:	bf00      	nop
 800d0d6:	e008      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0d8:	bf00      	nop
 800d0da:	e006      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0dc:	bf00      	nop
 800d0de:	e004      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0e0:	bf00      	nop
 800d0e2:	e002      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0e4:	bf00      	nop
 800d0e6:	e000      	b.n	800d0ea <USBH_HandleEnum+0x3be>
      break;
 800d0e8:	bf00      	nop
  }
  return Status;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f804 	bl	800d136 <USBH_HandleSof>
}
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b082      	sub	sp, #8
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b0b      	cmp	r3, #11
 800d146:	d10a      	bne.n	800d15e <USBH_HandleSof+0x28>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d005      	beq.n	800d15e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
  }
}
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d166:	b480      	push	{r7}
 800d168:	b083      	sub	sp, #12
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d176:	bf00      	nop
}
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d192:	bf00      	nop
}
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b083      	sub	sp, #12
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f003 fef2 	bl	8010fd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	791b      	ldrb	r3, [r3, #4]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fda5 	bl	800dd48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	795b      	ldrb	r3, [r3, #5]
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fd9f 	bl	800dd48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af02      	add	r7, sp, #8
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d226:	78fb      	ldrb	r3, [r7, #3]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	4613      	mov	r3, r2
 800d22e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d232:	2100      	movs	r1, #0
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f864 	bl	800d302 <USBH_GetDescriptor>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10a      	bne.n	800d25a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d250:	78fa      	ldrb	r2, [r7, #3]
 800d252:	b292      	uxth	r2, r2
 800d254:	4619      	mov	r1, r3
 800d256:	f000 f918 	bl	800d48a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af02      	add	r7, sp, #8
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	331c      	adds	r3, #28
 800d274:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d276:	887b      	ldrh	r3, [r7, #2]
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d280:	2100      	movs	r1, #0
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f83d 	bl	800d302 <USBH_GetDescriptor>
 800d288:	4603      	mov	r3, r0
 800d28a:	72fb      	strb	r3, [r7, #11]
 800d28c:	7afb      	ldrb	r3, [r7, #11]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d107      	bne.n	800d2a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d298:	887a      	ldrh	r2, [r7, #2]
 800d29a:	68f9      	ldr	r1, [r7, #12]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f964 	bl	800d56a <USBH_ParseCfgDesc>
  }

  return status;
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af02      	add	r7, sp, #8
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	607a      	str	r2, [r7, #4]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	72fb      	strb	r3, [r7, #11]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d2c0:	7afb      	ldrb	r3, [r7, #11]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d2c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d2d0:	893b      	ldrh	r3, [r7, #8]
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 f812 	bl	800d302 <USBH_GetDescriptor>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	75fb      	strb	r3, [r7, #23]
 800d2e2:	7dfb      	ldrb	r3, [r7, #23]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d107      	bne.n	800d2f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2ee:	893a      	ldrh	r2, [r7, #8]
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 fa37 	bl	800d766 <USBH_ParseStringDesc>
  }

  return status;
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	607b      	str	r3, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	72fb      	strb	r3, [r7, #11]
 800d310:	4613      	mov	r3, r2
 800d312:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	789b      	ldrb	r3, [r3, #2]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d11c      	bne.n	800d356 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d31c:	7afb      	ldrb	r3, [r7, #11]
 800d31e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d322:	b2da      	uxtb	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2206      	movs	r2, #6
 800d32c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	893a      	ldrh	r2, [r7, #8]
 800d332:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d334:	893b      	ldrh	r3, [r7, #8]
 800d336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d33a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d33e:	d104      	bne.n	800d34a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f240 4209 	movw	r2, #1033	; 0x409
 800d346:	829a      	strh	r2, [r3, #20]
 800d348:	e002      	b.n	800d350 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	8b3a      	ldrh	r2, [r7, #24]
 800d354:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d356:	8b3b      	ldrh	r3, [r7, #24]
 800d358:	461a      	mov	r2, r3
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f000 fa50 	bl	800d802 <USBH_CtlReq>
 800d362:	4603      	mov	r3, r0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	789b      	ldrb	r3, [r3, #2]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d10f      	bne.n	800d3a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2205      	movs	r2, #5
 800d38a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d38c:	78fb      	ldrb	r3, [r7, #3]
 800d38e:	b29a      	uxth	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fa2c 	bl	800d802 <USBH_CtlReq>
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	789b      	ldrb	r3, [r3, #2]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d10e      	bne.n	800d3e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2209      	movs	r2, #9
 800d3d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	887a      	ldrh	r2, [r7, #2]
 800d3d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fa09 	bl	800d802 <USBH_CtlReq>
 800d3f0:	4603      	mov	r3, r0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b082      	sub	sp, #8
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	460b      	mov	r3, r1
 800d404:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	789b      	ldrb	r3, [r3, #2]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d10f      	bne.n	800d42e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2203      	movs	r2, #3
 800d418:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d42e:	2200      	movs	r2, #0
 800d430:	2100      	movs	r1, #0
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f9e5 	bl	800d802 <USBH_CtlReq>
 800d438:	4603      	mov	r3, r0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	460b      	mov	r3, r1
 800d44c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	789b      	ldrb	r3, [r3, #2]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d10f      	bne.n	800d476 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2202      	movs	r2, #2
 800d45a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f9c1 	bl	800d802 <USBH_CtlReq>
 800d480:	4603      	mov	r3, r0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b085      	sub	sp, #20
 800d48e:	af00      	add	r7, sp, #0
 800d490:	60f8      	str	r0, [r7, #12]
 800d492:	60b9      	str	r1, [r7, #8]
 800d494:	4613      	mov	r3, r2
 800d496:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	785a      	ldrb	r2, [r3, #1]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	3303      	adds	r3, #3
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	021b      	lsls	r3, r3, #8
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	791a      	ldrb	r2, [r3, #4]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	795a      	ldrb	r2, [r3, #5]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	799a      	ldrb	r2, [r3, #6]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	79da      	ldrb	r2, [r3, #7]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d4e4:	88fb      	ldrh	r3, [r7, #6]
 800d4e6:	2b08      	cmp	r3, #8
 800d4e8:	d939      	bls.n	800d55e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	3309      	adds	r3, #9
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	021b      	lsls	r3, r3, #8
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	4313      	orrs	r3, r2
 800d500:	b29a      	uxth	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	330a      	adds	r3, #10
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	330b      	adds	r3, #11
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	b29b      	uxth	r3, r3
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	b29b      	uxth	r3, r3
 800d51a:	4313      	orrs	r3, r2
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	330c      	adds	r3, #12
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	330d      	adds	r3, #13
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	b29b      	uxth	r3, r3
 800d532:	021b      	lsls	r3, r3, #8
 800d534:	b29b      	uxth	r3, r3
 800d536:	4313      	orrs	r3, r2
 800d538:	b29a      	uxth	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	7b9a      	ldrb	r2, [r3, #14]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	7bda      	ldrb	r2, [r3, #15]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	7c1a      	ldrb	r2, [r3, #16]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	7c5a      	ldrb	r2, [r3, #17]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	745a      	strb	r2, [r3, #17]
  }
}
 800d55e:	bf00      	nop
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b08a      	sub	sp, #40	; 0x28
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	4613      	mov	r3, r2
 800d576:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	785a      	ldrb	r2, [r3, #1]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	3302      	adds	r3, #2
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	3303      	adds	r3, #3
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	791a      	ldrb	r2, [r3, #4]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	795a      	ldrb	r2, [r3, #5]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	799a      	ldrb	r2, [r3, #6]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	79da      	ldrb	r2, [r3, #7]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	7a1a      	ldrb	r2, [r3, #8]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d5e0:	88fb      	ldrh	r3, [r7, #6]
 800d5e2:	2b09      	cmp	r3, #9
 800d5e4:	d95f      	bls.n	800d6a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5e6:	2309      	movs	r3, #9
 800d5e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5ee:	e051      	b.n	800d694 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5f0:	f107 0316 	add.w	r3, r7, #22
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5f8:	f000 f8e8 	bl	800d7cc <USBH_GetNextDesc>
 800d5fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b04      	cmp	r3, #4
 800d604:	d146      	bne.n	800d694 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d60a:	221a      	movs	r2, #26
 800d60c:	fb02 f303 	mul.w	r3, r2, r3
 800d610:	3308      	adds	r3, #8
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	4413      	add	r3, r2
 800d616:	3302      	adds	r3, #2
 800d618:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d61a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d61c:	69f8      	ldr	r0, [r7, #28]
 800d61e:	f000 f846 	bl	800d6ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d622:	2300      	movs	r3, #0
 800d624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d628:	2300      	movs	r3, #0
 800d62a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d62c:	e022      	b.n	800d674 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d62e:	f107 0316 	add.w	r3, r7, #22
 800d632:	4619      	mov	r1, r3
 800d634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d636:	f000 f8c9 	bl	800d7cc <USBH_GetNextDesc>
 800d63a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	785b      	ldrb	r3, [r3, #1]
 800d640:	2b05      	cmp	r3, #5
 800d642:	d117      	bne.n	800d674 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d648:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d64c:	3201      	adds	r2, #1
 800d64e:	00d2      	lsls	r2, r2, #3
 800d650:	211a      	movs	r1, #26
 800d652:	fb01 f303 	mul.w	r3, r1, r3
 800d656:	4413      	add	r3, r2
 800d658:	3308      	adds	r3, #8
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	4413      	add	r3, r2
 800d65e:	3304      	adds	r3, #4
 800d660:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d664:	69b8      	ldr	r0, [r7, #24]
 800d666:	f000 f851 	bl	800d70c <USBH_ParseEPDesc>
            ep_ix++;
 800d66a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d66e:	3301      	adds	r3, #1
 800d670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	791b      	ldrb	r3, [r3, #4]
 800d678:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d204      	bcs.n	800d68a <USBH_ParseCfgDesc+0x120>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	885a      	ldrh	r2, [r3, #2]
 800d684:	8afb      	ldrh	r3, [r7, #22]
 800d686:	429a      	cmp	r2, r3
 800d688:	d8d1      	bhi.n	800d62e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d68e:	3301      	adds	r3, #1
 800d690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d804      	bhi.n	800d6a6 <USBH_ParseCfgDesc+0x13c>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	885a      	ldrh	r2, [r3, #2]
 800d6a0:	8afb      	ldrh	r3, [r7, #22]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d8a4      	bhi.n	800d5f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d6a6:	bf00      	nop
 800d6a8:	3728      	adds	r7, #40	; 0x28
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	781a      	ldrb	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	785a      	ldrb	r2, [r3, #1]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	789a      	ldrb	r2, [r3, #2]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	78da      	ldrb	r2, [r3, #3]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	791a      	ldrb	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	795a      	ldrb	r2, [r3, #5]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	799a      	ldrb	r2, [r3, #6]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	79da      	ldrb	r2, [r3, #7]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	7a1a      	ldrb	r2, [r3, #8]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	721a      	strb	r2, [r3, #8]
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	781a      	ldrb	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	785a      	ldrb	r2, [r3, #1]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	789a      	ldrb	r2, [r3, #2]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	78da      	ldrb	r2, [r3, #3]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3304      	adds	r3, #4
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	3305      	adds	r3, #5
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	b29b      	uxth	r3, r3
 800d746:	021b      	lsls	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4313      	orrs	r3, r2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	799a      	ldrb	r2, [r3, #6]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	719a      	strb	r2, [r3, #6]
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d766:	b480      	push	{r7}
 800d768:	b087      	sub	sp, #28
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	4613      	mov	r3, r2
 800d772:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3301      	adds	r3, #1
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d120      	bne.n	800d7c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	1e9a      	subs	r2, r3, #2
 800d784:	88fb      	ldrh	r3, [r7, #6]
 800d786:	4293      	cmp	r3, r2
 800d788:	bf28      	it	cs
 800d78a:	4613      	movcs	r3, r2
 800d78c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3302      	adds	r3, #2
 800d792:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d794:	2300      	movs	r3, #0
 800d796:	82fb      	strh	r3, [r7, #22]
 800d798:	e00b      	b.n	800d7b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d79a:	8afb      	ldrh	r3, [r7, #22]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4413      	add	r3, r2
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7ac:	8afb      	ldrh	r3, [r7, #22]
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	82fb      	strh	r3, [r7, #22]
 800d7b2:	8afa      	ldrh	r2, [r7, #22]
 800d7b4:	8abb      	ldrh	r3, [r7, #20]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d3ef      	bcc.n	800d79a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	701a      	strb	r2, [r3, #0]
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	371c      	adds	r7, #28
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	881a      	ldrh	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	4413      	add	r3, r2
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b086      	sub	sp, #24
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	4613      	mov	r3, r2
 800d80e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d810:	2301      	movs	r3, #1
 800d812:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	789b      	ldrb	r3, [r3, #2]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d002      	beq.n	800d822 <USBH_CtlReq+0x20>
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d00f      	beq.n	800d840 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d820:	e027      	b.n	800d872 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	88fa      	ldrh	r2, [r7, #6]
 800d82c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2202      	movs	r2, #2
 800d838:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d83a:	2301      	movs	r3, #1
 800d83c:	75fb      	strb	r3, [r7, #23]
      break;
 800d83e:	e018      	b.n	800d872 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 f81b 	bl	800d87c <USBH_HandleControl>
 800d846:	4603      	mov	r3, r0
 800d848:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d84a:	7dfb      	ldrb	r3, [r7, #23]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <USBH_CtlReq+0x54>
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	2b03      	cmp	r3, #3
 800d854:	d106      	bne.n	800d864 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2201      	movs	r2, #1
 800d85a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	761a      	strb	r2, [r3, #24]
      break;
 800d862:	e005      	b.n	800d870 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	2b02      	cmp	r3, #2
 800d868:	d102      	bne.n	800d870 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	709a      	strb	r2, [r3, #2]
      break;
 800d870:	bf00      	nop
  }
  return status;
 800d872:	7dfb      	ldrb	r3, [r7, #23]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af02      	add	r7, sp, #8
 800d882:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d884:	2301      	movs	r3, #1
 800d886:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d888:	2300      	movs	r3, #0
 800d88a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	7e1b      	ldrb	r3, [r3, #24]
 800d890:	3b01      	subs	r3, #1
 800d892:	2b0a      	cmp	r3, #10
 800d894:	f200 8158 	bhi.w	800db48 <USBH_HandleControl+0x2cc>
 800d898:	a201      	add	r2, pc, #4	; (adr r2, 800d8a0 <USBH_HandleControl+0x24>)
 800d89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89e:	bf00      	nop
 800d8a0:	0800d8cd 	.word	0x0800d8cd
 800d8a4:	0800d8e7 	.word	0x0800d8e7
 800d8a8:	0800d951 	.word	0x0800d951
 800d8ac:	0800d977 	.word	0x0800d977
 800d8b0:	0800d9af 	.word	0x0800d9af
 800d8b4:	0800d9db 	.word	0x0800d9db
 800d8b8:	0800da2d 	.word	0x0800da2d
 800d8bc:	0800da4f 	.word	0x0800da4f
 800d8c0:	0800da8b 	.word	0x0800da8b
 800d8c4:	0800dab3 	.word	0x0800dab3
 800d8c8:	0800daf1 	.word	0x0800daf1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f103 0110 	add.w	r1, r3, #16
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	795b      	ldrb	r3, [r3, #5]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f945 	bl	800db68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	761a      	strb	r2, [r3, #24]
      break;
 800d8e4:	e13b      	b.n	800db5e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	795b      	ldrb	r3, [r3, #5]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f003 fc5f 	bl	80111b0 <USBH_LL_GetURBState>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d8f6:	7bbb      	ldrb	r3, [r7, #14]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d11e      	bne.n	800d93a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7c1b      	ldrb	r3, [r3, #16]
 800d900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d904:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	8adb      	ldrh	r3, [r3, #22]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00a      	beq.n	800d924 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d90e:	7b7b      	ldrb	r3, [r7, #13]
 800d910:	2b80      	cmp	r3, #128	; 0x80
 800d912:	d103      	bne.n	800d91c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2203      	movs	r2, #3
 800d918:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d91a:	e117      	b.n	800db4c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2205      	movs	r2, #5
 800d920:	761a      	strb	r2, [r3, #24]
      break;
 800d922:	e113      	b.n	800db4c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800d924:	7b7b      	ldrb	r3, [r7, #13]
 800d926:	2b80      	cmp	r3, #128	; 0x80
 800d928:	d103      	bne.n	800d932 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2209      	movs	r2, #9
 800d92e:	761a      	strb	r2, [r3, #24]
      break;
 800d930:	e10c      	b.n	800db4c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2207      	movs	r2, #7
 800d936:	761a      	strb	r2, [r3, #24]
      break;
 800d938:	e108      	b.n	800db4c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	d003      	beq.n	800d948 <USBH_HandleControl+0xcc>
 800d940:	7bbb      	ldrb	r3, [r7, #14]
 800d942:	2b02      	cmp	r3, #2
 800d944:	f040 8102 	bne.w	800db4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	220b      	movs	r2, #11
 800d94c:	761a      	strb	r2, [r3, #24]
      break;
 800d94e:	e0fd      	b.n	800db4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6899      	ldr	r1, [r3, #8]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	899a      	ldrh	r2, [r3, #12]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	791b      	ldrb	r3, [r3, #4]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f93c 	bl	800dbe6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2204      	movs	r2, #4
 800d972:	761a      	strb	r2, [r3, #24]
      break;
 800d974:	e0f3      	b.n	800db5e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	791b      	ldrb	r3, [r3, #4]
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f003 fc17 	bl	80111b0 <USBH_LL_GetURBState>
 800d982:	4603      	mov	r3, r0
 800d984:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d986:	7bbb      	ldrb	r3, [r7, #14]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d102      	bne.n	800d992 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2209      	movs	r2, #9
 800d990:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d992:	7bbb      	ldrb	r3, [r7, #14]
 800d994:	2b05      	cmp	r3, #5
 800d996:	d102      	bne.n	800d99e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d998:	2303      	movs	r3, #3
 800d99a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d99c:	e0d8      	b.n	800db50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	2b04      	cmp	r3, #4
 800d9a2:	f040 80d5 	bne.w	800db50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	220b      	movs	r2, #11
 800d9aa:	761a      	strb	r2, [r3, #24]
      break;
 800d9ac:	e0d0      	b.n	800db50 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6899      	ldr	r1, [r3, #8]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	899a      	ldrh	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	7958      	ldrb	r0, [r3, #5]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	4603      	mov	r3, r0
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f8eb 	bl	800db9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2206      	movs	r2, #6
 800d9d6:	761a      	strb	r2, [r3, #24]
      break;
 800d9d8:	e0c1      	b.n	800db5e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	795b      	ldrb	r3, [r3, #5]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f003 fbe5 	bl	80111b0 <USBH_LL_GetURBState>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d103      	bne.n	800d9f8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2207      	movs	r2, #7
 800d9f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9f6:	e0ad      	b.n	800db54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d105      	bne.n	800da0a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	220c      	movs	r2, #12
 800da02:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da04:	2303      	movs	r3, #3
 800da06:	73fb      	strb	r3, [r7, #15]
      break;
 800da08:	e0a4      	b.n	800db54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d103      	bne.n	800da18 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2205      	movs	r2, #5
 800da14:	761a      	strb	r2, [r3, #24]
      break;
 800da16:	e09d      	b.n	800db54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	f040 809a 	bne.w	800db54 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	220b      	movs	r2, #11
 800da24:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da26:	2302      	movs	r3, #2
 800da28:	73fb      	strb	r3, [r7, #15]
      break;
 800da2a:	e093      	b.n	800db54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	791b      	ldrb	r3, [r3, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f8d6 	bl	800dbe6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2208      	movs	r2, #8
 800da4a:	761a      	strb	r2, [r3, #24]

      break;
 800da4c:	e087      	b.n	800db5e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	791b      	ldrb	r3, [r3, #4]
 800da52:	4619      	mov	r1, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f003 fbab 	bl	80111b0 <USBH_LL_GetURBState>
 800da5a:	4603      	mov	r3, r0
 800da5c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	2b01      	cmp	r3, #1
 800da62:	d105      	bne.n	800da70 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	220d      	movs	r2, #13
 800da68:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da6e:	e073      	b.n	800db58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	2b04      	cmp	r3, #4
 800da74:	d103      	bne.n	800da7e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	220b      	movs	r2, #11
 800da7a:	761a      	strb	r2, [r3, #24]
      break;
 800da7c:	e06c      	b.n	800db58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800da7e:	7bbb      	ldrb	r3, [r7, #14]
 800da80:	2b05      	cmp	r3, #5
 800da82:	d169      	bne.n	800db58 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800da84:	2303      	movs	r3, #3
 800da86:	73fb      	strb	r3, [r7, #15]
      break;
 800da88:	e066      	b.n	800db58 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	795a      	ldrb	r2, [r3, #5]
 800da8e:	2301      	movs	r3, #1
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	4613      	mov	r3, r2
 800da94:	2200      	movs	r2, #0
 800da96:	2100      	movs	r1, #0
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f87f 	bl	800db9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	220a      	movs	r2, #10
 800daae:	761a      	strb	r2, [r3, #24]
      break;
 800dab0:	e055      	b.n	800db5e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	795b      	ldrb	r3, [r3, #5]
 800dab6:	4619      	mov	r1, r3
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f003 fb79 	bl	80111b0 <USBH_LL_GetURBState>
 800dabe:	4603      	mov	r3, r0
 800dac0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d105      	bne.n	800dad4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	220d      	movs	r2, #13
 800dad0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dad2:	e043      	b.n	800db5c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d103      	bne.n	800dae2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2209      	movs	r2, #9
 800dade:	761a      	strb	r2, [r3, #24]
      break;
 800dae0:	e03c      	b.n	800db5c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d139      	bne.n	800db5c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	220b      	movs	r2, #11
 800daec:	761a      	strb	r2, [r3, #24]
      break;
 800daee:	e035      	b.n	800db5c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7e5b      	ldrb	r3, [r3, #25]
 800daf4:	3301      	adds	r3, #1
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	765a      	strb	r2, [r3, #25]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7e5b      	ldrb	r3, [r3, #25]
 800db00:	2b02      	cmp	r3, #2
 800db02:	d806      	bhi.n	800db12 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db10:	e025      	b.n	800db5e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db18:	2106      	movs	r1, #6
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	795b      	ldrb	r3, [r3, #5]
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f90c 	bl	800dd48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	791b      	ldrb	r3, [r3, #4]
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f906 	bl	800dd48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db42:	2302      	movs	r3, #2
 800db44:	73fb      	strb	r3, [r7, #15]
      break;
 800db46:	e00a      	b.n	800db5e <USBH_HandleControl+0x2e2>

    default:
      break;
 800db48:	bf00      	nop
 800db4a:	e008      	b.n	800db5e <USBH_HandleControl+0x2e2>
      break;
 800db4c:	bf00      	nop
 800db4e:	e006      	b.n	800db5e <USBH_HandleControl+0x2e2>
      break;
 800db50:	bf00      	nop
 800db52:	e004      	b.n	800db5e <USBH_HandleControl+0x2e2>
      break;
 800db54:	bf00      	nop
 800db56:	e002      	b.n	800db5e <USBH_HandleControl+0x2e2>
      break;
 800db58:	bf00      	nop
 800db5a:	e000      	b.n	800db5e <USBH_HandleControl+0x2e2>
      break;
 800db5c:	bf00      	nop
  }

  return status;
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af04      	add	r7, sp, #16
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	4613      	mov	r3, r2
 800db74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db76:	79f9      	ldrb	r1, [r7, #7]
 800db78:	2300      	movs	r3, #0
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	2308      	movs	r3, #8
 800db7e:	9302      	str	r3, [sp, #8]
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	9301      	str	r3, [sp, #4]
 800db84:	2300      	movs	r3, #0
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	2300      	movs	r3, #0
 800db8a:	2200      	movs	r2, #0
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f003 fade 	bl	801114e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	4611      	mov	r1, r2
 800dba8:	461a      	mov	r2, r3
 800dbaa:	460b      	mov	r3, r1
 800dbac:	80fb      	strh	r3, [r7, #6]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbc0:	7979      	ldrb	r1, [r7, #5]
 800dbc2:	7e3b      	ldrb	r3, [r7, #24]
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	9302      	str	r3, [sp, #8]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	2301      	movs	r3, #1
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f003 fab9 	bl	801114e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b088      	sub	sp, #32
 800dbea:	af04      	add	r7, sp, #16
 800dbec:	60f8      	str	r0, [r7, #12]
 800dbee:	60b9      	str	r1, [r7, #8]
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	80fb      	strh	r3, [r7, #6]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbfc:	7979      	ldrb	r1, [r7, #5]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	9303      	str	r3, [sp, #12]
 800dc02:	88fb      	ldrh	r3, [r7, #6]
 800dc04:	9302      	str	r3, [sp, #8]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2201      	movs	r2, #1
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f003 fa9b 	bl	801114e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dc18:	2300      	movs	r3, #0

}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b088      	sub	sp, #32
 800dc26:	af04      	add	r7, sp, #16
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	60b9      	str	r1, [r7, #8]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	461a      	mov	r2, r3
 800dc30:	460b      	mov	r3, r1
 800dc32:	80fb      	strh	r3, [r7, #6]
 800dc34:	4613      	mov	r3, r2
 800dc36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc46:	7979      	ldrb	r1, [r7, #5]
 800dc48:	7e3b      	ldrb	r3, [r7, #24]
 800dc4a:	9303      	str	r3, [sp, #12]
 800dc4c:	88fb      	ldrh	r3, [r7, #6]
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	2301      	movs	r3, #1
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	2302      	movs	r3, #2
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f003 fa76 	bl	801114e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af04      	add	r7, sp, #16
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	80fb      	strh	r3, [r7, #6]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc82:	7979      	ldrb	r1, [r7, #5]
 800dc84:	2300      	movs	r3, #0
 800dc86:	9303      	str	r3, [sp, #12]
 800dc88:	88fb      	ldrh	r3, [r7, #6]
 800dc8a:	9302      	str	r3, [sp, #8]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	9301      	str	r3, [sp, #4]
 800dc90:	2301      	movs	r3, #1
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	2302      	movs	r3, #2
 800dc96:	2201      	movs	r2, #1
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f003 fa58 	bl	801114e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	70fb      	strb	r3, [r7, #3]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	70bb      	strb	r3, [r7, #2]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dcc2:	7878      	ldrb	r0, [r7, #1]
 800dcc4:	78ba      	ldrb	r2, [r7, #2]
 800dcc6:	78f9      	ldrb	r1, [r7, #3]
 800dcc8:	8b3b      	ldrh	r3, [r7, #24]
 800dcca:	9302      	str	r3, [sp, #8]
 800dccc:	7d3b      	ldrb	r3, [r7, #20]
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	7c3b      	ldrb	r3, [r7, #16]
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f003 f9eb 	bl	80110b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f003 fa0a 	bl	8011110 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f836 	bl	800dd84 <USBH_GetFreePipe>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd1c:	89fb      	ldrh	r3, [r7, #14]
 800dd1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00a      	beq.n	800dd3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dd26:	78fa      	ldrb	r2, [r7, #3]
 800dd28:	89fb      	ldrh	r3, [r7, #14]
 800dd2a:	f003 030f 	and.w	r3, r3, #15
 800dd2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	33e0      	adds	r3, #224	; 0xe0
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	440b      	add	r3, r1
 800dd3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd3c:	89fb      	ldrh	r3, [r7, #14]
 800dd3e:	b2db      	uxtb	r3, r3
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	460b      	mov	r3, r1
 800dd52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800dd54:	78fb      	ldrb	r3, [r7, #3]
 800dd56:	2b0a      	cmp	r3, #10
 800dd58:	d80d      	bhi.n	800dd76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	33e0      	adds	r3, #224	; 0xe0
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	78fb      	ldrb	r3, [r7, #3]
 800dd68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dd6c:	6879      	ldr	r1, [r7, #4]
 800dd6e:	33e0      	adds	r3, #224	; 0xe0
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	440b      	add	r3, r1
 800dd74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]
 800dd94:	e00f      	b.n	800ddb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	33e0      	adds	r3, #224	; 0xe0
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d102      	bne.n	800ddb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	e007      	b.n	800ddc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	73fb      	strb	r3, [r7, #15]
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	2b0a      	cmp	r3, #10
 800ddba:	d9ec      	bls.n	800dd96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ddbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	4a08      	ldr	r2, [pc, #32]	; (800ddfc <disk_status+0x30>)
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	79fa      	ldrb	r2, [r7, #7]
 800dde4:	4905      	ldr	r1, [pc, #20]	; (800ddfc <disk_status+0x30>)
 800dde6:	440a      	add	r2, r1
 800dde8:	7a12      	ldrb	r2, [r2, #8]
 800ddea:	4610      	mov	r0, r2
 800ddec:	4798      	blx	r3
 800ddee:	4603      	mov	r3, r0
 800ddf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ddf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	200004dc 	.word	0x200004dc

0800de00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	4a0d      	ldr	r2, [pc, #52]	; (800de48 <disk_initialize+0x48>)
 800de12:	5cd3      	ldrb	r3, [r2, r3]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d111      	bne.n	800de3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800de18:	79fb      	ldrb	r3, [r7, #7]
 800de1a:	4a0b      	ldr	r2, [pc, #44]	; (800de48 <disk_initialize+0x48>)
 800de1c:	2101      	movs	r1, #1
 800de1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	4a09      	ldr	r2, [pc, #36]	; (800de48 <disk_initialize+0x48>)
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	79fa      	ldrb	r2, [r7, #7]
 800de2e:	4906      	ldr	r1, [pc, #24]	; (800de48 <disk_initialize+0x48>)
 800de30:	440a      	add	r2, r1
 800de32:	7a12      	ldrb	r2, [r2, #8]
 800de34:	4610      	mov	r0, r2
 800de36:	4798      	blx	r3
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	200004dc 	.word	0x200004dc

0800de4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de4c:	b590      	push	{r4, r7, lr}
 800de4e:	b087      	sub	sp, #28
 800de50:	af00      	add	r7, sp, #0
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	4603      	mov	r3, r0
 800de5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de5c:	7bfb      	ldrb	r3, [r7, #15]
 800de5e:	4a0a      	ldr	r2, [pc, #40]	; (800de88 <disk_read+0x3c>)
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	689c      	ldr	r4, [r3, #8]
 800de68:	7bfb      	ldrb	r3, [r7, #15]
 800de6a:	4a07      	ldr	r2, [pc, #28]	; (800de88 <disk_read+0x3c>)
 800de6c:	4413      	add	r3, r2
 800de6e:	7a18      	ldrb	r0, [r3, #8]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	47a0      	blx	r4
 800de78:	4603      	mov	r3, r0
 800de7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	371c      	adds	r7, #28
 800de82:	46bd      	mov	sp, r7
 800de84:	bd90      	pop	{r4, r7, pc}
 800de86:	bf00      	nop
 800de88:	200004dc 	.word	0x200004dc

0800de8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	4a0a      	ldr	r2, [pc, #40]	; (800dec8 <disk_write+0x3c>)
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	68dc      	ldr	r4, [r3, #12]
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	4a07      	ldr	r2, [pc, #28]	; (800dec8 <disk_write+0x3c>)
 800deac:	4413      	add	r3, r2
 800deae:	7a18      	ldrb	r0, [r3, #8]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	47a0      	blx	r4
 800deb8:	4603      	mov	r3, r0
 800deba:	75fb      	strb	r3, [r7, #23]
  return res;
 800debc:	7dfb      	ldrb	r3, [r7, #23]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	371c      	adds	r7, #28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd90      	pop	{r4, r7, pc}
 800dec6:	bf00      	nop
 800dec8:	200004dc 	.word	0x200004dc

0800decc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	603a      	str	r2, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
 800ded8:	460b      	mov	r3, r1
 800deda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	4a09      	ldr	r2, [pc, #36]	; (800df04 <disk_ioctl+0x38>)
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	79fa      	ldrb	r2, [r7, #7]
 800deea:	4906      	ldr	r1, [pc, #24]	; (800df04 <disk_ioctl+0x38>)
 800deec:	440a      	add	r2, r1
 800deee:	7a10      	ldrb	r0, [r2, #8]
 800def0:	79b9      	ldrb	r1, [r7, #6]
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	4798      	blx	r3
 800def6:	4603      	mov	r3, r0
 800def8:	73fb      	strb	r3, [r7, #15]
  return res;
 800defa:	7bfb      	ldrb	r3, [r7, #15]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	200004dc 	.word	0x200004dc

0800df08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3301      	adds	r3, #1
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df18:	89fb      	ldrh	r3, [r7, #14]
 800df1a:	021b      	lsls	r3, r3, #8
 800df1c:	b21a      	sxth	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	b21b      	sxth	r3, r3
 800df24:	4313      	orrs	r3, r2
 800df26:	b21b      	sxth	r3, r3
 800df28:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df2a:	89fb      	ldrh	r3, [r7, #14]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	3303      	adds	r3, #3
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	021b      	lsls	r3, r3, #8
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	3202      	adds	r2, #2
 800df50:	7812      	ldrb	r2, [r2, #0]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	3201      	adds	r2, #1
 800df5e:	7812      	ldrb	r2, [r2, #0]
 800df60:	4313      	orrs	r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	7812      	ldrb	r2, [r2, #0]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]
	return rv;
 800df70:	68fb      	ldr	r3, [r7, #12]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	460b      	mov	r3, r1
 800df88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	887a      	ldrh	r2, [r7, #2]
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	887b      	ldrh	r3, [r7, #2]
 800df98:	0a1b      	lsrs	r3, r3, #8
 800df9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	887a      	ldrh	r2, [r7, #2]
 800dfa4:	b2d2      	uxtb	r2, r2
 800dfa6:	701a      	strb	r2, [r3, #0]
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	1c5a      	adds	r2, r3, #1
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	b2d2      	uxtb	r2, r2
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	0a1b      	lsrs	r3, r3, #8
 800dfce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	607a      	str	r2, [r7, #4]
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	b2d2      	uxtb	r2, r2
 800dfda:	701a      	strb	r2, [r3, #0]
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	b2d2      	uxtb	r2, r2
 800dfec:	701a      	strb	r2, [r3, #0]
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	0a1b      	lsrs	r3, r3, #8
 800dff2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	607a      	str	r2, [r7, #4]
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e00c:	b480      	push	{r7}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00d      	beq.n	800e042 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	1c53      	adds	r3, r2, #1
 800e02a:	613b      	str	r3, [r7, #16]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	1c59      	adds	r1, r3, #1
 800e030:	6179      	str	r1, [r7, #20]
 800e032:	7812      	ldrb	r2, [r2, #0]
 800e034:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	3b01      	subs	r3, #1
 800e03a:	607b      	str	r3, [r7, #4]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1f1      	bne.n	800e026 <mem_cpy+0x1a>
	}
}
 800e042:	bf00      	nop
 800e044:	371c      	adds	r7, #28
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e04e:	b480      	push	{r7}
 800e050:	b087      	sub	sp, #28
 800e052:	af00      	add	r7, sp, #0
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	1c5a      	adds	r2, r3, #1
 800e062:	617a      	str	r2, [r7, #20]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	b2d2      	uxtb	r2, r2
 800e068:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	607b      	str	r3, [r7, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1f3      	bne.n	800e05e <mem_set+0x10>
}
 800e076:	bf00      	nop
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e082:	b480      	push	{r7}
 800e084:	b089      	sub	sp, #36	; 0x24
 800e086:	af00      	add	r7, sp, #0
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	61fb      	str	r3, [r7, #28]
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e096:	2300      	movs	r3, #0
 800e098:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	1c5a      	adds	r2, r3, #1
 800e09e:	61fa      	str	r2, [r7, #28]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	61ba      	str	r2, [r7, #24]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	1acb      	subs	r3, r1, r3
 800e0ae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	607b      	str	r3, [r7, #4]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <mem_cmp+0x40>
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0eb      	beq.n	800e09a <mem_cmp+0x18>

	return r;
 800e0c2:	697b      	ldr	r3, [r7, #20]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3724      	adds	r7, #36	; 0x24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e0da:	e002      	b.n	800e0e2 <chk_chr+0x12>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	607b      	str	r3, [r7, #4]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d005      	beq.n	800e0f6 <chk_chr+0x26>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d1f2      	bne.n	800e0dc <chk_chr+0xc>
	return *str;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
	...

0800e108 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e112:	2300      	movs	r3, #0
 800e114:	60bb      	str	r3, [r7, #8]
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	e029      	b.n	800e170 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e11c:	4a27      	ldr	r2, [pc, #156]	; (800e1bc <chk_lock+0xb4>)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	011b      	lsls	r3, r3, #4
 800e122:	4413      	add	r3, r2
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d01d      	beq.n	800e166 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e12a:	4a24      	ldr	r2, [pc, #144]	; (800e1bc <chk_lock+0xb4>)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	011b      	lsls	r3, r3, #4
 800e130:	4413      	add	r3, r2
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d116      	bne.n	800e16a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e13c:	4a1f      	ldr	r2, [pc, #124]	; (800e1bc <chk_lock+0xb4>)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	011b      	lsls	r3, r3, #4
 800e142:	4413      	add	r3, r2
 800e144:	3304      	adds	r3, #4
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d10c      	bne.n	800e16a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e150:	4a1a      	ldr	r2, [pc, #104]	; (800e1bc <chk_lock+0xb4>)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	4413      	add	r3, r2
 800e158:	3308      	adds	r3, #8
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e160:	429a      	cmp	r2, r3
 800e162:	d102      	bne.n	800e16a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e164:	e007      	b.n	800e176 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e166:	2301      	movs	r3, #1
 800e168:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	3301      	adds	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d9d2      	bls.n	800e11c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d109      	bne.n	800e190 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <chk_lock+0x80>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d101      	bne.n	800e18c <chk_lock+0x84>
 800e188:	2300      	movs	r3, #0
 800e18a:	e010      	b.n	800e1ae <chk_lock+0xa6>
 800e18c:	2312      	movs	r3, #18
 800e18e:	e00e      	b.n	800e1ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d108      	bne.n	800e1a8 <chk_lock+0xa0>
 800e196:	4a09      	ldr	r2, [pc, #36]	; (800e1bc <chk_lock+0xb4>)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	011b      	lsls	r3, r3, #4
 800e19c:	4413      	add	r3, r2
 800e19e:	330c      	adds	r3, #12
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1a6:	d101      	bne.n	800e1ac <chk_lock+0xa4>
 800e1a8:	2310      	movs	r3, #16
 800e1aa:	e000      	b.n	800e1ae <chk_lock+0xa6>
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	200002ac 	.word	0x200002ac

0800e1c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	607b      	str	r3, [r7, #4]
 800e1ca:	e002      	b.n	800e1d2 <enq_lock+0x12>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	607b      	str	r3, [r7, #4]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d806      	bhi.n	800e1e6 <enq_lock+0x26>
 800e1d8:	4a09      	ldr	r2, [pc, #36]	; (800e200 <enq_lock+0x40>)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	011b      	lsls	r3, r3, #4
 800e1de:	4413      	add	r3, r2
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1f2      	bne.n	800e1cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	bf14      	ite	ne
 800e1ec:	2301      	movne	r3, #1
 800e1ee:	2300      	moveq	r3, #0
 800e1f0:	b2db      	uxtb	r3, r3
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	200002ac 	.word	0x200002ac

0800e204 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e20e:	2300      	movs	r3, #0
 800e210:	60fb      	str	r3, [r7, #12]
 800e212:	e01f      	b.n	800e254 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e214:	4a41      	ldr	r2, [pc, #260]	; (800e31c <inc_lock+0x118>)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	011b      	lsls	r3, r3, #4
 800e21a:	4413      	add	r3, r2
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	d113      	bne.n	800e24e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e226:	4a3d      	ldr	r2, [pc, #244]	; (800e31c <inc_lock+0x118>)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	011b      	lsls	r3, r3, #4
 800e22c:	4413      	add	r3, r2
 800e22e:	3304      	adds	r3, #4
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e236:	429a      	cmp	r2, r3
 800e238:	d109      	bne.n	800e24e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e23a:	4a38      	ldr	r2, [pc, #224]	; (800e31c <inc_lock+0x118>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	011b      	lsls	r3, r3, #4
 800e240:	4413      	add	r3, r2
 800e242:	3308      	adds	r3, #8
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d006      	beq.n	800e25c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3301      	adds	r3, #1
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b02      	cmp	r3, #2
 800e258:	d9dc      	bls.n	800e214 <inc_lock+0x10>
 800e25a:	e000      	b.n	800e25e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e25c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b03      	cmp	r3, #3
 800e262:	d132      	bne.n	800e2ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	e002      	b.n	800e270 <inc_lock+0x6c>
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3301      	adds	r3, #1
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b02      	cmp	r3, #2
 800e274:	d806      	bhi.n	800e284 <inc_lock+0x80>
 800e276:	4a29      	ldr	r2, [pc, #164]	; (800e31c <inc_lock+0x118>)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	011b      	lsls	r3, r3, #4
 800e27c:	4413      	add	r3, r2
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1f2      	bne.n	800e26a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b03      	cmp	r3, #3
 800e288:	d101      	bne.n	800e28e <inc_lock+0x8a>
 800e28a:	2300      	movs	r3, #0
 800e28c:	e040      	b.n	800e310 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4922      	ldr	r1, [pc, #136]	; (800e31c <inc_lock+0x118>)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	011b      	lsls	r3, r3, #4
 800e298:	440b      	add	r3, r1
 800e29a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689a      	ldr	r2, [r3, #8]
 800e2a0:	491e      	ldr	r1, [pc, #120]	; (800e31c <inc_lock+0x118>)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	440b      	add	r3, r1
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	695a      	ldr	r2, [r3, #20]
 800e2b0:	491a      	ldr	r1, [pc, #104]	; (800e31c <inc_lock+0x118>)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	011b      	lsls	r3, r3, #4
 800e2b6:	440b      	add	r3, r1
 800e2b8:	3308      	adds	r3, #8
 800e2ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e2bc:	4a17      	ldr	r2, [pc, #92]	; (800e31c <inc_lock+0x118>)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	011b      	lsls	r3, r3, #4
 800e2c2:	4413      	add	r3, r2
 800e2c4:	330c      	adds	r3, #12
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d009      	beq.n	800e2e4 <inc_lock+0xe0>
 800e2d0:	4a12      	ldr	r2, [pc, #72]	; (800e31c <inc_lock+0x118>)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	011b      	lsls	r3, r3, #4
 800e2d6:	4413      	add	r3, r2
 800e2d8:	330c      	adds	r3, #12
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <inc_lock+0xe0>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e015      	b.n	800e310 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d108      	bne.n	800e2fc <inc_lock+0xf8>
 800e2ea:	4a0c      	ldr	r2, [pc, #48]	; (800e31c <inc_lock+0x118>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	011b      	lsls	r3, r3, #4
 800e2f0:	4413      	add	r3, r2
 800e2f2:	330c      	adds	r3, #12
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	e001      	b.n	800e300 <inc_lock+0xfc>
 800e2fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e300:	4906      	ldr	r1, [pc, #24]	; (800e31c <inc_lock+0x118>)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	011b      	lsls	r3, r3, #4
 800e306:	440b      	add	r3, r1
 800e308:	330c      	adds	r3, #12
 800e30a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3301      	adds	r3, #1
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	200002ac 	.word	0x200002ac

0800e320 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	607b      	str	r3, [r7, #4]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b02      	cmp	r3, #2
 800e332:	d825      	bhi.n	800e380 <dec_lock+0x60>
		n = Files[i].ctr;
 800e334:	4a17      	ldr	r2, [pc, #92]	; (800e394 <dec_lock+0x74>)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	011b      	lsls	r3, r3, #4
 800e33a:	4413      	add	r3, r2
 800e33c:	330c      	adds	r3, #12
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e342:	89fb      	ldrh	r3, [r7, #14]
 800e344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e348:	d101      	bne.n	800e34e <dec_lock+0x2e>
 800e34a:	2300      	movs	r3, #0
 800e34c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e34e:	89fb      	ldrh	r3, [r7, #14]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <dec_lock+0x3a>
 800e354:	89fb      	ldrh	r3, [r7, #14]
 800e356:	3b01      	subs	r3, #1
 800e358:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e35a:	4a0e      	ldr	r2, [pc, #56]	; (800e394 <dec_lock+0x74>)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	011b      	lsls	r3, r3, #4
 800e360:	4413      	add	r3, r2
 800e362:	330c      	adds	r3, #12
 800e364:	89fa      	ldrh	r2, [r7, #14]
 800e366:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e368:	89fb      	ldrh	r3, [r7, #14]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <dec_lock+0x5a>
 800e36e:	4a09      	ldr	r2, [pc, #36]	; (800e394 <dec_lock+0x74>)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	011b      	lsls	r3, r3, #4
 800e374:	4413      	add	r3, r2
 800e376:	2200      	movs	r2, #0
 800e378:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	737b      	strb	r3, [r7, #13]
 800e37e:	e001      	b.n	800e384 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e380:	2302      	movs	r3, #2
 800e382:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e384:	7b7b      	ldrb	r3, [r7, #13]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	200002ac 	.word	0x200002ac

0800e398 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	e010      	b.n	800e3c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e3a6:	4a0d      	ldr	r2, [pc, #52]	; (800e3dc <clear_lock+0x44>)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	011b      	lsls	r3, r3, #4
 800e3ac:	4413      	add	r3, r2
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d105      	bne.n	800e3c2 <clear_lock+0x2a>
 800e3b6:	4a09      	ldr	r2, [pc, #36]	; (800e3dc <clear_lock+0x44>)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	011b      	lsls	r3, r3, #4
 800e3bc:	4413      	add	r3, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	60fb      	str	r3, [r7, #12]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d9eb      	bls.n	800e3a6 <clear_lock+0xe>
	}
}
 800e3ce:	bf00      	nop
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	200002ac 	.word	0x200002ac

0800e3e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	78db      	ldrb	r3, [r3, #3]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d034      	beq.n	800e45e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7858      	ldrb	r0, [r3, #1]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e404:	2301      	movs	r3, #1
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	f7ff fd40 	bl	800de8c <disk_write>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d002      	beq.n	800e418 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e412:	2301      	movs	r3, #1
 800e414:	73fb      	strb	r3, [r7, #15]
 800e416:	e022      	b.n	800e45e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e422:	697a      	ldr	r2, [r7, #20]
 800e424:	1ad2      	subs	r2, r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d217      	bcs.n	800e45e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	789b      	ldrb	r3, [r3, #2]
 800e432:	613b      	str	r3, [r7, #16]
 800e434:	e010      	b.n	800e458 <sync_window+0x78>
					wsect += fs->fsize;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4413      	add	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7858      	ldrb	r0, [r3, #1]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e44a:	2301      	movs	r3, #1
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	f7ff fd1d 	bl	800de8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	3b01      	subs	r3, #1
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d8eb      	bhi.n	800e436 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47a:	683a      	ldr	r2, [r7, #0]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d01b      	beq.n	800e4b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7ff ffad 	bl	800e3e0 <sync_window>
 800e486:	4603      	mov	r3, r0
 800e488:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d113      	bne.n	800e4b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	7858      	ldrb	r0, [r3, #1]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e49a:	2301      	movs	r3, #1
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	f7ff fcd5 	bl	800de4c <disk_read>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ff87 	bl	800e3e0 <sync_window>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d158      	bne.n	800e58e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	2b03      	cmp	r3, #3
 800e4e2:	d148      	bne.n	800e576 <sync_fs+0xb2>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	791b      	ldrb	r3, [r3, #4]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d144      	bne.n	800e576 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3334      	adds	r3, #52	; 0x34
 800e4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7ff fda9 	bl	800e04e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3334      	adds	r3, #52	; 0x34
 800e500:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e504:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff fd38 	bl	800df7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3334      	adds	r3, #52	; 0x34
 800e512:	4921      	ldr	r1, [pc, #132]	; (800e598 <sync_fs+0xd4>)
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff fd4d 	bl	800dfb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	3334      	adds	r3, #52	; 0x34
 800e51e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e522:	491e      	ldr	r1, [pc, #120]	; (800e59c <sync_fs+0xd8>)
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fd45 	bl	800dfb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3334      	adds	r3, #52	; 0x34
 800e52e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	4619      	mov	r1, r3
 800e538:	4610      	mov	r0, r2
 800e53a:	f7ff fd3b 	bl	800dfb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3334      	adds	r3, #52	; 0x34
 800e542:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	4619      	mov	r1, r3
 800e54c:	4610      	mov	r0, r2
 800e54e:	f7ff fd31 	bl	800dfb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7858      	ldrb	r0, [r3, #1]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e56a:	2301      	movs	r3, #1
 800e56c:	f7ff fc8e 	bl	800de8c <disk_write>
			fs->fsi_flag = 0;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	785b      	ldrb	r3, [r3, #1]
 800e57a:	2200      	movs	r2, #0
 800e57c:	2100      	movs	r1, #0
 800e57e:	4618      	mov	r0, r3
 800e580:	f7ff fca4 	bl	800decc <disk_ioctl>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <sync_fs+0xca>
 800e58a:	2301      	movs	r3, #1
 800e58c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	41615252 	.word	0x41615252
 800e59c:	61417272 	.word	0x61417272

0800e5a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	3b02      	subs	r3, #2
 800e5ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	3b02      	subs	r3, #2
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d301      	bcc.n	800e5c0 <clust2sect+0x20>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e008      	b.n	800e5d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	895b      	ldrh	r3, [r3, #10]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	fb03 f202 	mul.w	r2, r3, r2
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d0:	4413      	add	r3, r2
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d904      	bls.n	800e5fe <get_fat+0x20>
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d302      	bcc.n	800e604 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e5fe:	2301      	movs	r3, #1
 800e600:	617b      	str	r3, [r7, #20]
 800e602:	e08c      	b.n	800e71e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e608:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d045      	beq.n	800e69e <get_fat+0xc0>
 800e612:	2b03      	cmp	r3, #3
 800e614:	d05d      	beq.n	800e6d2 <get_fat+0xf4>
 800e616:	2b01      	cmp	r3, #1
 800e618:	d177      	bne.n	800e70a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	085b      	lsrs	r3, r3, #1
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	4413      	add	r3, r2
 800e626:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	0a5b      	lsrs	r3, r3, #9
 800e630:	4413      	add	r3, r2
 800e632:	4619      	mov	r1, r3
 800e634:	6938      	ldr	r0, [r7, #16]
 800e636:	f7ff ff17 	bl	800e468 <move_window>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d167      	bne.n	800e710 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	60fa      	str	r2, [r7, #12]
 800e646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e64a:	693a      	ldr	r2, [r7, #16]
 800e64c:	4413      	add	r3, r2
 800e64e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e652:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	0a5b      	lsrs	r3, r3, #9
 800e65c:	4413      	add	r3, r2
 800e65e:	4619      	mov	r1, r3
 800e660:	6938      	ldr	r0, [r7, #16]
 800e662:	f7ff ff01 	bl	800e468 <move_window>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d153      	bne.n	800e714 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4413      	add	r3, r2
 800e676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e67a:	021b      	lsls	r3, r3, #8
 800e67c:	461a      	mov	r2, r3
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	4313      	orrs	r3, r2
 800e682:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <get_fat+0xb6>
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	091b      	lsrs	r3, r3, #4
 800e692:	e002      	b.n	800e69a <get_fat+0xbc>
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e69a:	617b      	str	r3, [r7, #20]
			break;
 800e69c:	e03f      	b.n	800e71e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	0a1b      	lsrs	r3, r3, #8
 800e6a6:	4413      	add	r3, r2
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6938      	ldr	r0, [r7, #16]
 800e6ac:	f7ff fedc 	bl	800e468 <move_window>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d130      	bne.n	800e718 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e6c4:	4413      	add	r3, r2
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff fc1e 	bl	800df08 <ld_word>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	617b      	str	r3, [r7, #20]
			break;
 800e6d0:	e025      	b.n	800e71e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	09db      	lsrs	r3, r3, #7
 800e6da:	4413      	add	r3, r2
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6938      	ldr	r0, [r7, #16]
 800e6e0:	f7ff fec2 	bl	800e468 <move_window>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d118      	bne.n	800e71c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e6f8:	4413      	add	r3, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fc1c 	bl	800df38 <ld_dword>
 800e700:	4603      	mov	r3, r0
 800e702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e706:	617b      	str	r3, [r7, #20]
			break;
 800e708:	e009      	b.n	800e71e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e70a:	2301      	movs	r3, #1
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	e006      	b.n	800e71e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e710:	bf00      	nop
 800e712:	e004      	b.n	800e71e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e714:	bf00      	nop
 800e716:	e002      	b.n	800e71e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e718:	bf00      	nop
 800e71a:	e000      	b.n	800e71e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e71c:	bf00      	nop
		}
	}

	return val;
 800e71e:	697b      	ldr	r3, [r7, #20]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b089      	sub	sp, #36	; 0x24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e734:	2302      	movs	r3, #2
 800e736:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	f240 80d6 	bls.w	800e8ec <put_fat+0x1c4>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	429a      	cmp	r2, r3
 800e748:	f080 80d0 	bcs.w	800e8ec <put_fat+0x1c4>
		switch (fs->fs_type) {
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	2b02      	cmp	r3, #2
 800e752:	d073      	beq.n	800e83c <put_fat+0x114>
 800e754:	2b03      	cmp	r3, #3
 800e756:	f000 8091 	beq.w	800e87c <put_fat+0x154>
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	f040 80c6 	bne.w	800e8ec <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	61bb      	str	r3, [r7, #24]
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	085b      	lsrs	r3, r3, #1
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	4413      	add	r3, r2
 800e76c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	0a5b      	lsrs	r3, r3, #9
 800e776:	4413      	add	r3, r2
 800e778:	4619      	mov	r1, r3
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff fe74 	bl	800e468 <move_window>
 800e780:	4603      	mov	r3, r0
 800e782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e784:	7ffb      	ldrb	r3, [r7, #31]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f040 80a9 	bne.w	800e8de <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	1c59      	adds	r1, r3, #1
 800e796:	61b9      	str	r1, [r7, #24]
 800e798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e79c:	4413      	add	r3, r2
 800e79e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	f003 0301 	and.w	r3, r3, #1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00d      	beq.n	800e7c6 <put_fat+0x9e>
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	b25b      	sxtb	r3, r3
 800e7b0:	f003 030f 	and.w	r3, r3, #15
 800e7b4:	b25a      	sxtb	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	011b      	lsls	r3, r3, #4
 800e7bc:	b25b      	sxtb	r3, r3
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	b25b      	sxtb	r3, r3
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	e001      	b.n	800e7ca <put_fat+0xa2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	0a5b      	lsrs	r3, r3, #9
 800e7dc:	4413      	add	r3, r2
 800e7de:	4619      	mov	r1, r3
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f7ff fe41 	bl	800e468 <move_window>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7ea:	7ffb      	ldrb	r3, [r7, #31]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d178      	bne.n	800e8e2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fc:	4413      	add	r3, r2
 800e7fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	f003 0301 	and.w	r3, r3, #1
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <put_fat+0xea>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	091b      	lsrs	r3, r3, #4
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	e00e      	b.n	800e830 <put_fat+0x108>
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	b25b      	sxtb	r3, r3
 800e818:	f023 030f 	bic.w	r3, r3, #15
 800e81c:	b25a      	sxtb	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	0a1b      	lsrs	r3, r3, #8
 800e822:	b25b      	sxtb	r3, r3
 800e824:	f003 030f 	and.w	r3, r3, #15
 800e828:	b25b      	sxtb	r3, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	b25b      	sxtb	r3, r3
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2201      	movs	r2, #1
 800e838:	70da      	strb	r2, [r3, #3]
			break;
 800e83a:	e057      	b.n	800e8ec <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	4413      	add	r3, r2
 800e846:	4619      	mov	r1, r3
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff fe0d 	bl	800e468 <move_window>
 800e84e:	4603      	mov	r3, r0
 800e850:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e852:	7ffb      	ldrb	r3, [r7, #31]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d146      	bne.n	800e8e6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e866:	4413      	add	r3, r2
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	b292      	uxth	r2, r2
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fb85 	bl	800df7e <st_word>
			fs->wflag = 1;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2201      	movs	r2, #1
 800e878:	70da      	strb	r2, [r3, #3]
			break;
 800e87a:	e037      	b.n	800e8ec <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	09db      	lsrs	r3, r3, #7
 800e884:	4413      	add	r3, r2
 800e886:	4619      	mov	r1, r3
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff fded 	bl	800e468 <move_window>
 800e88e:	4603      	mov	r3, r0
 800e890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e892:	7ffb      	ldrb	r3, [r7, #31]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d128      	bne.n	800e8ea <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e8ac:	4413      	add	r3, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff fb42 	bl	800df38 <ld_dword>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e8ba:	4323      	orrs	r3, r4
 800e8bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e8cc:	4413      	add	r3, r2
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff fb6f 	bl	800dfb4 <st_dword>
			fs->wflag = 1;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	70da      	strb	r2, [r3, #3]
			break;
 800e8dc:	e006      	b.n	800e8ec <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8de:	bf00      	nop
 800e8e0:	e004      	b.n	800e8ec <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8e2:	bf00      	nop
 800e8e4:	e002      	b.n	800e8ec <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8e6:	bf00      	nop
 800e8e8:	e000      	b.n	800e8ec <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8ea:	bf00      	nop
		}
	}
	return res;
 800e8ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3724      	adds	r7, #36	; 0x24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd90      	pop	{r4, r7, pc}

0800e8f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b088      	sub	sp, #32
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	60f8      	str	r0, [r7, #12]
 800e8fe:	60b9      	str	r1, [r7, #8]
 800e900:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d904      	bls.n	800e91c <remove_chain+0x26>
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d301      	bcc.n	800e920 <remove_chain+0x2a>
 800e91c:	2302      	movs	r3, #2
 800e91e:	e04b      	b.n	800e9b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00c      	beq.n	800e940 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e92a:	6879      	ldr	r1, [r7, #4]
 800e92c:	69b8      	ldr	r0, [r7, #24]
 800e92e:	f7ff fefb 	bl	800e728 <put_fat>
 800e932:	4603      	mov	r3, r0
 800e934:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e936:	7ffb      	ldrb	r3, [r7, #31]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <remove_chain+0x4a>
 800e93c:	7ffb      	ldrb	r3, [r7, #31]
 800e93e:	e03b      	b.n	800e9b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fe4b 	bl	800e5de <get_fat>
 800e948:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d031      	beq.n	800e9b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d101      	bne.n	800e95a <remove_chain+0x64>
 800e956:	2302      	movs	r3, #2
 800e958:	e02e      	b.n	800e9b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e960:	d101      	bne.n	800e966 <remove_chain+0x70>
 800e962:	2301      	movs	r3, #1
 800e964:	e028      	b.n	800e9b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e966:	2200      	movs	r2, #0
 800e968:	68b9      	ldr	r1, [r7, #8]
 800e96a:	69b8      	ldr	r0, [r7, #24]
 800e96c:	f7ff fedc 	bl	800e728 <put_fat>
 800e970:	4603      	mov	r3, r0
 800e972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e974:	7ffb      	ldrb	r3, [r7, #31]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <remove_chain+0x88>
 800e97a:	7ffb      	ldrb	r3, [r7, #31]
 800e97c:	e01c      	b.n	800e9b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	695a      	ldr	r2, [r3, #20]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	3b02      	subs	r3, #2
 800e988:	429a      	cmp	r2, r3
 800e98a:	d20b      	bcs.n	800e9a4 <remove_chain+0xae>
			fs->free_clst++;
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	791b      	ldrb	r3, [r3, #4]
 800e99a:	f043 0301 	orr.w	r3, r3, #1
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d3c6      	bcc.n	800e940 <remove_chain+0x4a>
 800e9b2:	e000      	b.n	800e9b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e9b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3720      	adds	r7, #32
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10d      	bne.n	800e9f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <create_chain+0x2c>
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d31b      	bcc.n	800ea24 <create_chain+0x64>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	61bb      	str	r3, [r7, #24]
 800e9f0:	e018      	b.n	800ea24 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff fdf2 	bl	800e5de <get_fat>
 800e9fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d801      	bhi.n	800ea06 <create_chain+0x46>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e070      	b.n	800eae8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea0c:	d101      	bne.n	800ea12 <create_chain+0x52>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	e06a      	b.n	800eae8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d201      	bcs.n	800ea20 <create_chain+0x60>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	e063      	b.n	800eae8 <create_chain+0x128>
		scl = clst;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	69fa      	ldr	r2, [r7, #28]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d307      	bcc.n	800ea48 <create_chain+0x88>
				ncl = 2;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d901      	bls.n	800ea48 <create_chain+0x88>
 800ea44:	2300      	movs	r3, #0
 800ea46:	e04f      	b.n	800eae8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7ff fdc7 	bl	800e5de <get_fat>
 800ea50:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00e      	beq.n	800ea76 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d003      	beq.n	800ea66 <create_chain+0xa6>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea64:	d101      	bne.n	800ea6a <create_chain+0xaa>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	e03e      	b.n	800eae8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea6a:	69fa      	ldr	r2, [r7, #28]
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d1da      	bne.n	800ea28 <create_chain+0x68>
 800ea72:	2300      	movs	r3, #0
 800ea74:	e038      	b.n	800eae8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea76:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea7c:	69f9      	ldr	r1, [r7, #28]
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f7ff fe52 	bl	800e728 <put_fat>
 800ea84:	4603      	mov	r3, r0
 800ea86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ea88:	7dfb      	ldrb	r3, [r7, #23]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d109      	bne.n	800eaa2 <create_chain+0xe2>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d006      	beq.n	800eaa2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6938      	ldr	r0, [r7, #16]
 800ea9a:	f7ff fe45 	bl	800e728 <put_fat>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d116      	bne.n	800ead6 <create_chain+0x116>
		fs->last_clst = ncl;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	69fa      	ldr	r2, [r7, #28]
 800eaac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	695a      	ldr	r2, [r3, #20]
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	3b02      	subs	r3, #2
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d804      	bhi.n	800eac6 <create_chain+0x106>
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	1e5a      	subs	r2, r3, #1
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	791b      	ldrb	r3, [r3, #4]
 800eaca:	f043 0301 	orr.w	r3, r3, #1
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	711a      	strb	r2, [r3, #4]
 800ead4:	e007      	b.n	800eae6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d102      	bne.n	800eae2 <create_chain+0x122>
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eae0:	e000      	b.n	800eae4 <create_chain+0x124>
 800eae2:	2301      	movs	r3, #1
 800eae4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eae6:	69fb      	ldr	r3, [r7, #28]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb04:	3304      	adds	r3, #4
 800eb06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	0a5b      	lsrs	r3, r3, #9
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	8952      	ldrh	r2, [r2, #10]
 800eb10:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	1d1a      	adds	r2, r3, #4
 800eb1a:	613a      	str	r2, [r7, #16]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <clmt_clust+0x3a>
 800eb26:	2300      	movs	r3, #0
 800eb28:	e010      	b.n	800eb4c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d307      	bcc.n	800eb42 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb40:	e7e9      	b.n	800eb16 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eb42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	4413      	add	r3, r2
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	371c      	adds	r7, #28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb6e:	d204      	bcs.n	800eb7a <dir_sdi+0x22>
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	f003 031f 	and.w	r3, r3, #31
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	e063      	b.n	800ec46 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d106      	bne.n	800eb9e <dir_sdi+0x46>
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d902      	bls.n	800eb9e <dir_sdi+0x46>
		clst = fs->dirbase;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10c      	bne.n	800ebbe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	095b      	lsrs	r3, r3, #5
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	8912      	ldrh	r2, [r2, #8]
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d301      	bcc.n	800ebb4 <dir_sdi+0x5c>
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	e048      	b.n	800ec46 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	61da      	str	r2, [r3, #28]
 800ebbc:	e029      	b.n	800ec12 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	895b      	ldrh	r3, [r3, #10]
 800ebc2:	025b      	lsls	r3, r3, #9
 800ebc4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebc6:	e019      	b.n	800ebfc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6979      	ldr	r1, [r7, #20]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff fd06 	bl	800e5de <get_fat>
 800ebd2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebda:	d101      	bne.n	800ebe0 <dir_sdi+0x88>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e032      	b.n	800ec46 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d904      	bls.n	800ebf0 <dir_sdi+0x98>
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d301      	bcc.n	800ebf4 <dir_sdi+0x9c>
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	e028      	b.n	800ec46 <dir_sdi+0xee>
			ofs -= csz;
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebfc:	683a      	ldr	r2, [r7, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d2e1      	bcs.n	800ebc8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ec04:	6979      	ldr	r1, [r7, #20]
 800ec06:	6938      	ldr	r0, [r7, #16]
 800ec08:	f7ff fcca 	bl	800e5a0 <clust2sect>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <dir_sdi+0xcc>
 800ec20:	2302      	movs	r3, #2
 800ec22:	e010      	b.n	800ec46 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	69da      	ldr	r2, [r3, #28]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	0a5b      	lsrs	r3, r3, #9
 800ec2c:	441a      	add	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3e:	441a      	add	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3718      	adds	r7, #24
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b086      	sub	sp, #24
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	3320      	adds	r3, #32
 800ec64:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	69db      	ldr	r3, [r3, #28]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d003      	beq.n	800ec76 <dir_next+0x28>
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec74:	d301      	bcc.n	800ec7a <dir_next+0x2c>
 800ec76:	2304      	movs	r3, #4
 800ec78:	e0aa      	b.n	800edd0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f040 8098 	bne.w	800edb6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10b      	bne.n	800ecb0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	095b      	lsrs	r3, r3, #5
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	8912      	ldrh	r2, [r2, #8]
 800eca0:	4293      	cmp	r3, r2
 800eca2:	f0c0 8088 	bcc.w	800edb6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	61da      	str	r2, [r3, #28]
 800ecac:	2304      	movs	r3, #4
 800ecae:	e08f      	b.n	800edd0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	0a5b      	lsrs	r3, r3, #9
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	8952      	ldrh	r2, [r2, #10]
 800ecb8:	3a01      	subs	r2, #1
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d17a      	bne.n	800edb6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4610      	mov	r0, r2
 800ecca:	f7ff fc88 	bl	800e5de <get_fat>
 800ecce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d801      	bhi.n	800ecda <dir_next+0x8c>
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	e07a      	b.n	800edd0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ece0:	d101      	bne.n	800ece6 <dir_next+0x98>
 800ece2:	2301      	movs	r3, #1
 800ece4:	e074      	b.n	800edd0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d358      	bcc.n	800eda2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d104      	bne.n	800ed00 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	61da      	str	r2, [r3, #28]
 800ecfc:	2304      	movs	r3, #4
 800ecfe:	e067      	b.n	800edd0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7ff fe59 	bl	800e9c0 <create_chain>
 800ed0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <dir_next+0xcc>
 800ed16:	2307      	movs	r3, #7
 800ed18:	e05a      	b.n	800edd0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d101      	bne.n	800ed24 <dir_next+0xd6>
 800ed20:	2302      	movs	r3, #2
 800ed22:	e055      	b.n	800edd0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed2a:	d101      	bne.n	800ed30 <dir_next+0xe2>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e04f      	b.n	800edd0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff fb55 	bl	800e3e0 <sync_window>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <dir_next+0xf2>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e047      	b.n	800edd0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3334      	adds	r3, #52	; 0x34
 800ed44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed48:	2100      	movs	r1, #0
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff f97f 	bl	800e04e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed50:	2300      	movs	r3, #0
 800ed52:	613b      	str	r3, [r7, #16]
 800ed54:	6979      	ldr	r1, [r7, #20]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f7ff fc22 	bl	800e5a0 <clust2sect>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	631a      	str	r2, [r3, #48]	; 0x30
 800ed62:	e012      	b.n	800ed8a <dir_next+0x13c>
						fs->wflag = 1;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2201      	movs	r2, #1
 800ed68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff fb38 	bl	800e3e0 <sync_window>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <dir_next+0x12c>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e02a      	b.n	800edd0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	631a      	str	r2, [r3, #48]	; 0x30
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	895b      	ldrh	r3, [r3, #10]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d3e6      	bcc.n	800ed64 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	1ad2      	subs	r2, r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eda8:	6979      	ldr	r1, [r7, #20]
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7ff fbf8 	bl	800e5a0 <clust2sect>
 800edb0:	4602      	mov	r2, r0
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	68ba      	ldr	r2, [r7, #8]
 800edba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edc8:	441a      	add	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ede8:	2100      	movs	r1, #0
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff feb4 	bl	800eb58 <dir_sdi>
 800edf0:	4603      	mov	r3, r0
 800edf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d12b      	bne.n	800ee52 <dir_alloc+0x7a>
		n = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	69db      	ldr	r3, [r3, #28]
 800ee02:	4619      	mov	r1, r3
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7ff fb2f 	bl	800e468 <move_window>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d11d      	bne.n	800ee50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a1b      	ldr	r3, [r3, #32]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	2be5      	cmp	r3, #229	; 0xe5
 800ee1c:	d004      	beq.n	800ee28 <dir_alloc+0x50>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d107      	bne.n	800ee38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	613b      	str	r3, [r7, #16]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d102      	bne.n	800ee3c <dir_alloc+0x64>
 800ee36:	e00c      	b.n	800ee52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee38:	2300      	movs	r3, #0
 800ee3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff ff05 	bl	800ec4e <dir_next>
 800ee44:	4603      	mov	r3, r0
 800ee46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d0d7      	beq.n	800edfe <dir_alloc+0x26>
 800ee4e:	e000      	b.n	800ee52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ee50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
 800ee54:	2b04      	cmp	r3, #4
 800ee56:	d101      	bne.n	800ee5c <dir_alloc+0x84>
 800ee58:	2307      	movs	r3, #7
 800ee5a:	75fb      	strb	r3, [r7, #23]
	return res;
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3718      	adds	r7, #24
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b084      	sub	sp, #16
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	331a      	adds	r3, #26
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff f847 	bl	800df08 <ld_word>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b03      	cmp	r3, #3
 800ee84:	d109      	bne.n	800ee9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	3314      	adds	r3, #20
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff f83c 	bl	800df08 <ld_word>
 800ee90:	4603      	mov	r3, r0
 800ee92:	041b      	lsls	r3, r3, #16
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	4313      	orrs	r3, r2
 800ee98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	331a      	adds	r3, #26
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	b292      	uxth	r2, r2
 800eeb8:	4611      	mov	r1, r2
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff f85f 	bl	800df7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	2b03      	cmp	r3, #3
 800eec6:	d109      	bne.n	800eedc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f103 0214 	add.w	r2, r3, #20
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	0c1b      	lsrs	r3, r3, #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4619      	mov	r1, r3
 800eed6:	4610      	mov	r0, r2
 800eed8:	f7ff f851 	bl	800df7e <st_word>
	}
}
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	331a      	adds	r3, #26
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff f808 	bl	800df08 <ld_word>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <cmp_lfn+0x1e>
 800eefe:	2300      	movs	r3, #0
 800ef00:	e059      	b.n	800efb6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef0a:	1e5a      	subs	r2, r3, #1
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	4413      	add	r3, r2
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef18:	2301      	movs	r3, #1
 800ef1a:	81fb      	strh	r3, [r7, #14]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	613b      	str	r3, [r7, #16]
 800ef20:	e033      	b.n	800ef8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef22:	4a27      	ldr	r2, [pc, #156]	; (800efc0 <cmp_lfn+0xdc>)
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	4413      	add	r3, r2
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	4413      	add	r3, r2
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe ffe9 	bl	800df08 <ld_word>
 800ef36:	4603      	mov	r3, r0
 800ef38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ef3a:	89fb      	ldrh	r3, [r7, #14]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d01a      	beq.n	800ef76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	2bfe      	cmp	r3, #254	; 0xfe
 800ef44:	d812      	bhi.n	800ef6c <cmp_lfn+0x88>
 800ef46:	89bb      	ldrh	r3, [r7, #12]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 fe4f 	bl	8010bec <ff_wtoupper>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	461c      	mov	r4, r3
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	617a      	str	r2, [r7, #20]
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f001 fe43 	bl	8010bec <ff_wtoupper>
 800ef66:	4603      	mov	r3, r0
 800ef68:	429c      	cmp	r4, r3
 800ef6a:	d001      	beq.n	800ef70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	e022      	b.n	800efb6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ef70:	89bb      	ldrh	r3, [r7, #12]
 800ef72:	81fb      	strh	r3, [r7, #14]
 800ef74:	e006      	b.n	800ef84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef76:	89bb      	ldrh	r3, [r7, #12]
 800ef78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d001      	beq.n	800ef84 <cmp_lfn+0xa0>
 800ef80:	2300      	movs	r3, #0
 800ef82:	e018      	b.n	800efb6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	3301      	adds	r3, #1
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	2b0c      	cmp	r3, #12
 800ef8e:	d9c8      	bls.n	800ef22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00b      	beq.n	800efb4 <cmp_lfn+0xd0>
 800ef9c:	89fb      	ldrh	r3, [r7, #14]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d008      	beq.n	800efb4 <cmp_lfn+0xd0>
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	005b      	lsls	r3, r3, #1
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	4413      	add	r3, r2
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <cmp_lfn+0xd0>
 800efb0:	2300      	movs	r3, #0
 800efb2:	e000      	b.n	800efb6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800efb4:	2301      	movs	r3, #1
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	371c      	adds	r7, #28
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd90      	pop	{r4, r7, pc}
 800efbe:	bf00      	nop
 800efc0:	080142b8 	.word	0x080142b8

0800efc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	4611      	mov	r1, r2
 800efd0:	461a      	mov	r2, r3
 800efd2:	460b      	mov	r3, r1
 800efd4:	71fb      	strb	r3, [r7, #7]
 800efd6:	4613      	mov	r3, r2
 800efd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	330d      	adds	r3, #13
 800efde:	79ba      	ldrb	r2, [r7, #6]
 800efe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	330b      	adds	r3, #11
 800efe6:	220f      	movs	r2, #15
 800efe8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	330c      	adds	r3, #12
 800efee:	2200      	movs	r2, #0
 800eff0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	331a      	adds	r3, #26
 800eff6:	2100      	movs	r1, #0
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe ffc0 	bl	800df7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800effe:	79fb      	ldrb	r3, [r7, #7]
 800f000:	1e5a      	subs	r2, r3, #1
 800f002:	4613      	mov	r3, r2
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	4413      	add	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	4413      	add	r3, r2
 800f00c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	82fb      	strh	r3, [r7, #22]
 800f012:	2300      	movs	r3, #0
 800f014:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f016:	8afb      	ldrh	r3, [r7, #22]
 800f018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d007      	beq.n	800f030 <put_lfn+0x6c>
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	1c5a      	adds	r2, r3, #1
 800f024:	61fa      	str	r2, [r7, #28]
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f030:	4a17      	ldr	r2, [pc, #92]	; (800f090 <put_lfn+0xcc>)
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	4413      	add	r3, r2
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	461a      	mov	r2, r3
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	4413      	add	r3, r2
 800f03e:	8afa      	ldrh	r2, [r7, #22]
 800f040:	4611      	mov	r1, r2
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe ff9b 	bl	800df7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f048:	8afb      	ldrh	r3, [r7, #22]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d102      	bne.n	800f054 <put_lfn+0x90>
 800f04e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f052:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	3301      	adds	r3, #1
 800f058:	61bb      	str	r3, [r7, #24]
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	2b0c      	cmp	r3, #12
 800f05e:	d9da      	bls.n	800f016 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f060:	8afb      	ldrh	r3, [r7, #22]
 800f062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f066:	4293      	cmp	r3, r2
 800f068:	d006      	beq.n	800f078 <put_lfn+0xb4>
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	4413      	add	r3, r2
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d103      	bne.n	800f080 <put_lfn+0xbc>
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f07e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	79fa      	ldrb	r2, [r7, #7]
 800f084:	701a      	strb	r2, [r3, #0]
}
 800f086:	bf00      	nop
 800f088:	3720      	adds	r7, #32
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	080142b8 	.word	0x080142b8

0800f094 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b08c      	sub	sp, #48	; 0x30
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
 800f0a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f0a2:	220b      	movs	r2, #11
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f7fe ffb0 	bl	800e00c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b05      	cmp	r3, #5
 800f0b0:	d92b      	bls.n	800f10a <gen_numname+0x76>
		sr = seq;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f0b6:	e022      	b.n	800f0fe <gen_numname+0x6a>
			wc = *lfn++;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	1c9a      	adds	r2, r3, #2
 800f0bc:	607a      	str	r2, [r7, #4]
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0c6:	e017      	b.n	800f0f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	005a      	lsls	r2, r3, #1
 800f0cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	4413      	add	r3, r2
 800f0d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f0d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0d8:	085b      	lsrs	r3, r3, #1
 800f0da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d005      	beq.n	800f0f2 <gen_numname+0x5e>
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f0ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f0f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	2b0f      	cmp	r3, #15
 800f0fc:	d9e4      	bls.n	800f0c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1d8      	bne.n	800f0b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f10a:	2307      	movs	r3, #7
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	b2db      	uxtb	r3, r3
 800f112:	f003 030f 	and.w	r3, r3, #15
 800f116:	b2db      	uxtb	r3, r3
 800f118:	3330      	adds	r3, #48	; 0x30
 800f11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f11e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f122:	2b39      	cmp	r3, #57	; 0x39
 800f124:	d904      	bls.n	800f130 <gen_numname+0x9c>
 800f126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f12a:	3307      	adds	r3, #7
 800f12c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	1e5a      	subs	r2, r3, #1
 800f134:	62ba      	str	r2, [r7, #40]	; 0x28
 800f136:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f13a:	4413      	add	r3, r2
 800f13c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f140:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	091b      	lsrs	r3, r3, #4
 800f148:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1de      	bne.n	800f10e <gen_numname+0x7a>
	ns[i] = '~';
 800f150:	f107 0214 	add.w	r2, r7, #20
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	4413      	add	r3, r2
 800f158:	227e      	movs	r2, #126	; 0x7e
 800f15a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f15c:	2300      	movs	r3, #0
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
 800f160:	e002      	b.n	800f168 <gen_numname+0xd4>
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	3301      	adds	r3, #1
 800f166:	627b      	str	r3, [r7, #36]	; 0x24
 800f168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d205      	bcs.n	800f17c <gen_numname+0xe8>
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	4413      	add	r3, r2
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b20      	cmp	r3, #32
 800f17a:	d1f2      	bne.n	800f162 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	2b07      	cmp	r3, #7
 800f180:	d808      	bhi.n	800f194 <gen_numname+0x100>
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	1c5a      	adds	r2, r3, #1
 800f186:	62ba      	str	r2, [r7, #40]	; 0x28
 800f188:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f18c:	4413      	add	r3, r2
 800f18e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f192:	e000      	b.n	800f196 <gen_numname+0x102>
 800f194:	2120      	movs	r1, #32
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	627a      	str	r2, [r7, #36]	; 0x24
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	4413      	add	r3, r2
 800f1a0:	460a      	mov	r2, r1
 800f1a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	2b07      	cmp	r3, #7
 800f1a8:	d9e8      	bls.n	800f17c <gen_numname+0xe8>
}
 800f1aa:	bf00      	nop
 800f1ac:	3730      	adds	r7, #48	; 0x30
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f1be:	230b      	movs	r3, #11
 800f1c0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	0852      	lsrs	r2, r2, #1
 800f1c8:	01db      	lsls	r3, r3, #7
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	1c59      	adds	r1, r3, #1
 800f1d2:	6079      	str	r1, [r7, #4]
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	60bb      	str	r3, [r7, #8]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1ed      	bne.n	800f1c2 <sum_sfn+0x10>
	return sum;
 800f1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f202:	2100      	movs	r1, #0
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7ff fca7 	bl	800eb58 <dir_sdi>
 800f20a:	4603      	mov	r3, r0
 800f20c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <dir_find+0x24>
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	e0a9      	b.n	800f36c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f218:	23ff      	movs	r3, #255	; 0xff
 800f21a:	753b      	strb	r3, [r7, #20]
 800f21c:	7d3b      	ldrb	r3, [r7, #20]
 800f21e:	757b      	strb	r3, [r7, #21]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f226:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	69db      	ldr	r3, [r3, #28]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6938      	ldr	r0, [r7, #16]
 800f230:	f7ff f91a 	bl	800e468 <move_window>
 800f234:	4603      	mov	r3, r0
 800f236:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f238:	7dfb      	ldrb	r3, [r7, #23]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 8090 	bne.w	800f360 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a1b      	ldr	r3, [r3, #32]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f248:	7dbb      	ldrb	r3, [r7, #22]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d102      	bne.n	800f254 <dir_find+0x60>
 800f24e:	2304      	movs	r3, #4
 800f250:	75fb      	strb	r3, [r7, #23]
 800f252:	e08a      	b.n	800f36a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	330b      	adds	r3, #11
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f260:	73fb      	strb	r3, [r7, #15]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	7bfa      	ldrb	r2, [r7, #15]
 800f266:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f268:	7dbb      	ldrb	r3, [r7, #22]
 800f26a:	2be5      	cmp	r3, #229	; 0xe5
 800f26c:	d007      	beq.n	800f27e <dir_find+0x8a>
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	f003 0308 	and.w	r3, r3, #8
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <dir_find+0x98>
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	2b0f      	cmp	r3, #15
 800f27c:	d006      	beq.n	800f28c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f27e:	23ff      	movs	r3, #255	; 0xff
 800f280:	757b      	strb	r3, [r7, #21]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f288:	631a      	str	r2, [r3, #48]	; 0x30
 800f28a:	e05e      	b.n	800f34a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
 800f28e:	2b0f      	cmp	r3, #15
 800f290:	d136      	bne.n	800f300 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d154      	bne.n	800f34a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f2a0:	7dbb      	ldrb	r3, [r7, #22]
 800f2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00d      	beq.n	800f2c6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	7b5b      	ldrb	r3, [r3, #13]
 800f2b0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f2b2:	7dbb      	ldrb	r3, [r7, #22]
 800f2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2b8:	75bb      	strb	r3, [r7, #22]
 800f2ba:	7dbb      	ldrb	r3, [r7, #22]
 800f2bc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	695a      	ldr	r2, [r3, #20]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f2c6:	7dba      	ldrb	r2, [r7, #22]
 800f2c8:	7d7b      	ldrb	r3, [r7, #21]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d115      	bne.n	800f2fa <dir_find+0x106>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a1b      	ldr	r3, [r3, #32]
 800f2d2:	330d      	adds	r3, #13
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	7d3a      	ldrb	r2, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d10e      	bne.n	800f2fa <dir_find+0x106>
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	68da      	ldr	r2, [r3, #12]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a1b      	ldr	r3, [r3, #32]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f7ff fdfc 	bl	800eee4 <cmp_lfn>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d003      	beq.n	800f2fa <dir_find+0x106>
 800f2f2:	7d7b      	ldrb	r3, [r7, #21]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	e000      	b.n	800f2fc <dir_find+0x108>
 800f2fa:	23ff      	movs	r3, #255	; 0xff
 800f2fc:	757b      	strb	r3, [r7, #21]
 800f2fe:	e024      	b.n	800f34a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f300:	7d7b      	ldrb	r3, [r7, #21]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d109      	bne.n	800f31a <dir_find+0x126>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff ff51 	bl	800f1b2 <sum_sfn>
 800f310:	4603      	mov	r3, r0
 800f312:	461a      	mov	r2, r3
 800f314:	7d3b      	ldrb	r3, [r7, #20]
 800f316:	4293      	cmp	r3, r2
 800f318:	d024      	beq.n	800f364 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10a      	bne.n	800f33e <dir_find+0x14a>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a18      	ldr	r0, [r3, #32]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3324      	adds	r3, #36	; 0x24
 800f330:	220b      	movs	r2, #11
 800f332:	4619      	mov	r1, r3
 800f334:	f7fe fea5 	bl	800e082 <mem_cmp>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d014      	beq.n	800f368 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f33e:	23ff      	movs	r3, #255	; 0xff
 800f340:	757b      	strb	r3, [r7, #21]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f348:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f34a:	2100      	movs	r1, #0
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7ff fc7e 	bl	800ec4e <dir_next>
 800f352:	4603      	mov	r3, r0
 800f354:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f356:	7dfb      	ldrb	r3, [r7, #23]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f43f af65 	beq.w	800f228 <dir_find+0x34>
 800f35e:	e004      	b.n	800f36a <dir_find+0x176>
		if (res != FR_OK) break;
 800f360:	bf00      	nop
 800f362:	e002      	b.n	800f36a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f364:	bf00      	nop
 800f366:	e000      	b.n	800f36a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f368:	bf00      	nop

	return res;
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08c      	sub	sp, #48	; 0x30
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f388:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <dir_register+0x20>
 800f390:	2306      	movs	r3, #6
 800f392:	e0e0      	b.n	800f556 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f394:	2300      	movs	r3, #0
 800f396:	627b      	str	r3, [r7, #36]	; 0x24
 800f398:	e002      	b.n	800f3a0 <dir_register+0x2c>
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	3301      	adds	r3, #1
 800f39e:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	68da      	ldr	r2, [r3, #12]
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	881b      	ldrh	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1f4      	bne.n	800f39a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f3b6:	f107 030c 	add.w	r3, r7, #12
 800f3ba:	220c      	movs	r2, #12
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fe fe25 	bl	800e00c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
 800f3c4:	f003 0301 	and.w	r3, r3, #1
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d032      	beq.n	800f432 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2240      	movs	r2, #64	; 0x40
 800f3d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3d8:	e016      	b.n	800f408 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	68da      	ldr	r2, [r3, #12]
 800f3e4:	f107 010c 	add.w	r1, r7, #12
 800f3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ea:	f7ff fe53 	bl	800f094 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff ff00 	bl	800f1f4 <dir_find>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f3fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d106      	bne.n	800f410 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f404:	3301      	adds	r3, #1
 800f406:	62bb      	str	r3, [r7, #40]	; 0x28
 800f408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40a:	2b63      	cmp	r3, #99	; 0x63
 800f40c:	d9e5      	bls.n	800f3da <dir_register+0x66>
 800f40e:	e000      	b.n	800f412 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f410:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	2b64      	cmp	r3, #100	; 0x64
 800f416:	d101      	bne.n	800f41c <dir_register+0xa8>
 800f418:	2307      	movs	r3, #7
 800f41a:	e09c      	b.n	800f556 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f41c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f420:	2b04      	cmp	r3, #4
 800f422:	d002      	beq.n	800f42a <dir_register+0xb6>
 800f424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f428:	e095      	b.n	800f556 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f42a:	7dfa      	ldrb	r2, [r7, #23]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f432:	7dfb      	ldrb	r3, [r7, #23]
 800f434:	f003 0302 	and.w	r3, r3, #2
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d007      	beq.n	800f44c <dir_register+0xd8>
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	330c      	adds	r3, #12
 800f440:	4a47      	ldr	r2, [pc, #284]	; (800f560 <dir_register+0x1ec>)
 800f442:	fba2 2303 	umull	r2, r3, r2, r3
 800f446:	089b      	lsrs	r3, r3, #2
 800f448:	3301      	adds	r3, #1
 800f44a:	e000      	b.n	800f44e <dir_register+0xda>
 800f44c:	2301      	movs	r3, #1
 800f44e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f450:	6a39      	ldr	r1, [r7, #32]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7ff fcc0 	bl	800edd8 <dir_alloc>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f462:	2b00      	cmp	r3, #0
 800f464:	d148      	bne.n	800f4f8 <dir_register+0x184>
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	3b01      	subs	r3, #1
 800f46a:	623b      	str	r3, [r7, #32]
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d042      	beq.n	800f4f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	695a      	ldr	r2, [r3, #20]
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	015b      	lsls	r3, r3, #5
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	4619      	mov	r1, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fb6a 	bl	800eb58 <dir_sdi>
 800f484:	4603      	mov	r3, r0
 800f486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f48a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d132      	bne.n	800f4f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3324      	adds	r3, #36	; 0x24
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff fe8b 	bl	800f1b2 <sum_sfn>
 800f49c:	4603      	mov	r3, r0
 800f49e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	69db      	ldr	r3, [r3, #28]
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	69f8      	ldr	r0, [r7, #28]
 800f4a8:	f7fe ffde 	bl	800e468 <move_window>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f4b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d11d      	bne.n	800f4f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	68d8      	ldr	r0, [r3, #12]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a19      	ldr	r1, [r3, #32]
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	b2da      	uxtb	r2, r3
 800f4c6:	7efb      	ldrb	r3, [r7, #27]
 800f4c8:	f7ff fd7c 	bl	800efc4 <put_lfn>
				fs->wflag = 1;
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7ff fbba 	bl	800ec4e <dir_next>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d107      	bne.n	800f4f8 <dir_register+0x184>
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	623b      	str	r3, [r7, #32]
 800f4ee:	6a3b      	ldr	r3, [r7, #32]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1d5      	bne.n	800f4a0 <dir_register+0x12c>
 800f4f4:	e000      	b.n	800f4f8 <dir_register+0x184>
				if (res != FR_OK) break;
 800f4f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f4f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d128      	bne.n	800f552 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	69db      	ldr	r3, [r3, #28]
 800f504:	4619      	mov	r1, r3
 800f506:	69f8      	ldr	r0, [r7, #28]
 800f508:	f7fe ffae 	bl	800e468 <move_window>
 800f50c:	4603      	mov	r3, r0
 800f50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f516:	2b00      	cmp	r3, #0
 800f518:	d11b      	bne.n	800f552 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a1b      	ldr	r3, [r3, #32]
 800f51e:	2220      	movs	r2, #32
 800f520:	2100      	movs	r1, #0
 800f522:	4618      	mov	r0, r3
 800f524:	f7fe fd93 	bl	800e04e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a18      	ldr	r0, [r3, #32]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	3324      	adds	r3, #36	; 0x24
 800f530:	220b      	movs	r2, #11
 800f532:	4619      	mov	r1, r3
 800f534:	f7fe fd6a 	bl	800e00c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6a1b      	ldr	r3, [r3, #32]
 800f542:	330c      	adds	r3, #12
 800f544:	f002 0218 	and.w	r2, r2, #24
 800f548:	b2d2      	uxtb	r2, r2
 800f54a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2201      	movs	r2, #1
 800f550:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f556:	4618      	mov	r0, r3
 800f558:	3730      	adds	r7, #48	; 0x30
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	4ec4ec4f 	.word	0x4ec4ec4f

0800f564 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	613b      	str	r3, [r7, #16]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	2300      	movs	r3, #0
 800f57e:	617b      	str	r3, [r7, #20]
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	1c5a      	adds	r2, r3, #1
 800f588:	61ba      	str	r2, [r7, #24]
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	4413      	add	r3, r2
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f594:	2b1f      	cmp	r3, #31
 800f596:	d940      	bls.n	800f61a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f59a:	2b2f      	cmp	r3, #47	; 0x2f
 800f59c:	d006      	beq.n	800f5ac <create_name+0x48>
 800f59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f5a2:	d110      	bne.n	800f5c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5a4:	e002      	b.n	800f5ac <create_name+0x48>
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	693a      	ldr	r2, [r7, #16]
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	2b2f      	cmp	r3, #47	; 0x2f
 800f5b6:	d0f6      	beq.n	800f5a6 <create_name+0x42>
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	4413      	add	r3, r2
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800f5c2:	d0f0      	beq.n	800f5a6 <create_name+0x42>
			break;
 800f5c4:	e02a      	b.n	800f61c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	2bfe      	cmp	r3, #254	; 0xfe
 800f5ca:	d901      	bls.n	800f5d0 <create_name+0x6c>
 800f5cc:	2306      	movs	r3, #6
 800f5ce:	e177      	b.n	800f8c0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f5d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f5d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5d8:	2101      	movs	r1, #1
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f001 faca 	bl	8010b74 <ff_convert>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d101      	bne.n	800f5ee <create_name+0x8a>
 800f5ea:	2306      	movs	r3, #6
 800f5ec:	e168      	b.n	800f8c0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f0:	2b7f      	cmp	r3, #127	; 0x7f
 800f5f2:	d809      	bhi.n	800f608 <create_name+0xa4>
 800f5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	48b3      	ldr	r0, [pc, #716]	; (800f8c8 <create_name+0x364>)
 800f5fa:	f7fe fd69 	bl	800e0d0 <chk_chr>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d001      	beq.n	800f608 <create_name+0xa4>
 800f604:	2306      	movs	r3, #6
 800f606:	e15b      	b.n	800f8c0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	617a      	str	r2, [r7, #20]
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	4413      	add	r3, r2
 800f614:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f616:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f618:	e7b4      	b.n	800f584 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f61a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	441a      	add	r2, r3
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f628:	2b1f      	cmp	r3, #31
 800f62a:	d801      	bhi.n	800f630 <create_name+0xcc>
 800f62c:	2304      	movs	r3, #4
 800f62e:	e000      	b.n	800f632 <create_name+0xce>
 800f630:	2300      	movs	r3, #0
 800f632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f636:	e011      	b.n	800f65c <create_name+0xf8>
		w = lfn[di - 1];
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f63e:	3b01      	subs	r3, #1
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4413      	add	r3, r2
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f64a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f64c:	2b20      	cmp	r3, #32
 800f64e:	d002      	beq.n	800f656 <create_name+0xf2>
 800f650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f652:	2b2e      	cmp	r3, #46	; 0x2e
 800f654:	d106      	bne.n	800f664 <create_name+0x100>
		di--;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	3b01      	subs	r3, #1
 800f65a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1ea      	bne.n	800f638 <create_name+0xd4>
 800f662:	e000      	b.n	800f666 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f664:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	005b      	lsls	r3, r3, #1
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	4413      	add	r3, r2
 800f66e:	2200      	movs	r2, #0
 800f670:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d101      	bne.n	800f67c <create_name+0x118>
 800f678:	2306      	movs	r3, #6
 800f67a:	e121      	b.n	800f8c0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3324      	adds	r3, #36	; 0x24
 800f680:	220b      	movs	r2, #11
 800f682:	2120      	movs	r1, #32
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe fce2 	bl	800e04e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f68a:	2300      	movs	r3, #0
 800f68c:	61bb      	str	r3, [r7, #24]
 800f68e:	e002      	b.n	800f696 <create_name+0x132>
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	3301      	adds	r3, #1
 800f694:	61bb      	str	r3, [r7, #24]
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	68fa      	ldr	r2, [r7, #12]
 800f69c:	4413      	add	r3, r2
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	2b20      	cmp	r3, #32
 800f6a2:	d0f5      	beq.n	800f690 <create_name+0x12c>
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b0:	d0ee      	beq.n	800f690 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d009      	beq.n	800f6cc <create_name+0x168>
 800f6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6bc:	f043 0303 	orr.w	r3, r3, #3
 800f6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f6c4:	e002      	b.n	800f6cc <create_name+0x168>
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	617b      	str	r3, [r7, #20]
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d009      	beq.n	800f6e6 <create_name+0x182>
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	005b      	lsls	r3, r3, #1
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6e4:	d1ef      	bne.n	800f6c6 <create_name+0x162>

	i = b = 0; ni = 8;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	623b      	str	r3, [r7, #32]
 800f6f0:	2308      	movs	r3, #8
 800f6f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	61ba      	str	r2, [r7, #24]
 800f6fa:	005b      	lsls	r3, r3, #1
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	4413      	add	r3, r2
 800f700:	881b      	ldrh	r3, [r3, #0]
 800f702:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f706:	2b00      	cmp	r3, #0
 800f708:	f000 8090 	beq.w	800f82c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f70e:	2b20      	cmp	r3, #32
 800f710:	d006      	beq.n	800f720 <create_name+0x1bc>
 800f712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f714:	2b2e      	cmp	r3, #46	; 0x2e
 800f716:	d10a      	bne.n	800f72e <create_name+0x1ca>
 800f718:	69ba      	ldr	r2, [r7, #24]
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d006      	beq.n	800f72e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f724:	f043 0303 	orr.w	r3, r3, #3
 800f728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f72c:	e07d      	b.n	800f82a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f72e:	6a3a      	ldr	r2, [r7, #32]
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	429a      	cmp	r2, r3
 800f734:	d203      	bcs.n	800f73e <create_name+0x1da>
 800f736:	69ba      	ldr	r2, [r7, #24]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d123      	bne.n	800f786 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	2b0b      	cmp	r3, #11
 800f742:	d106      	bne.n	800f752 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f748:	f043 0303 	orr.w	r3, r3, #3
 800f74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f750:	e06f      	b.n	800f832 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f752:	69ba      	ldr	r2, [r7, #24]
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	429a      	cmp	r2, r3
 800f758:	d005      	beq.n	800f766 <create_name+0x202>
 800f75a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f75e:	f043 0303 	orr.w	r3, r3, #3
 800f762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f766:	69ba      	ldr	r2, [r7, #24]
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d860      	bhi.n	800f830 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	61bb      	str	r3, [r7, #24]
 800f772:	2308      	movs	r3, #8
 800f774:	623b      	str	r3, [r7, #32]
 800f776:	230b      	movs	r3, #11
 800f778:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f77a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f784:	e051      	b.n	800f82a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f788:	2b7f      	cmp	r3, #127	; 0x7f
 800f78a:	d914      	bls.n	800f7b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f78e:	2100      	movs	r1, #0
 800f790:	4618      	mov	r0, r3
 800f792:	f001 f9ef 	bl	8010b74 <ff_convert>
 800f796:	4603      	mov	r3, r0
 800f798:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d004      	beq.n	800f7aa <create_name+0x246>
 800f7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a2:	3b80      	subs	r3, #128	; 0x80
 800f7a4:	4a49      	ldr	r2, [pc, #292]	; (800f8cc <create_name+0x368>)
 800f7a6:	5cd3      	ldrb	r3, [r2, r3]
 800f7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ae:	f043 0302 	orr.w	r3, r3, #2
 800f7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d007      	beq.n	800f7cc <create_name+0x268>
 800f7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4843      	ldr	r0, [pc, #268]	; (800f8d0 <create_name+0x36c>)
 800f7c2:	f7fe fc85 	bl	800e0d0 <chk_chr>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d008      	beq.n	800f7de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f7cc:	235f      	movs	r3, #95	; 0x5f
 800f7ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7d4:	f043 0303 	orr.w	r3, r3, #3
 800f7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7dc:	e01b      	b.n	800f816 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7e0:	2b40      	cmp	r3, #64	; 0x40
 800f7e2:	d909      	bls.n	800f7f8 <create_name+0x294>
 800f7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7e6:	2b5a      	cmp	r3, #90	; 0x5a
 800f7e8:	d806      	bhi.n	800f7f8 <create_name+0x294>
					b |= 2;
 800f7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7ee:	f043 0302 	orr.w	r3, r3, #2
 800f7f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7f6:	e00e      	b.n	800f816 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fa:	2b60      	cmp	r3, #96	; 0x60
 800f7fc:	d90b      	bls.n	800f816 <create_name+0x2b2>
 800f7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f800:	2b7a      	cmp	r3, #122	; 0x7a
 800f802:	d808      	bhi.n	800f816 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f808:	f043 0301 	orr.w	r3, r3, #1
 800f80c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f812:	3b20      	subs	r3, #32
 800f814:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	1c5a      	adds	r2, r3, #1
 800f81a:	623a      	str	r2, [r7, #32]
 800f81c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f81e:	b2d1      	uxtb	r1, r2
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	4413      	add	r3, r2
 800f824:	460a      	mov	r2, r1
 800f826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f82a:	e763      	b.n	800f6f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f82c:	bf00      	nop
 800f82e:	e000      	b.n	800f832 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800f830:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f838:	2be5      	cmp	r3, #229	; 0xe5
 800f83a:	d103      	bne.n	800f844 <create_name+0x2e0>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2205      	movs	r2, #5
 800f840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	2b08      	cmp	r3, #8
 800f848:	d104      	bne.n	800f854 <create_name+0x2f0>
 800f84a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f858:	f003 030c 	and.w	r3, r3, #12
 800f85c:	2b0c      	cmp	r3, #12
 800f85e:	d005      	beq.n	800f86c <create_name+0x308>
 800f860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f864:	f003 0303 	and.w	r3, r3, #3
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d105      	bne.n	800f878 <create_name+0x314>
 800f86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f870:	f043 0302 	orr.w	r3, r3, #2
 800f874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f87c:	f003 0302 	and.w	r3, r3, #2
 800f880:	2b00      	cmp	r3, #0
 800f882:	d117      	bne.n	800f8b4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f888:	f003 0303 	and.w	r3, r3, #3
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d105      	bne.n	800f89c <create_name+0x338>
 800f890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f894:	f043 0310 	orr.w	r3, r3, #16
 800f898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f89c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8a0:	f003 030c 	and.w	r3, r3, #12
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	d105      	bne.n	800f8b4 <create_name+0x350>
 800f8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ac:	f043 0308 	orr.w	r3, r3, #8
 800f8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f8be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3728      	adds	r7, #40	; 0x28
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	08013bac 	.word	0x08013bac
 800f8cc:	08014238 	.word	0x08014238
 800f8d0:	08013bb8 	.word	0x08013bb8

0800f8d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8e8:	e002      	b.n	800f8f0 <follow_path+0x1c>
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	603b      	str	r3, [r7, #0]
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b2f      	cmp	r3, #47	; 0x2f
 800f8f6:	d0f8      	beq.n	800f8ea <follow_path+0x16>
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2b5c      	cmp	r3, #92	; 0x5c
 800f8fe:	d0f4      	beq.n	800f8ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	2200      	movs	r2, #0
 800f904:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b1f      	cmp	r3, #31
 800f90c:	d80a      	bhi.n	800f924 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2280      	movs	r2, #128	; 0x80
 800f912:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f916:	2100      	movs	r1, #0
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff f91d 	bl	800eb58 <dir_sdi>
 800f91e:	4603      	mov	r3, r0
 800f920:	75fb      	strb	r3, [r7, #23]
 800f922:	e043      	b.n	800f9ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f924:	463b      	mov	r3, r7
 800f926:	4619      	mov	r1, r3
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff fe1b 	bl	800f564 <create_name>
 800f92e:	4603      	mov	r3, r0
 800f930:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f932:	7dfb      	ldrb	r3, [r7, #23]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d134      	bne.n	800f9a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f7ff fc5b 	bl	800f1f4 <dir_find>
 800f93e:	4603      	mov	r3, r0
 800f940:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f948:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00a      	beq.n	800f966 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f950:	7dfb      	ldrb	r3, [r7, #23]
 800f952:	2b04      	cmp	r3, #4
 800f954:	d127      	bne.n	800f9a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f956:	7afb      	ldrb	r3, [r7, #11]
 800f958:	f003 0304 	and.w	r3, r3, #4
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d122      	bne.n	800f9a6 <follow_path+0xd2>
 800f960:	2305      	movs	r3, #5
 800f962:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f964:	e01f      	b.n	800f9a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f966:	7afb      	ldrb	r3, [r7, #11]
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d11c      	bne.n	800f9aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	799b      	ldrb	r3, [r3, #6]
 800f974:	f003 0310 	and.w	r3, r3, #16
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d102      	bne.n	800f982 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f97c:	2305      	movs	r3, #5
 800f97e:	75fb      	strb	r3, [r7, #23]
 800f980:	e014      	b.n	800f9ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	695b      	ldr	r3, [r3, #20]
 800f98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f990:	4413      	add	r3, r2
 800f992:	4619      	mov	r1, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7ff fa66 	bl	800ee66 <ld_clust>
 800f99a:	4602      	mov	r2, r0
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9a0:	e7c0      	b.n	800f924 <follow_path+0x50>
			if (res != FR_OK) break;
 800f9a2:	bf00      	nop
 800f9a4:	e002      	b.n	800f9ac <follow_path+0xd8>
				break;
 800f9a6:	bf00      	nop
 800f9a8:	e000      	b.n	800f9ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9aa:	bf00      	nop
			}
		}
	}

	return res;
 800f9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b087      	sub	sp, #28
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d031      	beq.n	800fa30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	617b      	str	r3, [r7, #20]
 800f9d2:	e002      	b.n	800f9da <get_ldnumber+0x24>
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	617b      	str	r3, [r7, #20]
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b1f      	cmp	r3, #31
 800f9e0:	d903      	bls.n	800f9ea <get_ldnumber+0x34>
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b3a      	cmp	r3, #58	; 0x3a
 800f9e8:	d1f4      	bne.n	800f9d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	2b3a      	cmp	r3, #58	; 0x3a
 800f9f0:	d11c      	bne.n	800fa2c <get_ldnumber+0x76>
			tp = *path;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	60fa      	str	r2, [r7, #12]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	3b30      	subs	r3, #48	; 0x30
 800fa02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2b09      	cmp	r3, #9
 800fa08:	d80e      	bhi.n	800fa28 <get_ldnumber+0x72>
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d10a      	bne.n	800fa28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d107      	bne.n	800fa28 <get_ldnumber+0x72>
					vol = (int)i;
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	617b      	str	r3, [r7, #20]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	e002      	b.n	800fa32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa30:	693b      	ldr	r3, [r7, #16]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	371c      	adds	r7, #28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
	...

0800fa40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	70da      	strb	r2, [r3, #3]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7fe fd04 	bl	800e468 <move_window>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <check_fs+0x2a>
 800fa66:	2304      	movs	r3, #4
 800fa68:	e038      	b.n	800fadc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3334      	adds	r3, #52	; 0x34
 800fa6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fe fa48 	bl	800df08 <ld_word>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d001      	beq.n	800fa88 <check_fs+0x48>
 800fa84:	2303      	movs	r3, #3
 800fa86:	e029      	b.n	800fadc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa8e:	2be9      	cmp	r3, #233	; 0xe9
 800fa90:	d009      	beq.n	800faa6 <check_fs+0x66>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa98:	2beb      	cmp	r3, #235	; 0xeb
 800fa9a:	d11e      	bne.n	800fada <check_fs+0x9a>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800faa2:	2b90      	cmp	r3, #144	; 0x90
 800faa4:	d119      	bne.n	800fada <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3334      	adds	r3, #52	; 0x34
 800faaa:	3336      	adds	r3, #54	; 0x36
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fa43 	bl	800df38 <ld_dword>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fab8:	4a0a      	ldr	r2, [pc, #40]	; (800fae4 <check_fs+0xa4>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d101      	bne.n	800fac2 <check_fs+0x82>
 800fabe:	2300      	movs	r3, #0
 800fac0:	e00c      	b.n	800fadc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	3334      	adds	r3, #52	; 0x34
 800fac6:	3352      	adds	r3, #82	; 0x52
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fe fa35 	bl	800df38 <ld_dword>
 800face:	4602      	mov	r2, r0
 800fad0:	4b05      	ldr	r3, [pc, #20]	; (800fae8 <check_fs+0xa8>)
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d101      	bne.n	800fada <check_fs+0x9a>
 800fad6:	2300      	movs	r3, #0
 800fad8:	e000      	b.n	800fadc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fada:	2302      	movs	r3, #2
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	00544146 	.word	0x00544146
 800fae8:	33544146 	.word	0x33544146

0800faec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b096      	sub	sp, #88	; 0x58
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	4613      	mov	r3, r2
 800faf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	2200      	movs	r2, #0
 800fafe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7ff ff58 	bl	800f9b6 <get_ldnumber>
 800fb06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	da01      	bge.n	800fb12 <find_volume+0x26>
 800fb0e:	230b      	movs	r3, #11
 800fb10:	e231      	b.n	800ff76 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb12:	4aa8      	ldr	r2, [pc, #672]	; (800fdb4 <find_volume+0x2c8>)
 800fb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <find_volume+0x3a>
 800fb22:	230c      	movs	r3, #12
 800fb24:	e227      	b.n	800ff76 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb2c:	79fb      	ldrb	r3, [r7, #7]
 800fb2e:	f023 0301 	bic.w	r3, r3, #1
 800fb32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d01a      	beq.n	800fb72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3e:	785b      	ldrb	r3, [r3, #1]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe f943 	bl	800ddcc <disk_status>
 800fb46:	4603      	mov	r3, r0
 800fb48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10c      	bne.n	800fb72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d007      	beq.n	800fb6e <find_volume+0x82>
 800fb5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb62:	f003 0304 	and.w	r3, r3, #4
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb6a:	230a      	movs	r3, #10
 800fb6c:	e203      	b.n	800ff76 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800fb6e:	2300      	movs	r3, #0
 800fb70:	e201      	b.n	800ff76 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb74:	2200      	movs	r2, #0
 800fb76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	785b      	ldrb	r3, [r3, #1]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fe f93b 	bl	800de00 <disk_initialize>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb94:	f003 0301 	and.w	r3, r3, #1
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	e1ea      	b.n	800ff76 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fba0:	79fb      	ldrb	r3, [r7, #7]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d007      	beq.n	800fbb6 <find_volume+0xca>
 800fba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbb2:	230a      	movs	r3, #10
 800fbb4:	e1df      	b.n	800ff76 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbbe:	f7ff ff3f 	bl	800fa40 <check_fs>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d14b      	bne.n	800fc68 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	643b      	str	r3, [r7, #64]	; 0x40
 800fbd4:	e01f      	b.n	800fc16 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbde:	011b      	lsls	r3, r3, #4
 800fbe0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbe4:	4413      	add	r3, r2
 800fbe6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	3304      	adds	r3, #4
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d006      	beq.n	800fc00 <find_volume+0x114>
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe f99e 	bl	800df38 <ld_dword>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	e000      	b.n	800fc02 <find_volume+0x116>
 800fc00:	2200      	movs	r2, #0
 800fc02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fc0a:	440b      	add	r3, r1
 800fc0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc12:	3301      	adds	r3, #1
 800fc14:	643b      	str	r3, [r7, #64]	; 0x40
 800fc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc18:	2b03      	cmp	r3, #3
 800fc1a:	d9dc      	bls.n	800fbd6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d002      	beq.n	800fc2c <find_volume+0x140>
 800fc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc28:	3b01      	subs	r3, #1
 800fc2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc34:	4413      	add	r3, r2
 800fc36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d005      	beq.n	800fc4e <find_volume+0x162>
 800fc42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc46:	f7ff fefb 	bl	800fa40 <check_fs>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	e000      	b.n	800fc50 <find_volume+0x164>
 800fc4e:	2303      	movs	r3, #3
 800fc50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d905      	bls.n	800fc68 <find_volume+0x17c>
 800fc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5e:	3301      	adds	r3, #1
 800fc60:	643b      	str	r3, [r7, #64]	; 0x40
 800fc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc64:	2b03      	cmp	r3, #3
 800fc66:	d9e1      	bls.n	800fc2c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc6c:	2b04      	cmp	r3, #4
 800fc6e:	d101      	bne.n	800fc74 <find_volume+0x188>
 800fc70:	2301      	movs	r3, #1
 800fc72:	e180      	b.n	800ff76 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d901      	bls.n	800fc80 <find_volume+0x194>
 800fc7c:	230d      	movs	r3, #13
 800fc7e:	e17a      	b.n	800ff76 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc82:	3334      	adds	r3, #52	; 0x34
 800fc84:	330b      	adds	r3, #11
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe f93e 	bl	800df08 <ld_word>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc92:	d001      	beq.n	800fc98 <find_volume+0x1ac>
 800fc94:	230d      	movs	r3, #13
 800fc96:	e16e      	b.n	800ff76 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	3334      	adds	r3, #52	; 0x34
 800fc9c:	3316      	adds	r3, #22
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe f932 	bl	800df08 <ld_word>
 800fca4:	4603      	mov	r3, r0
 800fca6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <find_volume+0x1d0>
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	3334      	adds	r3, #52	; 0x34
 800fcb2:	3324      	adds	r3, #36	; 0x24
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fe f93f 	bl	800df38 <ld_dword>
 800fcba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcc0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	789b      	ldrb	r3, [r3, #2]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d005      	beq.n	800fce0 <find_volume+0x1f4>
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	789b      	ldrb	r3, [r3, #2]
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d001      	beq.n	800fce0 <find_volume+0x1f4>
 800fcdc:	230d      	movs	r3, #13
 800fcde:	e14a      	b.n	800ff76 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	789b      	ldrb	r3, [r3, #2]
 800fce4:	461a      	mov	r2, r3
 800fce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce8:	fb02 f303 	mul.w	r3, r2, r3
 800fcec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	895b      	ldrh	r3, [r3, #10]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d008      	beq.n	800fd14 <find_volume+0x228>
 800fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd04:	895b      	ldrh	r3, [r3, #10]
 800fd06:	461a      	mov	r2, r3
 800fd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0a:	895b      	ldrh	r3, [r3, #10]
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	4013      	ands	r3, r2
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <find_volume+0x22c>
 800fd14:	230d      	movs	r3, #13
 800fd16:	e12e      	b.n	800ff76 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	3334      	adds	r3, #52	; 0x34
 800fd1c:	3311      	adds	r3, #17
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe f8f2 	bl	800df08 <ld_word>
 800fd24:	4603      	mov	r3, r0
 800fd26:	461a      	mov	r2, r3
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	891b      	ldrh	r3, [r3, #8]
 800fd30:	f003 030f 	and.w	r3, r3, #15
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <find_volume+0x252>
 800fd3a:	230d      	movs	r3, #13
 800fd3c:	e11b      	b.n	800ff76 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd40:	3334      	adds	r3, #52	; 0x34
 800fd42:	3313      	adds	r3, #19
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fe f8df 	bl	800df08 <ld_word>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <find_volume+0x276>
 800fd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd56:	3334      	adds	r3, #52	; 0x34
 800fd58:	3320      	adds	r3, #32
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fe f8ec 	bl	800df38 <ld_dword>
 800fd60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	3334      	adds	r3, #52	; 0x34
 800fd66:	330e      	adds	r3, #14
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe f8cd 	bl	800df08 <ld_word>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <find_volume+0x290>
 800fd78:	230d      	movs	r3, #13
 800fd7a:	e0fc      	b.n	800ff76 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd80:	4413      	add	r3, r2
 800fd82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd84:	8912      	ldrh	r2, [r2, #8]
 800fd86:	0912      	lsrs	r2, r2, #4
 800fd88:	b292      	uxth	r2, r2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fd8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d201      	bcs.n	800fd9a <find_volume+0x2ae>
 800fd96:	230d      	movs	r3, #13
 800fd98:	e0ed      	b.n	800ff76 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fda2:	8952      	ldrh	r2, [r2, #10]
 800fda4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d103      	bne.n	800fdb8 <find_volume+0x2cc>
 800fdb0:	230d      	movs	r3, #13
 800fdb2:	e0e0      	b.n	800ff76 <find_volume+0x48a>
 800fdb4:	200002a4 	.word	0x200002a4
		fmt = FS_FAT32;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d802      	bhi.n	800fdce <find_volume+0x2e2>
 800fdc8:	2302      	movs	r3, #2
 800fdca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d802      	bhi.n	800fdde <find_volume+0x2f2>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde0:	1c9a      	adds	r2, r3, #2
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdea:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fdec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf0:	441a      	add	r2, r3
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fdf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfa:	441a      	add	r2, r3
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fe00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe04:	2b03      	cmp	r3, #3
 800fe06:	d11e      	bne.n	800fe46 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	3334      	adds	r3, #52	; 0x34
 800fe0c:	332a      	adds	r3, #42	; 0x2a
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe f87a 	bl	800df08 <ld_word>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <find_volume+0x332>
 800fe1a:	230d      	movs	r3, #13
 800fe1c:	e0ab      	b.n	800ff76 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe20:	891b      	ldrh	r3, [r3, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <find_volume+0x33e>
 800fe26:	230d      	movs	r3, #13
 800fe28:	e0a5      	b.n	800ff76 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	3334      	adds	r3, #52	; 0x34
 800fe2e:	332c      	adds	r3, #44	; 0x2c
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe f881 	bl	800df38 <ld_dword>
 800fe36:	4602      	mov	r2, r0
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	647b      	str	r3, [r7, #68]	; 0x44
 800fe44:	e01f      	b.n	800fe86 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	891b      	ldrh	r3, [r3, #8]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d101      	bne.n	800fe52 <find_volume+0x366>
 800fe4e:	230d      	movs	r3, #13
 800fe50:	e091      	b.n	800ff76 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe58:	441a      	add	r2, r3
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	d103      	bne.n	800fe6e <find_volume+0x382>
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	699b      	ldr	r3, [r3, #24]
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	e00a      	b.n	800fe84 <find_volume+0x398>
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	699a      	ldr	r2, [r3, #24]
 800fe72:	4613      	mov	r3, r2
 800fe74:	005b      	lsls	r3, r3, #1
 800fe76:	4413      	add	r3, r2
 800fe78:	085a      	lsrs	r2, r3, #1
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	69da      	ldr	r2, [r3, #28]
 800fe8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fe90:	0a5b      	lsrs	r3, r3, #9
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d201      	bcs.n	800fe9a <find_volume+0x3ae>
 800fe96:	230d      	movs	r3, #13
 800fe98:	e06d      	b.n	800ff76 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fea0:	615a      	str	r2, [r3, #20]
 800fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea4:	695a      	ldr	r2, [r3, #20]
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800feaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feac:	2280      	movs	r2, #128	; 0x80
 800feae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feb4:	2b03      	cmp	r3, #3
 800feb6:	d149      	bne.n	800ff4c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	3334      	adds	r3, #52	; 0x34
 800febc:	3330      	adds	r3, #48	; 0x30
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe f822 	bl	800df08 <ld_word>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d140      	bne.n	800ff4c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800feca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fecc:	3301      	adds	r3, #1
 800fece:	4619      	mov	r1, r3
 800fed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fed2:	f7fe fac9 	bl	800e468 <move_window>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d137      	bne.n	800ff4c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800fedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fede:	2200      	movs	r2, #0
 800fee0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	3334      	adds	r3, #52	; 0x34
 800fee6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe f80c 	bl	800df08 <ld_word>
 800fef0:	4603      	mov	r3, r0
 800fef2:	461a      	mov	r2, r3
 800fef4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d127      	bne.n	800ff4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	3334      	adds	r3, #52	; 0x34
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fe f819 	bl	800df38 <ld_dword>
 800ff06:	4602      	mov	r2, r0
 800ff08:	4b1d      	ldr	r3, [pc, #116]	; (800ff80 <find_volume+0x494>)
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d11e      	bne.n	800ff4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	3334      	adds	r3, #52	; 0x34
 800ff12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fe f80e 	bl	800df38 <ld_dword>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	4b19      	ldr	r3, [pc, #100]	; (800ff84 <find_volume+0x498>)
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d113      	bne.n	800ff4c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff26:	3334      	adds	r3, #52	; 0x34
 800ff28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fe f803 	bl	800df38 <ld_dword>
 800ff32:	4602      	mov	r2, r0
 800ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff36:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	3334      	adds	r3, #52	; 0x34
 800ff3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fd fff9 	bl	800df38 <ld_dword>
 800ff46:	4602      	mov	r2, r0
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff54:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <find_volume+0x49c>)
 800ff56:	881b      	ldrh	r3, [r3, #0]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	; (800ff88 <find_volume+0x49c>)
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <find_volume+0x49c>)
 800ff62:	881a      	ldrh	r2, [r3, #0]
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	4a08      	ldr	r2, [pc, #32]	; (800ff8c <find_volume+0x4a0>)
 800ff6c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff70:	f7fe fa12 	bl	800e398 <clear_lock>
#endif
	return FR_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3758      	adds	r7, #88	; 0x58
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	41615252 	.word	0x41615252
 800ff84:	61417272 	.word	0x61417272
 800ff88:	200002a8 	.word	0x200002a8
 800ff8c:	200002dc 	.word	0x200002dc

0800ff90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ff9a:	2309      	movs	r3, #9
 800ff9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01c      	beq.n	800ffde <validate+0x4e>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d018      	beq.n	800ffde <validate+0x4e>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d013      	beq.n	800ffde <validate+0x4e>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	889a      	ldrh	r2, [r3, #4]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	88db      	ldrh	r3, [r3, #6]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d10c      	bne.n	800ffde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	785b      	ldrb	r3, [r3, #1]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fefe 	bl	800ddcc <disk_status>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d101      	bne.n	800ffde <validate+0x4e>
			res = FR_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffde:	7bfb      	ldrb	r3, [r7, #15]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d102      	bne.n	800ffea <validate+0x5a>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	e000      	b.n	800ffec <validate+0x5c>
 800ffea:	2300      	movs	r3, #0
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	6013      	str	r3, [r2, #0]
	return res;
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
	...

0800fffc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b088      	sub	sp, #32
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	4613      	mov	r3, r2
 8010008:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801000e:	f107 0310 	add.w	r3, r7, #16
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff fccf 	bl	800f9b6 <get_ldnumber>
 8010018:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	2b00      	cmp	r3, #0
 801001e:	da01      	bge.n	8010024 <f_mount+0x28>
 8010020:	230b      	movs	r3, #11
 8010022:	e02b      	b.n	801007c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010024:	4a17      	ldr	r2, [pc, #92]	; (8010084 <f_mount+0x88>)
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d005      	beq.n	8010040 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010034:	69b8      	ldr	r0, [r7, #24]
 8010036:	f7fe f9af 	bl	800e398 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	2200      	movs	r2, #0
 801003e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d002      	beq.n	801004c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2200      	movs	r2, #0
 801004a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	490d      	ldr	r1, [pc, #52]	; (8010084 <f_mount+0x88>)
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <f_mount+0x66>
 801005c:	79fb      	ldrb	r3, [r7, #7]
 801005e:	2b01      	cmp	r3, #1
 8010060:	d001      	beq.n	8010066 <f_mount+0x6a>
 8010062:	2300      	movs	r3, #0
 8010064:	e00a      	b.n	801007c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010066:	f107 010c 	add.w	r1, r7, #12
 801006a:	f107 0308 	add.w	r3, r7, #8
 801006e:	2200      	movs	r2, #0
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fd3b 	bl	800faec <find_volume>
 8010076:	4603      	mov	r3, r0
 8010078:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801007a:	7dfb      	ldrb	r3, [r7, #23]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3720      	adds	r7, #32
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	200002a4 	.word	0x200002a4

08010088 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b09a      	sub	sp, #104	; 0x68
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	4613      	mov	r3, r2
 8010094:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d101      	bne.n	80100a0 <f_open+0x18>
 801009c:	2309      	movs	r3, #9
 801009e:	e1ad      	b.n	80103fc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100a0:	79fb      	ldrb	r3, [r7, #7]
 80100a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100a8:	79fa      	ldrb	r2, [r7, #7]
 80100aa:	f107 0114 	add.w	r1, r7, #20
 80100ae:	f107 0308 	add.w	r3, r7, #8
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff fd1a 	bl	800faec <find_volume>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80100be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f040 8191 	bne.w	80103ea <f_open+0x362>
		dj.obj.fs = fs;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	f107 0318 	add.w	r3, r7, #24
 80100d2:	4611      	mov	r1, r2
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff fbfd 	bl	800f8d4 <follow_path>
 80100da:	4603      	mov	r3, r0
 80100dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d11a      	bne.n	801011e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100ec:	b25b      	sxtb	r3, r3
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	da03      	bge.n	80100fa <f_open+0x72>
				res = FR_INVALID_NAME;
 80100f2:	2306      	movs	r3, #6
 80100f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80100f8:	e011      	b.n	801011e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100fa:	79fb      	ldrb	r3, [r7, #7]
 80100fc:	f023 0301 	bic.w	r3, r3, #1
 8010100:	2b00      	cmp	r3, #0
 8010102:	bf14      	ite	ne
 8010104:	2301      	movne	r3, #1
 8010106:	2300      	moveq	r3, #0
 8010108:	b2db      	uxtb	r3, r3
 801010a:	461a      	mov	r2, r3
 801010c:	f107 0318 	add.w	r3, r7, #24
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd fff8 	bl	800e108 <chk_lock>
 8010118:	4603      	mov	r3, r0
 801011a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	f003 031c 	and.w	r3, r3, #28
 8010124:	2b00      	cmp	r3, #0
 8010126:	d07f      	beq.n	8010228 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801012c:	2b00      	cmp	r3, #0
 801012e:	d017      	beq.n	8010160 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010134:	2b04      	cmp	r3, #4
 8010136:	d10e      	bne.n	8010156 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010138:	f7fe f842 	bl	800e1c0 <enq_lock>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d006      	beq.n	8010150 <f_open+0xc8>
 8010142:	f107 0318 	add.w	r3, r7, #24
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff f914 	bl	800f374 <dir_register>
 801014c:	4603      	mov	r3, r0
 801014e:	e000      	b.n	8010152 <f_open+0xca>
 8010150:	2312      	movs	r3, #18
 8010152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010156:	79fb      	ldrb	r3, [r7, #7]
 8010158:	f043 0308 	orr.w	r3, r3, #8
 801015c:	71fb      	strb	r3, [r7, #7]
 801015e:	e010      	b.n	8010182 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010160:	7fbb      	ldrb	r3, [r7, #30]
 8010162:	f003 0311 	and.w	r3, r3, #17
 8010166:	2b00      	cmp	r3, #0
 8010168:	d003      	beq.n	8010172 <f_open+0xea>
					res = FR_DENIED;
 801016a:	2307      	movs	r3, #7
 801016c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010170:	e007      	b.n	8010182 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010172:	79fb      	ldrb	r3, [r7, #7]
 8010174:	f003 0304 	and.w	r3, r3, #4
 8010178:	2b00      	cmp	r3, #0
 801017a:	d002      	beq.n	8010182 <f_open+0xfa>
 801017c:	2308      	movs	r3, #8
 801017e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010186:	2b00      	cmp	r3, #0
 8010188:	d168      	bne.n	801025c <f_open+0x1d4>
 801018a:	79fb      	ldrb	r3, [r7, #7]
 801018c:	f003 0308 	and.w	r3, r3, #8
 8010190:	2b00      	cmp	r3, #0
 8010192:	d063      	beq.n	801025c <f_open+0x1d4>
				dw = GET_FATTIME();
 8010194:	f7fa fa24 	bl	800a5e0 <get_fattime>
 8010198:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801019a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019c:	330e      	adds	r3, #14
 801019e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fd ff07 	bl	800dfb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	3316      	adds	r3, #22
 80101aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fd ff01 	bl	800dfb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	330b      	adds	r3, #11
 80101b6:	2220      	movs	r2, #32
 80101b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fe50 	bl	800ee66 <ld_clust>
 80101c6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101cc:	2200      	movs	r2, #0
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe fe68 	bl	800eea4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	331c      	adds	r3, #28
 80101d8:	2100      	movs	r1, #0
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fd feea 	bl	800dfb4 <st_dword>
					fs->wflag = 1;
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	2201      	movs	r2, #1
 80101e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d037      	beq.n	801025c <f_open+0x1d4>
						dw = fs->winsect;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80101f2:	f107 0318 	add.w	r3, r7, #24
 80101f6:	2200      	movs	r2, #0
 80101f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fe fb7b 	bl	800e8f6 <remove_chain>
 8010200:	4603      	mov	r3, r0
 8010202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801020a:	2b00      	cmp	r3, #0
 801020c:	d126      	bne.n	801025c <f_open+0x1d4>
							res = move_window(fs, dw);
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010212:	4618      	mov	r0, r3
 8010214:	f7fe f928 	bl	800e468 <move_window>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010222:	3a01      	subs	r2, #1
 8010224:	611a      	str	r2, [r3, #16]
 8010226:	e019      	b.n	801025c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801022c:	2b00      	cmp	r3, #0
 801022e:	d115      	bne.n	801025c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010230:	7fbb      	ldrb	r3, [r7, #30]
 8010232:	f003 0310 	and.w	r3, r3, #16
 8010236:	2b00      	cmp	r3, #0
 8010238:	d003      	beq.n	8010242 <f_open+0x1ba>
					res = FR_NO_FILE;
 801023a:	2304      	movs	r3, #4
 801023c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010240:	e00c      	b.n	801025c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	f003 0302 	and.w	r3, r3, #2
 8010248:	2b00      	cmp	r3, #0
 801024a:	d007      	beq.n	801025c <f_open+0x1d4>
 801024c:	7fbb      	ldrb	r3, [r7, #30]
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <f_open+0x1d4>
						res = FR_DENIED;
 8010256:	2307      	movs	r3, #7
 8010258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801025c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010260:	2b00      	cmp	r3, #0
 8010262:	d128      	bne.n	80102b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	f003 0308 	and.w	r3, r3, #8
 801026a:	2b00      	cmp	r3, #0
 801026c:	d003      	beq.n	8010276 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801026e:	79fb      	ldrb	r3, [r7, #7]
 8010270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010274:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801027e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	f023 0301 	bic.w	r3, r3, #1
 801028a:	2b00      	cmp	r3, #0
 801028c:	bf14      	ite	ne
 801028e:	2301      	movne	r3, #1
 8010290:	2300      	moveq	r3, #0
 8010292:	b2db      	uxtb	r3, r3
 8010294:	461a      	mov	r2, r3
 8010296:	f107 0318 	add.w	r3, r7, #24
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f7fd ffb1 	bl	800e204 <inc_lock>
 80102a2:	4602      	mov	r2, r0
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d102      	bne.n	80102b6 <f_open+0x22e>
 80102b0:	2302      	movs	r3, #2
 80102b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f040 8095 	bne.w	80103ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe fdcd 	bl	800ee66 <ld_clust>
 80102cc:	4602      	mov	r2, r0
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	331c      	adds	r3, #28
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fd fe2e 	bl	800df38 <ld_dword>
 80102dc:	4602      	mov	r2, r0
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	88da      	ldrh	r2, [r3, #6]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	79fa      	ldrb	r2, [r7, #7]
 80102fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	3330      	adds	r3, #48	; 0x30
 8010312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010316:	2100      	movs	r1, #0
 8010318:	4618      	mov	r0, r3
 801031a:	f7fd fe98 	bl	800e04e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801031e:	79fb      	ldrb	r3, [r7, #7]
 8010320:	f003 0320 	and.w	r3, r3, #32
 8010324:	2b00      	cmp	r3, #0
 8010326:	d060      	beq.n	80103ea <f_open+0x362>
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d05c      	beq.n	80103ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	68da      	ldr	r2, [r3, #12]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	895b      	ldrh	r3, [r3, #10]
 801033c:	025b      	lsls	r3, r3, #9
 801033e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801034c:	e016      	b.n	801037c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010352:	4618      	mov	r0, r3
 8010354:	f7fe f943 	bl	800e5de <get_fat>
 8010358:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801035a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801035c:	2b01      	cmp	r3, #1
 801035e:	d802      	bhi.n	8010366 <f_open+0x2de>
 8010360:	2302      	movs	r3, #2
 8010362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801036c:	d102      	bne.n	8010374 <f_open+0x2ec>
 801036e:	2301      	movs	r3, #1
 8010370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801037c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <f_open+0x304>
 8010384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010388:	429a      	cmp	r2, r3
 801038a:	d8e0      	bhi.n	801034e <f_open+0x2c6>
				}
				fp->clust = clst;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010390:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010396:	2b00      	cmp	r3, #0
 8010398:	d127      	bne.n	80103ea <f_open+0x362>
 801039a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801039c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d022      	beq.n	80103ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe f8f9 	bl	800e5a0 <clust2sect>
 80103ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 80103b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d103      	bne.n	80103be <f_open+0x336>
						res = FR_INT_ERR;
 80103b6:	2302      	movs	r3, #2
 80103b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103bc:	e015      	b.n	80103ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c0:	0a5a      	lsrs	r2, r3, #9
 80103c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103c4:	441a      	add	r2, r3
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	7858      	ldrb	r0, [r3, #1]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6a1a      	ldr	r2, [r3, #32]
 80103d8:	2301      	movs	r3, #1
 80103da:	f7fd fd37 	bl	800de4c <disk_read>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <f_open+0x362>
 80103e4:	2301      	movs	r3, #1
 80103e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d002      	beq.n	80103f8 <f_open+0x370>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2200      	movs	r2, #0
 80103f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3768      	adds	r7, #104	; 0x68
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b08e      	sub	sp, #56	; 0x38
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f107 0214 	add.w	r2, r7, #20
 8010422:	4611      	mov	r1, r2
 8010424:	4618      	mov	r0, r3
 8010426:	f7ff fdb3 	bl	800ff90 <validate>
 801042a:	4603      	mov	r3, r0
 801042c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010434:	2b00      	cmp	r3, #0
 8010436:	d107      	bne.n	8010448 <f_read+0x44>
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	7d5b      	ldrb	r3, [r3, #21]
 801043c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <f_read+0x4a>
 8010448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801044c:	e115      	b.n	801067a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	7d1b      	ldrb	r3, [r3, #20]
 8010452:	f003 0301 	and.w	r3, r3, #1
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <f_read+0x5a>
 801045a:	2307      	movs	r3, #7
 801045c:	e10d      	b.n	801067a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	68da      	ldr	r2, [r3, #12]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	429a      	cmp	r2, r3
 8010470:	f240 80fe 	bls.w	8010670 <f_read+0x26c>
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010478:	e0fa      	b.n	8010670 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010482:	2b00      	cmp	r3, #0
 8010484:	f040 80c6 	bne.w	8010614 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	699b      	ldr	r3, [r3, #24]
 801048c:	0a5b      	lsrs	r3, r3, #9
 801048e:	697a      	ldr	r2, [r7, #20]
 8010490:	8952      	ldrh	r2, [r2, #10]
 8010492:	3a01      	subs	r2, #1
 8010494:	4013      	ands	r3, r2
 8010496:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d12f      	bne.n	80104fe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	699b      	ldr	r3, [r3, #24]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d103      	bne.n	80104ae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	633b      	str	r3, [r7, #48]	; 0x30
 80104ac:	e013      	b.n	80104d6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d007      	beq.n	80104c6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	4619      	mov	r1, r3
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f7fe fb17 	bl	800eaf0 <clmt_clust>
 80104c2:	6338      	str	r0, [r7, #48]	; 0x30
 80104c4:	e007      	b.n	80104d6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	69db      	ldr	r3, [r3, #28]
 80104cc:	4619      	mov	r1, r3
 80104ce:	4610      	mov	r0, r2
 80104d0:	f7fe f885 	bl	800e5de <get_fat>
 80104d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d804      	bhi.n	80104e6 <f_read+0xe2>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2202      	movs	r2, #2
 80104e0:	755a      	strb	r2, [r3, #21]
 80104e2:	2302      	movs	r3, #2
 80104e4:	e0c9      	b.n	801067a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104ec:	d104      	bne.n	80104f8 <f_read+0xf4>
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2201      	movs	r2, #1
 80104f2:	755a      	strb	r2, [r3, #21]
 80104f4:	2301      	movs	r3, #1
 80104f6:	e0c0      	b.n	801067a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	69db      	ldr	r3, [r3, #28]
 8010504:	4619      	mov	r1, r3
 8010506:	4610      	mov	r0, r2
 8010508:	f7fe f84a 	bl	800e5a0 <clust2sect>
 801050c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d104      	bne.n	801051e <f_read+0x11a>
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2202      	movs	r2, #2
 8010518:	755a      	strb	r2, [r3, #21]
 801051a:	2302      	movs	r3, #2
 801051c:	e0ad      	b.n	801067a <f_read+0x276>
			sect += csect;
 801051e:	69ba      	ldr	r2, [r7, #24]
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	4413      	add	r3, r2
 8010524:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	0a5b      	lsrs	r3, r3, #9
 801052a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052e:	2b00      	cmp	r3, #0
 8010530:	d039      	beq.n	80105a6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010532:	69fa      	ldr	r2, [r7, #28]
 8010534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010536:	4413      	add	r3, r2
 8010538:	697a      	ldr	r2, [r7, #20]
 801053a:	8952      	ldrh	r2, [r2, #10]
 801053c:	4293      	cmp	r3, r2
 801053e:	d905      	bls.n	801054c <f_read+0x148>
					cc = fs->csize - csect;
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	895b      	ldrh	r3, [r3, #10]
 8010544:	461a      	mov	r2, r3
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	1ad3      	subs	r3, r2, r3
 801054a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	7858      	ldrb	r0, [r3, #1]
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	69ba      	ldr	r2, [r7, #24]
 8010554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010556:	f7fd fc79 	bl	800de4c <disk_read>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d004      	beq.n	801056a <f_read+0x166>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2201      	movs	r2, #1
 8010564:	755a      	strb	r2, [r3, #21]
 8010566:	2301      	movs	r3, #1
 8010568:	e087      	b.n	801067a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	7d1b      	ldrb	r3, [r3, #20]
 801056e:	b25b      	sxtb	r3, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	da14      	bge.n	801059e <f_read+0x19a>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6a1a      	ldr	r2, [r3, #32]
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801057e:	429a      	cmp	r2, r3
 8010580:	d90d      	bls.n	801059e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6a1a      	ldr	r2, [r3, #32]
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	025b      	lsls	r3, r3, #9
 801058c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801058e:	18d0      	adds	r0, r2, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3330      	adds	r3, #48	; 0x30
 8010594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010598:	4619      	mov	r1, r3
 801059a:	f7fd fd37 	bl	800e00c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801059e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a0:	025b      	lsls	r3, r3, #9
 80105a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105a4:	e050      	b.n	8010648 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	69ba      	ldr	r2, [r7, #24]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d02e      	beq.n	801060e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	7d1b      	ldrb	r3, [r3, #20]
 80105b4:	b25b      	sxtb	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	da18      	bge.n	80105ec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	7858      	ldrb	r0, [r3, #1]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6a1a      	ldr	r2, [r3, #32]
 80105c8:	2301      	movs	r3, #1
 80105ca:	f7fd fc5f 	bl	800de8c <disk_write>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d004      	beq.n	80105de <f_read+0x1da>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2201      	movs	r2, #1
 80105d8:	755a      	strb	r2, [r3, #21]
 80105da:	2301      	movs	r3, #1
 80105dc:	e04d      	b.n	801067a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	7d1b      	ldrb	r3, [r3, #20]
 80105e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	7858      	ldrb	r0, [r3, #1]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105f6:	2301      	movs	r3, #1
 80105f8:	69ba      	ldr	r2, [r7, #24]
 80105fa:	f7fd fc27 	bl	800de4c <disk_read>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d004      	beq.n	801060e <f_read+0x20a>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2201      	movs	r2, #1
 8010608:	755a      	strb	r2, [r3, #21]
 801060a:	2301      	movs	r3, #1
 801060c:	e035      	b.n	801067a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	69ba      	ldr	r2, [r7, #24]
 8010612:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801061c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010620:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	429a      	cmp	r2, r3
 8010628:	d901      	bls.n	801062e <f_read+0x22a>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801063c:	4413      	add	r3, r2
 801063e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010640:	4619      	mov	r1, r3
 8010642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010644:	f7fd fce2 	bl	800e00c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	4413      	add	r3, r2
 801064e:	627b      	str	r3, [r7, #36]	; 0x24
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	699a      	ldr	r2, [r3, #24]
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	441a      	add	r2, r3
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	619a      	str	r2, [r3, #24]
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	441a      	add	r2, r3
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	601a      	str	r2, [r3, #0]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	f47f af01 	bne.w	801047a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3738      	adds	r7, #56	; 0x38
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b08c      	sub	sp, #48	; 0x30
 8010686:	af00      	add	r7, sp, #0
 8010688:	60f8      	str	r0, [r7, #12]
 801068a:	60b9      	str	r1, [r7, #8]
 801068c:	607a      	str	r2, [r7, #4]
 801068e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	2200      	movs	r2, #0
 8010698:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f107 0210 	add.w	r2, r7, #16
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7ff fc74 	bl	800ff90 <validate>
 80106a8:	4603      	mov	r3, r0
 80106aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d107      	bne.n	80106c6 <f_write+0x44>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	7d5b      	ldrb	r3, [r3, #21]
 80106ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d002      	beq.n	80106cc <f_write+0x4a>
 80106c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ca:	e14b      	b.n	8010964 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	7d1b      	ldrb	r3, [r3, #20]
 80106d0:	f003 0302 	and.w	r3, r3, #2
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d101      	bne.n	80106dc <f_write+0x5a>
 80106d8:	2307      	movs	r3, #7
 80106da:	e143      	b.n	8010964 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	699a      	ldr	r2, [r3, #24]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	441a      	add	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	699b      	ldr	r3, [r3, #24]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	f080 812d 	bcs.w	8010948 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	699b      	ldr	r3, [r3, #24]
 80106f2:	43db      	mvns	r3, r3
 80106f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80106f6:	e127      	b.n	8010948 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	699b      	ldr	r3, [r3, #24]
 80106fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010700:	2b00      	cmp	r3, #0
 8010702:	f040 80e3 	bne.w	80108cc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	0a5b      	lsrs	r3, r3, #9
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	8952      	ldrh	r2, [r2, #10]
 8010710:	3a01      	subs	r2, #1
 8010712:	4013      	ands	r3, r2
 8010714:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d143      	bne.n	80107a4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	699b      	ldr	r3, [r3, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10c      	bne.n	801073e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	2b00      	cmp	r3, #0
 801072e:	d11a      	bne.n	8010766 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2100      	movs	r1, #0
 8010734:	4618      	mov	r0, r3
 8010736:	f7fe f943 	bl	800e9c0 <create_chain>
 801073a:	62b8      	str	r0, [r7, #40]	; 0x28
 801073c:	e013      	b.n	8010766 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010742:	2b00      	cmp	r3, #0
 8010744:	d007      	beq.n	8010756 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	4619      	mov	r1, r3
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f7fe f9cf 	bl	800eaf0 <clmt_clust>
 8010752:	62b8      	str	r0, [r7, #40]	; 0x28
 8010754:	e007      	b.n	8010766 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	69db      	ldr	r3, [r3, #28]
 801075c:	4619      	mov	r1, r3
 801075e:	4610      	mov	r0, r2
 8010760:	f7fe f92e 	bl	800e9c0 <create_chain>
 8010764:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 80f2 	beq.w	8010952 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	2b01      	cmp	r3, #1
 8010772:	d104      	bne.n	801077e <f_write+0xfc>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2202      	movs	r2, #2
 8010778:	755a      	strb	r2, [r3, #21]
 801077a:	2302      	movs	r3, #2
 801077c:	e0f2      	b.n	8010964 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801077e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010784:	d104      	bne.n	8010790 <f_write+0x10e>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2201      	movs	r2, #1
 801078a:	755a      	strb	r2, [r3, #21]
 801078c:	2301      	movs	r3, #1
 801078e:	e0e9      	b.n	8010964 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010794:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	689b      	ldr	r3, [r3, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <f_write+0x122>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	7d1b      	ldrb	r3, [r3, #20]
 80107a8:	b25b      	sxtb	r3, r3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	da18      	bge.n	80107e0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	7858      	ldrb	r0, [r3, #1]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6a1a      	ldr	r2, [r3, #32]
 80107bc:	2301      	movs	r3, #1
 80107be:	f7fd fb65 	bl	800de8c <disk_write>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d004      	beq.n	80107d2 <f_write+0x150>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2201      	movs	r2, #1
 80107cc:	755a      	strb	r2, [r3, #21]
 80107ce:	2301      	movs	r3, #1
 80107d0:	e0c8      	b.n	8010964 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	7d1b      	ldrb	r3, [r3, #20]
 80107d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107da:	b2da      	uxtb	r2, r3
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107e0:	693a      	ldr	r2, [r7, #16]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	4619      	mov	r1, r3
 80107e8:	4610      	mov	r0, r2
 80107ea:	f7fd fed9 	bl	800e5a0 <clust2sect>
 80107ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d104      	bne.n	8010800 <f_write+0x17e>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2202      	movs	r2, #2
 80107fa:	755a      	strb	r2, [r3, #21]
 80107fc:	2302      	movs	r3, #2
 80107fe:	e0b1      	b.n	8010964 <f_write+0x2e2>
			sect += csect;
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	4413      	add	r3, r2
 8010806:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	0a5b      	lsrs	r3, r3, #9
 801080c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d03c      	beq.n	801088e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010814:	69ba      	ldr	r2, [r7, #24]
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	4413      	add	r3, r2
 801081a:	693a      	ldr	r2, [r7, #16]
 801081c:	8952      	ldrh	r2, [r2, #10]
 801081e:	4293      	cmp	r3, r2
 8010820:	d905      	bls.n	801082e <f_write+0x1ac>
					cc = fs->csize - csect;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	895b      	ldrh	r3, [r3, #10]
 8010826:	461a      	mov	r2, r3
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	7858      	ldrb	r0, [r3, #1]
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	69f9      	ldr	r1, [r7, #28]
 8010838:	f7fd fb28 	bl	800de8c <disk_write>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d004      	beq.n	801084c <f_write+0x1ca>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2201      	movs	r2, #1
 8010846:	755a      	strb	r2, [r3, #21]
 8010848:	2301      	movs	r3, #1
 801084a:	e08b      	b.n	8010964 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	6a1a      	ldr	r2, [r3, #32]
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	6a3a      	ldr	r2, [r7, #32]
 8010856:	429a      	cmp	r2, r3
 8010858:	d915      	bls.n	8010886 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6a1a      	ldr	r2, [r3, #32]
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	025b      	lsls	r3, r3, #9
 801086a:	69fa      	ldr	r2, [r7, #28]
 801086c:	4413      	add	r3, r2
 801086e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010872:	4619      	mov	r1, r3
 8010874:	f7fd fbca 	bl	800e00c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	7d1b      	ldrb	r3, [r3, #20]
 801087c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010880:	b2da      	uxtb	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010886:	6a3b      	ldr	r3, [r7, #32]
 8010888:	025b      	lsls	r3, r3, #9
 801088a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801088c:	e03f      	b.n	801090e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	697a      	ldr	r2, [r7, #20]
 8010894:	429a      	cmp	r2, r3
 8010896:	d016      	beq.n	80108c6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	699a      	ldr	r2, [r3, #24]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d210      	bcs.n	80108c6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	7858      	ldrb	r0, [r3, #1]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108ae:	2301      	movs	r3, #1
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	f7fd facb 	bl	800de4c <disk_read>
 80108b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d004      	beq.n	80108c6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2201      	movs	r2, #1
 80108c0:	755a      	strb	r2, [r3, #21]
 80108c2:	2301      	movs	r3, #1
 80108c4:	e04e      	b.n	8010964 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80108d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80108da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d901      	bls.n	80108e6 <f_write+0x264>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	699b      	ldr	r3, [r3, #24]
 80108f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f4:	4413      	add	r3, r2
 80108f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f8:	69f9      	ldr	r1, [r7, #28]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fb86 	bl	800e00c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	7d1b      	ldrb	r3, [r3, #20]
 8010904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010908:	b2da      	uxtb	r2, r3
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801090e:	69fa      	ldr	r2, [r7, #28]
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	4413      	add	r3, r2
 8010914:	61fb      	str	r3, [r7, #28]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	699a      	ldr	r2, [r3, #24]
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	441a      	add	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	619a      	str	r2, [r3, #24]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	68da      	ldr	r2, [r3, #12]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	699b      	ldr	r3, [r3, #24]
 801092a:	429a      	cmp	r2, r3
 801092c:	bf38      	it	cc
 801092e:	461a      	movcc	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	60da      	str	r2, [r3, #12]
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	441a      	add	r2, r3
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	601a      	str	r2, [r3, #0]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010944:	1ad3      	subs	r3, r2, r3
 8010946:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	f47f aed4 	bne.w	80106f8 <f_write+0x76>
 8010950:	e000      	b.n	8010954 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010952:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	7d1b      	ldrb	r3, [r3, #20]
 8010958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801095c:	b2da      	uxtb	r2, r3
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3730      	adds	r7, #48	; 0x30
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b086      	sub	sp, #24
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f107 0208 	add.w	r2, r7, #8
 801097a:	4611      	mov	r1, r2
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff fb07 	bl	800ff90 <validate>
 8010982:	4603      	mov	r3, r0
 8010984:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d168      	bne.n	8010a5e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	7d1b      	ldrb	r3, [r3, #20]
 8010990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010994:	2b00      	cmp	r3, #0
 8010996:	d062      	beq.n	8010a5e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	7d1b      	ldrb	r3, [r3, #20]
 801099c:	b25b      	sxtb	r3, r3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	da15      	bge.n	80109ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	7858      	ldrb	r0, [r3, #1]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6a1a      	ldr	r2, [r3, #32]
 80109b0:	2301      	movs	r3, #1
 80109b2:	f7fd fa6b 	bl	800de8c <disk_write>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <f_sync+0x54>
 80109bc:	2301      	movs	r3, #1
 80109be:	e04f      	b.n	8010a60 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	7d1b      	ldrb	r3, [r3, #20]
 80109c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109ce:	f7f9 fe07 	bl	800a5e0 <get_fattime>
 80109d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109da:	4619      	mov	r1, r3
 80109dc:	4610      	mov	r0, r2
 80109de:	f7fd fd43 	bl	800e468 <move_window>
 80109e2:	4603      	mov	r3, r0
 80109e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109e6:	7dfb      	ldrb	r3, [r7, #23]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d138      	bne.n	8010a5e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	330b      	adds	r3, #11
 80109f6:	781a      	ldrb	r2, [r3, #0]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	330b      	adds	r3, #11
 80109fc:	f042 0220 	orr.w	r2, r2, #32
 8010a00:	b2d2      	uxtb	r2, r2
 8010a02:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6818      	ldr	r0, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	68f9      	ldr	r1, [r7, #12]
 8010a10:	f7fe fa48 	bl	800eea4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f103 021c 	add.w	r2, r3, #28
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4610      	mov	r0, r2
 8010a22:	f7fd fac7 	bl	800dfb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3316      	adds	r3, #22
 8010a2a:	6939      	ldr	r1, [r7, #16]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7fd fac1 	bl	800dfb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	3312      	adds	r3, #18
 8010a36:	2100      	movs	r1, #0
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fd faa0 	bl	800df7e <st_word>
					fs->wflag = 1;
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2201      	movs	r2, #1
 8010a42:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fd fd3c 	bl	800e4c4 <sync_fs>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7d1b      	ldrb	r3, [r3, #20]
 8010a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ff7b 	bl	801096c <f_sync>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a7a:	7bfb      	ldrb	r3, [r7, #15]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d118      	bne.n	8010ab2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f107 0208 	add.w	r2, r7, #8
 8010a86:	4611      	mov	r1, r2
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7ff fa81 	bl	800ff90 <validate>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10c      	bne.n	8010ab2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	691b      	ldr	r3, [r3, #16]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fd fc3f 	bl	800e320 <dec_lock>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d102      	bne.n	8010ab2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b087      	sub	sp, #28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	60b9      	str	r1, [r7, #8]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010aca:	2301      	movs	r3, #1
 8010acc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010ad2:	4b1f      	ldr	r3, [pc, #124]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010ad4:	7a5b      	ldrb	r3, [r3, #9]
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d131      	bne.n	8010b40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010adc:	4b1c      	ldr	r3, [pc, #112]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010ade:	7a5b      	ldrb	r3, [r3, #9]
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	4b1a      	ldr	r3, [pc, #104]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010aea:	4b19      	ldr	r3, [pc, #100]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010aec:	7a5b      	ldrb	r3, [r3, #9]
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	4a17      	ldr	r2, [pc, #92]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	4413      	add	r3, r2
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010afa:	4b15      	ldr	r3, [pc, #84]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010afc:	7a5b      	ldrb	r3, [r3, #9]
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	461a      	mov	r2, r3
 8010b02:	4b13      	ldr	r3, [pc, #76]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010b04:	4413      	add	r3, r2
 8010b06:	79fa      	ldrb	r2, [r7, #7]
 8010b08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b0a:	4b11      	ldr	r3, [pc, #68]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010b0c:	7a5b      	ldrb	r3, [r3, #9]
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	1c5a      	adds	r2, r3, #1
 8010b12:	b2d1      	uxtb	r1, r2
 8010b14:	4a0e      	ldr	r2, [pc, #56]	; (8010b50 <FATFS_LinkDriverEx+0x94>)
 8010b16:	7251      	strb	r1, [r2, #9]
 8010b18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b1a:	7dbb      	ldrb	r3, [r7, #22]
 8010b1c:	3330      	adds	r3, #48	; 0x30
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	3301      	adds	r3, #1
 8010b28:	223a      	movs	r2, #58	; 0x3a
 8010b2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	3302      	adds	r3, #2
 8010b30:	222f      	movs	r2, #47	; 0x2f
 8010b32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	3303      	adds	r3, #3
 8010b38:	2200      	movs	r2, #0
 8010b3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	371c      	adds	r7, #28
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	200004dc 	.word	0x200004dc

08010b54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b5e:	2200      	movs	r2, #0
 8010b60:	6839      	ldr	r1, [r7, #0]
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff ffaa 	bl	8010abc <FATFS_LinkDriverEx>
 8010b68:	4603      	mov	r3, r0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
	...

08010b74 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	6039      	str	r1, [r7, #0]
 8010b7e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b80:	88fb      	ldrh	r3, [r7, #6]
 8010b82:	2b7f      	cmp	r3, #127	; 0x7f
 8010b84:	d802      	bhi.n	8010b8c <ff_convert+0x18>
		c = chr;
 8010b86:	88fb      	ldrh	r3, [r7, #6]
 8010b88:	81fb      	strh	r3, [r7, #14]
 8010b8a:	e025      	b.n	8010bd8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d00b      	beq.n	8010baa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b92:	88fb      	ldrh	r3, [r7, #6]
 8010b94:	2bff      	cmp	r3, #255	; 0xff
 8010b96:	d805      	bhi.n	8010ba4 <ff_convert+0x30>
 8010b98:	88fb      	ldrh	r3, [r7, #6]
 8010b9a:	3b80      	subs	r3, #128	; 0x80
 8010b9c:	4a12      	ldr	r2, [pc, #72]	; (8010be8 <ff_convert+0x74>)
 8010b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ba2:	e000      	b.n	8010ba6 <ff_convert+0x32>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	81fb      	strh	r3, [r7, #14]
 8010ba8:	e016      	b.n	8010bd8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010baa:	2300      	movs	r3, #0
 8010bac:	81fb      	strh	r3, [r7, #14]
 8010bae:	e009      	b.n	8010bc4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010bb0:	89fb      	ldrh	r3, [r7, #14]
 8010bb2:	4a0d      	ldr	r2, [pc, #52]	; (8010be8 <ff_convert+0x74>)
 8010bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bb8:	88fa      	ldrh	r2, [r7, #6]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d006      	beq.n	8010bcc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010bbe:	89fb      	ldrh	r3, [r7, #14]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	81fb      	strh	r3, [r7, #14]
 8010bc4:	89fb      	ldrh	r3, [r7, #14]
 8010bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8010bc8:	d9f2      	bls.n	8010bb0 <ff_convert+0x3c>
 8010bca:	e000      	b.n	8010bce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010bcc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010bce:	89fb      	ldrh	r3, [r7, #14]
 8010bd0:	3380      	adds	r3, #128	; 0x80
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr
 8010be6:	bf00      	nop
 8010be8:	080142c8 	.word	0x080142c8

08010bec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b087      	sub	sp, #28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010bf6:	88fb      	ldrh	r3, [r7, #6]
 8010bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bfc:	d201      	bcs.n	8010c02 <ff_wtoupper+0x16>
 8010bfe:	4b3e      	ldr	r3, [pc, #248]	; (8010cf8 <ff_wtoupper+0x10c>)
 8010c00:	e000      	b.n	8010c04 <ff_wtoupper+0x18>
 8010c02:	4b3e      	ldr	r3, [pc, #248]	; (8010cfc <ff_wtoupper+0x110>)
 8010c04:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	1c9a      	adds	r2, r3, #2
 8010c0a:	617a      	str	r2, [r7, #20]
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010c10:	8a7b      	ldrh	r3, [r7, #18]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d068      	beq.n	8010ce8 <ff_wtoupper+0xfc>
 8010c16:	88fa      	ldrh	r2, [r7, #6]
 8010c18:	8a7b      	ldrh	r3, [r7, #18]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d364      	bcc.n	8010ce8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	1c9a      	adds	r2, r3, #2
 8010c22:	617a      	str	r2, [r7, #20]
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	823b      	strh	r3, [r7, #16]
 8010c28:	8a3b      	ldrh	r3, [r7, #16]
 8010c2a:	0a1b      	lsrs	r3, r3, #8
 8010c2c:	81fb      	strh	r3, [r7, #14]
 8010c2e:	8a3b      	ldrh	r3, [r7, #16]
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010c34:	88fa      	ldrh	r2, [r7, #6]
 8010c36:	8a79      	ldrh	r1, [r7, #18]
 8010c38:	8a3b      	ldrh	r3, [r7, #16]
 8010c3a:	440b      	add	r3, r1
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	da49      	bge.n	8010cd4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c40:	89fb      	ldrh	r3, [r7, #14]
 8010c42:	2b08      	cmp	r3, #8
 8010c44:	d84f      	bhi.n	8010ce6 <ff_wtoupper+0xfa>
 8010c46:	a201      	add	r2, pc, #4	; (adr r2, 8010c4c <ff_wtoupper+0x60>)
 8010c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4c:	08010c71 	.word	0x08010c71
 8010c50:	08010c83 	.word	0x08010c83
 8010c54:	08010c99 	.word	0x08010c99
 8010c58:	08010ca1 	.word	0x08010ca1
 8010c5c:	08010ca9 	.word	0x08010ca9
 8010c60:	08010cb1 	.word	0x08010cb1
 8010c64:	08010cb9 	.word	0x08010cb9
 8010c68:	08010cc1 	.word	0x08010cc1
 8010c6c:	08010cc9 	.word	0x08010cc9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c70:	88fa      	ldrh	r2, [r7, #6]
 8010c72:	8a7b      	ldrh	r3, [r7, #18]
 8010c74:	1ad3      	subs	r3, r2, r3
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	697a      	ldr	r2, [r7, #20]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	80fb      	strh	r3, [r7, #6]
 8010c80:	e027      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c82:	88fa      	ldrh	r2, [r7, #6]
 8010c84:	8a7b      	ldrh	r3, [r7, #18]
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	f003 0301 	and.w	r3, r3, #1
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	88fa      	ldrh	r2, [r7, #6]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	80fb      	strh	r3, [r7, #6]
 8010c96:	e01c      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c98:	88fb      	ldrh	r3, [r7, #6]
 8010c9a:	3b10      	subs	r3, #16
 8010c9c:	80fb      	strh	r3, [r7, #6]
 8010c9e:	e018      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010ca0:	88fb      	ldrh	r3, [r7, #6]
 8010ca2:	3b20      	subs	r3, #32
 8010ca4:	80fb      	strh	r3, [r7, #6]
 8010ca6:	e014      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	3b30      	subs	r3, #48	; 0x30
 8010cac:	80fb      	strh	r3, [r7, #6]
 8010cae:	e010      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010cb0:	88fb      	ldrh	r3, [r7, #6]
 8010cb2:	3b1a      	subs	r3, #26
 8010cb4:	80fb      	strh	r3, [r7, #6]
 8010cb6:	e00c      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010cb8:	88fb      	ldrh	r3, [r7, #6]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	80fb      	strh	r3, [r7, #6]
 8010cbe:	e008      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010cc0:	88fb      	ldrh	r3, [r7, #6]
 8010cc2:	3b50      	subs	r3, #80	; 0x50
 8010cc4:	80fb      	strh	r3, [r7, #6]
 8010cc6:	e004      	b.n	8010cd2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010cc8:	88fb      	ldrh	r3, [r7, #6]
 8010cca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010cce:	80fb      	strh	r3, [r7, #6]
 8010cd0:	bf00      	nop
			}
			break;
 8010cd2:	e008      	b.n	8010ce6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010cd4:	89fb      	ldrh	r3, [r7, #14]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d195      	bne.n	8010c06 <ff_wtoupper+0x1a>
 8010cda:	8a3b      	ldrh	r3, [r7, #16]
 8010cdc:	005b      	lsls	r3, r3, #1
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010ce4:	e78f      	b.n	8010c06 <ff_wtoupper+0x1a>
			break;
 8010ce6:	bf00      	nop
	}

	return chr;
 8010ce8:	88fb      	ldrh	r3, [r7, #6]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	371c      	adds	r7, #28
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	080143c8 	.word	0x080143c8
 8010cfc:	080145bc 	.word	0x080145bc

08010d00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010d04:	2201      	movs	r2, #1
 8010d06:	490e      	ldr	r1, [pc, #56]	; (8010d40 <MX_USB_HOST_Init+0x40>)
 8010d08:	480e      	ldr	r0, [pc, #56]	; (8010d44 <MX_USB_HOST_Init+0x44>)
 8010d0a:	f7fb fd05 	bl	800c718 <USBH_Init>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d001      	beq.n	8010d18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010d14:	f7f1 fbb2 	bl	800247c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010d18:	490b      	ldr	r1, [pc, #44]	; (8010d48 <MX_USB_HOST_Init+0x48>)
 8010d1a:	480a      	ldr	r0, [pc, #40]	; (8010d44 <MX_USB_HOST_Init+0x44>)
 8010d1c:	f7fb fd8a 	bl	800c834 <USBH_RegisterClass>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010d26:	f7f1 fba9 	bl	800247c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010d2a:	4806      	ldr	r0, [pc, #24]	; (8010d44 <MX_USB_HOST_Init+0x44>)
 8010d2c:	f7fb fe0e 	bl	800c94c <USBH_Start>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010d36:	f7f1 fba1 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010d3a:	bf00      	nop
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08010d61 	.word	0x08010d61
 8010d44:	20003628 	.word	0x20003628
 8010d48:	20000070 	.word	0x20000070

08010d4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d50:	4802      	ldr	r0, [pc, #8]	; (8010d5c <MX_USB_HOST_Process+0x10>)
 8010d52:	f7fb fe0b 	bl	800c96c <USBH_Process>
}
 8010d56:	bf00      	nop
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	20003628 	.word	0x20003628

08010d60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	460b      	mov	r3, r1
 8010d6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d6c:	78fb      	ldrb	r3, [r7, #3]
 8010d6e:	3b01      	subs	r3, #1
 8010d70:	2b04      	cmp	r3, #4
 8010d72:	d819      	bhi.n	8010da8 <USBH_UserProcess+0x48>
 8010d74:	a201      	add	r2, pc, #4	; (adr r2, 8010d7c <USBH_UserProcess+0x1c>)
 8010d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d7a:	bf00      	nop
 8010d7c:	08010da9 	.word	0x08010da9
 8010d80:	08010d99 	.word	0x08010d99
 8010d84:	08010da9 	.word	0x08010da9
 8010d88:	08010da1 	.word	0x08010da1
 8010d8c:	08010d91 	.word	0x08010d91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010d90:	4b09      	ldr	r3, [pc, #36]	; (8010db8 <USBH_UserProcess+0x58>)
 8010d92:	2203      	movs	r2, #3
 8010d94:	701a      	strb	r2, [r3, #0]
  break;
 8010d96:	e008      	b.n	8010daa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010d98:	4b07      	ldr	r3, [pc, #28]	; (8010db8 <USBH_UserProcess+0x58>)
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	701a      	strb	r2, [r3, #0]
  break;
 8010d9e:	e004      	b.n	8010daa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <USBH_UserProcess+0x58>)
 8010da2:	2201      	movs	r2, #1
 8010da4:	701a      	strb	r2, [r3, #0]
  break;
 8010da6:	e000      	b.n	8010daa <USBH_UserProcess+0x4a>

  default:
  break;
 8010da8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010daa:	bf00      	nop
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	200004e8 	.word	0x200004e8

08010dbc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b08a      	sub	sp, #40	; 0x28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dc4:	f107 0314 	add.w	r3, r7, #20
 8010dc8:	2200      	movs	r2, #0
 8010dca:	601a      	str	r2, [r3, #0]
 8010dcc:	605a      	str	r2, [r3, #4]
 8010dce:	609a      	str	r2, [r3, #8]
 8010dd0:	60da      	str	r2, [r3, #12]
 8010dd2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ddc:	d147      	bne.n	8010e6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010dde:	2300      	movs	r3, #0
 8010de0:	613b      	str	r3, [r7, #16]
 8010de2:	4b25      	ldr	r3, [pc, #148]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de6:	4a24      	ldr	r2, [pc, #144]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010de8:	f043 0301 	orr.w	r3, r3, #1
 8010dec:	6313      	str	r3, [r2, #48]	; 0x30
 8010dee:	4b22      	ldr	r3, [pc, #136]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	613b      	str	r3, [r7, #16]
 8010df8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010e00:	2300      	movs	r3, #0
 8010e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e04:	2300      	movs	r3, #0
 8010e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010e08:	f107 0314 	add.w	r3, r7, #20
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	481b      	ldr	r0, [pc, #108]	; (8010e7c <HAL_HCD_MspInit+0xc0>)
 8010e10:	f7f3 fac2 	bl	8004398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010e14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e22:	2300      	movs	r3, #0
 8010e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e26:	230a      	movs	r3, #10
 8010e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e2a:	f107 0314 	add.w	r3, r7, #20
 8010e2e:	4619      	mov	r1, r3
 8010e30:	4812      	ldr	r0, [pc, #72]	; (8010e7c <HAL_HCD_MspInit+0xc0>)
 8010e32:	f7f3 fab1 	bl	8004398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e36:	4b10      	ldr	r3, [pc, #64]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3a:	4a0f      	ldr	r2, [pc, #60]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e40:	6353      	str	r3, [r2, #52]	; 0x34
 8010e42:	2300      	movs	r3, #0
 8010e44:	60fb      	str	r3, [r7, #12]
 8010e46:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e4a:	4a0b      	ldr	r2, [pc, #44]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e50:	6453      	str	r3, [r2, #68]	; 0x44
 8010e52:	4b09      	ldr	r3, [pc, #36]	; (8010e78 <HAL_HCD_MspInit+0xbc>)
 8010e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e5e:	2200      	movs	r2, #0
 8010e60:	2100      	movs	r1, #0
 8010e62:	2043      	movs	r0, #67	; 0x43
 8010e64:	f7f2 fd5e 	bl	8003924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e68:	2043      	movs	r0, #67	; 0x43
 8010e6a:	f7f2 fd87 	bl	800397c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e6e:	bf00      	nop
 8010e70:	3728      	adds	r7, #40	; 0x28
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	40023800 	.word	0x40023800
 8010e7c:	40020000 	.word	0x40020000

08010e80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fc f93f 	bl	800d112 <USBH_LL_IncTimer>
}
 8010e94:	bf00      	nop
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fc f977 	bl	800d19e <USBH_LL_Connect>
}
 8010eb0:	bf00      	nop
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fc f980 	bl	800d1cc <USBH_LL_Disconnect>
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fc f931 	bl	800d166 <USBH_LL_PortEnabled>
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fc f931 	bl	800d182 <USBH_LL_PortDisabled>
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d12a      	bne.n	8010f90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010f3a:	4a18      	ldr	r2, [pc, #96]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4a15      	ldr	r2, [pc, #84]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f4a:	4b14      	ldr	r3, [pc, #80]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f52:	4b12      	ldr	r3, [pc, #72]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f54:	2208      	movs	r2, #8
 8010f56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f58:	4b10      	ldr	r3, [pc, #64]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f5e:	4b0f      	ldr	r3, [pc, #60]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f64:	4b0d      	ldr	r3, [pc, #52]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f66:	2202      	movs	r2, #2
 8010f68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f6a:	4b0c      	ldr	r3, [pc, #48]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f70:	480a      	ldr	r0, [pc, #40]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f72:	f7f3 fd6f 	bl	8004a54 <HAL_HCD_Init>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d001      	beq.n	8010f80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f7c:	f7f1 fa7e 	bl	800247c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f80:	4806      	ldr	r0, [pc, #24]	; (8010f9c <USBH_LL_Init+0x74>)
 8010f82:	f7f4 f985 	bl	8005290 <HAL_HCD_GetCurrentFrame>
 8010f86:	4603      	mov	r3, r0
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7fc f8b2 	bl	800d0f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f90:	2300      	movs	r3, #0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	20003a00 	.word	0x20003a00

08010fa0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fac:	2300      	movs	r3, #0
 8010fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f4 f8f2 	bl	80051a0 <HAL_HCD_Start>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f000 f990 	bl	80112e8 <USBH_Get_USB_Status>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b084      	sub	sp, #16
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7f4 f8fa 	bl	80051e6 <HAL_HCD_Stop>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ff6:	7bfb      	ldrb	r3, [r7, #15]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 f975 	bl	80112e8 <USBH_Get_USB_Status>
 8010ffe:	4603      	mov	r3, r0
 8011000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011002:	7bbb      	ldrb	r3, [r7, #14]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011014:	2301      	movs	r3, #1
 8011016:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801101e:	4618      	mov	r0, r3
 8011020:	f7f4 f944 	bl	80052ac <HAL_HCD_GetCurrentSpeed>
 8011024:	4603      	mov	r3, r0
 8011026:	2b01      	cmp	r3, #1
 8011028:	d007      	beq.n	801103a <USBH_LL_GetSpeed+0x2e>
 801102a:	2b01      	cmp	r3, #1
 801102c:	d302      	bcc.n	8011034 <USBH_LL_GetSpeed+0x28>
 801102e:	2b02      	cmp	r3, #2
 8011030:	d006      	beq.n	8011040 <USBH_LL_GetSpeed+0x34>
 8011032:	e008      	b.n	8011046 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011034:	2300      	movs	r3, #0
 8011036:	73fb      	strb	r3, [r7, #15]
    break;
 8011038:	e008      	b.n	801104c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801103a:	2301      	movs	r3, #1
 801103c:	73fb      	strb	r3, [r7, #15]
    break;
 801103e:	e005      	b.n	801104c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011040:	2302      	movs	r3, #2
 8011042:	73fb      	strb	r3, [r7, #15]
    break;
 8011044:	e002      	b.n	801104c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011046:	2301      	movs	r3, #1
 8011048:	73fb      	strb	r3, [r7, #15]
    break;
 801104a:	bf00      	nop
  }
  return  speed;
 801104c:	7bfb      	ldrb	r3, [r7, #15]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b084      	sub	sp, #16
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801105e:	2300      	movs	r3, #0
 8011060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801106c:	4618      	mov	r0, r3
 801106e:	f7f4 f8d7 	bl	8005220 <HAL_HCD_ResetPort>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011076:	7bfb      	ldrb	r3, [r7, #15]
 8011078:	4618      	mov	r0, r3
 801107a:	f000 f935 	bl	80112e8 <USBH_Get_USB_Status>
 801107e:	4603      	mov	r3, r0
 8011080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011082:	7bbb      	ldrb	r3, [r7, #14]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	460b      	mov	r3, r1
 8011096:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801109e:	78fa      	ldrb	r2, [r7, #3]
 80110a0:	4611      	mov	r1, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f4 f8df 	bl	8005266 <HAL_HCD_HC_GetXferCount>
 80110a8:	4603      	mov	r3, r0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80110b2:	b590      	push	{r4, r7, lr}
 80110b4:	b089      	sub	sp, #36	; 0x24
 80110b6:	af04      	add	r7, sp, #16
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	4608      	mov	r0, r1
 80110bc:	4611      	mov	r1, r2
 80110be:	461a      	mov	r2, r3
 80110c0:	4603      	mov	r3, r0
 80110c2:	70fb      	strb	r3, [r7, #3]
 80110c4:	460b      	mov	r3, r1
 80110c6:	70bb      	strb	r3, [r7, #2]
 80110c8:	4613      	mov	r3, r2
 80110ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110d0:	2300      	movs	r3, #0
 80110d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80110da:	787c      	ldrb	r4, [r7, #1]
 80110dc:	78ba      	ldrb	r2, [r7, #2]
 80110de:	78f9      	ldrb	r1, [r7, #3]
 80110e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110e2:	9302      	str	r3, [sp, #8]
 80110e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	4623      	mov	r3, r4
 80110f2:	f7f3 fd23 	bl	8004b3c <HAL_HCD_HC_Init>
 80110f6:	4603      	mov	r3, r0
 80110f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f000 f8f3 	bl	80112e8 <USBH_Get_USB_Status>
 8011102:	4603      	mov	r3, r0
 8011104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011106:	7bbb      	ldrb	r3, [r7, #14]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3714      	adds	r7, #20
 801110c:	46bd      	mov	sp, r7
 801110e:	bd90      	pop	{r4, r7, pc}

08011110 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801112a:	78fa      	ldrb	r2, [r7, #3]
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7f3 fd9c 	bl	8004c6c <HAL_HCD_HC_Halt>
 8011134:	4603      	mov	r3, r0
 8011136:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011138:	7bfb      	ldrb	r3, [r7, #15]
 801113a:	4618      	mov	r0, r3
 801113c:	f000 f8d4 	bl	80112e8 <USBH_Get_USB_Status>
 8011140:	4603      	mov	r3, r0
 8011142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011144:	7bbb      	ldrb	r3, [r7, #14]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801114e:	b590      	push	{r4, r7, lr}
 8011150:	b089      	sub	sp, #36	; 0x24
 8011152:	af04      	add	r7, sp, #16
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	4608      	mov	r0, r1
 8011158:	4611      	mov	r1, r2
 801115a:	461a      	mov	r2, r3
 801115c:	4603      	mov	r3, r0
 801115e:	70fb      	strb	r3, [r7, #3]
 8011160:	460b      	mov	r3, r1
 8011162:	70bb      	strb	r3, [r7, #2]
 8011164:	4613      	mov	r3, r2
 8011166:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011168:	2300      	movs	r3, #0
 801116a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801116c:	2300      	movs	r3, #0
 801116e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011176:	787c      	ldrb	r4, [r7, #1]
 8011178:	78ba      	ldrb	r2, [r7, #2]
 801117a:	78f9      	ldrb	r1, [r7, #3]
 801117c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011180:	9303      	str	r3, [sp, #12]
 8011182:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	4623      	mov	r3, r4
 8011192:	f7f3 fd8f 	bl	8004cb4 <HAL_HCD_HC_SubmitRequest>
 8011196:	4603      	mov	r3, r0
 8011198:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801119a:	7bfb      	ldrb	r3, [r7, #15]
 801119c:	4618      	mov	r0, r3
 801119e:	f000 f8a3 	bl	80112e8 <USBH_Get_USB_Status>
 80111a2:	4603      	mov	r3, r0
 80111a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3714      	adds	r7, #20
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd90      	pop	{r4, r7, pc}

080111b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	460b      	mov	r3, r1
 80111ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111c2:	78fa      	ldrb	r2, [r7, #3]
 80111c4:	4611      	mov	r1, r2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7f4 f838 	bl	800523c <HAL_HCD_HC_GetURBState>
 80111cc:	4603      	mov	r3, r0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b082      	sub	sp, #8
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	460b      	mov	r3, r1
 80111e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d103      	bne.n	80111f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80111ec:	78fb      	ldrb	r3, [r7, #3]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 f8a6 	bl	8011340 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80111f4:	20c8      	movs	r0, #200	; 0xc8
 80111f6:	f7f1 fd09 	bl	8002c0c <HAL_Delay>
  return USBH_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
 8011210:	4613      	mov	r3, r2
 8011212:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801121a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801121c:	78fa      	ldrb	r2, [r7, #3]
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	4613      	mov	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4413      	add	r3, r2
 8011226:	00db      	lsls	r3, r3, #3
 8011228:	440b      	add	r3, r1
 801122a:	333b      	adds	r3, #59	; 0x3b
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00a      	beq.n	8011248 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011232:	78fa      	ldrb	r2, [r7, #3]
 8011234:	68f9      	ldr	r1, [r7, #12]
 8011236:	4613      	mov	r3, r2
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	4413      	add	r3, r2
 801123c:	00db      	lsls	r3, r3, #3
 801123e:	440b      	add	r3, r1
 8011240:	3350      	adds	r3, #80	; 0x50
 8011242:	78ba      	ldrb	r2, [r7, #2]
 8011244:	701a      	strb	r2, [r3, #0]
 8011246:	e009      	b.n	801125c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011248:	78fa      	ldrb	r2, [r7, #3]
 801124a:	68f9      	ldr	r1, [r7, #12]
 801124c:	4613      	mov	r3, r2
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	440b      	add	r3, r1
 8011256:	3351      	adds	r3, #81	; 0x51
 8011258:	78ba      	ldrb	r2, [r7, #2]
 801125a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3714      	adds	r7, #20
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801126a:	b480      	push	{r7}
 801126c:	b085      	sub	sp, #20
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	460b      	mov	r3, r1
 8011274:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011280:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011282:	78fa      	ldrb	r2, [r7, #3]
 8011284:	68b9      	ldr	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	4413      	add	r3, r2
 801128c:	00db      	lsls	r3, r3, #3
 801128e:	440b      	add	r3, r1
 8011290:	333b      	adds	r3, #59	; 0x3b
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00a      	beq.n	80112ae <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011298:	78fa      	ldrb	r2, [r7, #3]
 801129a:	68b9      	ldr	r1, [r7, #8]
 801129c:	4613      	mov	r3, r2
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	4413      	add	r3, r2
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	440b      	add	r3, r1
 80112a6:	3350      	adds	r3, #80	; 0x50
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	73fb      	strb	r3, [r7, #15]
 80112ac:	e009      	b.n	80112c2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80112ae:	78fa      	ldrb	r2, [r7, #3]
 80112b0:	68b9      	ldr	r1, [r7, #8]
 80112b2:	4613      	mov	r3, r2
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	4413      	add	r3, r2
 80112b8:	00db      	lsls	r3, r3, #3
 80112ba:	440b      	add	r3, r1
 80112bc:	3351      	adds	r3, #81	; 0x51
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7f1 fc97 	bl	8002c0c <HAL_Delay>
}
 80112de:	bf00      	nop
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	4603      	mov	r3, r0
 80112f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112f6:	79fb      	ldrb	r3, [r7, #7]
 80112f8:	2b03      	cmp	r3, #3
 80112fa:	d817      	bhi.n	801132c <USBH_Get_USB_Status+0x44>
 80112fc:	a201      	add	r2, pc, #4	; (adr r2, 8011304 <USBH_Get_USB_Status+0x1c>)
 80112fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011302:	bf00      	nop
 8011304:	08011315 	.word	0x08011315
 8011308:	0801131b 	.word	0x0801131b
 801130c:	08011321 	.word	0x08011321
 8011310:	08011327 	.word	0x08011327
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011314:	2300      	movs	r3, #0
 8011316:	73fb      	strb	r3, [r7, #15]
    break;
 8011318:	e00b      	b.n	8011332 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801131a:	2302      	movs	r3, #2
 801131c:	73fb      	strb	r3, [r7, #15]
    break;
 801131e:	e008      	b.n	8011332 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011320:	2301      	movs	r3, #1
 8011322:	73fb      	strb	r3, [r7, #15]
    break;
 8011324:	e005      	b.n	8011332 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011326:	2302      	movs	r3, #2
 8011328:	73fb      	strb	r3, [r7, #15]
    break;
 801132a:	e002      	b.n	8011332 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801132c:	2302      	movs	r3, #2
 801132e:	73fb      	strb	r3, [r7, #15]
    break;
 8011330:	bf00      	nop
  }
  return usb_status;
 8011332:	7bfb      	ldrb	r3, [r7, #15]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3714      	adds	r7, #20
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	4603      	mov	r3, r0
 8011348:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801134a:	79fb      	ldrb	r3, [r7, #7]
 801134c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801134e:	79fb      	ldrb	r3, [r7, #7]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d102      	bne.n	801135a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011354:	2301      	movs	r3, #1
 8011356:	73fb      	strb	r3, [r7, #15]
 8011358:	e001      	b.n	801135e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801135a:	2300      	movs	r3, #0
 801135c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801135e:	7bfb      	ldrb	r3, [r7, #15]
 8011360:	461a      	mov	r2, r3
 8011362:	2101      	movs	r1, #1
 8011364:	4803      	ldr	r0, [pc, #12]	; (8011374 <MX_DriverVbusFS+0x34>)
 8011366:	f7f3 fb03 	bl	8004970 <HAL_GPIO_WritePin>
}
 801136a:	bf00      	nop
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	40020800 	.word	0x40020800

08011378 <arm_max_f32>:
 8011378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137c:	1e4f      	subs	r7, r1, #1
 801137e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8011382:	f100 0e04 	add.w	lr, r0, #4
 8011386:	edd0 7a00 	vldr	s15, [r0]
 801138a:	d058      	beq.n	801143e <arm_max_f32+0xc6>
 801138c:	3014      	adds	r0, #20
 801138e:	46c4      	mov	ip, r8
 8011390:	2604      	movs	r6, #4
 8011392:	2400      	movs	r4, #0
 8011394:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011398:	ed50 6a03 	vldr	s13, [r0, #-12]
 801139c:	ed10 7a02 	vldr	s14, [r0, #-8]
 80113a0:	ed50 5a01 	vldr	s11, [r0, #-4]
 80113a4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80113a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ac:	bfc8      	it	gt
 80113ae:	eef0 7a46 	vmovgt.f32	s15, s12
 80113b2:	f1a6 0503 	sub.w	r5, r6, #3
 80113b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113ba:	bfc8      	it	gt
 80113bc:	462c      	movgt	r4, r5
 80113be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c2:	bf48      	it	mi
 80113c4:	eef0 7a66 	vmovmi.f32	s15, s13
 80113c8:	f1a6 0502 	sub.w	r5, r6, #2
 80113cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113d0:	bf48      	it	mi
 80113d2:	462c      	movmi	r4, r5
 80113d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d8:	bf48      	it	mi
 80113da:	eef0 7a47 	vmovmi.f32	s15, s14
 80113de:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80113e2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80113e6:	bf48      	it	mi
 80113e8:	462c      	movmi	r4, r5
 80113ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ee:	bf48      	it	mi
 80113f0:	4634      	movmi	r4, r6
 80113f2:	bf48      	it	mi
 80113f4:	eef0 7a65 	vmovmi.f32	s15, s11
 80113f8:	f1bc 0c01 	subs.w	ip, ip, #1
 80113fc:	f106 0604 	add.w	r6, r6, #4
 8011400:	f100 0010 	add.w	r0, r0, #16
 8011404:	d1c6      	bne.n	8011394 <arm_max_f32+0x1c>
 8011406:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801140a:	f017 0003 	ands.w	r0, r7, #3
 801140e:	d018      	beq.n	8011442 <arm_max_f32+0xca>
 8011410:	1a08      	subs	r0, r1, r0
 8011412:	ecbe 7a01 	vldmia	lr!, {s14}
 8011416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141e:	bfc8      	it	gt
 8011420:	4604      	movgt	r4, r0
 8011422:	f100 0001 	add.w	r0, r0, #1
 8011426:	bfd8      	it	le
 8011428:	eeb0 7a67 	vmovle.f32	s14, s15
 801142c:	4288      	cmp	r0, r1
 801142e:	eef0 7a47 	vmov.f32	s15, s14
 8011432:	d1ee      	bne.n	8011412 <arm_max_f32+0x9a>
 8011434:	ed82 7a00 	vstr	s14, [r2]
 8011438:	601c      	str	r4, [r3, #0]
 801143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143e:	4644      	mov	r4, r8
 8011440:	e7e3      	b.n	801140a <arm_max_f32+0x92>
 8011442:	eeb0 7a67 	vmov.f32	s14, s15
 8011446:	e7f5      	b.n	8011434 <arm_max_f32+0xbc>

08011448 <arm_cfft_radix8by2_f32>:
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	ed2d 8b08 	vpush	{d8-d11}
 8011450:	f8b0 e000 	ldrh.w	lr, [r0]
 8011454:	6842      	ldr	r2, [r0, #4]
 8011456:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801145a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 801145e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011462:	4607      	mov	r7, r0
 8011464:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8011468:	f000 80af 	beq.w	80115ca <arm_cfft_radix8by2_f32+0x182>
 801146c:	3310      	adds	r3, #16
 801146e:	18ce      	adds	r6, r1, r3
 8011470:	3210      	adds	r2, #16
 8011472:	4443      	add	r3, r8
 8011474:	f101 0510 	add.w	r5, r1, #16
 8011478:	f108 0410 	add.w	r4, r8, #16
 801147c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8011480:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011484:	ed53 3a03 	vldr	s7, [r3, #-12]
 8011488:	ed53 5a02 	vldr	s11, [r3, #-8]
 801148c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8011490:	ed54 6a03 	vldr	s13, [r4, #-12]
 8011494:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011498:	ed16 2a04 	vldr	s4, [r6, #-16]
 801149c:	ed56 2a03 	vldr	s5, [r6, #-12]
 80114a0:	ed15 6a03 	vldr	s12, [r5, #-12]
 80114a4:	ed15 7a01 	vldr	s14, [r5, #-4]
 80114a8:	ed15 3a04 	vldr	s6, [r5, #-16]
 80114ac:	ed54 7a01 	vldr	s15, [r4, #-4]
 80114b0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80114b4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80114b8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80114bc:	ee73 ba21 	vadd.f32	s23, s6, s3
 80114c0:	ee36 ba26 	vadd.f32	s22, s12, s13
 80114c4:	ee37 aa27 	vadd.f32	s20, s14, s15
 80114c8:	ee72 9a04 	vadd.f32	s19, s4, s8
 80114cc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80114d0:	ee31 8a05 	vadd.f32	s16, s2, s10
 80114d4:	ee74 aa80 	vadd.f32	s21, s9, s0
 80114d8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80114dc:	ed45 ba04 	vstr	s23, [r5, #-16]
 80114e0:	ed05 ba03 	vstr	s22, [r5, #-12]
 80114e4:	ed45 aa02 	vstr	s21, [r5, #-8]
 80114e8:	ed05 aa01 	vstr	s20, [r5, #-4]
 80114ec:	ed06 8a01 	vstr	s16, [r6, #-4]
 80114f0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80114f4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80114f8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80114fc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011500:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011504:	ed12 6a03 	vldr	s12, [r2, #-12]
 8011508:	ed52 2a04 	vldr	s5, [r2, #-16]
 801150c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011510:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011514:	ee26 8a86 	vmul.f32	s16, s13, s12
 8011518:	ee24 2a06 	vmul.f32	s4, s8, s12
 801151c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8011520:	ee24 4a22 	vmul.f32	s8, s8, s5
 8011524:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011528:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801152c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8011530:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011534:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011538:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801153c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8011540:	ee71 2a88 	vadd.f32	s5, s3, s16
 8011544:	ed44 6a03 	vstr	s13, [r4, #-12]
 8011548:	ed44 2a04 	vstr	s5, [r4, #-16]
 801154c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8011550:	ed03 6a03 	vstr	s12, [r3, #-12]
 8011554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011558:	ee75 6ae0 	vsub.f32	s13, s11, s1
 801155c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011560:	ed52 5a02 	vldr	s11, [r2, #-8]
 8011564:	ee35 6a41 	vsub.f32	s12, s10, s2
 8011568:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801156c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8011570:	ee26 5a87 	vmul.f32	s10, s13, s14
 8011574:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8011578:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801157c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011580:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011584:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011588:	ee26 6a25 	vmul.f32	s12, s12, s11
 801158c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011590:	ee74 5a23 	vadd.f32	s11, s8, s7
 8011594:	ee35 6a46 	vsub.f32	s12, s10, s12
 8011598:	ee37 7a26 	vadd.f32	s14, s14, s13
 801159c:	f1be 0e01 	subs.w	lr, lr, #1
 80115a0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80115a4:	f105 0510 	add.w	r5, r5, #16
 80115a8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80115ac:	f106 0610 	add.w	r6, r6, #16
 80115b0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80115b4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80115b8:	f102 0210 	add.w	r2, r2, #16
 80115bc:	f104 0410 	add.w	r4, r4, #16
 80115c0:	f103 0310 	add.w	r3, r3, #16
 80115c4:	f47f af5a 	bne.w	801147c <arm_cfft_radix8by2_f32+0x34>
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	fa1f f48c 	uxth.w	r4, ip
 80115ce:	4608      	mov	r0, r1
 80115d0:	2302      	movs	r3, #2
 80115d2:	4621      	mov	r1, r4
 80115d4:	f000 fe40 	bl	8012258 <arm_radix8_butterfly_f32>
 80115d8:	ecbd 8b08 	vpop	{d8-d11}
 80115dc:	4640      	mov	r0, r8
 80115de:	4621      	mov	r1, r4
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	2302      	movs	r3, #2
 80115e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115e8:	f000 be36 	b.w	8012258 <arm_radix8_butterfly_f32>

080115ec <arm_cfft_radix8by4_f32>:
 80115ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f0:	ed2d 8b0a 	vpush	{d8-d12}
 80115f4:	8802      	ldrh	r2, [r0, #0]
 80115f6:	ed91 6a00 	vldr	s12, [r1]
 80115fa:	b08f      	sub	sp, #60	; 0x3c
 80115fc:	460f      	mov	r7, r1
 80115fe:	0852      	lsrs	r2, r2, #1
 8011600:	0093      	lsls	r3, r2, #2
 8011602:	900c      	str	r0, [sp, #48]	; 0x30
 8011604:	9103      	str	r1, [sp, #12]
 8011606:	6841      	ldr	r1, [r0, #4]
 8011608:	ed97 7a01 	vldr	s14, [r7, #4]
 801160c:	4638      	mov	r0, r7
 801160e:	4418      	add	r0, r3
 8011610:	4606      	mov	r6, r0
 8011612:	9009      	str	r0, [sp, #36]	; 0x24
 8011614:	4418      	add	r0, r3
 8011616:	edd0 6a00 	vldr	s13, [r0]
 801161a:	edd6 3a00 	vldr	s7, [r6]
 801161e:	edd6 2a01 	vldr	s5, [r6, #4]
 8011622:	edd0 7a01 	vldr	s15, [r0, #4]
 8011626:	900a      	str	r0, [sp, #40]	; 0x28
 8011628:	ee76 5a26 	vadd.f32	s11, s12, s13
 801162c:	4604      	mov	r4, r0
 801162e:	4625      	mov	r5, r4
 8011630:	441c      	add	r4, r3
 8011632:	ed94 4a00 	vldr	s8, [r4]
 8011636:	ed94 5a01 	vldr	s10, [r4, #4]
 801163a:	9401      	str	r4, [sp, #4]
 801163c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8011640:	4630      	mov	r0, r6
 8011642:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011646:	463e      	mov	r6, r7
 8011648:	ee14 ea90 	vmov	lr, s9
 801164c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011650:	f846 eb08 	str.w	lr, [r6], #8
 8011654:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011658:	edd0 4a01 	vldr	s9, [r0, #4]
 801165c:	9604      	str	r6, [sp, #16]
 801165e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011662:	9e01      	ldr	r6, [sp, #4]
 8011664:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8011668:	ed96 2a01 	vldr	s4, [r6, #4]
 801166c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8011670:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8011674:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8011678:	ee36 6a62 	vsub.f32	s12, s12, s5
 801167c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011680:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8011684:	ee73 3a45 	vsub.f32	s7, s6, s10
 8011688:	4604      	mov	r4, r0
 801168a:	ee36 6a45 	vsub.f32	s12, s12, s10
 801168e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8011692:	46a3      	mov	fp, r4
 8011694:	ee37 7a02 	vadd.f32	s14, s14, s4
 8011698:	ee34 5a84 	vadd.f32	s10, s9, s8
 801169c:	ee13 8a90 	vmov	r8, s7
 80116a0:	46a4      	mov	ip, r4
 80116a2:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80116a6:	ed87 7a01 	vstr	s14, [r7, #4]
 80116aa:	f84b 8b08 	str.w	r8, [fp], #8
 80116ae:	f1ac 0704 	sub.w	r7, ip, #4
 80116b2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80116b6:	f101 0c08 	add.w	ip, r1, #8
 80116ba:	462c      	mov	r4, r5
 80116bc:	f8cd c014 	str.w	ip, [sp, #20]
 80116c0:	ee15 ca90 	vmov	ip, s11
 80116c4:	f844 cb08 	str.w	ip, [r4], #8
 80116c8:	9407      	str	r4, [sp, #28]
 80116ca:	f101 0410 	add.w	r4, r1, #16
 80116ce:	ed85 6a01 	vstr	s12, [r5, #4]
 80116d2:	0852      	lsrs	r2, r2, #1
 80116d4:	9402      	str	r4, [sp, #8]
 80116d6:	462c      	mov	r4, r5
 80116d8:	f101 0518 	add.w	r5, r1, #24
 80116dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80116de:	46b2      	mov	sl, r6
 80116e0:	9506      	str	r5, [sp, #24]
 80116e2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80116e6:	3a02      	subs	r2, #2
 80116e8:	ee16 5a90 	vmov	r5, s13
 80116ec:	46b6      	mov	lr, r6
 80116ee:	4630      	mov	r0, r6
 80116f0:	0852      	lsrs	r2, r2, #1
 80116f2:	f84a 5b08 	str.w	r5, [sl], #8
 80116f6:	f1a0 0604 	sub.w	r6, r0, #4
 80116fa:	edce 7a01 	vstr	s15, [lr, #4]
 80116fe:	9208      	str	r2, [sp, #32]
 8011700:	f000 8130 	beq.w	8011964 <arm_cfft_radix8by4_f32+0x378>
 8011704:	4691      	mov	r9, r2
 8011706:	9a03      	ldr	r2, [sp, #12]
 8011708:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801170c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011710:	3b08      	subs	r3, #8
 8011712:	f102 0510 	add.w	r5, r2, #16
 8011716:	f101 0c20 	add.w	ip, r1, #32
 801171a:	f1a4 020c 	sub.w	r2, r4, #12
 801171e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8011722:	4433      	add	r3, r6
 8011724:	3410      	adds	r4, #16
 8011726:	4650      	mov	r0, sl
 8011728:	4659      	mov	r1, fp
 801172a:	ed55 3a02 	vldr	s7, [r5, #-8]
 801172e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8011732:	ed91 7a00 	vldr	s14, [r1]
 8011736:	edd0 7a00 	vldr	s15, [r0]
 801173a:	ed15 4a01 	vldr	s8, [r5, #-4]
 801173e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8011742:	edd0 6a01 	vldr	s13, [r0, #4]
 8011746:	ed91 6a01 	vldr	s12, [r1, #4]
 801174a:	ee33 8a85 	vadd.f32	s16, s7, s10
 801174e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8011752:	ee78 4a07 	vadd.f32	s9, s16, s14
 8011756:	ee74 5a65 	vsub.f32	s11, s8, s11
 801175a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 801175e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011762:	ed45 4a02 	vstr	s9, [r5, #-8]
 8011766:	edd1 4a01 	vldr	s9, [r1, #4]
 801176a:	ed90 4a01 	vldr	s8, [r0, #4]
 801176e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8011772:	ee76 aa05 	vadd.f32	s21, s12, s10
 8011776:	ee74 4a84 	vadd.f32	s9, s9, s8
 801177a:	ee35 aac7 	vsub.f32	s20, s11, s14
 801177e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8011782:	edd6 1a00 	vldr	s3, [r6]
 8011786:	edd7 0a00 	vldr	s1, [r7]
 801178a:	ed92 4a02 	vldr	s8, [r2, #8]
 801178e:	edd3 3a02 	vldr	s7, [r3, #8]
 8011792:	ed93 2a01 	vldr	s4, [r3, #4]
 8011796:	ed16 1a01 	vldr	s2, [r6, #-4]
 801179a:	edd2 2a01 	vldr	s5, [r2, #4]
 801179e:	ed57 9a01 	vldr	s19, [r7, #-4]
 80117a2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80117a6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80117aa:	ee74 8a84 	vadd.f32	s17, s9, s8
 80117ae:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80117b2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80117b6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80117ba:	ee18 aa90 	vmov	sl, s17
 80117be:	f847 a908 	str.w	sl, [r7], #-8
 80117c2:	edd2 8a01 	vldr	s17, [r2, #4]
 80117c6:	ed93 9a01 	vldr	s18, [r3, #4]
 80117ca:	ee73 8a28 	vadd.f32	s17, s6, s17
 80117ce:	ee3a aa27 	vadd.f32	s20, s20, s15
 80117d2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80117d6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80117da:	edc7 8a01 	vstr	s17, [r7, #4]
 80117de:	ed18 ba02 	vldr	s22, [r8, #-8]
 80117e2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80117e6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80117ea:	ee6a ba28 	vmul.f32	s23, s20, s17
 80117ee:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80117f2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80117f6:	ee30 9a81 	vadd.f32	s18, s1, s2
 80117fa:	ee79 9a82 	vadd.f32	s19, s19, s4
 80117fe:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8011802:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8011806:	ee69 baa8 	vmul.f32	s23, s19, s17
 801180a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 801180e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8011812:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011816:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801181a:	ee1c aa10 	vmov	sl, s24
 801181e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8011822:	f841 ab08 	str.w	sl, [r1], #8
 8011826:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801182a:	ee3b bacb 	vsub.f32	s22, s23, s22
 801182e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8011832:	ee33 3a62 	vsub.f32	s6, s6, s5
 8011836:	ed01 aa01 	vstr	s20, [r1, #-4]
 801183a:	edc2 8a01 	vstr	s17, [r2, #4]
 801183e:	ed82 ba02 	vstr	s22, [r2, #8]
 8011842:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8011846:	ee74 3a63 	vsub.f32	s7, s8, s7
 801184a:	ee38 8a47 	vsub.f32	s16, s16, s14
 801184e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8011852:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011856:	ee33 3a42 	vsub.f32	s6, s6, s4
 801185a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801185e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011862:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8011866:	ee63 8a04 	vmul.f32	s17, s6, s8
 801186a:	ee28 aa24 	vmul.f32	s20, s16, s9
 801186e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8011872:	ee28 8a04 	vmul.f32	s16, s16, s8
 8011876:	ee20 0a24 	vmul.f32	s0, s0, s9
 801187a:	ee63 3a84 	vmul.f32	s7, s7, s8
 801187e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8011882:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8011886:	ee14 aa10 	vmov	sl, s8
 801188a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801188e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8011892:	ed44 9a02 	vstr	s19, [r4, #-8]
 8011896:	ee73 3ae4 	vsub.f32	s7, s7, s9
 801189a:	ed04 0a01 	vstr	s0, [r4, #-4]
 801189e:	f846 a908 	str.w	sl, [r6], #-8
 80118a2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80118a6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80118aa:	edc6 3a01 	vstr	s7, [r6, #4]
 80118ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80118b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118b6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80118ba:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80118be:	ee67 5a86 	vmul.f32	s11, s15, s12
 80118c2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80118c6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80118ca:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80118ce:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80118d2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80118d6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80118da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80118de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118e2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80118e6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80118ea:	ee21 1a07 	vmul.f32	s2, s2, s14
 80118ee:	ee15 aa90 	vmov	sl, s11
 80118f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118f6:	f840 ab08 	str.w	sl, [r0], #8
 80118fa:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80118fe:	ee76 2a22 	vadd.f32	s5, s12, s5
 8011902:	f1b9 0901 	subs.w	r9, r9, #1
 8011906:	ed40 7a01 	vstr	s15, [r0, #-4]
 801190a:	f105 0508 	add.w	r5, r5, #8
 801190e:	ed83 1a02 	vstr	s2, [r3, #8]
 8011912:	edc3 2a01 	vstr	s5, [r3, #4]
 8011916:	f108 0808 	add.w	r8, r8, #8
 801191a:	f1a2 0208 	sub.w	r2, r2, #8
 801191e:	f10c 0c10 	add.w	ip, ip, #16
 8011922:	f104 0408 	add.w	r4, r4, #8
 8011926:	f10e 0e18 	add.w	lr, lr, #24
 801192a:	f1a3 0308 	sub.w	r3, r3, #8
 801192e:	f47f aefc 	bne.w	801172a <arm_cfft_radix8by4_f32+0x13e>
 8011932:	9908      	ldr	r1, [sp, #32]
 8011934:	9802      	ldr	r0, [sp, #8]
 8011936:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801193a:	00cb      	lsls	r3, r1, #3
 801193c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011940:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8011944:	9102      	str	r1, [sp, #8]
 8011946:	9904      	ldr	r1, [sp, #16]
 8011948:	4419      	add	r1, r3
 801194a:	9104      	str	r1, [sp, #16]
 801194c:	9905      	ldr	r1, [sp, #20]
 801194e:	4419      	add	r1, r3
 8011950:	9105      	str	r1, [sp, #20]
 8011952:	9907      	ldr	r1, [sp, #28]
 8011954:	449b      	add	fp, r3
 8011956:	4419      	add	r1, r3
 8011958:	449a      	add	sl, r3
 801195a:	9b06      	ldr	r3, [sp, #24]
 801195c:	9107      	str	r1, [sp, #28]
 801195e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011962:	9306      	str	r3, [sp, #24]
 8011964:	9a04      	ldr	r2, [sp, #16]
 8011966:	9807      	ldr	r0, [sp, #28]
 8011968:	edd2 3a00 	vldr	s7, [r2]
 801196c:	ed90 4a00 	vldr	s8, [r0]
 8011970:	eddb 7a00 	vldr	s15, [fp]
 8011974:	ed9a 3a00 	vldr	s6, [sl]
 8011978:	edd2 4a01 	vldr	s9, [r2, #4]
 801197c:	ed90 7a01 	vldr	s14, [r0, #4]
 8011980:	ed9b 2a01 	vldr	s4, [fp, #4]
 8011984:	edda 5a01 	vldr	s11, [sl, #4]
 8011988:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801198c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801198e:	ee73 6a84 	vadd.f32	s13, s7, s8
 8011992:	ee34 6a87 	vadd.f32	s12, s9, s14
 8011996:	ee36 5aa7 	vadd.f32	s10, s13, s15
 801199a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801199e:	ee33 5a05 	vadd.f32	s10, s6, s10
 80119a2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80119a6:	ed82 5a00 	vstr	s10, [r2]
 80119aa:	ed9b 5a01 	vldr	s10, [fp, #4]
 80119ae:	edda 4a01 	vldr	s9, [sl, #4]
 80119b2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80119b6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80119ba:	ee35 5a24 	vadd.f32	s10, s10, s9
 80119be:	ee77 4a67 	vsub.f32	s9, s14, s15
 80119c2:	ed82 5a01 	vstr	s10, [r2, #4]
 80119c6:	9a05      	ldr	r2, [sp, #20]
 80119c8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80119cc:	edd2 1a00 	vldr	s3, [r2]
 80119d0:	edd2 2a01 	vldr	s5, [r2, #4]
 80119d4:	9a02      	ldr	r2, [sp, #8]
 80119d6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80119da:	ee36 6a42 	vsub.f32	s12, s12, s4
 80119de:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80119e2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80119e6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80119ea:	ee25 5a21 	vmul.f32	s10, s10, s3
 80119ee:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80119f2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80119f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80119fa:	edcb 2a00 	vstr	s5, [fp]
 80119fe:	ed8b 5a01 	vstr	s10, [fp, #4]
 8011a02:	edd2 3a01 	vldr	s7, [r2, #4]
 8011a06:	ed92 5a00 	vldr	s10, [r2]
 8011a0a:	9a06      	ldr	r2, [sp, #24]
 8011a0c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011a10:	ee36 6a65 	vsub.f32	s12, s12, s11
 8011a14:	ee66 4a85 	vmul.f32	s9, s13, s10
 8011a18:	ee26 5a05 	vmul.f32	s10, s12, s10
 8011a1c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011a20:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011a24:	ee75 6a66 	vsub.f32	s13, s10, s13
 8011a28:	ee34 6a86 	vadd.f32	s12, s9, s12
 8011a2c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a34:	edc0 6a01 	vstr	s13, [r0, #4]
 8011a38:	ed80 6a00 	vstr	s12, [r0]
 8011a3c:	ed92 6a01 	vldr	s12, [r2, #4]
 8011a40:	9803      	ldr	r0, [sp, #12]
 8011a42:	ee77 7a43 	vsub.f32	s15, s14, s6
 8011a46:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011a4a:	ed92 7a00 	vldr	s14, [r2]
 8011a4e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8011a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011a56:	ee65 5a86 	vmul.f32	s11, s11, s12
 8011a5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011a5e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a66:	edca 5a01 	vstr	s11, [sl, #4]
 8011a6a:	edca 7a00 	vstr	s15, [sl]
 8011a6e:	6872      	ldr	r2, [r6, #4]
 8011a70:	4621      	mov	r1, r4
 8011a72:	2304      	movs	r3, #4
 8011a74:	f000 fbf0 	bl	8012258 <arm_radix8_butterfly_f32>
 8011a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a7a:	6872      	ldr	r2, [r6, #4]
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	2304      	movs	r3, #4
 8011a80:	f000 fbea 	bl	8012258 <arm_radix8_butterfly_f32>
 8011a84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a86:	6872      	ldr	r2, [r6, #4]
 8011a88:	4621      	mov	r1, r4
 8011a8a:	2304      	movs	r3, #4
 8011a8c:	f000 fbe4 	bl	8012258 <arm_radix8_butterfly_f32>
 8011a90:	9801      	ldr	r0, [sp, #4]
 8011a92:	6872      	ldr	r2, [r6, #4]
 8011a94:	4621      	mov	r1, r4
 8011a96:	2304      	movs	r3, #4
 8011a98:	b00f      	add	sp, #60	; 0x3c
 8011a9a:	ecbd 8b0a 	vpop	{d8-d12}
 8011a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa2:	f000 bbd9 	b.w	8012258 <arm_radix8_butterfly_f32>
 8011aa6:	bf00      	nop

08011aa8 <arm_cfft_f32>:
 8011aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aac:	2a01      	cmp	r2, #1
 8011aae:	4606      	mov	r6, r0
 8011ab0:	4617      	mov	r7, r2
 8011ab2:	460c      	mov	r4, r1
 8011ab4:	4698      	mov	r8, r3
 8011ab6:	8805      	ldrh	r5, [r0, #0]
 8011ab8:	d054      	beq.n	8011b64 <arm_cfft_f32+0xbc>
 8011aba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011abe:	d04c      	beq.n	8011b5a <arm_cfft_f32+0xb2>
 8011ac0:	d916      	bls.n	8011af0 <arm_cfft_f32+0x48>
 8011ac2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8011ac6:	d01a      	beq.n	8011afe <arm_cfft_f32+0x56>
 8011ac8:	d95c      	bls.n	8011b84 <arm_cfft_f32+0xdc>
 8011aca:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8011ace:	d044      	beq.n	8011b5a <arm_cfft_f32+0xb2>
 8011ad0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8011ad4:	d105      	bne.n	8011ae2 <arm_cfft_f32+0x3a>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	4629      	mov	r1, r5
 8011ada:	6872      	ldr	r2, [r6, #4]
 8011adc:	2301      	movs	r3, #1
 8011ade:	f000 fbbb 	bl	8012258 <arm_radix8_butterfly_f32>
 8011ae2:	f1b8 0f00 	cmp.w	r8, #0
 8011ae6:	d111      	bne.n	8011b0c <arm_cfft_f32+0x64>
 8011ae8:	2f01      	cmp	r7, #1
 8011aea:	d016      	beq.n	8011b1a <arm_cfft_f32+0x72>
 8011aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af0:	2d20      	cmp	r5, #32
 8011af2:	d032      	beq.n	8011b5a <arm_cfft_f32+0xb2>
 8011af4:	d94a      	bls.n	8011b8c <arm_cfft_f32+0xe4>
 8011af6:	2d40      	cmp	r5, #64	; 0x40
 8011af8:	d0ed      	beq.n	8011ad6 <arm_cfft_f32+0x2e>
 8011afa:	2d80      	cmp	r5, #128	; 0x80
 8011afc:	d1f1      	bne.n	8011ae2 <arm_cfft_f32+0x3a>
 8011afe:	4630      	mov	r0, r6
 8011b00:	4621      	mov	r1, r4
 8011b02:	f7ff fca1 	bl	8011448 <arm_cfft_radix8by2_f32>
 8011b06:	f1b8 0f00 	cmp.w	r8, #0
 8011b0a:	d0ed      	beq.n	8011ae8 <arm_cfft_f32+0x40>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	89b1      	ldrh	r1, [r6, #12]
 8011b10:	68b2      	ldr	r2, [r6, #8]
 8011b12:	f7ee fb5d 	bl	80001d0 <arm_bitreversal_32>
 8011b16:	2f01      	cmp	r7, #1
 8011b18:	d1e8      	bne.n	8011aec <arm_cfft_f32+0x44>
 8011b1a:	ee07 5a90 	vmov	s15, r5
 8011b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b26:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8011b2a:	2d00      	cmp	r5, #0
 8011b2c:	d0de      	beq.n	8011aec <arm_cfft_f32+0x44>
 8011b2e:	f104 0108 	add.w	r1, r4, #8
 8011b32:	2300      	movs	r3, #0
 8011b34:	3301      	adds	r3, #1
 8011b36:	429d      	cmp	r5, r3
 8011b38:	f101 0108 	add.w	r1, r1, #8
 8011b3c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8011b40:	ed51 7a03 	vldr	s15, [r1, #-12]
 8011b44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b48:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011b4c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8011b50:	ed41 7a03 	vstr	s15, [r1, #-12]
 8011b54:	d1ee      	bne.n	8011b34 <arm_cfft_f32+0x8c>
 8011b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f7ff fd45 	bl	80115ec <arm_cfft_radix8by4_f32>
 8011b62:	e7be      	b.n	8011ae2 <arm_cfft_f32+0x3a>
 8011b64:	b1ad      	cbz	r5, 8011b92 <arm_cfft_f32+0xea>
 8011b66:	f101 030c 	add.w	r3, r1, #12
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8011b70:	3201      	adds	r2, #1
 8011b72:	eef1 7a67 	vneg.f32	s15, s15
 8011b76:	4295      	cmp	r5, r2
 8011b78:	ed43 7a02 	vstr	s15, [r3, #-8]
 8011b7c:	f103 0308 	add.w	r3, r3, #8
 8011b80:	d1f4      	bne.n	8011b6c <arm_cfft_f32+0xc4>
 8011b82:	e79a      	b.n	8011aba <arm_cfft_f32+0x12>
 8011b84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8011b88:	d0a5      	beq.n	8011ad6 <arm_cfft_f32+0x2e>
 8011b8a:	e7aa      	b.n	8011ae2 <arm_cfft_f32+0x3a>
 8011b8c:	2d10      	cmp	r5, #16
 8011b8e:	d0b6      	beq.n	8011afe <arm_cfft_f32+0x56>
 8011b90:	e7a7      	b.n	8011ae2 <arm_cfft_f32+0x3a>
 8011b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011b96:	d894      	bhi.n	8011ac2 <arm_cfft_f32+0x1a>
 8011b98:	e7aa      	b.n	8011af0 <arm_cfft_f32+0x48>
 8011b9a:	bf00      	nop

08011b9c <arm_fir_init_f32>:
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	9c04      	ldr	r4, [sp, #16]
 8011ba0:	6082      	str	r2, [r0, #8]
 8011ba2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8011ba6:	3c01      	subs	r4, #1
 8011ba8:	4605      	mov	r5, r0
 8011baa:	440c      	add	r4, r1
 8011bac:	8001      	strh	r1, [r0, #0]
 8011bae:	461e      	mov	r6, r3
 8011bb0:	00a2      	lsls	r2, r4, #2
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	f000 fe96 	bl	80128e6 <memset>
 8011bba:	606e      	str	r6, [r5, #4]
 8011bbc:	bd70      	pop	{r4, r5, r6, pc}
 8011bbe:	bf00      	nop

08011bc0 <arm_fir_f32>:
 8011bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc4:	ed2d 8b10 	vpush	{d8-d15}
 8011bc8:	b089      	sub	sp, #36	; 0x24
 8011bca:	4605      	mov	r5, r0
 8011bcc:	9003      	str	r0, [sp, #12]
 8011bce:	8800      	ldrh	r0, [r0, #0]
 8011bd0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011bd4:	9304      	str	r3, [sp, #16]
 8011bd6:	461e      	mov	r6, r3
 8011bd8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8011be2:	08f3      	lsrs	r3, r6, #3
 8011be4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011be8:	9001      	str	r0, [sp, #4]
 8011bea:	4625      	mov	r5, r4
 8011bec:	9400      	str	r4, [sp, #0]
 8011bee:	9302      	str	r3, [sp, #8]
 8011bf0:	f000 81ee 	beq.w	8011fd0 <arm_fir_f32+0x410>
 8011bf4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8011bf8:	469e      	mov	lr, r3
 8011bfa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8011bfe:	1f1e      	subs	r6, r3, #4
 8011c00:	4604      	mov	r4, r0
 8011c02:	9605      	str	r6, [sp, #20]
 8011c04:	eb08 0003 	add.w	r0, r8, r3
 8011c08:	f004 0a07 	and.w	sl, r4, #7
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	f10c 0420 	add.w	r4, ip, #32
 8011c12:	f8cd c018 	str.w	ip, [sp, #24]
 8011c16:	4684      	mov	ip, r0
 8011c18:	4648      	mov	r0, r9
 8011c1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011c1e:	9107      	str	r1, [sp, #28]
 8011c20:	f105 0720 	add.w	r7, r5, #32
 8011c24:	f101 0620 	add.w	r6, r1, #32
 8011c28:	f102 0520 	add.w	r5, r2, #32
 8011c2c:	4652      	mov	r2, sl
 8011c2e:	469a      	mov	sl, r3
 8011c30:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8011c34:	f847 3c20 	str.w	r3, [r7, #-32]
 8011c38:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8011c3c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8011c40:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8011c44:	f847 3c18 	str.w	r3, [r7, #-24]
 8011c48:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8011c4c:	f847 3c14 	str.w	r3, [r7, #-20]
 8011c50:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8011c54:	f847 3c10 	str.w	r3, [r7, #-16]
 8011c58:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8011c5c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8011c60:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8011c64:	f847 3c08 	str.w	r3, [r7, #-8]
 8011c68:	eddf 3af1 	vldr	s7, [pc, #964]	; 8012030 <arm_fir_f32+0x470>
 8011c6c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c70:	f847 3c04 	str.w	r3, [r7, #-4]
 8011c74:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8011c78:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8011c7c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8011c80:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8011c84:	ed14 1a04 	vldr	s2, [r4, #-16]
 8011c88:	ed54 0a03 	vldr	s1, [r4, #-12]
 8011c8c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011c90:	1f21      	subs	r1, r4, #4
 8011c92:	eef0 8a63 	vmov.f32	s17, s7
 8011c96:	eef0 9a63 	vmov.f32	s19, s7
 8011c9a:	eef0 aa63 	vmov.f32	s21, s7
 8011c9e:	eef0 ba63 	vmov.f32	s23, s7
 8011ca2:	eeb0 ca63 	vmov.f32	s24, s7
 8011ca6:	eef0 ca63 	vmov.f32	s25, s7
 8011caa:	eeb0 da63 	vmov.f32	s26, s7
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f000 81e8 	beq.w	8012084 <arm_fir_f32+0x4c4>
 8011cb4:	f108 0120 	add.w	r1, r8, #32
 8011cb8:	f104 031c 	add.w	r3, r4, #28
 8011cbc:	4683      	mov	fp, r0
 8011cbe:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8011cc2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8011cc6:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8011cca:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8011cce:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8011cd2:	ed11 6a04 	vldr	s12, [r1, #-16]
 8011cd6:	ed51 6a03 	vldr	s13, [r1, #-12]
 8011cda:	ed11 7a02 	vldr	s14, [r1, #-8]
 8011cde:	ed51 7a01 	vldr	s15, [r1, #-4]
 8011ce2:	ee23 fa04 	vmul.f32	s30, s6, s8
 8011ce6:	ee62 ea84 	vmul.f32	s29, s5, s8
 8011cea:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8011cee:	ee22 ea04 	vmul.f32	s28, s4, s8
 8011cf2:	ee61 da84 	vmul.f32	s27, s3, s8
 8011cf6:	ee21 ba04 	vmul.f32	s22, s2, s8
 8011cfa:	ee20 aa84 	vmul.f32	s20, s1, s8
 8011cfe:	ee20 9a04 	vmul.f32	s18, s0, s8
 8011d02:	ee28 4a04 	vmul.f32	s8, s16, s8
 8011d06:	ee62 fa24 	vmul.f32	s31, s4, s9
 8011d0a:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8011d0e:	ee7b baad 	vadd.f32	s23, s23, s27
 8011d12:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8011d16:	ee61 da24 	vmul.f32	s27, s2, s9
 8011d1a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8011d1e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8011d22:	ee20 baa4 	vmul.f32	s22, s1, s9
 8011d26:	ee20 aa24 	vmul.f32	s20, s0, s9
 8011d2a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011d2e:	ee7c caae 	vadd.f32	s25, s25, s29
 8011d32:	ee22 faa4 	vmul.f32	s30, s5, s9
 8011d36:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011d3a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8011d3e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8011d42:	ee73 3a84 	vadd.f32	s7, s7, s8
 8011d46:	ee63 4a24 	vmul.f32	s9, s6, s9
 8011d4a:	ee22 4a05 	vmul.f32	s8, s4, s10
 8011d4e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8011d52:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8011d56:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011d5a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8011d5e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8011d62:	ee61 fa85 	vmul.f32	s31, s3, s10
 8011d66:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8011d6a:	ee7b daad 	vadd.f32	s27, s23, s27
 8011d6e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8011d72:	ee60 ba05 	vmul.f32	s23, s0, s10
 8011d76:	ee68 aa05 	vmul.f32	s21, s16, s10
 8011d7a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8011d7e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011d82:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8011d86:	ee63 4a05 	vmul.f32	s9, s6, s10
 8011d8a:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011d8e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8011d92:	ee20 ca25 	vmul.f32	s24, s0, s11
 8011d96:	ee3d da04 	vadd.f32	s26, s26, s8
 8011d9a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8011d9e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8011da2:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8011da6:	ed53 1a04 	vldr	s3, [r3, #-16]
 8011daa:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8011dae:	ee7d da8f 	vadd.f32	s27, s27, s30
 8011db2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8011db6:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8011dba:	ee68 ba25 	vmul.f32	s23, s16, s11
 8011dbe:	ee63 aa25 	vmul.f32	s21, s6, s11
 8011dc2:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8011dc6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8011dca:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8011dce:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011dd2:	ee61 4a06 	vmul.f32	s9, s2, s12
 8011dd6:	ee60 9a86 	vmul.f32	s19, s1, s12
 8011dda:	ee60 fa06 	vmul.f32	s31, s0, s12
 8011dde:	ed13 1a03 	vldr	s2, [r3, #-12]
 8011de2:	ee23 fa06 	vmul.f32	s30, s6, s12
 8011de6:	ee3d da04 	vadd.f32	s26, s26, s8
 8011dea:	ee7c ca89 	vadd.f32	s25, s25, s18
 8011dee:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8011df2:	ee28 9a06 	vmul.f32	s18, s16, s12
 8011df6:	ee7d da8c 	vadd.f32	s27, s27, s24
 8011dfa:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8011dfe:	ee22 ca86 	vmul.f32	s24, s5, s12
 8011e02:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8011e06:	ee78 8a85 	vadd.f32	s17, s17, s10
 8011e0a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011e0e:	ee62 5a06 	vmul.f32	s11, s4, s12
 8011e12:	ee21 6a86 	vmul.f32	s12, s3, s12
 8011e16:	ee20 4a26 	vmul.f32	s8, s0, s13
 8011e1a:	ee63 ea26 	vmul.f32	s29, s6, s13
 8011e1e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8011e22:	ee22 5a26 	vmul.f32	s10, s4, s13
 8011e26:	ee3d da24 	vadd.f32	s26, s26, s9
 8011e2a:	ee7c caa9 	vadd.f32	s25, s25, s19
 8011e2e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8011e32:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011e36:	ed53 0a02 	vldr	s1, [r3, #-8]
 8011e3a:	ee68 fa26 	vmul.f32	s31, s16, s13
 8011e3e:	ee7d da89 	vadd.f32	s27, s27, s18
 8011e42:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011e46:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8011e4a:	ee22 faa6 	vmul.f32	s30, s5, s13
 8011e4e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011e52:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8011e56:	ee61 6a26 	vmul.f32	s13, s2, s13
 8011e5a:	ee60 aa07 	vmul.f32	s21, s0, s14
 8011e5e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8011e62:	ee63 ba07 	vmul.f32	s23, s6, s14
 8011e66:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8011e6a:	ee78 8a86 	vadd.f32	s17, s17, s12
 8011e6e:	ee3d da24 	vadd.f32	s26, s26, s9
 8011e72:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011e76:	ee7d daae 	vadd.f32	s27, s27, s29
 8011e7a:	ee22 9a07 	vmul.f32	s18, s4, s14
 8011e7e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8011e82:	ee61 5a87 	vmul.f32	s11, s3, s14
 8011e86:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8011e8a:	ed13 0a01 	vldr	s0, [r3, #-4]
 8011e8e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8011e92:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011e96:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011e9a:	ee20 7a87 	vmul.f32	s14, s1, s14
 8011e9e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8011ea2:	ee3d da2a 	vadd.f32	s26, s26, s21
 8011ea6:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8011eaa:	ee23 8a27 	vmul.f32	s16, s6, s15
 8011eae:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8011eb2:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8011eb6:	ee22 aa27 	vmul.f32	s20, s4, s15
 8011eba:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8011ebe:	ee21 6a27 	vmul.f32	s12, s2, s15
 8011ec2:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8011ec6:	ee7d daae 	vadd.f32	s27, s27, s29
 8011eca:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8011ece:	ee3b ba09 	vadd.f32	s22, s22, s18
 8011ed2:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8011ed6:	ee73 3a87 	vadd.f32	s7, s7, s14
 8011eda:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011ede:	f1bb 0b01 	subs.w	fp, fp, #1
 8011ee2:	f101 0120 	add.w	r1, r1, #32
 8011ee6:	ee3d da24 	vadd.f32	s26, s26, s9
 8011eea:	ee7c ca88 	vadd.f32	s25, s25, s16
 8011eee:	ee3e ca04 	vadd.f32	s24, s28, s8
 8011ef2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8011ef6:	ee7b aa05 	vadd.f32	s21, s22, s10
 8011efa:	ee79 9a86 	vadd.f32	s19, s19, s12
 8011efe:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8011f02:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8011f06:	f103 0320 	add.w	r3, r3, #32
 8011f0a:	f47f aed8 	bne.w	8011cbe <arm_fir_f32+0xfe>
 8011f0e:	eb09 0104 	add.w	r1, r9, r4
 8011f12:	46e3      	mov	fp, ip
 8011f14:	b3a2      	cbz	r2, 8011f80 <arm_fir_f32+0x3c0>
 8011f16:	4613      	mov	r3, r2
 8011f18:	ecbb 6a01 	vldmia	fp!, {s12}
 8011f1c:	ecf1 7a01 	vldmia	r1!, {s15}
 8011f20:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011f24:	ee22 4a86 	vmul.f32	s8, s5, s12
 8011f28:	ee62 4a06 	vmul.f32	s9, s4, s12
 8011f2c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8011f30:	ee61 5a06 	vmul.f32	s11, s2, s12
 8011f34:	ee60 6a86 	vmul.f32	s13, s1, s12
 8011f38:	ee20 7a06 	vmul.f32	s14, s0, s12
 8011f3c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011f40:	3b01      	subs	r3, #1
 8011f42:	ee3d da03 	vadd.f32	s26, s26, s6
 8011f46:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011f4a:	eeb0 3a62 	vmov.f32	s6, s5
 8011f4e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8011f52:	eef0 2a42 	vmov.f32	s5, s4
 8011f56:	ee7b ba85 	vadd.f32	s23, s23, s10
 8011f5a:	eeb0 2a61 	vmov.f32	s4, s3
 8011f5e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8011f62:	eef0 1a41 	vmov.f32	s3, s2
 8011f66:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8011f6a:	eeb0 1a60 	vmov.f32	s2, s1
 8011f6e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8011f72:	eef0 0a40 	vmov.f32	s1, s0
 8011f76:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011f7e:	d1cb      	bne.n	8011f18 <arm_fir_f32+0x358>
 8011f80:	f1be 0e01 	subs.w	lr, lr, #1
 8011f84:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8011f88:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8011f8c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8011f90:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8011f94:	ed45 aa04 	vstr	s21, [r5, #-16]
 8011f98:	ed45 9a03 	vstr	s19, [r5, #-12]
 8011f9c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8011fa0:	ed45 3a01 	vstr	s7, [r5, #-4]
 8011fa4:	f107 0720 	add.w	r7, r7, #32
 8011fa8:	f106 0620 	add.w	r6, r6, #32
 8011fac:	f104 0420 	add.w	r4, r4, #32
 8011fb0:	f105 0520 	add.w	r5, r5, #32
 8011fb4:	f47f ae3c 	bne.w	8011c30 <arm_fir_f32+0x70>
 8011fb8:	9b02      	ldr	r3, [sp, #8]
 8011fba:	9800      	ldr	r0, [sp, #0]
 8011fbc:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011fc0:	9907      	ldr	r1, [sp, #28]
 8011fc2:	015b      	lsls	r3, r3, #5
 8011fc4:	4652      	mov	r2, sl
 8011fc6:	4418      	add	r0, r3
 8011fc8:	9000      	str	r0, [sp, #0]
 8011fca:	4419      	add	r1, r3
 8011fcc:	449c      	add	ip, r3
 8011fce:	441a      	add	r2, r3
 8011fd0:	9b04      	ldr	r3, [sp, #16]
 8011fd2:	f013 0e07 	ands.w	lr, r3, #7
 8011fd6:	d01f      	beq.n	8012018 <arm_fir_f32+0x458>
 8011fd8:	9f00      	ldr	r7, [sp, #0]
 8011fda:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011fde:	4676      	mov	r6, lr
 8011fe0:	4665      	mov	r5, ip
 8011fe2:	f851 3b04 	ldr.w	r3, [r1], #4
 8011fe6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8012030 <arm_fir_f32+0x470>
 8011fea:	f847 3b04 	str.w	r3, [r7], #4
 8011fee:	4644      	mov	r4, r8
 8011ff0:	464b      	mov	r3, r9
 8011ff2:	4628      	mov	r0, r5
 8011ff4:	ecb0 7a01 	vldmia	r0!, {s14}
 8011ff8:	ecf4 7a01 	vldmia	r4!, {s15}
 8011ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012000:	3b01      	subs	r3, #1
 8012002:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012006:	d1f5      	bne.n	8011ff4 <arm_fir_f32+0x434>
 8012008:	3e01      	subs	r6, #1
 801200a:	ece2 6a01 	vstmia	r2!, {s13}
 801200e:	f105 0504 	add.w	r5, r5, #4
 8012012:	d1e6      	bne.n	8011fe2 <arm_fir_f32+0x422>
 8012014:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8012018:	9b01      	ldr	r3, [sp, #4]
 801201a:	1e59      	subs	r1, r3, #1
 801201c:	9b03      	ldr	r3, [sp, #12]
 801201e:	088e      	lsrs	r6, r1, #2
 8012020:	685c      	ldr	r4, [r3, #4]
 8012022:	d020      	beq.n	8012066 <arm_fir_f32+0x4a6>
 8012024:	f104 0210 	add.w	r2, r4, #16
 8012028:	f10c 0310 	add.w	r3, ip, #16
 801202c:	4630      	mov	r0, r6
 801202e:	e001      	b.n	8012034 <arm_fir_f32+0x474>
 8012030:	00000000 	.word	0x00000000
 8012034:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012038:	f842 5c10 	str.w	r5, [r2, #-16]
 801203c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8012040:	f842 5c0c 	str.w	r5, [r2, #-12]
 8012044:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012048:	f842 5c08 	str.w	r5, [r2, #-8]
 801204c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012050:	f842 5c04 	str.w	r5, [r2, #-4]
 8012054:	3801      	subs	r0, #1
 8012056:	f103 0310 	add.w	r3, r3, #16
 801205a:	f102 0210 	add.w	r2, r2, #16
 801205e:	d1e9      	bne.n	8012034 <arm_fir_f32+0x474>
 8012060:	0133      	lsls	r3, r6, #4
 8012062:	441c      	add	r4, r3
 8012064:	449c      	add	ip, r3
 8012066:	f011 0303 	ands.w	r3, r1, #3
 801206a:	d006      	beq.n	801207a <arm_fir_f32+0x4ba>
 801206c:	4622      	mov	r2, r4
 801206e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012072:	f842 1b04 	str.w	r1, [r2], #4
 8012076:	3b01      	subs	r3, #1
 8012078:	d1f9      	bne.n	801206e <arm_fir_f32+0x4ae>
 801207a:	b009      	add	sp, #36	; 0x24
 801207c:	ecbd 8b10 	vpop	{d8-d15}
 8012080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012084:	46c3      	mov	fp, r8
 8012086:	e745      	b.n	8011f14 <arm_fir_f32+0x354>

08012088 <arm_cmplx_mag_f32>:
 8012088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8012090:	b084      	sub	sp, #16
 8012092:	d07f      	beq.n	8012194 <arm_cmplx_mag_f32+0x10c>
 8012094:	2700      	movs	r7, #0
 8012096:	f100 0420 	add.w	r4, r0, #32
 801209a:	f101 0510 	add.w	r5, r1, #16
 801209e:	4646      	mov	r6, r8
 80120a0:	e05a      	b.n	8012158 <arm_cmplx_mag_f32+0xd0>
 80120a2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80120a6:	eeb4 0a40 	vcmp.f32	s0, s0
 80120aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ae:	f040 80a4 	bne.w	80121fa <arm_cmplx_mag_f32+0x172>
 80120b2:	ed05 0a04 	vstr	s0, [r5, #-16]
 80120b6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80120ba:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80120be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120c2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80120ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80120ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d2:	f2c0 808f 	blt.w	80121f4 <arm_cmplx_mag_f32+0x16c>
 80120d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80120da:	eeb4 0a40 	vcmp.f32	s0, s0
 80120de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e2:	f040 80af 	bne.w	8012244 <arm_cmplx_mag_f32+0x1bc>
 80120e6:	ed05 0a03 	vstr	s0, [r5, #-12]
 80120ea:	ed54 7a04 	vldr	s15, [r4, #-16]
 80120ee:	ed14 0a03 	vldr	s0, [r4, #-12]
 80120f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80120fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012106:	db72      	blt.n	80121ee <arm_cmplx_mag_f32+0x166>
 8012108:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801210c:	eeb4 0a40 	vcmp.f32	s0, s0
 8012110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012114:	f040 808c 	bne.w	8012230 <arm_cmplx_mag_f32+0x1a8>
 8012118:	ed05 0a02 	vstr	s0, [r5, #-8]
 801211c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012120:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012128:	ee20 0a00 	vmul.f32	s0, s0, s0
 801212c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012138:	db20      	blt.n	801217c <arm_cmplx_mag_f32+0xf4>
 801213a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801213e:	eeb4 0a40 	vcmp.f32	s0, s0
 8012142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012146:	d169      	bne.n	801221c <arm_cmplx_mag_f32+0x194>
 8012148:	3e01      	subs	r6, #1
 801214a:	ed05 0a01 	vstr	s0, [r5, #-4]
 801214e:	f104 0420 	add.w	r4, r4, #32
 8012152:	f105 0510 	add.w	r5, r5, #16
 8012156:	d019      	beq.n	801218c <arm_cmplx_mag_f32+0x104>
 8012158:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 801215c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8012160:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012164:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012168:	ee77 7a80 	vadd.f32	s15, s15, s0
 801216c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012174:	da95      	bge.n	80120a2 <arm_cmplx_mag_f32+0x1a>
 8012176:	f845 7c10 	str.w	r7, [r5, #-16]
 801217a:	e79c      	b.n	80120b6 <arm_cmplx_mag_f32+0x2e>
 801217c:	3e01      	subs	r6, #1
 801217e:	f845 7c04 	str.w	r7, [r5, #-4]
 8012182:	f104 0420 	add.w	r4, r4, #32
 8012186:	f105 0510 	add.w	r5, r5, #16
 801218a:	d1e5      	bne.n	8012158 <arm_cmplx_mag_f32+0xd0>
 801218c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8012190:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8012194:	f012 0503 	ands.w	r5, r2, #3
 8012198:	d026      	beq.n	80121e8 <arm_cmplx_mag_f32+0x160>
 801219a:	2600      	movs	r6, #0
 801219c:	f100 0408 	add.w	r4, r0, #8
 80121a0:	e00c      	b.n	80121bc <arm_cmplx_mag_f32+0x134>
 80121a2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80121a6:	eeb4 0a40 	vcmp.f32	s0, s0
 80121aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ae:	d12e      	bne.n	801220e <arm_cmplx_mag_f32+0x186>
 80121b0:	3d01      	subs	r5, #1
 80121b2:	ed01 0a01 	vstr	s0, [r1, #-4]
 80121b6:	f104 0408 	add.w	r4, r4, #8
 80121ba:	d015      	beq.n	80121e8 <arm_cmplx_mag_f32+0x160>
 80121bc:	ed54 7a02 	vldr	s15, [r4, #-8]
 80121c0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80121c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80121c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80121cc:	3104      	adds	r1, #4
 80121ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80121d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121da:	dae2      	bge.n	80121a2 <arm_cmplx_mag_f32+0x11a>
 80121dc:	3d01      	subs	r5, #1
 80121de:	f841 6c04 	str.w	r6, [r1, #-4]
 80121e2:	f104 0408 	add.w	r4, r4, #8
 80121e6:	d1e9      	bne.n	80121bc <arm_cmplx_mag_f32+0x134>
 80121e8:	b004      	add	sp, #16
 80121ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121ee:	f845 7c08 	str.w	r7, [r5, #-8]
 80121f2:	e793      	b.n	801211c <arm_cmplx_mag_f32+0x94>
 80121f4:	f845 7c0c 	str.w	r7, [r5, #-12]
 80121f8:	e777      	b.n	80120ea <arm_cmplx_mag_f32+0x62>
 80121fa:	eeb0 0a67 	vmov.f32	s0, s15
 80121fe:	9203      	str	r2, [sp, #12]
 8012200:	9102      	str	r1, [sp, #8]
 8012202:	9001      	str	r0, [sp, #4]
 8012204:	f001 f850 	bl	80132a8 <sqrtf>
 8012208:	a801      	add	r0, sp, #4
 801220a:	c807      	ldmia	r0, {r0, r1, r2}
 801220c:	e751      	b.n	80120b2 <arm_cmplx_mag_f32+0x2a>
 801220e:	eeb0 0a67 	vmov.f32	s0, s15
 8012212:	9101      	str	r1, [sp, #4]
 8012214:	f001 f848 	bl	80132a8 <sqrtf>
 8012218:	9901      	ldr	r1, [sp, #4]
 801221a:	e7c9      	b.n	80121b0 <arm_cmplx_mag_f32+0x128>
 801221c:	eeb0 0a67 	vmov.f32	s0, s15
 8012220:	9203      	str	r2, [sp, #12]
 8012222:	9102      	str	r1, [sp, #8]
 8012224:	9001      	str	r0, [sp, #4]
 8012226:	f001 f83f 	bl	80132a8 <sqrtf>
 801222a:	a801      	add	r0, sp, #4
 801222c:	c807      	ldmia	r0, {r0, r1, r2}
 801222e:	e78b      	b.n	8012148 <arm_cmplx_mag_f32+0xc0>
 8012230:	eeb0 0a67 	vmov.f32	s0, s15
 8012234:	9203      	str	r2, [sp, #12]
 8012236:	9102      	str	r1, [sp, #8]
 8012238:	9001      	str	r0, [sp, #4]
 801223a:	f001 f835 	bl	80132a8 <sqrtf>
 801223e:	a801      	add	r0, sp, #4
 8012240:	c807      	ldmia	r0, {r0, r1, r2}
 8012242:	e769      	b.n	8012118 <arm_cmplx_mag_f32+0x90>
 8012244:	eeb0 0a67 	vmov.f32	s0, s15
 8012248:	9203      	str	r2, [sp, #12]
 801224a:	9102      	str	r1, [sp, #8]
 801224c:	9001      	str	r0, [sp, #4]
 801224e:	f001 f82b 	bl	80132a8 <sqrtf>
 8012252:	a801      	add	r0, sp, #4
 8012254:	c807      	ldmia	r0, {r0, r1, r2}
 8012256:	e746      	b.n	80120e6 <arm_cmplx_mag_f32+0x5e>

08012258 <arm_radix8_butterfly_f32>:
 8012258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	ed2d 8b10 	vpush	{d8-d15}
 8012260:	b09d      	sub	sp, #116	; 0x74
 8012262:	461c      	mov	r4, r3
 8012264:	ed9f bac8 	vldr	s22, [pc, #800]	; 8012588 <arm_radix8_butterfly_f32+0x330>
 8012268:	921a      	str	r2, [sp, #104]	; 0x68
 801226a:	1d03      	adds	r3, r0, #4
 801226c:	4682      	mov	sl, r0
 801226e:	4689      	mov	r9, r1
 8012270:	468b      	mov	fp, r1
 8012272:	931b      	str	r3, [sp, #108]	; 0x6c
 8012274:	9400      	str	r4, [sp, #0]
 8012276:	469e      	mov	lr, r3
 8012278:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801227c:	005a      	lsls	r2, r3, #1
 801227e:	18d6      	adds	r6, r2, r3
 8012280:	18f5      	adds	r5, r6, r3
 8012282:	9203      	str	r2, [sp, #12]
 8012284:	195a      	adds	r2, r3, r5
 8012286:	18d0      	adds	r0, r2, r3
 8012288:	00df      	lsls	r7, r3, #3
 801228a:	1819      	adds	r1, r3, r0
 801228c:	463c      	mov	r4, r7
 801228e:	9701      	str	r7, [sp, #4]
 8012290:	4457      	add	r7, sl
 8012292:	930c      	str	r3, [sp, #48]	; 0x30
 8012294:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8012298:	011b      	lsls	r3, r3, #4
 801229a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 801229e:	eb07 0c04 	add.w	ip, r7, r4
 80122a2:	9c00      	ldr	r4, [sp, #0]
 80122a4:	9302      	str	r3, [sp, #8]
 80122a6:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80122aa:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80122ae:	3204      	adds	r2, #4
 80122b0:	3104      	adds	r1, #4
 80122b2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80122b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80122ba:	f04f 0800 	mov.w	r8, #0
 80122be:	eddc 7a00 	vldr	s15, [ip]
 80122c2:	edd7 6a00 	vldr	s13, [r7]
 80122c6:	edd6 3a00 	vldr	s7, [r6]
 80122ca:	ed5e aa01 	vldr	s21, [lr, #-4]
 80122ce:	edd5 4a00 	vldr	s9, [r5]
 80122d2:	ed90 2a00 	vldr	s4, [r0]
 80122d6:	ed12 7a01 	vldr	s14, [r2, #-4]
 80122da:	ed51 0a01 	vldr	s1, [r1, #-4]
 80122de:	ee77 8a82 	vadd.f32	s17, s15, s4
 80122e2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80122e6:	ee76 1a87 	vadd.f32	s3, s13, s14
 80122ea:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80122ee:	ee31 6a84 	vadd.f32	s12, s3, s8
 80122f2:	ee33 5a28 	vadd.f32	s10, s6, s17
 80122f6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80122fa:	ee75 6a06 	vadd.f32	s13, s10, s12
 80122fe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012302:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8012306:	ed85 5a00 	vstr	s10, [r5]
 801230a:	ed96 1a01 	vldr	s2, [r6, #4]
 801230e:	edd7 5a01 	vldr	s11, [r7, #4]
 8012312:	ed92 aa00 	vldr	s20, [r2]
 8012316:	ed91 6a00 	vldr	s12, [r1]
 801231a:	ed9e 9a00 	vldr	s18, [lr]
 801231e:	ed95 5a01 	vldr	s10, [r5, #4]
 8012322:	eddc 6a01 	vldr	s13, [ip, #4]
 8012326:	edd0 9a01 	vldr	s19, [r0, #4]
 801232a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 801232e:	ee71 2a46 	vsub.f32	s5, s2, s12
 8012332:	ee75 3aca 	vsub.f32	s7, s11, s20
 8012336:	ee37 0a60 	vsub.f32	s0, s14, s1
 801233a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 801233e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012342:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8012346:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801234a:	ee79 3a05 	vadd.f32	s7, s18, s10
 801234e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8012352:	ee39 5a45 	vsub.f32	s10, s18, s10
 8012356:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 801235a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 801235e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8012362:	ee31 6a06 	vadd.f32	s12, s2, s12
 8012366:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801236a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 801236e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8012372:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8012376:	ee33 3a68 	vsub.f32	s6, s6, s17
 801237a:	ee36 0a88 	vadd.f32	s0, s13, s16
 801237e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8012382:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8012386:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801238a:	ee75 6a62 	vsub.f32	s13, s10, s5
 801238e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8012392:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8012396:	ee33 1a89 	vadd.f32	s2, s7, s18
 801239a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 801239e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80123a2:	ee75 4a22 	vadd.f32	s9, s10, s5
 80123a6:	ee32 5a27 	vadd.f32	s10, s4, s15
 80123aa:	ee72 7a67 	vsub.f32	s15, s4, s15
 80123ae:	ee33 8a06 	vadd.f32	s16, s6, s12
 80123b2:	ee75 2a87 	vadd.f32	s5, s11, s14
 80123b6:	ee31 9a28 	vadd.f32	s18, s2, s17
 80123ba:	ee33 6a46 	vsub.f32	s12, s6, s12
 80123be:	ee74 0a61 	vsub.f32	s1, s8, s3
 80123c2:	ee33 2a80 	vadd.f32	s4, s7, s0
 80123c6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80123ca:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80123ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80123d2:	ee31 1a68 	vsub.f32	s2, s2, s17
 80123d6:	ee34 4a21 	vadd.f32	s8, s8, s3
 80123da:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80123de:	ee74 4a85 	vadd.f32	s9, s9, s10
 80123e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80123e6:	44d8      	add	r8, fp
 80123e8:	45c1      	cmp	r9, r8
 80123ea:	ed8e 9a00 	vstr	s18, [lr]
 80123ee:	ed85 1a01 	vstr	s2, [r5, #4]
 80123f2:	449e      	add	lr, r3
 80123f4:	ed8c 8a00 	vstr	s16, [ip]
 80123f8:	441d      	add	r5, r3
 80123fa:	ed80 6a00 	vstr	s12, [r0]
 80123fe:	edcc 0a01 	vstr	s1, [ip, #4]
 8012402:	ed80 4a01 	vstr	s8, [r0, #4]
 8012406:	449c      	add	ip, r3
 8012408:	ed87 2a00 	vstr	s4, [r7]
 801240c:	4418      	add	r0, r3
 801240e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8012412:	ed42 2a01 	vstr	s5, [r2, #-4]
 8012416:	ed86 7a00 	vstr	s14, [r6]
 801241a:	ed87 3a01 	vstr	s6, [r7, #4]
 801241e:	edc1 4a00 	vstr	s9, [r1]
 8012422:	441f      	add	r7, r3
 8012424:	edc2 5a00 	vstr	s11, [r2]
 8012428:	4419      	add	r1, r3
 801242a:	edc6 6a01 	vstr	s13, [r6, #4]
 801242e:	441a      	add	r2, r3
 8012430:	441e      	add	r6, r3
 8012432:	f63f af44 	bhi.w	80122be <arm_radix8_butterfly_f32+0x66>
 8012436:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012438:	2907      	cmp	r1, #7
 801243a:	4620      	mov	r0, r4
 801243c:	f240 81e9 	bls.w	8012812 <arm_radix8_butterfly_f32+0x5ba>
 8012440:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8012444:	193e      	adds	r6, r7, r4
 8012446:	1935      	adds	r5, r6, r4
 8012448:	9c03      	ldr	r4, [sp, #12]
 801244a:	9000      	str	r0, [sp, #0]
 801244c:	4622      	mov	r2, r4
 801244e:	3201      	adds	r2, #1
 8012450:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012454:	9900      	ldr	r1, [sp, #0]
 8012456:	1828      	adds	r0, r5, r0
 8012458:	eb00 0e01 	add.w	lr, r0, r1
 801245c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801245e:	440a      	add	r2, r1
 8012460:	eb04 0c01 	add.w	ip, r4, r1
 8012464:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8012468:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 801246c:	9a00      	ldr	r2, [sp, #0]
 801246e:	940f      	str	r4, [sp, #60]	; 0x3c
 8012470:	00ed      	lsls	r5, r5, #3
 8012472:	9511      	str	r5, [sp, #68]	; 0x44
 8012474:	00d5      	lsls	r5, r2, #3
 8012476:	950d      	str	r5, [sp, #52]	; 0x34
 8012478:	9d01      	ldr	r5, [sp, #4]
 801247a:	3508      	adds	r5, #8
 801247c:	9516      	str	r5, [sp, #88]	; 0x58
 801247e:	9d02      	ldr	r5, [sp, #8]
 8012480:	3508      	adds	r5, #8
 8012482:	0114      	lsls	r4, r2, #4
 8012484:	9517      	str	r5, [sp, #92]	; 0x5c
 8012486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012488:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801248a:	940e      	str	r4, [sp, #56]	; 0x38
 801248c:	00c0      	lsls	r0, r0, #3
 801248e:	9010      	str	r0, [sp, #64]	; 0x40
 8012490:	18aa      	adds	r2, r5, r2
 8012492:	9207      	str	r2, [sp, #28]
 8012494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012498:	18aa      	adds	r2, r5, r2
 801249a:	9208      	str	r2, [sp, #32]
 801249c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801249e:	18aa      	adds	r2, r5, r2
 80124a0:	9209      	str	r2, [sp, #36]	; 0x24
 80124a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80124a6:	f10e 0204 	add.w	r2, lr, #4
 80124aa:	920a      	str	r2, [sp, #40]	; 0x28
 80124ac:	00c9      	lsls	r1, r1, #3
 80124ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124b0:	310c      	adds	r1, #12
 80124b2:	00f6      	lsls	r6, r6, #3
 80124b4:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80124b8:	9114      	str	r1, [sp, #80]	; 0x50
 80124ba:	18a9      	adds	r1, r5, r2
 80124bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124be:	9612      	str	r6, [sp, #72]	; 0x48
 80124c0:	00ff      	lsls	r7, r7, #3
 80124c2:	19ae      	adds	r6, r5, r6
 80124c4:	3008      	adds	r0, #8
 80124c6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80124ca:	9606      	str	r6, [sp, #24]
 80124cc:	9019      	str	r0, [sp, #100]	; 0x64
 80124ce:	18aa      	adds	r2, r5, r2
 80124d0:	0164      	lsls	r4, r4, #5
 80124d2:	19ee      	adds	r6, r5, r7
 80124d4:	f10c 000c 	add.w	r0, ip, #12
 80124d8:	9713      	str	r7, [sp, #76]	; 0x4c
 80124da:	9604      	str	r6, [sp, #16]
 80124dc:	9015      	str	r0, [sp, #84]	; 0x54
 80124de:	9103      	str	r1, [sp, #12]
 80124e0:	9205      	str	r2, [sp, #20]
 80124e2:	f104 0208 	add.w	r2, r4, #8
 80124e6:	9218      	str	r2, [sp, #96]	; 0x60
 80124e8:	f04f 0801 	mov.w	r8, #1
 80124ec:	2200      	movs	r2, #0
 80124ee:	f102 0108 	add.w	r1, r2, #8
 80124f2:	460f      	mov	r7, r1
 80124f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80124f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80124f8:	188e      	adds	r6, r1, r2
 80124fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80124fc:	188d      	adds	r5, r1, r2
 80124fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012500:	188c      	adds	r4, r1, r2
 8012502:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012504:	1888      	adds	r0, r1, r2
 8012506:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012508:	eb01 0c02 	add.w	ip, r1, r2
 801250c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801250e:	440a      	add	r2, r1
 8012510:	9903      	ldr	r1, [sp, #12]
 8012512:	edd1 fa00 	vldr	s31, [r1]
 8012516:	9905      	ldr	r1, [sp, #20]
 8012518:	ed91 fa00 	vldr	s30, [r1]
 801251c:	9904      	ldr	r1, [sp, #16]
 801251e:	edd1 ea00 	vldr	s29, [r1]
 8012522:	9906      	ldr	r1, [sp, #24]
 8012524:	ed91 ea00 	vldr	s28, [r1]
 8012528:	9909      	ldr	r1, [sp, #36]	; 0x24
 801252a:	edd1 da00 	vldr	s27, [r1]
 801252e:	9908      	ldr	r1, [sp, #32]
 8012530:	ed91 da00 	vldr	s26, [r1]
 8012534:	9907      	ldr	r1, [sp, #28]
 8012536:	edd1 ca00 	vldr	s25, [r1]
 801253a:	9903      	ldr	r1, [sp, #12]
 801253c:	ed91 ca01 	vldr	s24, [r1, #4]
 8012540:	9905      	ldr	r1, [sp, #20]
 8012542:	edd1 ba01 	vldr	s23, [r1, #4]
 8012546:	9904      	ldr	r1, [sp, #16]
 8012548:	edd1 aa01 	vldr	s21, [r1, #4]
 801254c:	9906      	ldr	r1, [sp, #24]
 801254e:	ed91 aa01 	vldr	s20, [r1, #4]
 8012552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012554:	edd1 7a01 	vldr	s15, [r1, #4]
 8012558:	9908      	ldr	r1, [sp, #32]
 801255a:	edcd 7a00 	vstr	s15, [sp]
 801255e:	edd1 7a01 	vldr	s15, [r1, #4]
 8012562:	9907      	ldr	r1, [sp, #28]
 8012564:	edcd 7a01 	vstr	s15, [sp, #4]
 8012568:	edd1 7a01 	vldr	s15, [r1, #4]
 801256c:	eb0a 0e07 	add.w	lr, sl, r7
 8012570:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012572:	edcd 7a02 	vstr	s15, [sp, #8]
 8012576:	eb0c 010a 	add.w	r1, ip, sl
 801257a:	4456      	add	r6, sl
 801257c:	4455      	add	r5, sl
 801257e:	4454      	add	r4, sl
 8012580:	4450      	add	r0, sl
 8012582:	4452      	add	r2, sl
 8012584:	46c4      	mov	ip, r8
 8012586:	e001      	b.n	801258c <arm_radix8_butterfly_f32+0x334>
 8012588:	3f3504f3 	.word	0x3f3504f3
 801258c:	ed96 5a00 	vldr	s10, [r6]
 8012590:	ed52 9a01 	vldr	s19, [r2, #-4]
 8012594:	ed11 6a01 	vldr	s12, [r1, #-4]
 8012598:	edd0 7a00 	vldr	s15, [r0]
 801259c:	ed17 7a01 	vldr	s14, [r7, #-4]
 80125a0:	edde 3a00 	vldr	s7, [lr]
 80125a4:	ed94 3a00 	vldr	s6, [r4]
 80125a8:	ed95 2a00 	vldr	s4, [r5]
 80125ac:	ed9e 0a01 	vldr	s0, [lr, #4]
 80125b0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80125b4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80125b8:	ee33 4a29 	vadd.f32	s8, s6, s19
 80125bc:	ee77 4a87 	vadd.f32	s9, s15, s14
 80125c0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80125c4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80125c8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80125cc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80125d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125d4:	ed8e 6a00 	vstr	s12, [lr]
 80125d8:	edd0 8a01 	vldr	s17, [r0, #4]
 80125dc:	ed95 9a01 	vldr	s18, [r5, #4]
 80125e0:	edd1 2a00 	vldr	s5, [r1]
 80125e4:	ed97 7a00 	vldr	s14, [r7]
 80125e8:	edd4 0a01 	vldr	s1, [r4, #4]
 80125ec:	ed96 6a01 	vldr	s12, [r6, #4]
 80125f0:	edd2 5a00 	vldr	s11, [r2]
 80125f4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80125f8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80125fc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8012600:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8012604:	ee38 4a44 	vsub.f32	s8, s16, s8
 8012608:	ee38 7a87 	vadd.f32	s14, s17, s14
 801260c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8012610:	ee79 2a22 	vadd.f32	s5, s18, s5
 8012614:	ee75 8a69 	vsub.f32	s17, s10, s19
 8012618:	ee32 9a27 	vadd.f32	s18, s4, s15
 801261c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8012620:	ee72 7a67 	vsub.f32	s15, s4, s15
 8012624:	ee30 2a06 	vadd.f32	s4, s0, s12
 8012628:	ee69 9a0b 	vmul.f32	s19, s18, s22
 801262c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8012630:	ee32 9a08 	vadd.f32	s18, s4, s16
 8012634:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8012638:	ee32 2a48 	vsub.f32	s4, s4, s16
 801263c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8012640:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8012644:	ee32 1a87 	vadd.f32	s2, s5, s14
 8012648:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801264c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8012650:	ee30 6a46 	vsub.f32	s12, s0, s12
 8012654:	ee73 0a29 	vadd.f32	s1, s6, s19
 8012658:	ee36 0a28 	vadd.f32	s0, s12, s17
 801265c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8012660:	ee32 7a64 	vsub.f32	s14, s4, s9
 8012664:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8012668:	ee36 6a68 	vsub.f32	s12, s12, s17
 801266c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8012670:	ee75 8a85 	vadd.f32	s17, s11, s10
 8012674:	ee74 3a22 	vadd.f32	s7, s8, s5
 8012678:	ee35 5ac5 	vsub.f32	s10, s11, s10
 801267c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8012680:	ee79 1a41 	vsub.f32	s3, s18, s2
 8012684:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8012688:	ee76 5a43 	vsub.f32	s11, s12, s6
 801268c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8012690:	ee72 4a24 	vadd.f32	s9, s4, s9
 8012694:	ee30 4a60 	vsub.f32	s8, s0, s1
 8012698:	ee79 8ae8 	vsub.f32	s17, s19, s17
 801269c:	ee30 0a20 	vadd.f32	s0, s0, s1
 80126a0:	ee77 9a85 	vadd.f32	s19, s15, s10
 80126a4:	ee36 6a03 	vadd.f32	s12, s12, s6
 80126a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80126ac:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80126b0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80126b4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80126b8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80126bc:	ee39 1a01 	vadd.f32	s2, s18, s2
 80126c0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80126c4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80126c8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80126cc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80126d0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80126d4:	ee35 3a03 	vadd.f32	s6, s10, s6
 80126d8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80126dc:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80126e0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80126e4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80126e8:	ed8e 1a01 	vstr	s2, [lr, #4]
 80126ec:	ee77 3a63 	vsub.f32	s7, s14, s7
 80126f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80126f4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80126f8:	ed86 3a00 	vstr	s6, [r6]
 80126fc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8012700:	ee32 2a05 	vadd.f32	s4, s4, s10
 8012704:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8012708:	ee31 8ac8 	vsub.f32	s16, s3, s16
 801270c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8012710:	ee64 1a00 	vmul.f32	s3, s8, s0
 8012714:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012718:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 801271c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8012720:	ee64 8a28 	vmul.f32	s17, s8, s17
 8012724:	ed9d 4a00 	vldr	s8, [sp]
 8012728:	edc6 6a01 	vstr	s13, [r6, #4]
 801272c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8012730:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8012734:	ee64 9a29 	vmul.f32	s19, s8, s19
 8012738:	ee24 4a25 	vmul.f32	s8, s8, s11
 801273c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8012740:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012744:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8012748:	ee2a 4a86 	vmul.f32	s8, s21, s12
 801274c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8012750:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8012754:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8012758:	ee2e 6a86 	vmul.f32	s12, s29, s12
 801275c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8012760:	ee30 0a68 	vsub.f32	s0, s0, s17
 8012764:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8012768:	ee70 0a84 	vadd.f32	s1, s1, s8
 801276c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012770:	44dc      	add	ip, fp
 8012772:	45e1      	cmp	r9, ip
 8012774:	ed84 9a00 	vstr	s18, [r4]
 8012778:	edc4 3a01 	vstr	s7, [r4, #4]
 801277c:	449e      	add	lr, r3
 801277e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8012782:	edc2 2a00 	vstr	s5, [r2]
 8012786:	441e      	add	r6, r3
 8012788:	ed85 2a00 	vstr	s4, [r5]
 801278c:	ed85 8a01 	vstr	s16, [r5, #4]
 8012790:	441c      	add	r4, r3
 8012792:	ed47 1a01 	vstr	s3, [r7, #-4]
 8012796:	ed87 0a00 	vstr	s0, [r7]
 801279a:	441a      	add	r2, r3
 801279c:	ed41 4a01 	vstr	s9, [r1, #-4]
 80127a0:	edc1 9a00 	vstr	s19, [r1]
 80127a4:	441d      	add	r5, r3
 80127a6:	edc0 0a00 	vstr	s1, [r0]
 80127aa:	441f      	add	r7, r3
 80127ac:	ed80 6a01 	vstr	s12, [r0, #4]
 80127b0:	4419      	add	r1, r3
 80127b2:	4418      	add	r0, r3
 80127b4:	f63f aeea 	bhi.w	801258c <arm_radix8_butterfly_f32+0x334>
 80127b8:	9a03      	ldr	r2, [sp, #12]
 80127ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127bc:	440a      	add	r2, r1
 80127be:	9203      	str	r2, [sp, #12]
 80127c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80127c2:	9a05      	ldr	r2, [sp, #20]
 80127c4:	440a      	add	r2, r1
 80127c6:	9205      	str	r2, [sp, #20]
 80127c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80127ca:	9a04      	ldr	r2, [sp, #16]
 80127cc:	440a      	add	r2, r1
 80127ce:	9204      	str	r2, [sp, #16]
 80127d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80127d2:	9a06      	ldr	r2, [sp, #24]
 80127d4:	440a      	add	r2, r1
 80127d6:	9206      	str	r2, [sp, #24]
 80127d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127dc:	440a      	add	r2, r1
 80127de:	9209      	str	r2, [sp, #36]	; 0x24
 80127e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80127e2:	9a08      	ldr	r2, [sp, #32]
 80127e4:	440a      	add	r2, r1
 80127e6:	9208      	str	r2, [sp, #32]
 80127e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80127ea:	9a07      	ldr	r2, [sp, #28]
 80127ec:	440a      	add	r2, r1
 80127ee:	9207      	str	r2, [sp, #28]
 80127f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80127f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127f4:	f108 0801 	add.w	r8, r8, #1
 80127f8:	3208      	adds	r2, #8
 80127fa:	4588      	cmp	r8, r1
 80127fc:	920a      	str	r2, [sp, #40]	; 0x28
 80127fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012800:	f47f ae75 	bne.w	80124ee <arm_radix8_butterfly_f32+0x296>
 8012804:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	46c3      	mov	fp, r8
 801280c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8012810:	e532      	b.n	8012278 <arm_radix8_butterfly_f32+0x20>
 8012812:	b01d      	add	sp, #116	; 0x74
 8012814:	ecbd 8b10 	vpop	{d8-d15}
 8012818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801281c <__errno>:
 801281c:	4b01      	ldr	r3, [pc, #4]	; (8012824 <__errno+0x8>)
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20000090 	.word	0x20000090

08012828 <__libc_init_array>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	4e0d      	ldr	r6, [pc, #52]	; (8012860 <__libc_init_array+0x38>)
 801282c:	4c0d      	ldr	r4, [pc, #52]	; (8012864 <__libc_init_array+0x3c>)
 801282e:	1ba4      	subs	r4, r4, r6
 8012830:	10a4      	asrs	r4, r4, #2
 8012832:	2500      	movs	r5, #0
 8012834:	42a5      	cmp	r5, r4
 8012836:	d109      	bne.n	801284c <__libc_init_array+0x24>
 8012838:	4e0b      	ldr	r6, [pc, #44]	; (8012868 <__libc_init_array+0x40>)
 801283a:	4c0c      	ldr	r4, [pc, #48]	; (801286c <__libc_init_array+0x44>)
 801283c:	f000 ffce 	bl	80137dc <_init>
 8012840:	1ba4      	subs	r4, r4, r6
 8012842:	10a4      	asrs	r4, r4, #2
 8012844:	2500      	movs	r5, #0
 8012846:	42a5      	cmp	r5, r4
 8012848:	d105      	bne.n	8012856 <__libc_init_array+0x2e>
 801284a:	bd70      	pop	{r4, r5, r6, pc}
 801284c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012850:	4798      	blx	r3
 8012852:	3501      	adds	r5, #1
 8012854:	e7ee      	b.n	8012834 <__libc_init_array+0xc>
 8012856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801285a:	4798      	blx	r3
 801285c:	3501      	adds	r5, #1
 801285e:	e7f2      	b.n	8012846 <__libc_init_array+0x1e>
 8012860:	08015b5c 	.word	0x08015b5c
 8012864:	08015b5c 	.word	0x08015b5c
 8012868:	08015b5c 	.word	0x08015b5c
 801286c:	08015b60 	.word	0x08015b60

08012870 <__locale_ctype_ptr>:
 8012870:	4b04      	ldr	r3, [pc, #16]	; (8012884 <__locale_ctype_ptr+0x14>)
 8012872:	4a05      	ldr	r2, [pc, #20]	; (8012888 <__locale_ctype_ptr+0x18>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	6a1b      	ldr	r3, [r3, #32]
 8012878:	2b00      	cmp	r3, #0
 801287a:	bf08      	it	eq
 801287c:	4613      	moveq	r3, r2
 801287e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012882:	4770      	bx	lr
 8012884:	20000090 	.word	0x20000090
 8012888:	200000f4 	.word	0x200000f4

0801288c <malloc>:
 801288c:	4b02      	ldr	r3, [pc, #8]	; (8012898 <malloc+0xc>)
 801288e:	4601      	mov	r1, r0
 8012890:	6818      	ldr	r0, [r3, #0]
 8012892:	f000 b87f 	b.w	8012994 <_malloc_r>
 8012896:	bf00      	nop
 8012898:	20000090 	.word	0x20000090

0801289c <free>:
 801289c:	4b02      	ldr	r3, [pc, #8]	; (80128a8 <free+0xc>)
 801289e:	4601      	mov	r1, r0
 80128a0:	6818      	ldr	r0, [r3, #0]
 80128a2:	f000 b829 	b.w	80128f8 <_free_r>
 80128a6:	bf00      	nop
 80128a8:	20000090 	.word	0x20000090

080128ac <__ascii_mbtowc>:
 80128ac:	b082      	sub	sp, #8
 80128ae:	b901      	cbnz	r1, 80128b2 <__ascii_mbtowc+0x6>
 80128b0:	a901      	add	r1, sp, #4
 80128b2:	b142      	cbz	r2, 80128c6 <__ascii_mbtowc+0x1a>
 80128b4:	b14b      	cbz	r3, 80128ca <__ascii_mbtowc+0x1e>
 80128b6:	7813      	ldrb	r3, [r2, #0]
 80128b8:	600b      	str	r3, [r1, #0]
 80128ba:	7812      	ldrb	r2, [r2, #0]
 80128bc:	1c10      	adds	r0, r2, #0
 80128be:	bf18      	it	ne
 80128c0:	2001      	movne	r0, #1
 80128c2:	b002      	add	sp, #8
 80128c4:	4770      	bx	lr
 80128c6:	4610      	mov	r0, r2
 80128c8:	e7fb      	b.n	80128c2 <__ascii_mbtowc+0x16>
 80128ca:	f06f 0001 	mvn.w	r0, #1
 80128ce:	e7f8      	b.n	80128c2 <__ascii_mbtowc+0x16>

080128d0 <memcpy>:
 80128d0:	b510      	push	{r4, lr}
 80128d2:	1e43      	subs	r3, r0, #1
 80128d4:	440a      	add	r2, r1
 80128d6:	4291      	cmp	r1, r2
 80128d8:	d100      	bne.n	80128dc <memcpy+0xc>
 80128da:	bd10      	pop	{r4, pc}
 80128dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128e4:	e7f7      	b.n	80128d6 <memcpy+0x6>

080128e6 <memset>:
 80128e6:	4402      	add	r2, r0
 80128e8:	4603      	mov	r3, r0
 80128ea:	4293      	cmp	r3, r2
 80128ec:	d100      	bne.n	80128f0 <memset+0xa>
 80128ee:	4770      	bx	lr
 80128f0:	f803 1b01 	strb.w	r1, [r3], #1
 80128f4:	e7f9      	b.n	80128ea <memset+0x4>
	...

080128f8 <_free_r>:
 80128f8:	b538      	push	{r3, r4, r5, lr}
 80128fa:	4605      	mov	r5, r0
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d045      	beq.n	801298c <_free_r+0x94>
 8012900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012904:	1f0c      	subs	r4, r1, #4
 8012906:	2b00      	cmp	r3, #0
 8012908:	bfb8      	it	lt
 801290a:	18e4      	addlt	r4, r4, r3
 801290c:	f000 f927 	bl	8012b5e <__malloc_lock>
 8012910:	4a1f      	ldr	r2, [pc, #124]	; (8012990 <_free_r+0x98>)
 8012912:	6813      	ldr	r3, [r2, #0]
 8012914:	4610      	mov	r0, r2
 8012916:	b933      	cbnz	r3, 8012926 <_free_r+0x2e>
 8012918:	6063      	str	r3, [r4, #4]
 801291a:	6014      	str	r4, [r2, #0]
 801291c:	4628      	mov	r0, r5
 801291e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012922:	f000 b91d 	b.w	8012b60 <__malloc_unlock>
 8012926:	42a3      	cmp	r3, r4
 8012928:	d90c      	bls.n	8012944 <_free_r+0x4c>
 801292a:	6821      	ldr	r1, [r4, #0]
 801292c:	1862      	adds	r2, r4, r1
 801292e:	4293      	cmp	r3, r2
 8012930:	bf04      	itt	eq
 8012932:	681a      	ldreq	r2, [r3, #0]
 8012934:	685b      	ldreq	r3, [r3, #4]
 8012936:	6063      	str	r3, [r4, #4]
 8012938:	bf04      	itt	eq
 801293a:	1852      	addeq	r2, r2, r1
 801293c:	6022      	streq	r2, [r4, #0]
 801293e:	6004      	str	r4, [r0, #0]
 8012940:	e7ec      	b.n	801291c <_free_r+0x24>
 8012942:	4613      	mov	r3, r2
 8012944:	685a      	ldr	r2, [r3, #4]
 8012946:	b10a      	cbz	r2, 801294c <_free_r+0x54>
 8012948:	42a2      	cmp	r2, r4
 801294a:	d9fa      	bls.n	8012942 <_free_r+0x4a>
 801294c:	6819      	ldr	r1, [r3, #0]
 801294e:	1858      	adds	r0, r3, r1
 8012950:	42a0      	cmp	r0, r4
 8012952:	d10b      	bne.n	801296c <_free_r+0x74>
 8012954:	6820      	ldr	r0, [r4, #0]
 8012956:	4401      	add	r1, r0
 8012958:	1858      	adds	r0, r3, r1
 801295a:	4282      	cmp	r2, r0
 801295c:	6019      	str	r1, [r3, #0]
 801295e:	d1dd      	bne.n	801291c <_free_r+0x24>
 8012960:	6810      	ldr	r0, [r2, #0]
 8012962:	6852      	ldr	r2, [r2, #4]
 8012964:	605a      	str	r2, [r3, #4]
 8012966:	4401      	add	r1, r0
 8012968:	6019      	str	r1, [r3, #0]
 801296a:	e7d7      	b.n	801291c <_free_r+0x24>
 801296c:	d902      	bls.n	8012974 <_free_r+0x7c>
 801296e:	230c      	movs	r3, #12
 8012970:	602b      	str	r3, [r5, #0]
 8012972:	e7d3      	b.n	801291c <_free_r+0x24>
 8012974:	6820      	ldr	r0, [r4, #0]
 8012976:	1821      	adds	r1, r4, r0
 8012978:	428a      	cmp	r2, r1
 801297a:	bf04      	itt	eq
 801297c:	6811      	ldreq	r1, [r2, #0]
 801297e:	6852      	ldreq	r2, [r2, #4]
 8012980:	6062      	str	r2, [r4, #4]
 8012982:	bf04      	itt	eq
 8012984:	1809      	addeq	r1, r1, r0
 8012986:	6021      	streq	r1, [r4, #0]
 8012988:	605c      	str	r4, [r3, #4]
 801298a:	e7c7      	b.n	801291c <_free_r+0x24>
 801298c:	bd38      	pop	{r3, r4, r5, pc}
 801298e:	bf00      	nop
 8012990:	200004ec 	.word	0x200004ec

08012994 <_malloc_r>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	1ccd      	adds	r5, r1, #3
 8012998:	f025 0503 	bic.w	r5, r5, #3
 801299c:	3508      	adds	r5, #8
 801299e:	2d0c      	cmp	r5, #12
 80129a0:	bf38      	it	cc
 80129a2:	250c      	movcc	r5, #12
 80129a4:	2d00      	cmp	r5, #0
 80129a6:	4606      	mov	r6, r0
 80129a8:	db01      	blt.n	80129ae <_malloc_r+0x1a>
 80129aa:	42a9      	cmp	r1, r5
 80129ac:	d903      	bls.n	80129b6 <_malloc_r+0x22>
 80129ae:	230c      	movs	r3, #12
 80129b0:	6033      	str	r3, [r6, #0]
 80129b2:	2000      	movs	r0, #0
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
 80129b6:	f000 f8d2 	bl	8012b5e <__malloc_lock>
 80129ba:	4a21      	ldr	r2, [pc, #132]	; (8012a40 <_malloc_r+0xac>)
 80129bc:	6814      	ldr	r4, [r2, #0]
 80129be:	4621      	mov	r1, r4
 80129c0:	b991      	cbnz	r1, 80129e8 <_malloc_r+0x54>
 80129c2:	4c20      	ldr	r4, [pc, #128]	; (8012a44 <_malloc_r+0xb0>)
 80129c4:	6823      	ldr	r3, [r4, #0]
 80129c6:	b91b      	cbnz	r3, 80129d0 <_malloc_r+0x3c>
 80129c8:	4630      	mov	r0, r6
 80129ca:	f000 f83d 	bl	8012a48 <_sbrk_r>
 80129ce:	6020      	str	r0, [r4, #0]
 80129d0:	4629      	mov	r1, r5
 80129d2:	4630      	mov	r0, r6
 80129d4:	f000 f838 	bl	8012a48 <_sbrk_r>
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	d124      	bne.n	8012a26 <_malloc_r+0x92>
 80129dc:	230c      	movs	r3, #12
 80129de:	6033      	str	r3, [r6, #0]
 80129e0:	4630      	mov	r0, r6
 80129e2:	f000 f8bd 	bl	8012b60 <__malloc_unlock>
 80129e6:	e7e4      	b.n	80129b2 <_malloc_r+0x1e>
 80129e8:	680b      	ldr	r3, [r1, #0]
 80129ea:	1b5b      	subs	r3, r3, r5
 80129ec:	d418      	bmi.n	8012a20 <_malloc_r+0x8c>
 80129ee:	2b0b      	cmp	r3, #11
 80129f0:	d90f      	bls.n	8012a12 <_malloc_r+0x7e>
 80129f2:	600b      	str	r3, [r1, #0]
 80129f4:	50cd      	str	r5, [r1, r3]
 80129f6:	18cc      	adds	r4, r1, r3
 80129f8:	4630      	mov	r0, r6
 80129fa:	f000 f8b1 	bl	8012b60 <__malloc_unlock>
 80129fe:	f104 000b 	add.w	r0, r4, #11
 8012a02:	1d23      	adds	r3, r4, #4
 8012a04:	f020 0007 	bic.w	r0, r0, #7
 8012a08:	1ac3      	subs	r3, r0, r3
 8012a0a:	d0d3      	beq.n	80129b4 <_malloc_r+0x20>
 8012a0c:	425a      	negs	r2, r3
 8012a0e:	50e2      	str	r2, [r4, r3]
 8012a10:	e7d0      	b.n	80129b4 <_malloc_r+0x20>
 8012a12:	428c      	cmp	r4, r1
 8012a14:	684b      	ldr	r3, [r1, #4]
 8012a16:	bf16      	itet	ne
 8012a18:	6063      	strne	r3, [r4, #4]
 8012a1a:	6013      	streq	r3, [r2, #0]
 8012a1c:	460c      	movne	r4, r1
 8012a1e:	e7eb      	b.n	80129f8 <_malloc_r+0x64>
 8012a20:	460c      	mov	r4, r1
 8012a22:	6849      	ldr	r1, [r1, #4]
 8012a24:	e7cc      	b.n	80129c0 <_malloc_r+0x2c>
 8012a26:	1cc4      	adds	r4, r0, #3
 8012a28:	f024 0403 	bic.w	r4, r4, #3
 8012a2c:	42a0      	cmp	r0, r4
 8012a2e:	d005      	beq.n	8012a3c <_malloc_r+0xa8>
 8012a30:	1a21      	subs	r1, r4, r0
 8012a32:	4630      	mov	r0, r6
 8012a34:	f000 f808 	bl	8012a48 <_sbrk_r>
 8012a38:	3001      	adds	r0, #1
 8012a3a:	d0cf      	beq.n	80129dc <_malloc_r+0x48>
 8012a3c:	6025      	str	r5, [r4, #0]
 8012a3e:	e7db      	b.n	80129f8 <_malloc_r+0x64>
 8012a40:	200004ec 	.word	0x200004ec
 8012a44:	200004f0 	.word	0x200004f0

08012a48 <_sbrk_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	4c06      	ldr	r4, [pc, #24]	; (8012a64 <_sbrk_r+0x1c>)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	4605      	mov	r5, r0
 8012a50:	4608      	mov	r0, r1
 8012a52:	6023      	str	r3, [r4, #0]
 8012a54:	f7ef ff7c 	bl	8002950 <_sbrk>
 8012a58:	1c43      	adds	r3, r0, #1
 8012a5a:	d102      	bne.n	8012a62 <_sbrk_r+0x1a>
 8012a5c:	6823      	ldr	r3, [r4, #0]
 8012a5e:	b103      	cbz	r3, 8012a62 <_sbrk_r+0x1a>
 8012a60:	602b      	str	r3, [r5, #0]
 8012a62:	bd38      	pop	{r3, r4, r5, pc}
 8012a64:	20003cc4 	.word	0x20003cc4

08012a68 <sniprintf>:
 8012a68:	b40c      	push	{r2, r3}
 8012a6a:	b530      	push	{r4, r5, lr}
 8012a6c:	4b17      	ldr	r3, [pc, #92]	; (8012acc <sniprintf+0x64>)
 8012a6e:	1e0c      	subs	r4, r1, #0
 8012a70:	b09d      	sub	sp, #116	; 0x74
 8012a72:	681d      	ldr	r5, [r3, #0]
 8012a74:	da08      	bge.n	8012a88 <sniprintf+0x20>
 8012a76:	238b      	movs	r3, #139	; 0x8b
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a7e:	b01d      	add	sp, #116	; 0x74
 8012a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a84:	b002      	add	sp, #8
 8012a86:	4770      	bx	lr
 8012a88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012a8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012a90:	bf14      	ite	ne
 8012a92:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012a96:	4623      	moveq	r3, r4
 8012a98:	9304      	str	r3, [sp, #16]
 8012a9a:	9307      	str	r3, [sp, #28]
 8012a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012aa0:	9002      	str	r0, [sp, #8]
 8012aa2:	9006      	str	r0, [sp, #24]
 8012aa4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012aa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012aaa:	ab21      	add	r3, sp, #132	; 0x84
 8012aac:	a902      	add	r1, sp, #8
 8012aae:	4628      	mov	r0, r5
 8012ab0:	9301      	str	r3, [sp, #4]
 8012ab2:	f000 f8b1 	bl	8012c18 <_svfiprintf_r>
 8012ab6:	1c43      	adds	r3, r0, #1
 8012ab8:	bfbc      	itt	lt
 8012aba:	238b      	movlt	r3, #139	; 0x8b
 8012abc:	602b      	strlt	r3, [r5, #0]
 8012abe:	2c00      	cmp	r4, #0
 8012ac0:	d0dd      	beq.n	8012a7e <sniprintf+0x16>
 8012ac2:	9b02      	ldr	r3, [sp, #8]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	701a      	strb	r2, [r3, #0]
 8012ac8:	e7d9      	b.n	8012a7e <sniprintf+0x16>
 8012aca:	bf00      	nop
 8012acc:	20000090 	.word	0x20000090

08012ad0 <_vsniprintf_r>:
 8012ad0:	b530      	push	{r4, r5, lr}
 8012ad2:	1e14      	subs	r4, r2, #0
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	b09b      	sub	sp, #108	; 0x6c
 8012ad8:	4618      	mov	r0, r3
 8012ada:	da05      	bge.n	8012ae8 <_vsniprintf_r+0x18>
 8012adc:	238b      	movs	r3, #139	; 0x8b
 8012ade:	602b      	str	r3, [r5, #0]
 8012ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ae4:	b01b      	add	sp, #108	; 0x6c
 8012ae6:	bd30      	pop	{r4, r5, pc}
 8012ae8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012aec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012af0:	bf14      	ite	ne
 8012af2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012af6:	4623      	moveq	r3, r4
 8012af8:	9302      	str	r3, [sp, #8]
 8012afa:	9305      	str	r3, [sp, #20]
 8012afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b00:	9100      	str	r1, [sp, #0]
 8012b02:	9104      	str	r1, [sp, #16]
 8012b04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012b08:	4602      	mov	r2, r0
 8012b0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b0c:	4669      	mov	r1, sp
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f000 f882 	bl	8012c18 <_svfiprintf_r>
 8012b14:	1c43      	adds	r3, r0, #1
 8012b16:	bfbc      	itt	lt
 8012b18:	238b      	movlt	r3, #139	; 0x8b
 8012b1a:	602b      	strlt	r3, [r5, #0]
 8012b1c:	2c00      	cmp	r4, #0
 8012b1e:	d0e1      	beq.n	8012ae4 <_vsniprintf_r+0x14>
 8012b20:	9b00      	ldr	r3, [sp, #0]
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]
 8012b26:	e7dd      	b.n	8012ae4 <_vsniprintf_r+0x14>

08012b28 <vsniprintf>:
 8012b28:	b507      	push	{r0, r1, r2, lr}
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	460a      	mov	r2, r1
 8012b30:	4601      	mov	r1, r0
 8012b32:	4803      	ldr	r0, [pc, #12]	; (8012b40 <vsniprintf+0x18>)
 8012b34:	6800      	ldr	r0, [r0, #0]
 8012b36:	f7ff ffcb 	bl	8012ad0 <_vsniprintf_r>
 8012b3a:	b003      	add	sp, #12
 8012b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b40:	20000090 	.word	0x20000090

08012b44 <__ascii_wctomb>:
 8012b44:	b149      	cbz	r1, 8012b5a <__ascii_wctomb+0x16>
 8012b46:	2aff      	cmp	r2, #255	; 0xff
 8012b48:	bf85      	ittet	hi
 8012b4a:	238a      	movhi	r3, #138	; 0x8a
 8012b4c:	6003      	strhi	r3, [r0, #0]
 8012b4e:	700a      	strbls	r2, [r1, #0]
 8012b50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b54:	bf98      	it	ls
 8012b56:	2001      	movls	r0, #1
 8012b58:	4770      	bx	lr
 8012b5a:	4608      	mov	r0, r1
 8012b5c:	4770      	bx	lr

08012b5e <__malloc_lock>:
 8012b5e:	4770      	bx	lr

08012b60 <__malloc_unlock>:
 8012b60:	4770      	bx	lr

08012b62 <__ssputs_r>:
 8012b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b66:	688e      	ldr	r6, [r1, #8]
 8012b68:	429e      	cmp	r6, r3
 8012b6a:	4682      	mov	sl, r0
 8012b6c:	460c      	mov	r4, r1
 8012b6e:	4690      	mov	r8, r2
 8012b70:	4699      	mov	r9, r3
 8012b72:	d837      	bhi.n	8012be4 <__ssputs_r+0x82>
 8012b74:	898a      	ldrh	r2, [r1, #12]
 8012b76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b7a:	d031      	beq.n	8012be0 <__ssputs_r+0x7e>
 8012b7c:	6825      	ldr	r5, [r4, #0]
 8012b7e:	6909      	ldr	r1, [r1, #16]
 8012b80:	1a6f      	subs	r7, r5, r1
 8012b82:	6965      	ldr	r5, [r4, #20]
 8012b84:	2302      	movs	r3, #2
 8012b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b8a:	fb95 f5f3 	sdiv	r5, r5, r3
 8012b8e:	f109 0301 	add.w	r3, r9, #1
 8012b92:	443b      	add	r3, r7
 8012b94:	429d      	cmp	r5, r3
 8012b96:	bf38      	it	cc
 8012b98:	461d      	movcc	r5, r3
 8012b9a:	0553      	lsls	r3, r2, #21
 8012b9c:	d530      	bpl.n	8012c00 <__ssputs_r+0x9e>
 8012b9e:	4629      	mov	r1, r5
 8012ba0:	f7ff fef8 	bl	8012994 <_malloc_r>
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	b950      	cbnz	r0, 8012bbe <__ssputs_r+0x5c>
 8012ba8:	230c      	movs	r3, #12
 8012baa:	f8ca 3000 	str.w	r3, [sl]
 8012bae:	89a3      	ldrh	r3, [r4, #12]
 8012bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bb4:	81a3      	strh	r3, [r4, #12]
 8012bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bbe:	463a      	mov	r2, r7
 8012bc0:	6921      	ldr	r1, [r4, #16]
 8012bc2:	f7ff fe85 	bl	80128d0 <memcpy>
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bd0:	81a3      	strh	r3, [r4, #12]
 8012bd2:	6126      	str	r6, [r4, #16]
 8012bd4:	6165      	str	r5, [r4, #20]
 8012bd6:	443e      	add	r6, r7
 8012bd8:	1bed      	subs	r5, r5, r7
 8012bda:	6026      	str	r6, [r4, #0]
 8012bdc:	60a5      	str	r5, [r4, #8]
 8012bde:	464e      	mov	r6, r9
 8012be0:	454e      	cmp	r6, r9
 8012be2:	d900      	bls.n	8012be6 <__ssputs_r+0x84>
 8012be4:	464e      	mov	r6, r9
 8012be6:	4632      	mov	r2, r6
 8012be8:	4641      	mov	r1, r8
 8012bea:	6820      	ldr	r0, [r4, #0]
 8012bec:	f000 fa94 	bl	8013118 <memmove>
 8012bf0:	68a3      	ldr	r3, [r4, #8]
 8012bf2:	1b9b      	subs	r3, r3, r6
 8012bf4:	60a3      	str	r3, [r4, #8]
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	441e      	add	r6, r3
 8012bfa:	6026      	str	r6, [r4, #0]
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	e7dc      	b.n	8012bba <__ssputs_r+0x58>
 8012c00:	462a      	mov	r2, r5
 8012c02:	f000 faa2 	bl	801314a <_realloc_r>
 8012c06:	4606      	mov	r6, r0
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	d1e2      	bne.n	8012bd2 <__ssputs_r+0x70>
 8012c0c:	6921      	ldr	r1, [r4, #16]
 8012c0e:	4650      	mov	r0, sl
 8012c10:	f7ff fe72 	bl	80128f8 <_free_r>
 8012c14:	e7c8      	b.n	8012ba8 <__ssputs_r+0x46>
	...

08012c18 <_svfiprintf_r>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	461d      	mov	r5, r3
 8012c1e:	898b      	ldrh	r3, [r1, #12]
 8012c20:	061f      	lsls	r7, r3, #24
 8012c22:	b09d      	sub	sp, #116	; 0x74
 8012c24:	4680      	mov	r8, r0
 8012c26:	460c      	mov	r4, r1
 8012c28:	4616      	mov	r6, r2
 8012c2a:	d50f      	bpl.n	8012c4c <_svfiprintf_r+0x34>
 8012c2c:	690b      	ldr	r3, [r1, #16]
 8012c2e:	b96b      	cbnz	r3, 8012c4c <_svfiprintf_r+0x34>
 8012c30:	2140      	movs	r1, #64	; 0x40
 8012c32:	f7ff feaf 	bl	8012994 <_malloc_r>
 8012c36:	6020      	str	r0, [r4, #0]
 8012c38:	6120      	str	r0, [r4, #16]
 8012c3a:	b928      	cbnz	r0, 8012c48 <_svfiprintf_r+0x30>
 8012c3c:	230c      	movs	r3, #12
 8012c3e:	f8c8 3000 	str.w	r3, [r8]
 8012c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c46:	e0c8      	b.n	8012dda <_svfiprintf_r+0x1c2>
 8012c48:	2340      	movs	r3, #64	; 0x40
 8012c4a:	6163      	str	r3, [r4, #20]
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c50:	2320      	movs	r3, #32
 8012c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c56:	2330      	movs	r3, #48	; 0x30
 8012c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c5c:	9503      	str	r5, [sp, #12]
 8012c5e:	f04f 0b01 	mov.w	fp, #1
 8012c62:	4637      	mov	r7, r6
 8012c64:	463d      	mov	r5, r7
 8012c66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c6a:	b10b      	cbz	r3, 8012c70 <_svfiprintf_r+0x58>
 8012c6c:	2b25      	cmp	r3, #37	; 0x25
 8012c6e:	d13e      	bne.n	8012cee <_svfiprintf_r+0xd6>
 8012c70:	ebb7 0a06 	subs.w	sl, r7, r6
 8012c74:	d00b      	beq.n	8012c8e <_svfiprintf_r+0x76>
 8012c76:	4653      	mov	r3, sl
 8012c78:	4632      	mov	r2, r6
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	4640      	mov	r0, r8
 8012c7e:	f7ff ff70 	bl	8012b62 <__ssputs_r>
 8012c82:	3001      	adds	r0, #1
 8012c84:	f000 80a4 	beq.w	8012dd0 <_svfiprintf_r+0x1b8>
 8012c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c8a:	4453      	add	r3, sl
 8012c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8e:	783b      	ldrb	r3, [r7, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	f000 809d 	beq.w	8012dd0 <_svfiprintf_r+0x1b8>
 8012c96:	2300      	movs	r3, #0
 8012c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ca0:	9304      	str	r3, [sp, #16]
 8012ca2:	9307      	str	r3, [sp, #28]
 8012ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8012caa:	462f      	mov	r7, r5
 8012cac:	2205      	movs	r2, #5
 8012cae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012cb2:	4850      	ldr	r0, [pc, #320]	; (8012df4 <_svfiprintf_r+0x1dc>)
 8012cb4:	f7ed faec 	bl	8000290 <memchr>
 8012cb8:	9b04      	ldr	r3, [sp, #16]
 8012cba:	b9d0      	cbnz	r0, 8012cf2 <_svfiprintf_r+0xda>
 8012cbc:	06d9      	lsls	r1, r3, #27
 8012cbe:	bf44      	itt	mi
 8012cc0:	2220      	movmi	r2, #32
 8012cc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cc6:	071a      	lsls	r2, r3, #28
 8012cc8:	bf44      	itt	mi
 8012cca:	222b      	movmi	r2, #43	; 0x2b
 8012ccc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cd0:	782a      	ldrb	r2, [r5, #0]
 8012cd2:	2a2a      	cmp	r2, #42	; 0x2a
 8012cd4:	d015      	beq.n	8012d02 <_svfiprintf_r+0xea>
 8012cd6:	9a07      	ldr	r2, [sp, #28]
 8012cd8:	462f      	mov	r7, r5
 8012cda:	2000      	movs	r0, #0
 8012cdc:	250a      	movs	r5, #10
 8012cde:	4639      	mov	r1, r7
 8012ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ce4:	3b30      	subs	r3, #48	; 0x30
 8012ce6:	2b09      	cmp	r3, #9
 8012ce8:	d94d      	bls.n	8012d86 <_svfiprintf_r+0x16e>
 8012cea:	b1b8      	cbz	r0, 8012d1c <_svfiprintf_r+0x104>
 8012cec:	e00f      	b.n	8012d0e <_svfiprintf_r+0xf6>
 8012cee:	462f      	mov	r7, r5
 8012cf0:	e7b8      	b.n	8012c64 <_svfiprintf_r+0x4c>
 8012cf2:	4a40      	ldr	r2, [pc, #256]	; (8012df4 <_svfiprintf_r+0x1dc>)
 8012cf4:	1a80      	subs	r0, r0, r2
 8012cf6:	fa0b f000 	lsl.w	r0, fp, r0
 8012cfa:	4318      	orrs	r0, r3
 8012cfc:	9004      	str	r0, [sp, #16]
 8012cfe:	463d      	mov	r5, r7
 8012d00:	e7d3      	b.n	8012caa <_svfiprintf_r+0x92>
 8012d02:	9a03      	ldr	r2, [sp, #12]
 8012d04:	1d11      	adds	r1, r2, #4
 8012d06:	6812      	ldr	r2, [r2, #0]
 8012d08:	9103      	str	r1, [sp, #12]
 8012d0a:	2a00      	cmp	r2, #0
 8012d0c:	db01      	blt.n	8012d12 <_svfiprintf_r+0xfa>
 8012d0e:	9207      	str	r2, [sp, #28]
 8012d10:	e004      	b.n	8012d1c <_svfiprintf_r+0x104>
 8012d12:	4252      	negs	r2, r2
 8012d14:	f043 0302 	orr.w	r3, r3, #2
 8012d18:	9207      	str	r2, [sp, #28]
 8012d1a:	9304      	str	r3, [sp, #16]
 8012d1c:	783b      	ldrb	r3, [r7, #0]
 8012d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8012d20:	d10c      	bne.n	8012d3c <_svfiprintf_r+0x124>
 8012d22:	787b      	ldrb	r3, [r7, #1]
 8012d24:	2b2a      	cmp	r3, #42	; 0x2a
 8012d26:	d133      	bne.n	8012d90 <_svfiprintf_r+0x178>
 8012d28:	9b03      	ldr	r3, [sp, #12]
 8012d2a:	1d1a      	adds	r2, r3, #4
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	9203      	str	r2, [sp, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	bfb8      	it	lt
 8012d34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d38:	3702      	adds	r7, #2
 8012d3a:	9305      	str	r3, [sp, #20]
 8012d3c:	4d2e      	ldr	r5, [pc, #184]	; (8012df8 <_svfiprintf_r+0x1e0>)
 8012d3e:	7839      	ldrb	r1, [r7, #0]
 8012d40:	2203      	movs	r2, #3
 8012d42:	4628      	mov	r0, r5
 8012d44:	f7ed faa4 	bl	8000290 <memchr>
 8012d48:	b138      	cbz	r0, 8012d5a <_svfiprintf_r+0x142>
 8012d4a:	2340      	movs	r3, #64	; 0x40
 8012d4c:	1b40      	subs	r0, r0, r5
 8012d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8012d52:	9b04      	ldr	r3, [sp, #16]
 8012d54:	4303      	orrs	r3, r0
 8012d56:	3701      	adds	r7, #1
 8012d58:	9304      	str	r3, [sp, #16]
 8012d5a:	7839      	ldrb	r1, [r7, #0]
 8012d5c:	4827      	ldr	r0, [pc, #156]	; (8012dfc <_svfiprintf_r+0x1e4>)
 8012d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d62:	2206      	movs	r2, #6
 8012d64:	1c7e      	adds	r6, r7, #1
 8012d66:	f7ed fa93 	bl	8000290 <memchr>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d038      	beq.n	8012de0 <_svfiprintf_r+0x1c8>
 8012d6e:	4b24      	ldr	r3, [pc, #144]	; (8012e00 <_svfiprintf_r+0x1e8>)
 8012d70:	bb13      	cbnz	r3, 8012db8 <_svfiprintf_r+0x1a0>
 8012d72:	9b03      	ldr	r3, [sp, #12]
 8012d74:	3307      	adds	r3, #7
 8012d76:	f023 0307 	bic.w	r3, r3, #7
 8012d7a:	3308      	adds	r3, #8
 8012d7c:	9303      	str	r3, [sp, #12]
 8012d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d80:	444b      	add	r3, r9
 8012d82:	9309      	str	r3, [sp, #36]	; 0x24
 8012d84:	e76d      	b.n	8012c62 <_svfiprintf_r+0x4a>
 8012d86:	fb05 3202 	mla	r2, r5, r2, r3
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	460f      	mov	r7, r1
 8012d8e:	e7a6      	b.n	8012cde <_svfiprintf_r+0xc6>
 8012d90:	2300      	movs	r3, #0
 8012d92:	3701      	adds	r7, #1
 8012d94:	9305      	str	r3, [sp, #20]
 8012d96:	4619      	mov	r1, r3
 8012d98:	250a      	movs	r5, #10
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012da0:	3a30      	subs	r2, #48	; 0x30
 8012da2:	2a09      	cmp	r2, #9
 8012da4:	d903      	bls.n	8012dae <_svfiprintf_r+0x196>
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d0c8      	beq.n	8012d3c <_svfiprintf_r+0x124>
 8012daa:	9105      	str	r1, [sp, #20]
 8012dac:	e7c6      	b.n	8012d3c <_svfiprintf_r+0x124>
 8012dae:	fb05 2101 	mla	r1, r5, r1, r2
 8012db2:	2301      	movs	r3, #1
 8012db4:	4607      	mov	r7, r0
 8012db6:	e7f0      	b.n	8012d9a <_svfiprintf_r+0x182>
 8012db8:	ab03      	add	r3, sp, #12
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	4622      	mov	r2, r4
 8012dbe:	4b11      	ldr	r3, [pc, #68]	; (8012e04 <_svfiprintf_r+0x1ec>)
 8012dc0:	a904      	add	r1, sp, #16
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012dcc:	4681      	mov	r9, r0
 8012dce:	d1d6      	bne.n	8012d7e <_svfiprintf_r+0x166>
 8012dd0:	89a3      	ldrh	r3, [r4, #12]
 8012dd2:	065b      	lsls	r3, r3, #25
 8012dd4:	f53f af35 	bmi.w	8012c42 <_svfiprintf_r+0x2a>
 8012dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dda:	b01d      	add	sp, #116	; 0x74
 8012ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de0:	ab03      	add	r3, sp, #12
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	4622      	mov	r2, r4
 8012de6:	4b07      	ldr	r3, [pc, #28]	; (8012e04 <_svfiprintf_r+0x1ec>)
 8012de8:	a904      	add	r1, sp, #16
 8012dea:	4640      	mov	r0, r8
 8012dec:	f000 f882 	bl	8012ef4 <_printf_i>
 8012df0:	e7ea      	b.n	8012dc8 <_svfiprintf_r+0x1b0>
 8012df2:	bf00      	nop
 8012df4:	08015b13 	.word	0x08015b13
 8012df8:	08015b19 	.word	0x08015b19
 8012dfc:	08015b1d 	.word	0x08015b1d
 8012e00:	00000000 	.word	0x00000000
 8012e04:	08012b63 	.word	0x08012b63

08012e08 <_printf_common>:
 8012e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e0c:	4691      	mov	r9, r2
 8012e0e:	461f      	mov	r7, r3
 8012e10:	688a      	ldr	r2, [r1, #8]
 8012e12:	690b      	ldr	r3, [r1, #16]
 8012e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	bfb8      	it	lt
 8012e1c:	4613      	movlt	r3, r2
 8012e1e:	f8c9 3000 	str.w	r3, [r9]
 8012e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e26:	4606      	mov	r6, r0
 8012e28:	460c      	mov	r4, r1
 8012e2a:	b112      	cbz	r2, 8012e32 <_printf_common+0x2a>
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	f8c9 3000 	str.w	r3, [r9]
 8012e32:	6823      	ldr	r3, [r4, #0]
 8012e34:	0699      	lsls	r1, r3, #26
 8012e36:	bf42      	ittt	mi
 8012e38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e3c:	3302      	addmi	r3, #2
 8012e3e:	f8c9 3000 	strmi.w	r3, [r9]
 8012e42:	6825      	ldr	r5, [r4, #0]
 8012e44:	f015 0506 	ands.w	r5, r5, #6
 8012e48:	d107      	bne.n	8012e5a <_printf_common+0x52>
 8012e4a:	f104 0a19 	add.w	sl, r4, #25
 8012e4e:	68e3      	ldr	r3, [r4, #12]
 8012e50:	f8d9 2000 	ldr.w	r2, [r9]
 8012e54:	1a9b      	subs	r3, r3, r2
 8012e56:	42ab      	cmp	r3, r5
 8012e58:	dc28      	bgt.n	8012eac <_printf_common+0xa4>
 8012e5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e5e:	6822      	ldr	r2, [r4, #0]
 8012e60:	3300      	adds	r3, #0
 8012e62:	bf18      	it	ne
 8012e64:	2301      	movne	r3, #1
 8012e66:	0692      	lsls	r2, r2, #26
 8012e68:	d42d      	bmi.n	8012ec6 <_printf_common+0xbe>
 8012e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e6e:	4639      	mov	r1, r7
 8012e70:	4630      	mov	r0, r6
 8012e72:	47c0      	blx	r8
 8012e74:	3001      	adds	r0, #1
 8012e76:	d020      	beq.n	8012eba <_printf_common+0xb2>
 8012e78:	6823      	ldr	r3, [r4, #0]
 8012e7a:	68e5      	ldr	r5, [r4, #12]
 8012e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8012e80:	f003 0306 	and.w	r3, r3, #6
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	bf08      	it	eq
 8012e88:	1aad      	subeq	r5, r5, r2
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	6922      	ldr	r2, [r4, #16]
 8012e8e:	bf0c      	ite	eq
 8012e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e94:	2500      	movne	r5, #0
 8012e96:	4293      	cmp	r3, r2
 8012e98:	bfc4      	itt	gt
 8012e9a:	1a9b      	subgt	r3, r3, r2
 8012e9c:	18ed      	addgt	r5, r5, r3
 8012e9e:	f04f 0900 	mov.w	r9, #0
 8012ea2:	341a      	adds	r4, #26
 8012ea4:	454d      	cmp	r5, r9
 8012ea6:	d11a      	bne.n	8012ede <_printf_common+0xd6>
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	e008      	b.n	8012ebe <_printf_common+0xb6>
 8012eac:	2301      	movs	r3, #1
 8012eae:	4652      	mov	r2, sl
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	47c0      	blx	r8
 8012eb6:	3001      	adds	r0, #1
 8012eb8:	d103      	bne.n	8012ec2 <_printf_common+0xba>
 8012eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec2:	3501      	adds	r5, #1
 8012ec4:	e7c3      	b.n	8012e4e <_printf_common+0x46>
 8012ec6:	18e1      	adds	r1, r4, r3
 8012ec8:	1c5a      	adds	r2, r3, #1
 8012eca:	2030      	movs	r0, #48	; 0x30
 8012ecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ed0:	4422      	add	r2, r4
 8012ed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012eda:	3302      	adds	r3, #2
 8012edc:	e7c5      	b.n	8012e6a <_printf_common+0x62>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	4639      	mov	r1, r7
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	47c0      	blx	r8
 8012ee8:	3001      	adds	r0, #1
 8012eea:	d0e6      	beq.n	8012eba <_printf_common+0xb2>
 8012eec:	f109 0901 	add.w	r9, r9, #1
 8012ef0:	e7d8      	b.n	8012ea4 <_printf_common+0x9c>
	...

08012ef4 <_printf_i>:
 8012ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ef8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012efc:	460c      	mov	r4, r1
 8012efe:	7e09      	ldrb	r1, [r1, #24]
 8012f00:	b085      	sub	sp, #20
 8012f02:	296e      	cmp	r1, #110	; 0x6e
 8012f04:	4617      	mov	r7, r2
 8012f06:	4606      	mov	r6, r0
 8012f08:	4698      	mov	r8, r3
 8012f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f0c:	f000 80b3 	beq.w	8013076 <_printf_i+0x182>
 8012f10:	d822      	bhi.n	8012f58 <_printf_i+0x64>
 8012f12:	2963      	cmp	r1, #99	; 0x63
 8012f14:	d036      	beq.n	8012f84 <_printf_i+0x90>
 8012f16:	d80a      	bhi.n	8012f2e <_printf_i+0x3a>
 8012f18:	2900      	cmp	r1, #0
 8012f1a:	f000 80b9 	beq.w	8013090 <_printf_i+0x19c>
 8012f1e:	2958      	cmp	r1, #88	; 0x58
 8012f20:	f000 8083 	beq.w	801302a <_printf_i+0x136>
 8012f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012f2c:	e032      	b.n	8012f94 <_printf_i+0xa0>
 8012f2e:	2964      	cmp	r1, #100	; 0x64
 8012f30:	d001      	beq.n	8012f36 <_printf_i+0x42>
 8012f32:	2969      	cmp	r1, #105	; 0x69
 8012f34:	d1f6      	bne.n	8012f24 <_printf_i+0x30>
 8012f36:	6820      	ldr	r0, [r4, #0]
 8012f38:	6813      	ldr	r3, [r2, #0]
 8012f3a:	0605      	lsls	r5, r0, #24
 8012f3c:	f103 0104 	add.w	r1, r3, #4
 8012f40:	d52a      	bpl.n	8012f98 <_printf_i+0xa4>
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	6011      	str	r1, [r2, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	da03      	bge.n	8012f52 <_printf_i+0x5e>
 8012f4a:	222d      	movs	r2, #45	; 0x2d
 8012f4c:	425b      	negs	r3, r3
 8012f4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012f52:	486f      	ldr	r0, [pc, #444]	; (8013110 <_printf_i+0x21c>)
 8012f54:	220a      	movs	r2, #10
 8012f56:	e039      	b.n	8012fcc <_printf_i+0xd8>
 8012f58:	2973      	cmp	r1, #115	; 0x73
 8012f5a:	f000 809d 	beq.w	8013098 <_printf_i+0x1a4>
 8012f5e:	d808      	bhi.n	8012f72 <_printf_i+0x7e>
 8012f60:	296f      	cmp	r1, #111	; 0x6f
 8012f62:	d020      	beq.n	8012fa6 <_printf_i+0xb2>
 8012f64:	2970      	cmp	r1, #112	; 0x70
 8012f66:	d1dd      	bne.n	8012f24 <_printf_i+0x30>
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	f043 0320 	orr.w	r3, r3, #32
 8012f6e:	6023      	str	r3, [r4, #0]
 8012f70:	e003      	b.n	8012f7a <_printf_i+0x86>
 8012f72:	2975      	cmp	r1, #117	; 0x75
 8012f74:	d017      	beq.n	8012fa6 <_printf_i+0xb2>
 8012f76:	2978      	cmp	r1, #120	; 0x78
 8012f78:	d1d4      	bne.n	8012f24 <_printf_i+0x30>
 8012f7a:	2378      	movs	r3, #120	; 0x78
 8012f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f80:	4864      	ldr	r0, [pc, #400]	; (8013114 <_printf_i+0x220>)
 8012f82:	e055      	b.n	8013030 <_printf_i+0x13c>
 8012f84:	6813      	ldr	r3, [r2, #0]
 8012f86:	1d19      	adds	r1, r3, #4
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	6011      	str	r1, [r2, #0]
 8012f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f94:	2301      	movs	r3, #1
 8012f96:	e08c      	b.n	80130b2 <_printf_i+0x1be>
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	6011      	str	r1, [r2, #0]
 8012f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fa0:	bf18      	it	ne
 8012fa2:	b21b      	sxthne	r3, r3
 8012fa4:	e7cf      	b.n	8012f46 <_printf_i+0x52>
 8012fa6:	6813      	ldr	r3, [r2, #0]
 8012fa8:	6825      	ldr	r5, [r4, #0]
 8012faa:	1d18      	adds	r0, r3, #4
 8012fac:	6010      	str	r0, [r2, #0]
 8012fae:	0628      	lsls	r0, r5, #24
 8012fb0:	d501      	bpl.n	8012fb6 <_printf_i+0xc2>
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	e002      	b.n	8012fbc <_printf_i+0xc8>
 8012fb6:	0668      	lsls	r0, r5, #25
 8012fb8:	d5fb      	bpl.n	8012fb2 <_printf_i+0xbe>
 8012fba:	881b      	ldrh	r3, [r3, #0]
 8012fbc:	4854      	ldr	r0, [pc, #336]	; (8013110 <_printf_i+0x21c>)
 8012fbe:	296f      	cmp	r1, #111	; 0x6f
 8012fc0:	bf14      	ite	ne
 8012fc2:	220a      	movne	r2, #10
 8012fc4:	2208      	moveq	r2, #8
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fcc:	6865      	ldr	r5, [r4, #4]
 8012fce:	60a5      	str	r5, [r4, #8]
 8012fd0:	2d00      	cmp	r5, #0
 8012fd2:	f2c0 8095 	blt.w	8013100 <_printf_i+0x20c>
 8012fd6:	6821      	ldr	r1, [r4, #0]
 8012fd8:	f021 0104 	bic.w	r1, r1, #4
 8012fdc:	6021      	str	r1, [r4, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d13d      	bne.n	801305e <_printf_i+0x16a>
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	f040 808e 	bne.w	8013104 <_printf_i+0x210>
 8012fe8:	4665      	mov	r5, ip
 8012fea:	2a08      	cmp	r2, #8
 8012fec:	d10b      	bne.n	8013006 <_printf_i+0x112>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	07db      	lsls	r3, r3, #31
 8012ff2:	d508      	bpl.n	8013006 <_printf_i+0x112>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	6862      	ldr	r2, [r4, #4]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	bfde      	ittt	le
 8012ffc:	2330      	movle	r3, #48	; 0x30
 8012ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013002:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013006:	ebac 0305 	sub.w	r3, ip, r5
 801300a:	6123      	str	r3, [r4, #16]
 801300c:	f8cd 8000 	str.w	r8, [sp]
 8013010:	463b      	mov	r3, r7
 8013012:	aa03      	add	r2, sp, #12
 8013014:	4621      	mov	r1, r4
 8013016:	4630      	mov	r0, r6
 8013018:	f7ff fef6 	bl	8012e08 <_printf_common>
 801301c:	3001      	adds	r0, #1
 801301e:	d14d      	bne.n	80130bc <_printf_i+0x1c8>
 8013020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013024:	b005      	add	sp, #20
 8013026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801302a:	4839      	ldr	r0, [pc, #228]	; (8013110 <_printf_i+0x21c>)
 801302c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013030:	6813      	ldr	r3, [r2, #0]
 8013032:	6821      	ldr	r1, [r4, #0]
 8013034:	1d1d      	adds	r5, r3, #4
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6015      	str	r5, [r2, #0]
 801303a:	060a      	lsls	r2, r1, #24
 801303c:	d50b      	bpl.n	8013056 <_printf_i+0x162>
 801303e:	07ca      	lsls	r2, r1, #31
 8013040:	bf44      	itt	mi
 8013042:	f041 0120 	orrmi.w	r1, r1, #32
 8013046:	6021      	strmi	r1, [r4, #0]
 8013048:	b91b      	cbnz	r3, 8013052 <_printf_i+0x15e>
 801304a:	6822      	ldr	r2, [r4, #0]
 801304c:	f022 0220 	bic.w	r2, r2, #32
 8013050:	6022      	str	r2, [r4, #0]
 8013052:	2210      	movs	r2, #16
 8013054:	e7b7      	b.n	8012fc6 <_printf_i+0xd2>
 8013056:	064d      	lsls	r5, r1, #25
 8013058:	bf48      	it	mi
 801305a:	b29b      	uxthmi	r3, r3
 801305c:	e7ef      	b.n	801303e <_printf_i+0x14a>
 801305e:	4665      	mov	r5, ip
 8013060:	fbb3 f1f2 	udiv	r1, r3, r2
 8013064:	fb02 3311 	mls	r3, r2, r1, r3
 8013068:	5cc3      	ldrb	r3, [r0, r3]
 801306a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801306e:	460b      	mov	r3, r1
 8013070:	2900      	cmp	r1, #0
 8013072:	d1f5      	bne.n	8013060 <_printf_i+0x16c>
 8013074:	e7b9      	b.n	8012fea <_printf_i+0xf6>
 8013076:	6813      	ldr	r3, [r2, #0]
 8013078:	6825      	ldr	r5, [r4, #0]
 801307a:	6961      	ldr	r1, [r4, #20]
 801307c:	1d18      	adds	r0, r3, #4
 801307e:	6010      	str	r0, [r2, #0]
 8013080:	0628      	lsls	r0, r5, #24
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	d501      	bpl.n	801308a <_printf_i+0x196>
 8013086:	6019      	str	r1, [r3, #0]
 8013088:	e002      	b.n	8013090 <_printf_i+0x19c>
 801308a:	066a      	lsls	r2, r5, #25
 801308c:	d5fb      	bpl.n	8013086 <_printf_i+0x192>
 801308e:	8019      	strh	r1, [r3, #0]
 8013090:	2300      	movs	r3, #0
 8013092:	6123      	str	r3, [r4, #16]
 8013094:	4665      	mov	r5, ip
 8013096:	e7b9      	b.n	801300c <_printf_i+0x118>
 8013098:	6813      	ldr	r3, [r2, #0]
 801309a:	1d19      	adds	r1, r3, #4
 801309c:	6011      	str	r1, [r2, #0]
 801309e:	681d      	ldr	r5, [r3, #0]
 80130a0:	6862      	ldr	r2, [r4, #4]
 80130a2:	2100      	movs	r1, #0
 80130a4:	4628      	mov	r0, r5
 80130a6:	f7ed f8f3 	bl	8000290 <memchr>
 80130aa:	b108      	cbz	r0, 80130b0 <_printf_i+0x1bc>
 80130ac:	1b40      	subs	r0, r0, r5
 80130ae:	6060      	str	r0, [r4, #4]
 80130b0:	6863      	ldr	r3, [r4, #4]
 80130b2:	6123      	str	r3, [r4, #16]
 80130b4:	2300      	movs	r3, #0
 80130b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130ba:	e7a7      	b.n	801300c <_printf_i+0x118>
 80130bc:	6923      	ldr	r3, [r4, #16]
 80130be:	462a      	mov	r2, r5
 80130c0:	4639      	mov	r1, r7
 80130c2:	4630      	mov	r0, r6
 80130c4:	47c0      	blx	r8
 80130c6:	3001      	adds	r0, #1
 80130c8:	d0aa      	beq.n	8013020 <_printf_i+0x12c>
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	079b      	lsls	r3, r3, #30
 80130ce:	d413      	bmi.n	80130f8 <_printf_i+0x204>
 80130d0:	68e0      	ldr	r0, [r4, #12]
 80130d2:	9b03      	ldr	r3, [sp, #12]
 80130d4:	4298      	cmp	r0, r3
 80130d6:	bfb8      	it	lt
 80130d8:	4618      	movlt	r0, r3
 80130da:	e7a3      	b.n	8013024 <_printf_i+0x130>
 80130dc:	2301      	movs	r3, #1
 80130de:	464a      	mov	r2, r9
 80130e0:	4639      	mov	r1, r7
 80130e2:	4630      	mov	r0, r6
 80130e4:	47c0      	blx	r8
 80130e6:	3001      	adds	r0, #1
 80130e8:	d09a      	beq.n	8013020 <_printf_i+0x12c>
 80130ea:	3501      	adds	r5, #1
 80130ec:	68e3      	ldr	r3, [r4, #12]
 80130ee:	9a03      	ldr	r2, [sp, #12]
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	42ab      	cmp	r3, r5
 80130f4:	dcf2      	bgt.n	80130dc <_printf_i+0x1e8>
 80130f6:	e7eb      	b.n	80130d0 <_printf_i+0x1dc>
 80130f8:	2500      	movs	r5, #0
 80130fa:	f104 0919 	add.w	r9, r4, #25
 80130fe:	e7f5      	b.n	80130ec <_printf_i+0x1f8>
 8013100:	2b00      	cmp	r3, #0
 8013102:	d1ac      	bne.n	801305e <_printf_i+0x16a>
 8013104:	7803      	ldrb	r3, [r0, #0]
 8013106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801310a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801310e:	e76c      	b.n	8012fea <_printf_i+0xf6>
 8013110:	08015b24 	.word	0x08015b24
 8013114:	08015b35 	.word	0x08015b35

08013118 <memmove>:
 8013118:	4288      	cmp	r0, r1
 801311a:	b510      	push	{r4, lr}
 801311c:	eb01 0302 	add.w	r3, r1, r2
 8013120:	d807      	bhi.n	8013132 <memmove+0x1a>
 8013122:	1e42      	subs	r2, r0, #1
 8013124:	4299      	cmp	r1, r3
 8013126:	d00a      	beq.n	801313e <memmove+0x26>
 8013128:	f811 4b01 	ldrb.w	r4, [r1], #1
 801312c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013130:	e7f8      	b.n	8013124 <memmove+0xc>
 8013132:	4283      	cmp	r3, r0
 8013134:	d9f5      	bls.n	8013122 <memmove+0xa>
 8013136:	1881      	adds	r1, r0, r2
 8013138:	1ad2      	subs	r2, r2, r3
 801313a:	42d3      	cmn	r3, r2
 801313c:	d100      	bne.n	8013140 <memmove+0x28>
 801313e:	bd10      	pop	{r4, pc}
 8013140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013144:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013148:	e7f7      	b.n	801313a <memmove+0x22>

0801314a <_realloc_r>:
 801314a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314c:	4607      	mov	r7, r0
 801314e:	4614      	mov	r4, r2
 8013150:	460e      	mov	r6, r1
 8013152:	b921      	cbnz	r1, 801315e <_realloc_r+0x14>
 8013154:	4611      	mov	r1, r2
 8013156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801315a:	f7ff bc1b 	b.w	8012994 <_malloc_r>
 801315e:	b922      	cbnz	r2, 801316a <_realloc_r+0x20>
 8013160:	f7ff fbca 	bl	80128f8 <_free_r>
 8013164:	4625      	mov	r5, r4
 8013166:	4628      	mov	r0, r5
 8013168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801316a:	f000 f814 	bl	8013196 <_malloc_usable_size_r>
 801316e:	42a0      	cmp	r0, r4
 8013170:	d20f      	bcs.n	8013192 <_realloc_r+0x48>
 8013172:	4621      	mov	r1, r4
 8013174:	4638      	mov	r0, r7
 8013176:	f7ff fc0d 	bl	8012994 <_malloc_r>
 801317a:	4605      	mov	r5, r0
 801317c:	2800      	cmp	r0, #0
 801317e:	d0f2      	beq.n	8013166 <_realloc_r+0x1c>
 8013180:	4631      	mov	r1, r6
 8013182:	4622      	mov	r2, r4
 8013184:	f7ff fba4 	bl	80128d0 <memcpy>
 8013188:	4631      	mov	r1, r6
 801318a:	4638      	mov	r0, r7
 801318c:	f7ff fbb4 	bl	80128f8 <_free_r>
 8013190:	e7e9      	b.n	8013166 <_realloc_r+0x1c>
 8013192:	4635      	mov	r5, r6
 8013194:	e7e7      	b.n	8013166 <_realloc_r+0x1c>

08013196 <_malloc_usable_size_r>:
 8013196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801319a:	1f18      	subs	r0, r3, #4
 801319c:	2b00      	cmp	r3, #0
 801319e:	bfbc      	itt	lt
 80131a0:	580b      	ldrlt	r3, [r1, r0]
 80131a2:	18c0      	addlt	r0, r0, r3
 80131a4:	4770      	bx	lr
	...

080131a8 <log10>:
 80131a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131aa:	ed2d 8b02 	vpush	{d8}
 80131ae:	b08b      	sub	sp, #44	; 0x2c
 80131b0:	ec55 4b10 	vmov	r4, r5, d0
 80131b4:	f000 f8c8 	bl	8013348 <__ieee754_log10>
 80131b8:	4b36      	ldr	r3, [pc, #216]	; (8013294 <log10+0xec>)
 80131ba:	eeb0 8a40 	vmov.f32	s16, s0
 80131be:	eef0 8a60 	vmov.f32	s17, s1
 80131c2:	f993 6000 	ldrsb.w	r6, [r3]
 80131c6:	1c73      	adds	r3, r6, #1
 80131c8:	d05c      	beq.n	8013284 <log10+0xdc>
 80131ca:	4622      	mov	r2, r4
 80131cc:	462b      	mov	r3, r5
 80131ce:	4620      	mov	r0, r4
 80131d0:	4629      	mov	r1, r5
 80131d2:	f7ed fd03 	bl	8000bdc <__aeabi_dcmpun>
 80131d6:	4607      	mov	r7, r0
 80131d8:	2800      	cmp	r0, #0
 80131da:	d153      	bne.n	8013284 <log10+0xdc>
 80131dc:	2200      	movs	r2, #0
 80131de:	2300      	movs	r3, #0
 80131e0:	4620      	mov	r0, r4
 80131e2:	4629      	mov	r1, r5
 80131e4:	f7ed fcdc 	bl	8000ba0 <__aeabi_dcmple>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	d04b      	beq.n	8013284 <log10+0xdc>
 80131ec:	4b2a      	ldr	r3, [pc, #168]	; (8013298 <log10+0xf0>)
 80131ee:	9301      	str	r3, [sp, #4]
 80131f0:	9708      	str	r7, [sp, #32]
 80131f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80131f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80131fa:	b9a6      	cbnz	r6, 8013226 <log10+0x7e>
 80131fc:	4b27      	ldr	r3, [pc, #156]	; (801329c <log10+0xf4>)
 80131fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013202:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013206:	4620      	mov	r0, r4
 8013208:	2200      	movs	r2, #0
 801320a:	2300      	movs	r3, #0
 801320c:	4629      	mov	r1, r5
 801320e:	f7ed fcb3 	bl	8000b78 <__aeabi_dcmpeq>
 8013212:	bb40      	cbnz	r0, 8013266 <log10+0xbe>
 8013214:	2301      	movs	r3, #1
 8013216:	2e02      	cmp	r6, #2
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	d119      	bne.n	8013250 <log10+0xa8>
 801321c:	f7ff fafe 	bl	801281c <__errno>
 8013220:	2321      	movs	r3, #33	; 0x21
 8013222:	6003      	str	r3, [r0, #0]
 8013224:	e019      	b.n	801325a <log10+0xb2>
 8013226:	4b1e      	ldr	r3, [pc, #120]	; (80132a0 <log10+0xf8>)
 8013228:	2200      	movs	r2, #0
 801322a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801322e:	4620      	mov	r0, r4
 8013230:	2200      	movs	r2, #0
 8013232:	2300      	movs	r3, #0
 8013234:	4629      	mov	r1, r5
 8013236:	f7ed fc9f 	bl	8000b78 <__aeabi_dcmpeq>
 801323a:	2800      	cmp	r0, #0
 801323c:	d0ea      	beq.n	8013214 <log10+0x6c>
 801323e:	2302      	movs	r3, #2
 8013240:	429e      	cmp	r6, r3
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	d111      	bne.n	801326a <log10+0xc2>
 8013246:	f7ff fae9 	bl	801281c <__errno>
 801324a:	2322      	movs	r3, #34	; 0x22
 801324c:	6003      	str	r3, [r0, #0]
 801324e:	e011      	b.n	8013274 <log10+0xcc>
 8013250:	4668      	mov	r0, sp
 8013252:	f000 f906 	bl	8013462 <matherr>
 8013256:	2800      	cmp	r0, #0
 8013258:	d0e0      	beq.n	801321c <log10+0x74>
 801325a:	4812      	ldr	r0, [pc, #72]	; (80132a4 <log10+0xfc>)
 801325c:	f000 f904 	bl	8013468 <nan>
 8013260:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013264:	e006      	b.n	8013274 <log10+0xcc>
 8013266:	2302      	movs	r3, #2
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	4668      	mov	r0, sp
 801326c:	f000 f8f9 	bl	8013462 <matherr>
 8013270:	2800      	cmp	r0, #0
 8013272:	d0e8      	beq.n	8013246 <log10+0x9e>
 8013274:	9b08      	ldr	r3, [sp, #32]
 8013276:	b11b      	cbz	r3, 8013280 <log10+0xd8>
 8013278:	f7ff fad0 	bl	801281c <__errno>
 801327c:	9b08      	ldr	r3, [sp, #32]
 801327e:	6003      	str	r3, [r0, #0]
 8013280:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013284:	eeb0 0a48 	vmov.f32	s0, s16
 8013288:	eef0 0a68 	vmov.f32	s1, s17
 801328c:	b00b      	add	sp, #44	; 0x2c
 801328e:	ecbd 8b02 	vpop	{d8}
 8013292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013294:	20000260 	.word	0x20000260
 8013298:	08015b46 	.word	0x08015b46
 801329c:	c7efffff 	.word	0xc7efffff
 80132a0:	fff00000 	.word	0xfff00000
 80132a4:	08015b18 	.word	0x08015b18

080132a8 <sqrtf>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	ed2d 8b02 	vpush	{d8}
 80132ae:	b08a      	sub	sp, #40	; 0x28
 80132b0:	eeb0 8a40 	vmov.f32	s16, s0
 80132b4:	f000 f8d2 	bl	801345c <__ieee754_sqrtf>
 80132b8:	4b21      	ldr	r3, [pc, #132]	; (8013340 <sqrtf+0x98>)
 80132ba:	f993 4000 	ldrsb.w	r4, [r3]
 80132be:	1c63      	adds	r3, r4, #1
 80132c0:	d02c      	beq.n	801331c <sqrtf+0x74>
 80132c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80132c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ca:	d627      	bvs.n	801331c <sqrtf+0x74>
 80132cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	d522      	bpl.n	801331c <sqrtf+0x74>
 80132d6:	2301      	movs	r3, #1
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	4b1a      	ldr	r3, [pc, #104]	; (8013344 <sqrtf+0x9c>)
 80132dc:	9301      	str	r3, [sp, #4]
 80132de:	ee18 0a10 	vmov	r0, s16
 80132e2:	2300      	movs	r3, #0
 80132e4:	9308      	str	r3, [sp, #32]
 80132e6:	f7ed f987 	bl	80005f8 <__aeabi_f2d>
 80132ea:	2200      	movs	r2, #0
 80132ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f4:	2300      	movs	r3, #0
 80132f6:	b9ac      	cbnz	r4, 8013324 <sqrtf+0x7c>
 80132f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80132fc:	4668      	mov	r0, sp
 80132fe:	f000 f8b0 	bl	8013462 <matherr>
 8013302:	b1b8      	cbz	r0, 8013334 <sqrtf+0x8c>
 8013304:	9b08      	ldr	r3, [sp, #32]
 8013306:	b11b      	cbz	r3, 8013310 <sqrtf+0x68>
 8013308:	f7ff fa88 	bl	801281c <__errno>
 801330c:	9b08      	ldr	r3, [sp, #32]
 801330e:	6003      	str	r3, [r0, #0]
 8013310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013314:	f7ed fc78 	bl	8000c08 <__aeabi_d2f>
 8013318:	ee00 0a10 	vmov	s0, r0
 801331c:	b00a      	add	sp, #40	; 0x28
 801331e:	ecbd 8b02 	vpop	{d8}
 8013322:	bd10      	pop	{r4, pc}
 8013324:	4610      	mov	r0, r2
 8013326:	4619      	mov	r1, r3
 8013328:	f7ed fae8 	bl	80008fc <__aeabi_ddiv>
 801332c:	2c02      	cmp	r4, #2
 801332e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013332:	d1e3      	bne.n	80132fc <sqrtf+0x54>
 8013334:	f7ff fa72 	bl	801281c <__errno>
 8013338:	2321      	movs	r3, #33	; 0x21
 801333a:	6003      	str	r3, [r0, #0]
 801333c:	e7e2      	b.n	8013304 <sqrtf+0x5c>
 801333e:	bf00      	nop
 8013340:	20000260 	.word	0x20000260
 8013344:	08015b4c 	.word	0x08015b4c

08013348 <__ieee754_log10>:
 8013348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801334c:	ec55 4b10 	vmov	r4, r5, d0
 8013350:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013354:	462b      	mov	r3, r5
 8013356:	da2f      	bge.n	80133b8 <__ieee754_log10+0x70>
 8013358:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801335c:	4322      	orrs	r2, r4
 801335e:	d10a      	bne.n	8013376 <__ieee754_log10+0x2e>
 8013360:	493b      	ldr	r1, [pc, #236]	; (8013450 <__ieee754_log10+0x108>)
 8013362:	2200      	movs	r2, #0
 8013364:	2300      	movs	r3, #0
 8013366:	2000      	movs	r0, #0
 8013368:	f7ed fac8 	bl	80008fc <__aeabi_ddiv>
 801336c:	ec41 0b10 	vmov	d0, r0, r1
 8013370:	b003      	add	sp, #12
 8013372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013376:	2d00      	cmp	r5, #0
 8013378:	da08      	bge.n	801338c <__ieee754_log10+0x44>
 801337a:	ee10 2a10 	vmov	r2, s0
 801337e:	4620      	mov	r0, r4
 8013380:	4629      	mov	r1, r5
 8013382:	f7ec ffd9 	bl	8000338 <__aeabi_dsub>
 8013386:	2200      	movs	r2, #0
 8013388:	2300      	movs	r3, #0
 801338a:	e7ed      	b.n	8013368 <__ieee754_log10+0x20>
 801338c:	2200      	movs	r2, #0
 801338e:	4b31      	ldr	r3, [pc, #196]	; (8013454 <__ieee754_log10+0x10c>)
 8013390:	4629      	mov	r1, r5
 8013392:	ee10 0a10 	vmov	r0, s0
 8013396:	f7ed f987 	bl	80006a8 <__aeabi_dmul>
 801339a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801339e:	4604      	mov	r4, r0
 80133a0:	460d      	mov	r5, r1
 80133a2:	460b      	mov	r3, r1
 80133a4:	492c      	ldr	r1, [pc, #176]	; (8013458 <__ieee754_log10+0x110>)
 80133a6:	428b      	cmp	r3, r1
 80133a8:	dd08      	ble.n	80133bc <__ieee754_log10+0x74>
 80133aa:	4622      	mov	r2, r4
 80133ac:	462b      	mov	r3, r5
 80133ae:	4620      	mov	r0, r4
 80133b0:	4629      	mov	r1, r5
 80133b2:	f7ec ffc3 	bl	800033c <__adddf3>
 80133b6:	e7d9      	b.n	801336c <__ieee754_log10+0x24>
 80133b8:	2200      	movs	r2, #0
 80133ba:	e7f3      	b.n	80133a4 <__ieee754_log10+0x5c>
 80133bc:	1518      	asrs	r0, r3, #20
 80133be:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80133c2:	4410      	add	r0, r2
 80133c4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80133c8:	4448      	add	r0, r9
 80133ca:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80133ce:	f7ed f901 	bl	80005d4 <__aeabi_i2d>
 80133d2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80133d6:	3303      	adds	r3, #3
 80133d8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80133dc:	ec45 4b10 	vmov	d0, r4, r5
 80133e0:	4606      	mov	r6, r0
 80133e2:	460f      	mov	r7, r1
 80133e4:	f000 f848 	bl	8013478 <__ieee754_log>
 80133e8:	a313      	add	r3, pc, #76	; (adr r3, 8013438 <__ieee754_log10+0xf0>)
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	4630      	mov	r0, r6
 80133f0:	4639      	mov	r1, r7
 80133f2:	ed8d 0b00 	vstr	d0, [sp]
 80133f6:	f7ed f957 	bl	80006a8 <__aeabi_dmul>
 80133fa:	ed9d 0b00 	vldr	d0, [sp]
 80133fe:	4604      	mov	r4, r0
 8013400:	460d      	mov	r5, r1
 8013402:	a30f      	add	r3, pc, #60	; (adr r3, 8013440 <__ieee754_log10+0xf8>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	ec51 0b10 	vmov	r0, r1, d0
 801340c:	f7ed f94c 	bl	80006a8 <__aeabi_dmul>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4620      	mov	r0, r4
 8013416:	4629      	mov	r1, r5
 8013418:	f7ec ff90 	bl	800033c <__adddf3>
 801341c:	a30a      	add	r3, pc, #40	; (adr r3, 8013448 <__ieee754_log10+0x100>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	4604      	mov	r4, r0
 8013424:	460d      	mov	r5, r1
 8013426:	4630      	mov	r0, r6
 8013428:	4639      	mov	r1, r7
 801342a:	f7ed f93d 	bl	80006a8 <__aeabi_dmul>
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	4620      	mov	r0, r4
 8013434:	4629      	mov	r1, r5
 8013436:	e7bc      	b.n	80133b2 <__ieee754_log10+0x6a>
 8013438:	11f12b36 	.word	0x11f12b36
 801343c:	3d59fef3 	.word	0x3d59fef3
 8013440:	1526e50e 	.word	0x1526e50e
 8013444:	3fdbcb7b 	.word	0x3fdbcb7b
 8013448:	509f6000 	.word	0x509f6000
 801344c:	3fd34413 	.word	0x3fd34413
 8013450:	c3500000 	.word	0xc3500000
 8013454:	43500000 	.word	0x43500000
 8013458:	7fefffff 	.word	0x7fefffff

0801345c <__ieee754_sqrtf>:
 801345c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013460:	4770      	bx	lr

08013462 <matherr>:
 8013462:	2000      	movs	r0, #0
 8013464:	4770      	bx	lr
	...

08013468 <nan>:
 8013468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013470 <nan+0x8>
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	00000000 	.word	0x00000000
 8013474:	7ff80000 	.word	0x7ff80000

08013478 <__ieee754_log>:
 8013478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	ec51 0b10 	vmov	r0, r1, d0
 8013480:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013484:	b087      	sub	sp, #28
 8013486:	460d      	mov	r5, r1
 8013488:	da27      	bge.n	80134da <__ieee754_log+0x62>
 801348a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801348e:	4303      	orrs	r3, r0
 8013490:	ee10 2a10 	vmov	r2, s0
 8013494:	d10a      	bne.n	80134ac <__ieee754_log+0x34>
 8013496:	49cc      	ldr	r1, [pc, #816]	; (80137c8 <__ieee754_log+0x350>)
 8013498:	2200      	movs	r2, #0
 801349a:	2300      	movs	r3, #0
 801349c:	2000      	movs	r0, #0
 801349e:	f7ed fa2d 	bl	80008fc <__aeabi_ddiv>
 80134a2:	ec41 0b10 	vmov	d0, r0, r1
 80134a6:	b007      	add	sp, #28
 80134a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ac:	2900      	cmp	r1, #0
 80134ae:	da05      	bge.n	80134bc <__ieee754_log+0x44>
 80134b0:	460b      	mov	r3, r1
 80134b2:	f7ec ff41 	bl	8000338 <__aeabi_dsub>
 80134b6:	2200      	movs	r2, #0
 80134b8:	2300      	movs	r3, #0
 80134ba:	e7f0      	b.n	801349e <__ieee754_log+0x26>
 80134bc:	4bc3      	ldr	r3, [pc, #780]	; (80137cc <__ieee754_log+0x354>)
 80134be:	2200      	movs	r2, #0
 80134c0:	f7ed f8f2 	bl	80006a8 <__aeabi_dmul>
 80134c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80134c8:	460d      	mov	r5, r1
 80134ca:	4ac1      	ldr	r2, [pc, #772]	; (80137d0 <__ieee754_log+0x358>)
 80134cc:	4295      	cmp	r5, r2
 80134ce:	dd06      	ble.n	80134de <__ieee754_log+0x66>
 80134d0:	4602      	mov	r2, r0
 80134d2:	460b      	mov	r3, r1
 80134d4:	f7ec ff32 	bl	800033c <__adddf3>
 80134d8:	e7e3      	b.n	80134a2 <__ieee754_log+0x2a>
 80134da:	2300      	movs	r3, #0
 80134dc:	e7f5      	b.n	80134ca <__ieee754_log+0x52>
 80134de:	152c      	asrs	r4, r5, #20
 80134e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80134e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80134e8:	441c      	add	r4, r3
 80134ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80134ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80134f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80134f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80134fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80134fe:	ea42 0105 	orr.w	r1, r2, r5
 8013502:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013506:	2200      	movs	r2, #0
 8013508:	4bb2      	ldr	r3, [pc, #712]	; (80137d4 <__ieee754_log+0x35c>)
 801350a:	f7ec ff15 	bl	8000338 <__aeabi_dsub>
 801350e:	1cab      	adds	r3, r5, #2
 8013510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013514:	2b02      	cmp	r3, #2
 8013516:	4682      	mov	sl, r0
 8013518:	468b      	mov	fp, r1
 801351a:	f04f 0200 	mov.w	r2, #0
 801351e:	dc53      	bgt.n	80135c8 <__ieee754_log+0x150>
 8013520:	2300      	movs	r3, #0
 8013522:	f7ed fb29 	bl	8000b78 <__aeabi_dcmpeq>
 8013526:	b1d0      	cbz	r0, 801355e <__ieee754_log+0xe6>
 8013528:	2c00      	cmp	r4, #0
 801352a:	f000 8120 	beq.w	801376e <__ieee754_log+0x2f6>
 801352e:	4620      	mov	r0, r4
 8013530:	f7ed f850 	bl	80005d4 <__aeabi_i2d>
 8013534:	a390      	add	r3, pc, #576	; (adr r3, 8013778 <__ieee754_log+0x300>)
 8013536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353a:	4606      	mov	r6, r0
 801353c:	460f      	mov	r7, r1
 801353e:	f7ed f8b3 	bl	80006a8 <__aeabi_dmul>
 8013542:	a38f      	add	r3, pc, #572	; (adr r3, 8013780 <__ieee754_log+0x308>)
 8013544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013548:	4604      	mov	r4, r0
 801354a:	460d      	mov	r5, r1
 801354c:	4630      	mov	r0, r6
 801354e:	4639      	mov	r1, r7
 8013550:	f7ed f8aa 	bl	80006a8 <__aeabi_dmul>
 8013554:	4602      	mov	r2, r0
 8013556:	460b      	mov	r3, r1
 8013558:	4620      	mov	r0, r4
 801355a:	4629      	mov	r1, r5
 801355c:	e7ba      	b.n	80134d4 <__ieee754_log+0x5c>
 801355e:	a38a      	add	r3, pc, #552	; (adr r3, 8013788 <__ieee754_log+0x310>)
 8013560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013564:	4650      	mov	r0, sl
 8013566:	4659      	mov	r1, fp
 8013568:	f7ed f89e 	bl	80006a8 <__aeabi_dmul>
 801356c:	4602      	mov	r2, r0
 801356e:	460b      	mov	r3, r1
 8013570:	2000      	movs	r0, #0
 8013572:	4999      	ldr	r1, [pc, #612]	; (80137d8 <__ieee754_log+0x360>)
 8013574:	f7ec fee0 	bl	8000338 <__aeabi_dsub>
 8013578:	4652      	mov	r2, sl
 801357a:	4606      	mov	r6, r0
 801357c:	460f      	mov	r7, r1
 801357e:	465b      	mov	r3, fp
 8013580:	4650      	mov	r0, sl
 8013582:	4659      	mov	r1, fp
 8013584:	f7ed f890 	bl	80006a8 <__aeabi_dmul>
 8013588:	4602      	mov	r2, r0
 801358a:	460b      	mov	r3, r1
 801358c:	4630      	mov	r0, r6
 801358e:	4639      	mov	r1, r7
 8013590:	f7ed f88a 	bl	80006a8 <__aeabi_dmul>
 8013594:	4606      	mov	r6, r0
 8013596:	460f      	mov	r7, r1
 8013598:	b914      	cbnz	r4, 80135a0 <__ieee754_log+0x128>
 801359a:	4632      	mov	r2, r6
 801359c:	463b      	mov	r3, r7
 801359e:	e0a0      	b.n	80136e2 <__ieee754_log+0x26a>
 80135a0:	4620      	mov	r0, r4
 80135a2:	f7ed f817 	bl	80005d4 <__aeabi_i2d>
 80135a6:	a374      	add	r3, pc, #464	; (adr r3, 8013778 <__ieee754_log+0x300>)
 80135a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ac:	4680      	mov	r8, r0
 80135ae:	4689      	mov	r9, r1
 80135b0:	f7ed f87a 	bl	80006a8 <__aeabi_dmul>
 80135b4:	a372      	add	r3, pc, #456	; (adr r3, 8013780 <__ieee754_log+0x308>)
 80135b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ba:	4604      	mov	r4, r0
 80135bc:	460d      	mov	r5, r1
 80135be:	4640      	mov	r0, r8
 80135c0:	4649      	mov	r1, r9
 80135c2:	f7ed f871 	bl	80006a8 <__aeabi_dmul>
 80135c6:	e0a5      	b.n	8013714 <__ieee754_log+0x29c>
 80135c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80135cc:	f7ec feb6 	bl	800033c <__adddf3>
 80135d0:	4602      	mov	r2, r0
 80135d2:	460b      	mov	r3, r1
 80135d4:	4650      	mov	r0, sl
 80135d6:	4659      	mov	r1, fp
 80135d8:	f7ed f990 	bl	80008fc <__aeabi_ddiv>
 80135dc:	e9cd 0100 	strd	r0, r1, [sp]
 80135e0:	4620      	mov	r0, r4
 80135e2:	f7ec fff7 	bl	80005d4 <__aeabi_i2d>
 80135e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135ee:	4610      	mov	r0, r2
 80135f0:	4619      	mov	r1, r3
 80135f2:	f7ed f859 	bl	80006a8 <__aeabi_dmul>
 80135f6:	4602      	mov	r2, r0
 80135f8:	460b      	mov	r3, r1
 80135fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135fe:	f7ed f853 	bl	80006a8 <__aeabi_dmul>
 8013602:	a363      	add	r3, pc, #396	; (adr r3, 8013790 <__ieee754_log+0x318>)
 8013604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013608:	4680      	mov	r8, r0
 801360a:	4689      	mov	r9, r1
 801360c:	f7ed f84c 	bl	80006a8 <__aeabi_dmul>
 8013610:	a361      	add	r3, pc, #388	; (adr r3, 8013798 <__ieee754_log+0x320>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fe91 	bl	800033c <__adddf3>
 801361a:	4642      	mov	r2, r8
 801361c:	464b      	mov	r3, r9
 801361e:	f7ed f843 	bl	80006a8 <__aeabi_dmul>
 8013622:	a35f      	add	r3, pc, #380	; (adr r3, 80137a0 <__ieee754_log+0x328>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fe88 	bl	800033c <__adddf3>
 801362c:	4642      	mov	r2, r8
 801362e:	464b      	mov	r3, r9
 8013630:	f7ed f83a 	bl	80006a8 <__aeabi_dmul>
 8013634:	a35c      	add	r3, pc, #368	; (adr r3, 80137a8 <__ieee754_log+0x330>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe7f 	bl	800033c <__adddf3>
 801363e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013642:	f7ed f831 	bl	80006a8 <__aeabi_dmul>
 8013646:	a35a      	add	r3, pc, #360	; (adr r3, 80137b0 <__ieee754_log+0x338>)
 8013648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013650:	4640      	mov	r0, r8
 8013652:	4649      	mov	r1, r9
 8013654:	f7ed f828 	bl	80006a8 <__aeabi_dmul>
 8013658:	a357      	add	r3, pc, #348	; (adr r3, 80137b8 <__ieee754_log+0x340>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec fe6d 	bl	800033c <__adddf3>
 8013662:	4642      	mov	r2, r8
 8013664:	464b      	mov	r3, r9
 8013666:	f7ed f81f 	bl	80006a8 <__aeabi_dmul>
 801366a:	a355      	add	r3, pc, #340	; (adr r3, 80137c0 <__ieee754_log+0x348>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	f7ec fe64 	bl	800033c <__adddf3>
 8013674:	4642      	mov	r2, r8
 8013676:	464b      	mov	r3, r9
 8013678:	f7ed f816 	bl	80006a8 <__aeabi_dmul>
 801367c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013680:	4602      	mov	r2, r0
 8013682:	460b      	mov	r3, r1
 8013684:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801368c:	f7ec fe56 	bl	800033c <__adddf3>
 8013690:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8013694:	3551      	adds	r5, #81	; 0x51
 8013696:	4335      	orrs	r5, r6
 8013698:	2d00      	cmp	r5, #0
 801369a:	4680      	mov	r8, r0
 801369c:	4689      	mov	r9, r1
 801369e:	dd48      	ble.n	8013732 <__ieee754_log+0x2ba>
 80136a0:	2200      	movs	r2, #0
 80136a2:	4b4d      	ldr	r3, [pc, #308]	; (80137d8 <__ieee754_log+0x360>)
 80136a4:	4650      	mov	r0, sl
 80136a6:	4659      	mov	r1, fp
 80136a8:	f7ec fffe 	bl	80006a8 <__aeabi_dmul>
 80136ac:	4652      	mov	r2, sl
 80136ae:	465b      	mov	r3, fp
 80136b0:	f7ec fffa 	bl	80006a8 <__aeabi_dmul>
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	4606      	mov	r6, r0
 80136ba:	460f      	mov	r7, r1
 80136bc:	4640      	mov	r0, r8
 80136be:	4649      	mov	r1, r9
 80136c0:	f7ec fe3c 	bl	800033c <__adddf3>
 80136c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136c8:	f7ec ffee 	bl	80006a8 <__aeabi_dmul>
 80136cc:	4680      	mov	r8, r0
 80136ce:	4689      	mov	r9, r1
 80136d0:	b964      	cbnz	r4, 80136ec <__ieee754_log+0x274>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	4630      	mov	r0, r6
 80136d8:	4639      	mov	r1, r7
 80136da:	f7ec fe2d 	bl	8000338 <__aeabi_dsub>
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	4650      	mov	r0, sl
 80136e4:	4659      	mov	r1, fp
 80136e6:	f7ec fe27 	bl	8000338 <__aeabi_dsub>
 80136ea:	e6da      	b.n	80134a2 <__ieee754_log+0x2a>
 80136ec:	a322      	add	r3, pc, #136	; (adr r3, 8013778 <__ieee754_log+0x300>)
 80136ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136f6:	f7ec ffd7 	bl	80006a8 <__aeabi_dmul>
 80136fa:	a321      	add	r3, pc, #132	; (adr r3, 8013780 <__ieee754_log+0x308>)
 80136fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013700:	4604      	mov	r4, r0
 8013702:	460d      	mov	r5, r1
 8013704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013708:	f7ec ffce 	bl	80006a8 <__aeabi_dmul>
 801370c:	4642      	mov	r2, r8
 801370e:	464b      	mov	r3, r9
 8013710:	f7ec fe14 	bl	800033c <__adddf3>
 8013714:	4602      	mov	r2, r0
 8013716:	460b      	mov	r3, r1
 8013718:	4630      	mov	r0, r6
 801371a:	4639      	mov	r1, r7
 801371c:	f7ec fe0c 	bl	8000338 <__aeabi_dsub>
 8013720:	4652      	mov	r2, sl
 8013722:	465b      	mov	r3, fp
 8013724:	f7ec fe08 	bl	8000338 <__aeabi_dsub>
 8013728:	4602      	mov	r2, r0
 801372a:	460b      	mov	r3, r1
 801372c:	4620      	mov	r0, r4
 801372e:	4629      	mov	r1, r5
 8013730:	e7d9      	b.n	80136e6 <__ieee754_log+0x26e>
 8013732:	4602      	mov	r2, r0
 8013734:	460b      	mov	r3, r1
 8013736:	4650      	mov	r0, sl
 8013738:	4659      	mov	r1, fp
 801373a:	f7ec fdfd 	bl	8000338 <__aeabi_dsub>
 801373e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013742:	f7ec ffb1 	bl	80006a8 <__aeabi_dmul>
 8013746:	4606      	mov	r6, r0
 8013748:	460f      	mov	r7, r1
 801374a:	2c00      	cmp	r4, #0
 801374c:	f43f af25 	beq.w	801359a <__ieee754_log+0x122>
 8013750:	a309      	add	r3, pc, #36	; (adr r3, 8013778 <__ieee754_log+0x300>)
 8013752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801375a:	f7ec ffa5 	bl	80006a8 <__aeabi_dmul>
 801375e:	a308      	add	r3, pc, #32	; (adr r3, 8013780 <__ieee754_log+0x308>)
 8013760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013764:	4604      	mov	r4, r0
 8013766:	460d      	mov	r5, r1
 8013768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801376c:	e729      	b.n	80135c2 <__ieee754_log+0x14a>
 801376e:	2000      	movs	r0, #0
 8013770:	2100      	movs	r1, #0
 8013772:	e696      	b.n	80134a2 <__ieee754_log+0x2a>
 8013774:	f3af 8000 	nop.w
 8013778:	fee00000 	.word	0xfee00000
 801377c:	3fe62e42 	.word	0x3fe62e42
 8013780:	35793c76 	.word	0x35793c76
 8013784:	3dea39ef 	.word	0x3dea39ef
 8013788:	55555555 	.word	0x55555555
 801378c:	3fd55555 	.word	0x3fd55555
 8013790:	df3e5244 	.word	0xdf3e5244
 8013794:	3fc2f112 	.word	0x3fc2f112
 8013798:	96cb03de 	.word	0x96cb03de
 801379c:	3fc74664 	.word	0x3fc74664
 80137a0:	94229359 	.word	0x94229359
 80137a4:	3fd24924 	.word	0x3fd24924
 80137a8:	55555593 	.word	0x55555593
 80137ac:	3fe55555 	.word	0x3fe55555
 80137b0:	d078c69f 	.word	0xd078c69f
 80137b4:	3fc39a09 	.word	0x3fc39a09
 80137b8:	1d8e78af 	.word	0x1d8e78af
 80137bc:	3fcc71c5 	.word	0x3fcc71c5
 80137c0:	9997fa04 	.word	0x9997fa04
 80137c4:	3fd99999 	.word	0x3fd99999
 80137c8:	c3500000 	.word	0xc3500000
 80137cc:	43500000 	.word	0x43500000
 80137d0:	7fefffff 	.word	0x7fefffff
 80137d4:	3ff00000 	.word	0x3ff00000
 80137d8:	3fe00000 	.word	0x3fe00000

080137dc <_init>:
 80137dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137de:	bf00      	nop
 80137e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137e2:	bc08      	pop	{r3}
 80137e4:	469e      	mov	lr, r3
 80137e6:	4770      	bx	lr

080137e8 <_fini>:
 80137e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ea:	bf00      	nop
 80137ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137ee:	bc08      	pop	{r3}
 80137f0:	469e      	mov	lr, r3
 80137f2:	4770      	bx	lr
