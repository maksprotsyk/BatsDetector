
Bat_Detector_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001367c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002360  0801380c  0801380c  0002380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b6c  08015b6c  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08015b6c  08015b6c  00025b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b74  08015b74  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b74  08015b74  00025b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b78  08015b78  00025b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08015b7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a64  20000264  08015de0  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003cc8  08015de0  00033cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .debug_info   000386be  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e59  00000000  00000000  00068952  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fd0  00000000  00000000  0006f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d10  00000000  00000000  00071780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b829  00000000  00000000  00073490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028bfa  00000000  00000000  0009ecb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0963  00000000  00000000  000c78b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001a8216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088bc  00000000  00000000  001a8304  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000034e1  00000000  00000000  001b0bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080137f4 	.word	0x080137f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080137f4 	.word	0x080137f4

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800046e:	f1a4 0401 	sub.w	r4, r4, #1
 8000472:	d1e9      	bne.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <MX_ADC1_Init+0xa0>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_ADC1_Init+0x9c>)
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_ADC1_Init+0x9c>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC1_Init+0x9c>)
 800100e:	f001 fe29 	bl	8002c64 <HAL_ADC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001018:	f001 fa3a 	bl	8002490 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800101c:	2301      	movs	r3, #1
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_ADC1_Init+0x9c>)
 800102e:	f002 f8a9 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001038:	f001 fa2a 	bl	8002490 <Error_Handler>
  }

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200004f4 	.word	0x200004f4
 8001048:	40012000 	.word	0x40012000

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <HAL_ADC_MspInit+0xdc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d157      	bne.n	800111e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_ADC_MspInit+0xe0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0xe4>)
 80010ba:	f003 f977 	bl	80043ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_ADC_MspInit+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001104:	f002 fc68 	bl	80039d8 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800110e:	f001 f9bf 	bl	8002490 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	2000053c 	.word	0x2000053c
 8001138:	40026410 	.word	0x40026410

0800113c <send_signal>:
 */

#include "debug.h"
#include "screen.h"

void send_signal(FRESULT op_res){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if (op_res != FR_OK){
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00f      	beq.n	800116c <send_signal+0x30>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800114c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <send_signal+0x38>)
 8001152:	f003 fc49 	bl	80049e8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f001 fd62 	bl	8002c20 <HAL_Delay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <send_signal+0x38>)
 8001162:	f003 fc41 	bl	80049e8 <HAL_GPIO_TogglePin>
		clear_print("Error!!!");
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <send_signal+0x3c>)
 8001168:	f001 fa60 	bl	800262c <clear_print>

	}

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40020c00 	.word	0x40020c00
 8001178:	0801380c 	.word	0x0801380c

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x3c>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2038      	movs	r0, #56	; 0x38
 80011a4:	f002 fbc8 	bl	8003938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a8:	2038      	movs	r0, #56	; 0x38
 80011aa:	f002 fbf1 	bl	8003990 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <MX_GPIO_Init+0x20c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a7b      	ldr	r2, [pc, #492]	; (80013c8 <MX_GPIO_Init+0x20c>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <MX_GPIO_Init+0x20c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <MX_GPIO_Init+0x20c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a74      	ldr	r2, [pc, #464]	; (80013c8 <MX_GPIO_Init+0x20c>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a6d      	ldr	r2, [pc, #436]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <MX_GPIO_Init+0x20c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <MX_GPIO_Init+0x20c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a66      	ldr	r2, [pc, #408]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <MX_GPIO_Init+0x20c>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <MX_GPIO_Init+0x20c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f640 6108 	movw	r1, #3592	; 0xe08
 8001280:	4852      	ldr	r0, [pc, #328]	; (80013cc <MX_GPIO_Init+0x210>)
 8001282:	f003 fb7f 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2101      	movs	r1, #1
 800128a:	4851      	ldr	r0, [pc, #324]	; (80013d0 <MX_GPIO_Init+0x214>)
 800128c:	f003 fb7a 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001290:	2200      	movs	r2, #0
 8001292:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001296:	484f      	ldr	r0, [pc, #316]	; (80013d4 <MX_GPIO_Init+0x218>)
 8001298:	f003 fb74 	bl	8004984 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|DC_Pin|CS_Pin;
 800129c:	f640 6308 	movw	r3, #3592	; 0xe08
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4845      	ldr	r0, [pc, #276]	; (80013cc <MX_GPIO_Init+0x210>)
 80012b6:	f003 f879 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	483f      	ldr	r0, [pc, #252]	; (80013d0 <MX_GPIO_Init+0x214>)
 80012d2:	f003 f86b 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_GPIO_Init+0x21c>)
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	483c      	ldr	r0, [pc, #240]	; (80013dc <MX_GPIO_Init+0x220>)
 80012ea:	f003 f85f 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012ee:	2310      	movs	r3, #16
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fe:	2306      	movs	r3, #6
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4834      	ldr	r0, [pc, #208]	; (80013dc <MX_GPIO_Init+0x220>)
 800130a:	f003 f84f 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130e:	2320      	movs	r3, #32
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	482b      	ldr	r0, [pc, #172]	; (80013d0 <MX_GPIO_Init+0x214>)
 8001322:	f003 f843 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <MX_GPIO_Init+0x224>)
 800133a:	f003 f837 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800133e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001342:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	481f      	ldr	r0, [pc, #124]	; (80013d4 <MX_GPIO_Init+0x218>)
 8001358:	f003 f828 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800135c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800136e:	2306      	movs	r3, #6
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <MX_GPIO_Init+0x214>)
 800137a:	f003 f817 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800137e:	2320      	movs	r3, #32
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <MX_GPIO_Init+0x218>)
 8001392:	f003 f80b 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_GPIO_Init+0x228>)
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_GPIO_Init+0x210>)
 80013aa:	f002 ffff 	bl	80043ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2006      	movs	r0, #6
 80013b4:	f002 fac0 	bl	8003938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013b8:	2006      	movs	r0, #6
 80013ba:	f002 fae9 	bl	8003990 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	10120000 	.word	0x10120000

080013e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f005 f823 	bl	8006470 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001430:	f001 f82e 	bl	8002490 <Error_Handler>
  }

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200007c0 	.word	0x200007c0
 800143c:	40005400 	.word	0x40005400
 8001440:	000186a0 	.word	0x000186a0

08001444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001482:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <HAL_I2C_MspInit+0x8c>)
 80014a0:	f002 ff84 	bl	80043ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <get_intensity>:
float32_t get_intensity(float32_t magnitude);




float32_t get_intensity(float32_t magnitude) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	ed87 0a01 	vstr	s0, [r7, #4]
	return 20 * log10(magnitude / (FFT_SIZE * MAX_VOLTAGE));
 80014de:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001528 <get_intensity+0x54>
 80014e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ea:	ee16 0a90 	vmov	r0, s13
 80014ee:	f7ff f883 	bl	80005f8 <__aeabi_f2d>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	ec44 3b10 	vmov	d0, r3, r4
 80014fa:	f011 fe5f 	bl	80131bc <log10>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <get_intensity+0x58>)
 8001508:	f7ff f8ce 	bl	80006a8 <__aeabi_dmul>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4618      	mov	r0, r3
 8001512:	4621      	mov	r1, r4
 8001514:	f7ff fb78 	bl	8000c08 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	ee07 3a90 	vmov	s15, r3
}
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	4a000000 	.word	0x4a000000
 800152c:	40340000 	.word	0x40340000

08001530 <perform_fft>:



void perform_fft(uint16_t* data_buffer, uint32_t start,  float32_t* fft_buffer) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	float32_t mean;
	calculate_mean(data_buffer, &mean);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f832 	bl	80015ac <calculate_mean>

	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	82fb      	strh	r3, [r7, #22]
 800154c:	e01e      	b.n	800158c <perform_fft+0x5c>
		fft_buffer[2 * i] = (float32_t)data_buffer[i] - mean;
 800154e:	8afb      	ldrh	r3, [r7, #22]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	edc3 7a00 	vstr	s15, [r3]
		fft_buffer[2 * i + 1] = 0;
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	3304      	adds	r3, #4
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001586:	8afb      	ldrh	r3, [r7, #22]
 8001588:	3301      	adds	r3, #1
 800158a:	82fb      	strh	r3, [r7, #22]
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001592:	d3dc      	bcc.n	800154e <perform_fft+0x1e>
	}
	arm_cfft_f32(&arm_cfft_sR_f32_len512, fft_buffer, 0, 1);
 8001594:	2301      	movs	r3, #1
 8001596:	2200      	movs	r2, #0
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <perform_fft+0x78>)
 800159c:	f010 fa8e 	bl	8011abc <arm_cfft_f32>

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08014690 	.word	0x08014690

080015ac <calculate_mean>:


void calculate_mean(uint16_t* data_buffer, float32_t* mean) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e00b      	b.n	80015d8 <calculate_mean+0x2c>
		sum += data_buffer[i];
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FFT_SIZE; i++) {
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015de:	dbef      	blt.n	80015c0 <calculate_mean+0x14>
	}
	*mean = ((float32_t) sum) / FFT_SIZE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ea:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001604 <calculate_mean+0x58>
 80015ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	edc3 7a00 	vstr	s15, [r3]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	44000000 	.word	0x44000000

08001608 <calculate_magnitudes>:


void calculate_magnitudes(float32_t* fft_buffer, float32_t* magnitude, uint32_t* index){
 8001608:	b580      	push	{r7, lr}
 800160a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800160e:	af00      	add	r7, sp, #0
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	6018      	str	r0, [r3, #0]
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	6019      	str	r1, [r3, #0]
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	601a      	str	r2, [r3, #0]
	float32_t magnitudes[FFT_SIZE];
	arm_cmplx_mag_f32(fft_buffer, magnitudes, FFT_SIZE);
 8001620:	f107 0110 	add.w	r1, r7, #16
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f010 fd35 	bl	801209c <arm_cmplx_mag_f32>
	arm_max_f32(magnitudes, FFT_SIZE, magnitude, index);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	f107 0208 	add.w	r2, r7, #8
 8001638:	f107 0010 	add.w	r0, r7, #16
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	f00f fea2 	bl	801138c <arm_max_f32>
}
 8001648:	bf00      	nop
 800164a:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <get_frequency>:


float32_t get_frequency(uint32_t index, uint32_t frequency) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	if (index > (FFT_SIZE / 2)) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001664:	d903      	bls.n	800166e <get_frequency+0x1a>
		index = FFT_SIZE - index;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800166c:	607b      	str	r3, [r7, #4]
	}
	return frequency * ((float32_t) index) / FFT_SIZE;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016a0 <get_frequency+0x4c>
 800168a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800168e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	44000000 	.word	0x44000000

080016a4 <init_filter>:



void init_filter() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af02      	add	r7, sp, #8
	arm_fir_init_f32(
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <init_filter+0x20>)
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <init_filter+0x24>)
 80016b4:	2119      	movs	r1, #25
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <init_filter+0x28>)
 80016b8:	f010 fa7a 	bl	8011bb0 <arm_fir_init_f32>
			&FILTER, COEFFICIENTS,
			FILTER_COEFFICIENTS,
			FILTER_STATES, FFT_SIZE
			);
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20002848 	.word	0x20002848
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20002814 	.word	0x20002814

080016d0 <fir_filter>:


void fir_filter(uint16_t* buffer) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	3b0c      	subs	r3, #12
 80016e0:	6018      	str	r0, [r3, #0]
	float32_t float_buffer[FFT_SIZE];
	float32_t float_result[FFT_SIZE];
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80016e8:	f102 020e 	add.w	r2, r2, #14
 80016ec:	8013      	strh	r3, [r2, #0]
 80016ee:	e029      	b.n	8001744 <fir_filter+0x74>
		float_buffer[i] = (float32_t)buffer[i] - MEDIAN;
 80016f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80016f4:	f103 030e 	add.w	r3, r3, #14
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	005a      	lsls	r2, r3, #1
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	3b0c      	subs	r3, #12
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001710:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001714:	f103 030e 	add.w	r3, r3, #14
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80017e8 <fir_filter+0x118>
 800171e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001722:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 800172e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001732:	f103 030e 	add.w	r3, r3, #14
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800173e:	f102 020e 	add.w	r2, r2, #14
 8001742:	8013      	strh	r3, [r2, #0]
 8001744:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001748:	f103 030e 	add.w	r3, r3, #14
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001752:	d3cd      	bcc.n	80016f0 <fir_filter+0x20>
	}
	arm_fir_f32(&FILTER, float_buffer, float_result, FFT_SIZE);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	3a04      	subs	r2, #4
 800175a:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 800175e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001762:	4822      	ldr	r0, [pc, #136]	; (80017ec <fir_filter+0x11c>)
 8001764:	f010 fa36 	bl	8011bd4 <arm_fir_f32>
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001768:	2300      	movs	r3, #0
 800176a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800176e:	f102 020c 	add.w	r2, r2, #12
 8001772:	8013      	strh	r3, [r2, #0]
 8001774:	e02a      	b.n	80017cc <fir_filter+0xfc>
			buffer[i] = (uint16_t) float_result[i] + MEDIAN;
 8001776:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800177a:	f103 030c 	add.w	r3, r3, #12
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	3b04      	subs	r3, #4
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4413      	add	r3, r2
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001792:	ee17 3a90 	vmov	r3, s15
 8001796:	b29a      	uxth	r2, r3
 8001798:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800179c:	f103 030c 	add.w	r3, r3, #12
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	0059      	lsls	r1, r3, #1
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	3b0c      	subs	r3, #12
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	440b      	add	r3, r1
 80017ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b2:	b292      	uxth	r2, r2
 80017b4:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < FFT_SIZE; i++) {
 80017b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017ba:	f103 030c 	add.w	r3, r3, #12
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017c6:	f102 020c 	add.w	r2, r2, #12
 80017ca:	8013      	strh	r3, [r2, #0]
 80017cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017d0:	f103 030c 	add.w	r3, r3, #12
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017da:	d3cc      	bcc.n	8001776 <fir_filter+0xa6>
		}
}
 80017dc:	bf00      	nop
 80017de:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	45000000 	.word	0x45000000
 80017ec:	20002814 	.word	0x20002814

080017f0 <linear_filter>:

void linear_filter(uint16_t* buffer, uint16_t prev, uint16_t size, uint16_t* result) {
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	4613      	mov	r3, r2
 8001800:	813b      	strh	r3, [r7, #8]
	if (prev == FIRST_SIGNAL) {
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <linear_filter+0x1e>
		prev = buffer[0];
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	817b      	strh	r3, [r7, #10]
	}
	result[0] = (15 * prev + buffer[0]) >> 4;
 800180e:	897a      	ldrh	r2, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	4413      	add	r3, r2
 800181c:	111b      	asrs	r3, r3, #4
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e01b      	b.n	8001862 <linear_filter+0x72>
		result[i] = (15 * result[i-1] + buffer[i]) >> 4;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001830:	3b01      	subs	r3, #1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	0052      	lsls	r2, r2, #1
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	440a      	add	r2, r1
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	4413      	add	r3, r2
 800184e:	1119      	asrs	r1, r3, #4
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	b28a      	uxth	r2, r1
 800185a:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	893b      	ldrh	r3, [r7, #8]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbdf      	blt.n	800182a <linear_filter+0x3a>
	}
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <reverse_bytes>:
// generates title using template and current time
void generate_title(char* title , const char* template, uint16_t title_size);



uint16_t reverse_bytes(uint16_t num) {
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	80fb      	strh	r3, [r7, #6]
	return ((num & 0x00FF) << 8) | (num >> 8);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21a      	sxth	r2, r3
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b29b      	uxth	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <get_byte>:


uint8_t get_byte(uint32_t num, uint8_t byte_num) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
	return (uint8_t) (num >> (8 * byte_num));
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	b2db      	uxtb	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <create_header>:


void create_header(usb_file_t* wav_file, uint32_t frequency, uint32_t duration, uint32_t slowdown) {
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b094      	sub	sp, #80	; 0x50
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]

	// sample size is 2 bytes
	uint32_t data_size = 2 * duration * frequency;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48

	uint32_t full_size = data_size + HEADER_SIZE;
 80018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e0:	332c      	adds	r3, #44	; 0x2c
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t byte_rate = 2 * frequency / slowdown;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	005a      	lsls	r2, r3, #1
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40

	frequency /= slowdown;
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	60bb      	str	r3, [r7, #8]

	// creating header with 0 on unfilled indices
	uint8_t header[HEADER_SIZE] = {
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <create_header+0x12c>)
 80018fc:	f107 0414 	add.w	r4, r7, #20
 8001900:	461d      	mov	r5, r3
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800190e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			'd', 'a', 't', 'a',
			0, 0, 0, 0
	};


	for (uint8_t i = 0; i < 4; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001918:	e047      	b.n	80019aa <create_header+0xe6>
		header[4+i] = get_byte(full_size, i);
 800191a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800191e:	1d1c      	adds	r4, r3, #4
 8001920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001924:	4619      	mov	r1, r3
 8001926:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001928:	f7ff ffba 	bl	80018a0 <get_byte>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001934:	4423      	add	r3, r4
 8001936:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[24+i] = get_byte(frequency, i);
 800193a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800193e:	f103 0418 	add.w	r4, r3, #24
 8001942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001946:	4619      	mov	r1, r3
 8001948:	68b8      	ldr	r0, [r7, #8]
 800194a:	f7ff ffa9 	bl	80018a0 <get_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001956:	4423      	add	r3, r4
 8001958:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[28+i] = get_byte(byte_rate, i);
 800195c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001960:	f103 041c 	add.w	r4, r3, #28
 8001964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001968:	4619      	mov	r1, r3
 800196a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800196c:	f7ff ff98 	bl	80018a0 <get_byte>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001978:	4423      	add	r3, r4
 800197a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		header[40+i] = get_byte(data_size, i);
 800197e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001982:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800198a:	4619      	mov	r1, r3
 800198c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800198e:	f7ff ff87 	bl	80018a0 <get_byte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800199a:	4423      	add	r3, r4
 800199c:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (uint8_t i = 0; i < 4; i++) {
 80019a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80019aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d9b3      	bls.n	800191a <create_header+0x56>

	}
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80019b8:	e012      	b.n	80019e0 <create_header+0x11c>
		wav_file->header[i] = header[i];
 80019ba:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80019be:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80019c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80019c6:	440a      	add	r2, r1
 80019c8:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	460a      	mov	r2, r1
 80019d2:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	for (uint8_t i = 0; i < HEADER_SIZE; i++) {
 80019d6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80019da:	3301      	adds	r3, #1
 80019dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80019e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80019e4:	2b2b      	cmp	r3, #43	; 0x2b
 80019e6:	d9e8      	bls.n	80019ba <create_header+0xf6>
	}

}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	08013818 	.word	0x08013818

080019f4 <create_file>:


void create_file(usb_file_t* usb_file) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	send_signal(
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1d18      	adds	r0, r3, #4
			f_open(&usb_file->file,
					usb_file->title,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
	send_signal(
 8001a04:	220a      	movs	r2, #10
 8001a06:	4619      	mov	r1, r3
 8001a08:	f00e fb48 	bl	801009c <f_open>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb94 	bl	800113c <send_signal>
				  FA_CREATE_ALWAYS | FA_WRITE)
				  );
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <write_header>:

UINT write_header(usb_file_t* usb_file) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	UINT bytes_written;
	send_signal(
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1d18      	adds	r0, r3, #4
			f_write(
					&usb_file->file,
					usb_file->header,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f503 710d 	add.w	r1, r3, #564	; 0x234
	send_signal(
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	222c      	movs	r2, #44	; 0x2c
 8001a34:	f00e fe2f 	bl	8010696 <f_write>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb7e 	bl	800113c <send_signal>
					HEADER_SIZE,
					&bytes_written)
					);
	return bytes_written;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <write_data>:


UINT write_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	send_signal(
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1d18      	adds	r0, r3, #4
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	005a      	lsls	r2, r3, #1
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	f00e fe16 	bl	8010696 <f_write>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb65 	bl	800113c <send_signal>
					&usb_file->file,
					data,
					sizeof(uint16_t) * size,
					&bytes_written)
					);
	return bytes_written;
 8001a72:	697b      	ldr	r3, [r7, #20]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <write_little_endian_data>:


UINT write_little_endian_data(usb_file_t* usb_file, uint16_t* data, uint16_t size) {
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	3b0c      	subs	r3, #12
 8001a8c:	6018      	str	r0, [r3, #0]
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	3b10      	subs	r3, #16
 8001a94:	6019      	str	r1, [r3, #0]
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	3b12      	subs	r3, #18
 8001a9c:	801a      	strh	r2, [r3, #0]
	uint16_t little_endian_data[MAX_LITTLE_ENDIAN_SIZE];
	for (uint16_t i = 0; i < size; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001aa4:	f102 0216 	add.w	r2, r2, #22
 8001aa8:	8013      	strh	r3, [r2, #0]
 8001aaa:	e025      	b.n	8001af8 <write_little_endian_data+0x7c>
		little_endian_data[i] = reverse_bytes(data[i]);
 8001aac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ab0:	f103 0316 	add.w	r3, r3, #22
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	005a      	lsls	r2, r3, #1
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	3b10      	subs	r3, #16
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001ac8:	f102 0216 	add.w	r2, r2, #22
 8001acc:	8814      	ldrh	r4, [r2, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fed1 	bl	8001876 <reverse_bytes>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	3b04      	subs	r3, #4
 8001ade:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint16_t i = 0; i < size; i++) {
 8001ae2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ae6:	f103 0316 	add.w	r3, r3, #22
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001af2:	f102 0216 	add.w	r2, r2, #22
 8001af6:	8013      	strh	r3, [r2, #0]
 8001af8:	f107 0318 	add.w	r3, r7, #24
 8001afc:	3b12      	subs	r3, #18
 8001afe:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001b02:	f102 0216 	add.w	r2, r2, #22
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3ce      	bcc.n	8001aac <write_little_endian_data+0x30>
	}
	return write_data(usb_file, little_endian_data, size);
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	3b12      	subs	r3, #18
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	f107 0118 	add.w	r1, r7, #24
 8001b1a:	3904      	subs	r1, #4
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	3b0c      	subs	r3, #12
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	f7ff ff91 	bl	8001a4a <write_data>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}

08001b36 <close_file>:



void close_file(usb_file_t* usb_file) {
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	send_signal(f_close(&usb_file->file));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00e ff9a 	bl	8010a7c <f_close>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff faf6 	bl	800113c <send_signal>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <read_file>:


void read_file(usb_file_t* usb_file) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	send_signal(
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1d18      	adds	r0, r3, #4
				f_open(&usb_file->file,
						usb_file->title,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
	send_signal(
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f00e fa96 	bl	801009c <f_open>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fae2 	bl	800113c <send_signal>
						FA_OPEN_EXISTING | FA_READ)
				);
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <write_str>:



UINT write_str(usb_file_t* usb_file, char* message, uint16_t size) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	send_signal(
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1d18      	adds	r0, r3, #4
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	f00e fd7c 	bl	8010696 <f_write>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff facb 	bl	800113c <send_signal>
			f_write(&usb_file->file,
			message,
			size,
			&bytes_written)
			);
	return bytes_written;
 8001ba6:	697b      	ldr	r3, [r7, #20]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <write_array>:


void write_array(usb_file_t* info_file, float32_t* data, uint16_t size) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
	UINT bytes_written;
	for (uint16_t i = 0; i < size; i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82fb      	strh	r3, [r7, #22]
 8001bc2:	e01d      	b.n	8001c00 <write_array+0x50>
		snprintf(message, ONE_MESSAGE, "%ld ", (int32_t) data[i]);
 8001bc4:	8afb      	ldrh	r3, [r7, #22]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	ee17 3a90 	vmov	r3, s15
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <write_array+0x78>)
 8001bda:	2128      	movs	r1, #40	; 0x28
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <write_array+0x7c>)
 8001bde:	f010 ff4d 	bl	8012a7c <sniprintf>
		send_signal(
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1d18      	adds	r0, r3, #4
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	2228      	movs	r2, #40	; 0x28
 8001bec:	490f      	ldr	r1, [pc, #60]	; (8001c2c <write_array+0x7c>)
 8001bee:	f00e fd52 	bl	8010696 <f_write>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff faa1 	bl	800113c <send_signal>
	for (uint16_t i = 0; i < size; i++) {
 8001bfa:	8afb      	ldrh	r3, [r7, #22]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	82fb      	strh	r3, [r7, #22]
 8001c00:	8afa      	ldrh	r2, [r7, #22]
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3dd      	bcc.n	8001bc4 <write_array+0x14>
							sizeof(message),
							&bytes_written)
							);
	}

	send_signal(
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1d18      	adds	r0, r3, #4
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2201      	movs	r2, #1
 8001c12:	4907      	ldr	r1, [pc, #28]	; (8001c30 <write_array+0x80>)
 8001c14:	f00e fd3f 	bl	8010696 <f_write>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa8e 	bl	800113c <send_signal>
					    "\n",
						1,
						&bytes_written)
						);

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08013844 	.word	0x08013844
 8001c2c:	20002820 	.word	0x20002820
 8001c30:	0801384c 	.word	0x0801384c

08001c34 <read_buffer>:

UINT read_buffer(usb_file_t* info_file, uint16_t* buffer,  uint16_t size) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
	UINT bytes_read;
	send_signal(
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1d18      	adds	r0, r3, #4
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	005a      	lsls	r2, r3, #1
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	f00e fbe2 	bl	8010418 <f_read>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa70 	bl	800113c <send_signal>
					buffer,
					sizeof(uint16_t) * size,
					&bytes_read)
					);

	return bytes_read;
 8001c5c:	697b      	ldr	r3, [r7, #20]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <generate_title>:

void generate_title(char* title , const char* template, uint16_t title_size) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8001c76:	2200      	movs	r2, #0
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <generate_title+0x4c>)
 8001c7a:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <generate_title+0x50>)
 8001c7c:	f005 ffa8 	bl	8007bd0 <HAL_RTC_GetTime>
	snprintf(title, title_size, template, current_time.Hours,
 8001c80:	88f9      	ldrh	r1, [r7, #6]
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <generate_title+0x4c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
           	 current_time.Minutes, current_time.Seconds);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <generate_title+0x4c>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
	snprintf(title, title_size, template, current_time.Hours,
 8001c8c:	461a      	mov	r2, r3
           	 current_time.Minutes, current_time.Seconds);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <generate_title+0x4c>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
	snprintf(title, title_size, template, current_time.Hours,
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9200      	str	r2, [sp, #0]
 8001c96:	4603      	mov	r3, r0
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f010 feee 	bl	8012a7c <sniprintf>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4906      	ldr	r1, [pc, #24]	; (8001cbc <generate_title+0x54>)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <generate_title+0x50>)
 8001ca6:	f006 f92f 	bl	8007f08 <HAL_RTC_GetDate>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000280 	.word	0x20000280
 8001cb8:	200030a8 	.word	0x200030a8
 8001cbc:	20000294 	.word	0x20000294

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS flashdrive;
	usb_file_t wav_file;
	usb_file_t info_file;
	usb_file_t raw_data_file;
	uint32_t written = 0;
 8001cca:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001cce:	f103 0304 	add.w	r3, r3, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd6:	f000 ff31 	bl	8002b3c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cda:	f000 fa61 	bl	80021a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cde:	f7ff fa6d 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce2:	f7ff fa4b 	bl	800117c <MX_DMA_Init>
  MX_I2C1_Init();
 8001ce6:	f7ff fb7f 	bl	80013e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001cea:	f000 fcb5 	bl	8002658 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001cee:	f00f f811 	bl	8010d14 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8001cf2:	f000 fbdf 	bl	80024b4 <MX_RTC_Init>
  MX_TIM3_Init();
 8001cf6:	f000 fe81 	bl	80029fc <MX_TIM3_Init>
  MX_ADC1_Init();
 8001cfa:	f7ff f955 	bl	8000fa8 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001cfe:	f008 fc67 	bl	800a5d0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001d02:	f000 fcdf 	bl	80026c4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001d06:	4887      	ldr	r0, [pc, #540]	; (8001f24 <main+0x264>)
 8001d08:	f006 fdc6 	bl	8008898 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buffer, BUFF_SIZE);
 8001d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d10:	4985      	ldr	r1, [pc, #532]	; (8001f28 <main+0x268>)
 8001d12:	4886      	ldr	r0, [pc, #536]	; (8001f2c <main+0x26c>)
 8001d14:	f001 f912 	bl	8002f3c <HAL_ADC_Start_DMA>


  create_header(&wav_file, FREQUENCY, TIME, 4);
 8001d18:	f507 50e9 	add.w	r0, r7, #7456	; 0x1d20
 8001d1c:	f100 0008 	add.w	r0, r0, #8
 8001d20:	2304      	movs	r3, #4
 8001d22:	2203      	movs	r2, #3
 8001d24:	4982      	ldr	r1, [pc, #520]	; (8001f30 <main+0x270>)
 8001d26:	f7ff fdcd 	bl	80018c4 <create_header>
  raw_data_file.title = "raw_data.wav";
 8001d2a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001d2e:	f103 0308 	add.w	r3, r3, #8
 8001d32:	4a80      	ldr	r2, [pc, #512]	; (8001f34 <main+0x274>)
 8001d34:	601a      	str	r2, [r3, #0]
  main_screen_init();
 8001d36:	f000 fc2d 	bl	8002594 <main_screen_init>

  println("DEVICE IS\n READY!");
 8001d3a:	487f      	ldr	r0, [pc, #508]	; (8001f38 <main+0x278>)
 8001d3c:	f000 fc64 	bl	8002608 <println>
  HAL_Delay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d44:	f000 ff6c 	bl	8002c20 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001d48:	f00f f80a 	bl	8010d60 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(state) {
 8001d4c:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <main+0x27c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	f200 820e 	bhi.w	8002176 <main+0x4b6>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <main+0xa0>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d81 	.word	0x08001d81
 8001d64:	08002177 	.word	0x08002177
 8001d68:	08001db7 	.word	0x08001db7
 8001d6c:	08002177 	.word	0x08002177
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001e05 	.word	0x08001e05
 8001d78:	08001e2d 	.word	0x08001e2d
 8001d7c:	08001e53 	.word	0x08001e53
    case MOUNTING:
    	clear_print("MOUNTING USB\n FLASHDRIVE...");
 8001d80:	486f      	ldr	r0, [pc, #444]	; (8001f40 <main+0x280>)
 8001d82:	f000 fc53 	bl	800262c <clear_print>
    	send_signal(f_mount(&flashdrive, USBHPath, 1));
 8001d86:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8001d8a:	f103 0308 	add.w	r3, r3, #8
 8001d8e:	2201      	movs	r2, #1
 8001d90:	496c      	ldr	r1, [pc, #432]	; (8001f44 <main+0x284>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00e f93c 	bl	8010010 <f_mount>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f9ce 	bl	800113c <send_signal>
    	println("MOUNTED");
 8001da0:	4869      	ldr	r0, [pc, #420]	; (8001f48 <main+0x288>)
 8001da2:	f000 fc31 	bl	8002608 <println>
    	HAL_Delay(1000);
 8001da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001daa:	f000 ff39 	bl	8002c20 <HAL_Delay>

    	state = MOUNTED;
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <main+0x27c>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
    	break;
 8001db4:	e1e0      	b.n	8002178 <main+0x4b8>

    case RECORDING_START:
    	// creates file for saving samples
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbc:	4863      	ldr	r0, [pc, #396]	; (8001f4c <main+0x28c>)
 8001dbe:	f002 fde1 	bl	8004984 <HAL_GPIO_WritePin>
    	create_file(&raw_data_file);
 8001dc2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001dc6:	f103 0308 	add.w	r3, r3, #8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fe12 	bl	80019f4 <create_file>
    	clear_print("RECOR...");
 8001dd0:	485f      	ldr	r0, [pc, #380]	; (8001f50 <main+0x290>)
 8001dd2:	f000 fc2b 	bl	800262c <clear_print>
    	state = RECORDING;
 8001dd6:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <main+0x27c>)
 8001dd8:	2204      	movs	r2, #4
 8001dda:	701a      	strb	r2, [r3, #0]
    	break;
 8001ddc:	e1cc      	b.n	8002178 <main+0x4b8>

    case COPY_FIRST_HALF:
    	state = RECORDING;
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <main+0x27c>)
 8001de0:	2204      	movs	r2, #4
 8001de2:	701a      	strb	r2, [r3, #0]
    	// copying first half of buffer to file
    	write_buffer(&raw_data_file, ADC_Buffer, 0, BUFF_HALF, &written);
 8001de4:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001de8:	f100 0008 	add.w	r0, r0, #8
 8001dec:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001df0:	f103 0304 	add.w	r3, r3, #4
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	494a      	ldr	r1, [pc, #296]	; (8001f28 <main+0x268>)
 8001dfe:	f000 fb07 	bl	8002410 <write_buffer>
    	break;
 8001e02:	e1b9      	b.n	8002178 <main+0x4b8>

    case COPY_SECOND_HALF:
    	state = RECORDING;
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <main+0x27c>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	701a      	strb	r2, [r3, #0]
    	// copying second half of buffer to file
    	write_buffer(&raw_data_file, ADC_Buffer, BUFF_HALF, BUFF_HALF, &written);
 8001e0a:	f507 50c3 	add.w	r0, r7, #6240	; 0x1860
 8001e0e:	f100 0008 	add.w	r0, r0, #8
 8001e12:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001e16:	f103 0304 	add.w	r3, r3, #4
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e24:	4940      	ldr	r1, [pc, #256]	; (8001f28 <main+0x268>)
 8001e26:	f000 faf3 	bl	8002410 <write_buffer>
    	break;
 8001e2a:	e1a5      	b.n	8002178 <main+0x4b8>

    case RECORDING_STOP:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	4846      	ldr	r0, [pc, #280]	; (8001f4c <main+0x28c>)
 8001e32:	f002 fdd9 	bl	80049e8 <HAL_GPIO_TogglePin>
    	// closing file to save it
    	close_file(&raw_data_file);
 8001e36:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001e3a:	f103 0308 	add.w	r3, r3, #8
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe79 	bl	8001b36 <close_file>
    	state = PROCESSING;
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <main+0x27c>)
 8001e46:	2208      	movs	r2, #8
 8001e48:	701a      	strb	r2, [r3, #0]
    	clear_print("PROCESSING\nDATA...");
 8001e4a:	4842      	ldr	r0, [pc, #264]	; (8001f54 <main+0x294>)
 8001e4c:	f000 fbee 	bl	800262c <clear_print>
    	break;
 8001e50:	e192      	b.n	8002178 <main+0x4b8>

    case PROCESSING:
    	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e56:	483d      	ldr	r0, [pc, #244]	; (8001f4c <main+0x28c>)
 8001e58:	f002 fdc6 	bl	80049e8 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e60:	483a      	ldr	r0, [pc, #232]	; (8001f4c <main+0x28c>)
 8001e62:	f002 fdc1 	bl	80049e8 <HAL_GPIO_TogglePin>

    	// creating wav file for our audio
    	generate_title(title, "%dh%dm%ds.wav", TITLE_SIZE);
 8001e66:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001e6a:	f103 031c 	add.w	r3, r3, #28
 8001e6e:	2228      	movs	r2, #40	; 0x28
 8001e70:	4939      	ldr	r1, [pc, #228]	; (8001f58 <main+0x298>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fef8 	bl	8001c68 <generate_title>
    	wav_file.title = title;
 8001e78:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e7c:	f103 0308 	add.w	r3, r3, #8
 8001e80:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001e84:	f102 021c 	add.w	r2, r2, #28
 8001e88:	601a      	str	r2, [r3, #0]
    	create_file(&wav_file);
 8001e8a:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e8e:	f103 0308 	add.w	r3, r3, #8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fdae 	bl	80019f4 <create_file>
    	write_header(&wav_file);
 8001e98:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001e9c:	f103 0308 	add.w	r3, r3, #8
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fdbb 	bl	8001a1c <write_header>

    	// creating info file for measured frequencies and intensities
    	generate_title(info_title, "%dh%dm%ds.txt", TITLE_SIZE);
 8001ea6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001eaa:	f103 0314 	add.w	r3, r3, #20
 8001eae:	2228      	movs	r2, #40	; 0x28
 8001eb0:	492a      	ldr	r1, [pc, #168]	; (8001f5c <main+0x29c>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fed8 	bl	8001c68 <generate_title>
    	info_file.title = info_title;
 8001eb8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001ebc:	f103 0308 	add.w	r3, r3, #8
 8001ec0:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8001ec4:	f102 0214 	add.w	r2, r2, #20
 8001ec8:	601a      	str	r2, [r3, #0]
    	create_file(&info_file);
 8001eca:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001ece:	f103 0308 	add.w	r3, r3, #8
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fd8e 	bl	80019f4 <create_file>

    	// opening raw data to read it
    	read_file(&raw_data_file);
 8001ed8:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001edc:	f103 0308 	add.w	r3, r3, #8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe39 	bl	8001b58 <read_file>

    	// initializing FIR filter
    	init_filter();
 8001ee6:	f7ff fbdd 	bl	80016a4 <init_filter>

    	prev = FIRST_SIGNAL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001ef0:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001ef4:	8013      	strh	r3, [r2, #0]

    	while (written > 0) {
 8001ef6:	e0fc      	b.n	80020f2 <main+0x432>
    		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <main+0x28c>)
 8001efe:	f002 fd73 	bl	80049e8 <HAL_GPIO_TogglePin>

    		if (written >= READ_BUFFER_SIZE) {
 8001f02:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f06:	f103 0304 	add.w	r3, r3, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d326      	bcc.n	8001f60 <main+0x2a0>
    			to_read = READ_BUFFER_SIZE;
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f1a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001f1e:	8013      	strh	r3, [r2, #0]
 8001f20:	e028      	b.n	8001f74 <main+0x2b4>
 8001f22:	bf00      	nop
 8001f24:	20003178 	.word	0x20003178
 8001f28:	20000814 	.word	0x20000814
 8001f2c:	200004f4 	.word	0x200004f4
 8001f30:	00017700 	.word	0x00017700
 8001f34:	08013850 	.word	0x08013850
 8001f38:	08013860 	.word	0x08013860
 8001f3c:	20000298 	.word	0x20000298
 8001f40:	08013874 	.word	0x08013874
 8001f44:	200031bc 	.word	0x200031bc
 8001f48:	08013890 	.word	0x08013890
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	08013898 	.word	0x08013898
 8001f54:	080138a4 	.word	0x080138a4
 8001f58:	080138b8 	.word	0x080138b8
 8001f5c:	080138c8 	.word	0x080138c8
    		}
    		else {
    			to_read = written;
 8001f60:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f64:	f103 0304 	add.w	r3, r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f6e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001f72:	8013      	strh	r3, [r2, #0]
    		}

    		written -= to_read;
 8001f74:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f78:	f103 0304 	add.w	r3, r3, #4
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001f82:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	1ad2      	subs	r2, r2, r3
 8001f8a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001f8e:	f103 0304 	add.w	r3, r3, #4
 8001f92:	601a      	str	r2, [r3, #0]


    		// reading data and filtering it with linear filter for
    		// calculating frequencies
    		read_buffer(&raw_data_file, Read_Buffer, to_read);
 8001f94:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001f98:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001fa2:	f101 0104 	add.w	r1, r1, #4
 8001fa6:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001faa:	f103 0308 	add.w	r3, r3, #8
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe40 	bl	8001c34 <read_buffer>
    		linear_filter(Read_Buffer, prev, READ_BUFFER_SIZE, Temporary_Buffer);
 8001fb4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001fb8:	3b1c      	subs	r3, #28
 8001fba:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001fbe:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001fc2:	8811      	ldrh	r1, [r2, #0]
 8001fc4:	f507 50a0 	add.w	r0, r7, #5120	; 0x1400
 8001fc8:	f100 0004 	add.w	r0, r0, #4
 8001fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd0:	f7ff fc0e 	bl	80017f0 <linear_filter>

    		// using High-Pass filter on our data
    		fir_filter(Read_Buffer);
 8001fd4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8001fd8:	f103 0304 	add.w	r3, r3, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fb77 	bl	80016d0 <fir_filter>
    		// saving  filtered data to wav file
    		write_little_endian_data(&wav_file, Read_Buffer, to_read);
 8001fe2:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001fe6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001fea:	881a      	ldrh	r2, [r3, #0]
 8001fec:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8001ff0:	f101 0104 	add.w	r1, r1, #4
 8001ff4:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8001ff8:	f103 0308 	add.w	r3, r3, #8
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd3d 	bl	8001a7c <write_little_endian_data>

    		// performing FFT and calculating main frequency
    		// and intensity for data filtered with linear filter
    		perform_fft(Temporary_Buffer, 0, FFT_Buffer);
 8002002:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002006:	3a3c      	subs	r2, #60	; 0x3c
 8002008:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800200c:	3b1c      	subs	r3, #28
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa8d 	bl	8001530 <perform_fft>
    		calculate_magnitudes(FFT_Buffer, &magnitude, &index);
 8002016:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800201a:	f102 0208 	add.w	r2, r2, #8
 800201e:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 8002022:	f101 0110 	add.w	r1, r1, #16
 8002026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800202a:	3b3c      	subs	r3, #60	; 0x3c
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff faeb 	bl	8001608 <calculate_magnitudes>
    		frequency = get_frequency(index, FREQUENCY);
 8002032:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002036:	f103 0308 	add.w	r3, r3, #8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	494f      	ldr	r1, [pc, #316]	; (800217c <main+0x4bc>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb08 	bl	8001654 <get_frequency>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800204c:	f103 0304 	add.w	r3, r3, #4
 8002050:	edc3 7a00 	vstr	s15, [r3]
    		intensity = get_intensity(magnitude);
 8002054:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002058:	f103 0310 	add.w	r3, r3, #16
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	eeb0 0a67 	vmov.f32	s0, s15
 8002064:	f7ff fa36 	bl	80014d4 <get_intensity>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002070:	f103 030c 	add.w	r3, r3, #12
 8002074:	edc3 7a00 	vstr	s15, [r3]

    		// writing information to file
    		write_str(&info_file, "Frequency: ", 11);
 8002078:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800207c:	f103 0308 	add.w	r3, r3, #8
 8002080:	220b      	movs	r2, #11
 8002082:	493f      	ldr	r1, [pc, #252]	; (8002180 <main+0x4c0>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fd7b 	bl	8001b80 <write_str>
    		write_array(&info_file, &frequency, 1);
 800208a:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 800208e:	f101 0104 	add.w	r1, r1, #4
 8002092:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002096:	f103 0308 	add.w	r3, r3, #8
 800209a:	2201      	movs	r2, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd87 	bl	8001bb0 <write_array>
    		write_str(&info_file, "Intensity: ", 11);
 80020a2:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80020a6:	f103 0308 	add.w	r3, r3, #8
 80020aa:	220b      	movs	r2, #11
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <main+0x4c4>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fd66 	bl	8001b80 <write_str>
    		write_array(&info_file, &intensity, 1);
 80020b4:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 80020b8:	f101 010c 	add.w	r1, r1, #12
 80020bc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80020c0:	f103 0308 	add.w	r3, r3, #8
 80020c4:	2201      	movs	r2, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd72 	bl	8001bb0 <write_array>
    		write_str(&info_file, "\n", 1);
 80020cc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80020d0:	f103 0308 	add.w	r3, r3, #8
 80020d4:	2201      	movs	r2, #1
 80020d6:	492c      	ldr	r1, [pc, #176]	; (8002188 <main+0x4c8>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fd51 	bl	8001b80 <write_str>


    		// setting prev variable for next linear filter
    		// cycle
    		prev = Temporary_Buffer[READ_BUFFER_SIZE - 1];
 80020de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80020e2:	3b1c      	subs	r3, #28
 80020e4:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	; 0x3fe
 80020e8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80020ec:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80020f0:	8013      	strh	r3, [r2, #0]
    	while (written > 0) {
 80020f2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80020f6:	f103 0304 	add.w	r3, r3, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f aefb 	bne.w	8001ef8 <main+0x238>


    	}
    	// closing all files
    	close_file(&raw_data_file);
 8002102:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8002106:	f103 0308 	add.w	r3, r3, #8
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fd13 	bl	8001b36 <close_file>
    	close_file(&wav_file);
 8002110:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 8002114:	f103 0308 	add.w	r3, r3, #8
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fd0c 	bl	8001b36 <close_file>
    	close_file(&info_file);
 800211e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002122:	f103 0308 	add.w	r3, r3, #8
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd05 	bl	8001b36 <close_file>

    	clear_print("WRITTEN TO");
 800212c:	4817      	ldr	r0, [pc, #92]	; (800218c <main+0x4cc>)
 800212e:	f000 fa7d 	bl	800262c <clear_print>
    	println(title);
 8002132:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8002136:	f103 031c 	add.w	r3, r3, #28
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa64 	bl	8002608 <println>
    	println("and");
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <main+0x4d0>)
 8002142:	f000 fa61 	bl	8002608 <println>
    	println(info_title);
 8002146:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800214a:	f103 0314 	add.w	r3, r3, #20
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa5a 	bl	8002608 <println>
    	println("WAITING...");
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <main+0x4d4>)
 8002156:	f000 fa57 	bl	8002608 <println>

    	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800215a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <main+0x4d8>)
 8002160:	f002 fc42 	bl	80049e8 <HAL_GPIO_TogglePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <main+0x4d8>)
 800216c:	f002 fc0a 	bl	8004984 <HAL_GPIO_WritePin>
    	state = MOUNTED;
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <main+0x4dc>)
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
    default:
    	break;
 8002176:	bf00      	nop
    MX_USB_HOST_Process();
 8002178:	e5e6      	b.n	8001d48 <main+0x88>
 800217a:	bf00      	nop
 800217c:	00017700 	.word	0x00017700
 8002180:	080138d8 	.word	0x080138d8
 8002184:	080138e4 	.word	0x080138e4
 8002188:	0801384c 	.word	0x0801384c
 800218c:	080138f0 	.word	0x080138f0
 8002190:	080138fc 	.word	0x080138fc
 8002194:	08013900 	.word	0x08013900
 8002198:	40020c00 	.word	0x40020c00
 800219c:	20000298 	.word	0x20000298

080021a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b098      	sub	sp, #96	; 0x60
 80021a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021aa:	2230      	movs	r2, #48	; 0x30
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f010 fba3 	bl	80128fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <SystemClock_Config+0xfc>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <SystemClock_Config+0xfc>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <SystemClock_Config+0xfc>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <SystemClock_Config+0x100>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <SystemClock_Config+0x100>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <SystemClock_Config+0x100>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800220a:	2309      	movs	r3, #9
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002214:	2301      	movs	r3, #1
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002218:	2302      	movs	r3, #2
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002220:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002222:	2304      	movs	r3, #4
 8002224:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002226:	23a8      	movs	r3, #168	; 0xa8
 8002228:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222a:	2302      	movs	r3, #2
 800222c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222e:	2307      	movs	r3, #7
 8002230:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fada 	bl	80067f0 <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002242:	f000 f925 	bl	8002490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002246:	230f      	movs	r3, #15
 8002248:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002252:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	2105      	movs	r1, #5
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fde3 	bl	8006e30 <HAL_RCC_ClockConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002270:	f000 f90e 	bl	8002490 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002274:	2302      	movs	r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	4618      	mov	r0, r3
 8002284:	f005 f85a 	bl	800733c <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800228e:	f000 f8ff 	bl	8002490 <Error_Handler>
  }
}
 8002292:	bf00      	nop
 8002294:	3760      	adds	r7, #96	; 0x60
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == BUTTON_Pin){
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_EXTI_Callback+0x58>

		switch(state) {
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_GPIO_EXTI_Callback+0x64>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_GPIO_EXTI_Callback+0x20>
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			state = RECORDING_START;
			break;

		default:
			break;
 80022c2:	e01c      	b.n	80022fe <HAL_GPIO_EXTI_Callback+0x5a>
			if (Appli_state == APPLICATION_READY) {
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_GPIO_EXTI_Callback+0x68>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d108      	bne.n	80022de <HAL_GPIO_EXTI_Callback+0x3a>
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <HAL_GPIO_EXTI_Callback+0x6c>)
 80022d2:	f002 fb89 	bl	80049e8 <HAL_GPIO_TogglePin>
			    state = MOUNTING;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_GPIO_EXTI_Callback+0x64>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
			break;
 80022dc:	e00f      	b.n	80022fe <HAL_GPIO_EXTI_Callback+0x5a>
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80022de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <HAL_GPIO_EXTI_Callback+0x6c>)
 80022e4:	f002 fb80 	bl	80049e8 <HAL_GPIO_TogglePin>
			break;
 80022e8:	e009      	b.n	80022fe <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80022ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <HAL_GPIO_EXTI_Callback+0x6c>)
 80022f0:	f002 fb7a 	bl	80049e8 <HAL_GPIO_TogglePin>
			state = RECORDING_START;
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_GPIO_EXTI_Callback+0x64>)
 80022f6:	2203      	movs	r2, #3
 80022f8:	701a      	strb	r2, [r3, #0]
			break;
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_EXTI_Callback+0x5a>
		}

	}
 80022fc:	bf00      	nop
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000298 	.word	0x20000298
 800230c:	200004e8 	.word	0x200004e8
 8002310:	40020c00 	.word	0x40020c00

08002314 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d131      	bne.n	800238a <HAL_TIM_PeriodElapsedCallback+0x76>
		if (current_index >= BUFF_SIZE){
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002330:	d302      	bcc.n	8002338 <HAL_TIM_PeriodElapsedCallback+0x24>
			current_index = 0;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002334:	2200      	movs	r2, #0
 8002336:	801a      	strh	r2, [r3, #0]
		}
		// ultrasound detected
		if (
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
		if (
 800233e:	2b02      	cmp	r3, #2
 8002340:	d11c      	bne.n	800237c <HAL_TIM_PeriodElapsedCallback+0x68>
			state == MOUNTED && (ADC_Buffer[current_index] >= RECORD_MAX_LIM
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800234c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002350:	f240 52db 	movw	r2, #1499	; 0x5db
 8002354:	4293      	cmp	r3, r2
 8002356:	d809      	bhi.n	800236c <HAL_TIM_PeriodElapsedCallback+0x58>
			|| ADC_Buffer[current_index] <= RECORD_MIN_LIM)
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002362:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800236a:	d807      	bhi.n	800237c <HAL_TIM_PeriodElapsedCallback+0x68>

		) {
			state = RECORDING_START;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800236e:	2203      	movs	r2, #3
 8002370:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002378:	f002 fb36 	bl	80049e8 <HAL_GPIO_TogglePin>
		}
		current_index += 1;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002388:	801a      	strh	r2, [r3, #0]
	}
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40000400 	.word	0x40000400
 8002398:	2000029a 	.word	0x2000029a
 800239c:	20000298 	.word	0x20000298
 80023a0:	20000814 	.word	0x20000814
 80023a4:	40020c00 	.word	0x40020c00

080023a8 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_ConvHalfCpltCallback+0x18>
		state = COPY_FIRST_HALF;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80023bc:	2205      	movs	r2, #5
 80023be:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80023c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80023c6:	f002 fb0f 	bl	80049e8 <HAL_GPIO_TogglePin>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000298 	.word	0x20000298
 80023d8:	40020c00 	.word	0x40020c00

080023dc <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	if (state == RECORDING) {
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_ADC_ConvCpltCallback+0x2c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d102      	bne.n	80023f4 <HAL_ADC_ConvCpltCallback+0x18>
		state = COPY_SECOND_HALF;
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_ADC_ConvCpltCallback+0x2c>)
 80023f0:	2206      	movs	r2, #6
 80023f2:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80023f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <HAL_ADC_ConvCpltCallback+0x30>)
 80023fa:	f002 faf5 	bl	80049e8 <HAL_GPIO_TogglePin>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000298 	.word	0x20000298
 800240c:	40020c00 	.word	0x40020c00

08002410 <write_buffer>:


void write_buffer(
		usb_file_t* usb_file, uint16_t* buffer,
		uint16_t start, uint16_t amount, uint32_t* written)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	460b      	mov	r3, r1
 8002420:	80fb      	strh	r3, [r7, #6]
 8002422:	4613      	mov	r3, r2
 8002424:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800242c:	4815      	ldr	r0, [pc, #84]	; (8002484 <write_buffer+0x74>)
 800242e:	f002 faa9 	bl	8004984 <HAL_GPIO_WritePin>

	// if we don't have enough memory in our file
	// for full buffer
	if (*written + amount > SAMPLES_NUM) {
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <write_buffer+0x78>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d908      	bls.n	8002452 <write_buffer+0x42>
		amount = SAMPLES_NUM - *written;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f5c3 43ca 	rsb	r3, r3, #25856	; 0x6500
 800244a:	80bb      	strh	r3, [r7, #4]
		state = RECORDING_STOP;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <write_buffer+0x7c>)
 800244e:	2207      	movs	r2, #7
 8002450:	701a      	strb	r2, [r3, #0]
	}

	write_data(usb_file, buffer + start, amount);
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	88ba      	ldrh	r2, [r7, #4]
 800245c:	4619      	mov	r1, r3
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7ff faf3 	bl	8001a4a <write_data>
	*written += amount;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	441a      	add	r2, r3
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <write_buffer+0x74>)
 8002478:	f002 fa84 	bl	8004984 <HAL_GPIO_WritePin>

}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40020c00 	.word	0x40020c00
 8002488:	00046500 	.word	0x00046500
 800248c:	20000298 	.word	0x20000298

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <MX_RTC_Init+0xac>)
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <MX_RTC_Init+0xb0>)
 80024d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <MX_RTC_Init+0xac>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <MX_RTC_Init+0xac>)
 80024da:	227f      	movs	r2, #127	; 0x7f
 80024dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <MX_RTC_Init+0xac>)
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <MX_RTC_Init+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <MX_RTC_Init+0xac>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_RTC_Init+0xac>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024f6:	481a      	ldr	r0, [pc, #104]	; (8002560 <MX_RTC_Init+0xac>)
 80024f8:	f005 f918 	bl	800772c <HAL_RTC_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002502:	f7ff ffc5 	bl	8002490 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002506:	2300      	movs	r3, #0
 8002508:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800250a:	2300      	movs	r3, #0
 800250c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800250e:	2300      	movs	r3, #0
 8002510:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2201      	movs	r2, #1
 800251e:	4619      	mov	r1, r3
 8002520:	480f      	ldr	r0, [pc, #60]	; (8002560 <MX_RTC_Init+0xac>)
 8002522:	f005 f9e9 	bl	80078f8 <HAL_RTC_SetTime>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800252c:	f7ff ffb0 	bl	8002490 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002530:	2301      	movs	r3, #1
 8002532:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002534:	2301      	movs	r3, #1
 8002536:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002538:	2301      	movs	r3, #1
 800253a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800253c:	2300      	movs	r3, #0
 800253e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	2201      	movs	r2, #1
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	; (8002560 <MX_RTC_Init+0xac>)
 8002548:	f005 fbae 	bl	8007ca8 <HAL_RTC_SetDate>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002552:	f7ff ff9d 	bl	8002490 <Error_Handler>
  }

}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200030a8 	.word	0x200030a8
 8002564:	40002800 	.word	0x40002800

08002568 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_RTC_MspInit+0x24>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d102      	bne.n	8002580 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RTC_MspInit+0x28>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40002800 	.word	0x40002800
 8002590:	42470e3c 	.word	0x42470e3c

08002594 <main_screen_init>:

#include "screen.h"



void main_screen_init() {
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b083      	sub	sp, #12
 8002598:	af02      	add	r7, sp, #8
	  MAIN_SCREEN.hw_conf.spi_handle = &hspi2;
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <main_screen_init+0x64>)
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <main_screen_init+0x68>)
 800259e:	601a      	str	r2, [r3, #0]
	  MAIN_SCREEN.hw_conf.spi_cs_pin =  CS_Pin;
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <main_screen_init+0x64>)
 80025a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a6:	809a      	strh	r2, [r3, #4]
	  MAIN_SCREEN.hw_conf.spi_cs_port = CS_GPIO_Port;
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <main_screen_init+0x64>)
 80025aa:	4a15      	ldr	r2, [pc, #84]	; (8002600 <main_screen_init+0x6c>)
 80025ac:	609a      	str	r2, [r3, #8]
	  MAIN_SCREEN.hw_conf.rst_pin =  RST_Pin;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <main_screen_init+0x64>)
 80025b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b4:	819a      	strh	r2, [r3, #12]
	  MAIN_SCREEN.hw_conf.rst_port = RST_GPIO_Port;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <main_screen_init+0x64>)
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <main_screen_init+0x6c>)
 80025ba:	611a      	str	r2, [r3, #16]
	  MAIN_SCREEN.hw_conf.dc_pin =  DC_Pin;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <main_screen_init+0x64>)
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	829a      	strh	r2, [r3, #20]
	  MAIN_SCREEN.hw_conf.dc_port = DC_GPIO_Port;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <main_screen_init+0x64>)
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <main_screen_init+0x6c>)
 80025c8:	619a      	str	r2, [r3, #24]
	  MAIN_SCREEN.def_scr = lcd5110_def_scr;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <main_screen_init+0x64>)
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <main_screen_init+0x70>)
 80025ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025d2:	4614      	mov	r4, r2
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	6861      	ldr	r1, [r4, #4]
 80025d8:	68a2      	ldr	r2, [r4, #8]
 80025da:	c307      	stmia	r3!, {r0, r1, r2}
 80025dc:	89a2      	ldrh	r2, [r4, #12]
 80025de:	801a      	strh	r2, [r3, #0]
	  LCD5110_init(&MAIN_SCREEN.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 80025e0:	2303      	movs	r3, #3
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2302      	movs	r3, #2
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	210c      	movs	r1, #12
 80025ea:	4803      	ldr	r0, [pc, #12]	; (80025f8 <main_screen_init+0x64>)
 80025ec:	f008 fcb3 	bl	800af56 <LCD5110_init>
}
 80025f0:	bf00      	nop
 80025f2:	3704      	adds	r7, #4
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	2000059c 	.word	0x2000059c
 80025fc:	200030c8 	.word	0x200030c8
 8002600:	40021000 	.word	0x40021000
 8002604:	08014240 	.word	0x08014240

08002608 <println>:



void println(char* str) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	LCD5110_printf(&MAIN_SCREEN, BLACK, "%s\n", str);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <println+0x1c>)
 8002614:	2101      	movs	r1, #1
 8002616:	4804      	ldr	r0, [pc, #16]	; (8002628 <println+0x20>)
 8002618:	f008 fa39 	bl	800aa8e <LCD5110_printf>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	0801390c 	.word	0x0801390c
 8002628:	2000059c 	.word	0x2000059c

0800262c <clear_print>:

void clear_print(char* str) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	LCD5110_clear_scr(&MAIN_SCREEN);
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <clear_print+0x28>)
 8002636:	f008 f911 	bl	800a85c <LCD5110_clear_scr>
	LCD5110_set_cursor(0, 0, &MAIN_SCREEN);
 800263a:	4a06      	ldr	r2, [pc, #24]	; (8002654 <clear_print+0x28>)
 800263c:	2100      	movs	r1, #0
 800263e:	2000      	movs	r0, #0
 8002640:	f008 f8fa 	bl	800a838 <LCD5110_set_cursor>
	println(str);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffdf 	bl	8002608 <println>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000059c 	.word	0x2000059c

08002658 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <MX_SPI1_Init+0x64>)
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <MX_SPI1_Init+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <MX_SPI1_Init+0x64>)
 8002664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <MX_SPI1_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_SPI1_Init+0x64>)
 8002684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_SPI1_Init+0x64>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <MX_SPI1_Init+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_SPI1_Init+0x64>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <MX_SPI1_Init+0x64>)
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_SPI1_Init+0x64>)
 80026a4:	220a      	movs	r2, #10
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <MX_SPI1_Init+0x64>)
 80026aa:	f005 fd19 	bl	80080e0 <HAL_SPI_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026b4:	f7ff feec 	bl	8002490 <Error_Handler>
  }

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20003120 	.word	0x20003120
 80026c0:	40013000 	.word	0x40013000

080026c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_SPI2_Init+0x64>)
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <MX_SPI2_Init+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_SPI2_Init+0x64>)
 80026d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_SPI2_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_SPI2_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_SPI2_Init+0x64>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_SPI2_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_SPI2_Init+0x64>)
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_SPI2_Init+0x64>)
 80026f8:	2218      	movs	r2, #24
 80026fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_SPI2_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_SPI2_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <MX_SPI2_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_SPI2_Init+0x64>)
 8002710:	220a      	movs	r2, #10
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <MX_SPI2_Init+0x64>)
 8002716:	f005 fce3 	bl	80080e0 <HAL_SPI_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002720:	f7ff feb6 	bl	8002490 <Error_Handler>
  }

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200030c8 	.word	0x200030c8
 800272c:	40003800 	.word	0x40003800

08002730 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a41      	ldr	r2, [pc, #260]	; (8002854 <HAL_SPI_MspInit+0x124>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12c      	bne.n	80027ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_SPI_MspInit+0x128>)
 800275c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a38      	ldr	r2, [pc, #224]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800278a:	23e0      	movs	r3, #224	; 0xe0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800279a:	2305      	movs	r3, #5
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	482d      	ldr	r0, [pc, #180]	; (800285c <HAL_SPI_MspInit+0x12c>)
 80027a6:	f001 fe01 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027aa:	e04f      	b.n	800284c <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_SPI_MspInit+0x130>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d14a      	bne.n	800284c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_SPI_MspInit+0x128>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_SPI_MspInit+0x128>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DATA_Pin;
 800280a:	2308      	movs	r3, #8
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800281a:	2305      	movs	r3, #5
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	480f      	ldr	r0, [pc, #60]	; (8002864 <HAL_SPI_MspInit+0x134>)
 8002826:	f001 fdc1 	bl	80043ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CLK_Pin;
 800282a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800283c:	2305      	movs	r3, #5
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4808      	ldr	r0, [pc, #32]	; (8002868 <HAL_SPI_MspInit+0x138>)
 8002848:	f001 fdb0 	bl	80043ac <HAL_GPIO_Init>
}
 800284c:	bf00      	nop
 800284e:	3730      	adds	r7, #48	; 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40013000 	.word	0x40013000
 8002858:	40023800 	.word	0x40023800
 800285c:	40020000 	.word	0x40020000
 8002860:	40003800 	.word	0x40003800
 8002864:	40020800 	.word	0x40020800
 8002868:	40020400 	.word	0x40020400

0800286c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_MspInit+0x4c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_MspInit+0x4c>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_MspInit+0x4c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_MspInit+0x4c>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028aa:	2007      	movs	r0, #7
 80028ac:	f001 f824 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002910:	f000 f966 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800291c:	2001      	movs	r0, #1
 800291e:	f002 f88b 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM3_IRQHandler+0x10>)
 800292e:	f006 f83d 	bl	80089ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20003178 	.word	0x20003178

0800293c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Stream0_IRQHandler+0x10>)
 8002942:	f001 facb 	bl	8003edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000053c 	.word	0x2000053c

08002950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <OTG_FS_IRQHandler+0x10>)
 8002956:	f002 fb29 	bl	8004fac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20003a00 	.word	0x20003a00

08002964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <_sbrk+0x5c>)
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <_sbrk+0x60>)
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <_sbrk+0x64>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <_sbrk+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002994:	f00f ff4c 	bl	8012830 <__errno>
 8002998:	4602      	mov	r2, r0
 800299a:	230c      	movs	r3, #12
 800299c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20020000 	.word	0x20020000
 80029c4:	00000800 	.word	0x00000800
 80029c8:	2000029c 	.word	0x2000029c
 80029cc:	20003cc8 	.word	0x20003cc8

080029d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <SystemInit+0x28>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <SystemInit+0x28>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SystemInit+0x28>)
 80029e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ea:	609a      	str	r2, [r3, #8]
#endif
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <MX_TIM3_Init+0x98>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 874;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a2c:	f240 326a 	movw	r2, #874	; 0x36a
 8002a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a40:	f005 fe5e 	bl	8008700 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a4a:	f7ff fd21 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a5c:	f006 f8ae 	bl	8008bbc <HAL_TIM_ConfigClockSource>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a66:	f7ff fd13 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a72:	463b      	mov	r3, r7
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <MX_TIM3_Init+0x94>)
 8002a78:	f006 fd6a 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a82:	f7ff fd05 	bl	8002490 <Error_Handler>
  }

}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20003178 	.word	0x20003178
 8002a94:	40000400 	.word	0x40000400

08002a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_TIM_Base_MspInit+0x48>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	201d      	movs	r0, #29
 8002acc:	f000 ff34 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad0:	201d      	movs	r0, #29
 8002ad2:	f000 ff5d 	bl	8003990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aee:	e003      	b.n	8002af8 <LoopCopyDataInit>

08002af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002af6:	3104      	adds	r1, #4

08002af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002af8:	480b      	ldr	r0, [pc, #44]	; (8002b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b00:	d3f6      	bcc.n	8002af0 <CopyDataInit>
  ldr  r2, =_sbss
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b04:	e002      	b.n	8002b0c <LoopFillZerobss>

08002b06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b08:	f842 3b04 	str.w	r3, [r2], #4

08002b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b10:	d3f9      	bcc.n	8002b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b12:	f7ff ff5d 	bl	80029d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b16:	f00f fe91 	bl	801283c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1a:	f7ff f8d1 	bl	8001cc0 <main>
  bx  lr    
 8002b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b24:	08015b7c 	.word	0x08015b7c
  ldr  r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b2c:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8002b30:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 8002b34:	20003cc8 	.word	0x20003cc8

08002b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC_IRQHandler>
	...

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_Init+0x40>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_Init+0x40>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_Init+0x40>)
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_Init+0x40>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 fec7 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fe7c 	bl	800286c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff0e 	bl	80039c0 <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bbc:	f000 febc 	bl	8003938 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000064 	.word	0x20000064
 8002bd8:	2000006c 	.word	0x2000006c
 8002bdc:	20000068 	.word	0x20000068

08002be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_IncTick+0x20>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_IncTick+0x24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_IncTick+0x24>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000006c 	.word	0x2000006c
 8002c04:	200031b8 	.word	0x200031b8

08002c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_GetTick+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	200031b8 	.word	0x200031b8

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_Delay+0x40>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000006c 	.word	0x2000006c

08002c64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e15b      	b.n	8002f32 <HAL_ADC_Init+0x2ce>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4aa4      	ldr	r2, [pc, #656]	; (8002f10 <HAL_ADC_Init+0x2ac>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_ADC_Init+0x3e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4aa2      	ldr	r2, [pc, #648]	; (8002f14 <HAL_ADC_Init+0x2b0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ADC_Init+0x3e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4aa1      	ldr	r2, [pc, #644]	; (8002f18 <HAL_ADC_Init+0x2b4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x3e>
 8002c98:	f240 1143 	movw	r1, #323	; 0x143
 8002c9c:	489f      	ldr	r0, [pc, #636]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002c9e:	f7ff fbfe 	bl	800249e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <HAL_ADC_Init+0x6e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_ADC_Init+0x6e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cbc:	d009      	beq.n	8002cd2 <HAL_ADC_Init+0x6e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x6e>
 8002cc8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002ccc:	4893      	ldr	r0, [pc, #588]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002cce:	f7ff fbe6 	bl	800249e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d013      	beq.n	8002d02 <HAL_ADC_Init+0x9e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce2:	d00e      	beq.n	8002d02 <HAL_ADC_Init+0x9e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cec:	d009      	beq.n	8002d02 <HAL_ADC_Init+0x9e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Init+0x9e>
 8002cf8:	f240 1145 	movw	r1, #325	; 0x145
 8002cfc:	4887      	ldr	r0, [pc, #540]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002cfe:	f7ff fbce 	bl	800249e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_ADC_Init+0xb8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_Init+0xb8>
 8002d12:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002d16:	4881      	ldr	r0, [pc, #516]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002d18:	f7ff fbc1 	bl	800249e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_ADC_Init+0xd2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0xd2>
 8002d2c:	f240 1147 	movw	r1, #327	; 0x147
 8002d30:	487a      	ldr	r0, [pc, #488]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002d32:	f7ff fbb4 	bl	800249e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d054      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d46:	d04f      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d50:	d04a      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d5a:	d045      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d64:	d040      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002d6e:	d03b      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d78:	d036      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002d82:	d031      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8c:	d02c      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002d96:	d027      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002da0:	d022      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002daa:	d01d      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002db4:	d018      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002dbe:	d013      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002dc8:	d00e      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002dd2:	d009      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_ADC_Init+0x2bc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_Init+0x184>
 8002dde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002de2:	484e      	ldr	r0, [pc, #312]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002de4:	f7ff fb5b 	bl	800249e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <HAL_ADC_Init+0x1a0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df8:	d004      	beq.n	8002e04 <HAL_ADC_Init+0x1a0>
 8002dfa:	f240 1149 	movw	r1, #329	; 0x149
 8002dfe:	4847      	ldr	r0, [pc, #284]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002e00:	f7ff fb4d 	bl	800249e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_ADC_Init+0x1b0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d904      	bls.n	8002e1e <HAL_ADC_Init+0x1ba>
 8002e14:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002e18:	4840      	ldr	r0, [pc, #256]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002e1a:	f7ff fb40 	bl	800249e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_Init+0x1d8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d004      	beq.n	8002e3c <HAL_ADC_Init+0x1d8>
 8002e32:	f240 114b 	movw	r1, #331	; 0x14b
 8002e36:	4839      	ldr	r0, [pc, #228]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002e38:	f7ff fb31 	bl	800249e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d00c      	beq.n	8002e5e <HAL_ADC_Init+0x1fa>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_ADC_Init+0x1fa>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_Init+0x1fa>
 8002e54:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002e58:	4830      	ldr	r0, [pc, #192]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002e5a:	f7ff fb20 	bl	800249e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_ADC_Init+0x218>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d004      	beq.n	8002e7c <HAL_ADC_Init+0x218>
 8002e72:	f240 114d 	movw	r1, #333	; 0x14d
 8002e76:	4829      	ldr	r0, [pc, #164]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002e78:	f7ff fb11 	bl	800249e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <HAL_ADC_Init+0x2bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d017      	beq.n	8002eb6 <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <HAL_ADC_Init+0x252>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e96:	d00e      	beq.n	8002eb6 <HAL_ADC_Init+0x252>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea0:	d009      	beq.n	8002eb6 <HAL_ADC_Init+0x252>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_Init+0x252>
 8002eac:	f240 1151 	movw	r1, #337	; 0x151
 8002eb0:	481a      	ldr	r0, [pc, #104]	; (8002f1c <HAL_ADC_Init+0x2b8>)
 8002eb2:	f7ff faf4 	bl	800249e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_ADC_Init+0x26e>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8c4 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d122      	bne.n	8002f24 <HAL_ADC_Init+0x2c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 faa4 	bl	8003440 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0e:	e00b      	b.n	8002f28 <HAL_ADC_Init+0x2c4>
 8002f10:	40012000 	.word	0x40012000
 8002f14:	40012100 	.word	0x40012100
 8002f18:	40012200 	.word	0x40012200
 8002f1c:	08013910 	.word	0x08013910
 8002f20:	0f000001 	.word	0x0f000001
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop

08002f3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_ADC_Start_DMA+0x2a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	7e1b      	ldrb	r3, [r3, #24]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d004      	beq.n	8002f66 <HAL_ADC_Start_DMA+0x2a>
 8002f5c:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8002f60:	4879      	ldr	r0, [pc, #484]	; (8003148 <HAL_ADC_Start_DMA+0x20c>)
 8002f62:	f7ff fa9c 	bl	800249e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d013      	beq.n	8002f96 <HAL_ADC_Start_DMA+0x5a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f76:	d00e      	beq.n	8002f96 <HAL_ADC_Start_DMA+0x5a>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f80:	d009      	beq.n	8002f96 <HAL_ADC_Start_DMA+0x5a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_Start_DMA+0x5a>
 8002f8c:	f240 5141 	movw	r1, #1345	; 0x541
 8002f90:	486d      	ldr	r0, [pc, #436]	; (8003148 <HAL_ADC_Start_DMA+0x20c>)
 8002f92:	f7ff fa84 	bl	800249e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_Start_DMA+0x68>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0cc      	b.n	800313e <HAL_ADC_Start_DMA+0x202>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d018      	beq.n	8002fec <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <HAL_ADC_Start_DMA+0x210>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_ADC_Start_DMA+0x214>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	0c9a      	lsrs	r2, r3, #18
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fde:	e002      	b.n	8002fe6 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f9      	bne.n	8002fe0 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	f040 80a0 	bne.w	800313c <HAL_ADC_Start_DMA+0x200>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_ADC_Start_DMA+0xf2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d106      	bne.n	800304a <HAL_ADC_Start_DMA+0x10e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f023 0206 	bic.w	r2, r3, #6
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
 8003048:	e002      	b.n	8003050 <HAL_ADC_Start_DMA+0x114>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003058:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_ADC_Start_DMA+0x218>)
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	4a3d      	ldr	r2, [pc, #244]	; (8003158 <HAL_ADC_Start_DMA+0x21c>)
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	4a3c      	ldr	r2, [pc, #240]	; (800315c <HAL_ADC_Start_DMA+0x220>)
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	4a3b      	ldr	r2, [pc, #236]	; (8003160 <HAL_ADC_Start_DMA+0x224>)
 8003072:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800307c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800308c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	334c      	adds	r3, #76	; 0x4c
 80030a8:	4619      	mov	r1, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f000 feaf 	bl	8003e10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12a      	bne.n	8003114 <HAL_ADC_Start_DMA+0x1d8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a28      	ldr	r2, [pc, #160]	; (8003164 <HAL_ADC_Start_DMA+0x228>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d015      	beq.n	80030f4 <HAL_ADC_Start_DMA+0x1b8>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_ADC_Start_DMA+0x22c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d105      	bne.n	80030de <HAL_ADC_Start_DMA+0x1a2>
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_ADC_Start_DMA+0x218>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_ADC_Start_DMA+0x1b8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_ADC_Start_DMA+0x230>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d129      	bne.n	800313c <HAL_ADC_Start_DMA+0x200>
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_ADC_Start_DMA+0x218>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2b0f      	cmp	r3, #15
 80030f2:	d823      	bhi.n	800313c <HAL_ADC_Start_DMA+0x200>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11c      	bne.n	800313c <HAL_ADC_Start_DMA+0x200>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	e013      	b.n	800313c <HAL_ADC_Start_DMA+0x200>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a12      	ldr	r2, [pc, #72]	; (8003164 <HAL_ADC_Start_DMA+0x228>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10e      	bne.n	800313c <HAL_ADC_Start_DMA+0x200>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_ADC_Start_DMA+0x200>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800313a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08013910 	.word	0x08013910
 800314c:	20000064 	.word	0x20000064
 8003150:	431bde83 	.word	0x431bde83
 8003154:	40012300 	.word	0x40012300
 8003158:	08003655 	.word	0x08003655
 800315c:	0800370f 	.word	0x0800370f
 8003160:	0800372b 	.word	0x0800372b
 8003164:	40012000 	.word	0x40012000
 8003168:	40012100 	.word	0x40012100
 800316c:	40012200 	.word	0x40012200

08003170 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b12      	cmp	r3, #18
 8003198:	d904      	bls.n	80031a4 <HAL_ADC_ConfigChannel+0x20>
 800319a:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 800319e:	489b      	ldr	r0, [pc, #620]	; (800340c <HAL_ADC_ConfigChannel+0x288>)
 80031a0:	f7ff f97d 	bl	800249e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x30>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d904      	bls.n	80031be <HAL_ADC_ConfigChannel+0x3a>
 80031b4:	f240 6159 	movw	r1, #1625	; 0x659
 80031b8:	4894      	ldr	r0, [pc, #592]	; (800340c <HAL_ADC_ConfigChannel+0x288>)
 80031ba:	f7ff f970 	bl	800249e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d01c      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d018      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d014      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d010      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d00c      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d008      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b07      	cmp	r3, #7
 80031fc:	d004      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x84>
 80031fe:	f240 615a 	movw	r1, #1626	; 0x65a
 8003202:	4882      	ldr	r0, [pc, #520]	; (800340c <HAL_ADC_ConfigChannel+0x288>)
 8003204:	f7ff f94b 	bl	800249e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x92>
 8003212:	2302      	movs	r3, #2
 8003214:	e10f      	b.n	8003436 <HAL_ADC_ConfigChannel+0x2b2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b09      	cmp	r3, #9
 8003224:	d925      	bls.n	8003272 <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	3b1e      	subs	r3, #30
 800323c:	2207      	movs	r2, #7
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	400a      	ands	r2, r1
 800324a:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	4603      	mov	r3, r0
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4403      	add	r3, r0
 8003264:	3b1e      	subs	r3, #30
 8003266:	409a      	lsls	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	e022      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	2207      	movs	r2, #7
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43da      	mvns	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	400a      	ands	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4403      	add	r3, r0
 80032ae:	409a      	lsls	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d824      	bhi.n	800330a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	3b05      	subs	r3, #5
 80032d2:	221f      	movs	r2, #31
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43da      	mvns	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	400a      	ands	r2, r1
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	3b05      	subs	r3, #5
 80032fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
 8003308:	e04c      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d824      	bhi.n	800335c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b23      	subs	r3, #35	; 0x23
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b23      	subs	r3, #35	; 0x23
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
 800335a:	e023      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b41      	subs	r3, #65	; 0x41
 800336e:	221f      	movs	r2, #31
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43da      	mvns	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	400a      	ands	r2, r1
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	4618      	mov	r0, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	3b41      	subs	r3, #65	; 0x41
 8003398:	fa00 f203 	lsl.w	r2, r0, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_ADC_ConfigChannel+0x28c>)
 80033a6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_ADC_ConfigChannel+0x290>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d109      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x242>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b12      	cmp	r3, #18
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x242>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_ADC_ConfigChannel+0x290>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d12d      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2a8>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d003      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x25c>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b11      	cmp	r3, #17
 80033de:	d125      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2a8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d11b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2a8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_ADC_ConfigChannel+0x294>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_ADC_ConfigChannel+0x298>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0c9a      	lsrs	r2, r3, #18
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800340a:	e00c      	b.n	8003426 <HAL_ADC_ConfigChannel+0x2a2>
 800340c:	08013910 	.word	0x08013910
 8003410:	40012300 	.word	0x40012300
 8003414:	40012000 	.word	0x40012000
 8003418:	20000064 	.word	0x20000064
 800341c:	431bde83 	.word	0x431bde83
      {
        counter--;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3b01      	subs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x29c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop

08003440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003448:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <ADC_Init+0x208>)
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <ADC_Init+0x20c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	e00f      	b.n	800353e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800352c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800353c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0202 	bic.w	r2, r2, #2
 800354c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7e1b      	ldrb	r3, [r3, #24]
 8003558:	005a      	lsls	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d028      	beq.n	80035be <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <ADC_Init+0x13c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2b08      	cmp	r3, #8
 800357a:	d904      	bls.n	8003586 <ADC_Init+0x146>
 800357c:	f240 7175 	movw	r1, #1909	; 0x775
 8003580:	4833      	ldr	r0, [pc, #204]	; (8003650 <ADC_Init+0x210>)
 8003582:	f7fe ff8c 	bl	800249e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003594:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035a4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	3b01      	subs	r3, #1
 80035b2:	035a      	lsls	r2, r3, #13
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e007      	b.n	80035ce <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035cc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	051a      	lsls	r2, r3, #20
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003610:	025a      	lsls	r2, r3, #9
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	029a      	lsls	r2, r3, #10
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40012300 	.word	0x40012300
 800364c:	0f000001 	.word	0x0f000001
 8003650:	08013910 	.word	0x08013910

08003654 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13c      	bne.n	80036e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d12b      	bne.n	80036e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800368c:	2b00      	cmp	r3, #0
 800368e:	d127      	bne.n	80036e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d119      	bne.n	80036e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0220 	bic.w	r2, r2, #32
 80036ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7fe fe7b 	bl	80023dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036e6:	e00e      	b.n	8003706 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fd3b 	bl	8003170 <HAL_ADC_ErrorCallback>
}
 80036fa:	e004      	b.n	8003706 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7fe fe43 	bl	80023a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fd10 	bl	8003170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	; (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d8:	f7ff ff8e 	bl	80037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b07      	cmp	r3, #7
 8003904:	d00f      	beq.n	8003926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d00c      	beq.n	8003926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d009      	beq.n	8003926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d006      	beq.n	8003926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d003      	beq.n	8003926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800391e:	2192      	movs	r1, #146	; 0x92
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003922:	f7fe fdbc 	bl	800249e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff16 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	08013948 	.word	0x08013948

08003938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d903      	bls.n	8003958 <HAL_NVIC_SetPriority+0x20>
 8003950:	21aa      	movs	r1, #170	; 0xaa
 8003952:	480e      	ldr	r0, [pc, #56]	; (800398c <HAL_NVIC_SetPriority+0x54>)
 8003954:	f7fe fda3 	bl	800249e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d903      	bls.n	8003966 <HAL_NVIC_SetPriority+0x2e>
 800395e:	21ab      	movs	r1, #171	; 0xab
 8003960:	480a      	ldr	r0, [pc, #40]	; (800398c <HAL_NVIC_SetPriority+0x54>)
 8003962:	f7fe fd9c 	bl	800249e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003966:	f7ff ff1b 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 800396a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	6978      	ldr	r0, [r7, #20]
 8003972:	f7ff ff6b 	bl	800384c <NVIC_EncodePriority>
 8003976:	4602      	mov	r2, r0
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff3a 	bl	80037f8 <__NVIC_SetPriority>
}
 8003984:	bf00      	nop
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	08013948 	.word	0x08013948

08003990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da03      	bge.n	80039aa <HAL_NVIC_EnableIRQ+0x1a>
 80039a2:	21be      	movs	r1, #190	; 0xbe
 80039a4:	4805      	ldr	r0, [pc, #20]	; (80039bc <HAL_NVIC_EnableIRQ+0x2c>)
 80039a6:	f7fe fd7a 	bl	800249e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff04 	bl	80037bc <__NVIC_EnableIRQ>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08013948 	.word	0x08013948

080039c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff73 	bl	80038b4 <SysTick_Config>
 80039ce:	4603      	mov	r3, r0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff f910 	bl	8002c08 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e204      	b.n	8003dfe <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a97      	ldr	r2, [pc, #604]	; (8003c58 <HAL_DMA_Init+0x280>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04e      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a96      	ldr	r2, [pc, #600]	; (8003c5c <HAL_DMA_Init+0x284>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d049      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a94      	ldr	r2, [pc, #592]	; (8003c60 <HAL_DMA_Init+0x288>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d044      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a93      	ldr	r2, [pc, #588]	; (8003c64 <HAL_DMA_Init+0x28c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03f      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a91      	ldr	r2, [pc, #580]	; (8003c68 <HAL_DMA_Init+0x290>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03a      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a90      	ldr	r2, [pc, #576]	; (8003c6c <HAL_DMA_Init+0x294>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d035      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <HAL_DMA_Init+0x298>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d030      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8d      	ldr	r2, [pc, #564]	; (8003c74 <HAL_DMA_Init+0x29c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02b      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a8b      	ldr	r2, [pc, #556]	; (8003c78 <HAL_DMA_Init+0x2a0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d026      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a8a      	ldr	r2, [pc, #552]	; (8003c7c <HAL_DMA_Init+0x2a4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d021      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a88      	ldr	r2, [pc, #544]	; (8003c80 <HAL_DMA_Init+0x2a8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01c      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a87      	ldr	r2, [pc, #540]	; (8003c84 <HAL_DMA_Init+0x2ac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d017      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a85      	ldr	r2, [pc, #532]	; (8003c88 <HAL_DMA_Init+0x2b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d012      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a84      	ldr	r2, [pc, #528]	; (8003c8c <HAL_DMA_Init+0x2b4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00d      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a82      	ldr	r2, [pc, #520]	; (8003c90 <HAL_DMA_Init+0x2b8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a81      	ldr	r2, [pc, #516]	; (8003c94 <HAL_DMA_Init+0x2bc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <HAL_DMA_Init+0xc4>
 8003a94:	21b8      	movs	r1, #184	; 0xb8
 8003a96:	4880      	ldr	r0, [pc, #512]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003a98:	f7fe fd01 	bl	800249e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d026      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aac:	d021      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab6:	d01c      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003ac0:	d017      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aca:	d012      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003ad4:	d00d      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ade:	d008      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_Init+0x11a>
 8003aea:	21b9      	movs	r1, #185	; 0xb9
 8003aec:	486a      	ldr	r0, [pc, #424]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003aee:	f7fe fcd6 	bl	800249e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_DMA_Init+0x13a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d007      	beq.n	8003b12 <HAL_DMA_Init+0x13a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d003      	beq.n	8003b12 <HAL_DMA_Init+0x13a>
 8003b0a:	21ba      	movs	r1, #186	; 0xba
 8003b0c:	4862      	ldr	r0, [pc, #392]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003b0e:	f7fe fcc6 	bl	800249e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1a:	d007      	beq.n	8003b2c <HAL_DMA_Init+0x154>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_DMA_Init+0x154>
 8003b24:	21bb      	movs	r1, #187	; 0xbb
 8003b26:	485c      	ldr	r0, [pc, #368]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003b28:	f7fe fcb9 	bl	800249e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	d007      	beq.n	8003b46 <HAL_DMA_Init+0x16e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_DMA_Init+0x16e>
 8003b3e:	21bc      	movs	r1, #188	; 0xbc
 8003b40:	4855      	ldr	r0, [pc, #340]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003b42:	f7fe fcac 	bl	800249e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_DMA_Init+0x192>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Init+0x192>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d003      	beq.n	8003b6a <HAL_DMA_Init+0x192>
 8003b62:	21bd      	movs	r1, #189	; 0xbd
 8003b64:	484c      	ldr	r0, [pc, #304]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003b66:	f7fe fc9a 	bl	800249e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <HAL_DMA_Init+0x1b6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Init+0x1b6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b84:	d003      	beq.n	8003b8e <HAL_DMA_Init+0x1b6>
 8003b86:	21be      	movs	r1, #190	; 0xbe
 8003b88:	4843      	ldr	r0, [pc, #268]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003b8a:	f7fe fc88 	bl	800249e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_DMA_Init+0x1d8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9e:	d007      	beq.n	8003bb0 <HAL_DMA_Init+0x1d8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d003      	beq.n	8003bb0 <HAL_DMA_Init+0x1d8>
 8003ba8:	21bf      	movs	r1, #191	; 0xbf
 8003baa:	483b      	ldr	r0, [pc, #236]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003bac:	f7fe fc77 	bl	800249e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <HAL_DMA_Init+0x206>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d00d      	beq.n	8003bde <HAL_DMA_Init+0x206>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Init+0x206>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bd4:	d003      	beq.n	8003bde <HAL_DMA_Init+0x206>
 8003bd6:	21c0      	movs	r1, #192	; 0xc0
 8003bd8:	482f      	ldr	r0, [pc, #188]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003bda:	f7fe fc60 	bl	800249e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_DMA_Init+0x21e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_Init+0x21e>
 8003bee:	21c1      	movs	r1, #193	; 0xc1
 8003bf0:	4829      	ldr	r0, [pc, #164]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003bf2:	f7fe fc54 	bl	800249e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d065      	beq.n	8003cca <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00f      	beq.n	8003c26 <HAL_DMA_Init+0x24e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00b      	beq.n	8003c26 <HAL_DMA_Init+0x24e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d007      	beq.n	8003c26 <HAL_DMA_Init+0x24e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d003      	beq.n	8003c26 <HAL_DMA_Init+0x24e>
 8003c1e:	21c6      	movs	r1, #198	; 0xc6
 8003c20:	481d      	ldr	r0, [pc, #116]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003c22:	f7fe fc3c 	bl	800249e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d036      	beq.n	8003c9c <HAL_DMA_Init+0x2c4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c36:	d031      	beq.n	8003c9c <HAL_DMA_Init+0x2c4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d02c      	beq.n	8003c9c <HAL_DMA_Init+0x2c4>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c4a:	d027      	beq.n	8003c9c <HAL_DMA_Init+0x2c4>
 8003c4c:	21c7      	movs	r1, #199	; 0xc7
 8003c4e:	4812      	ldr	r0, [pc, #72]	; (8003c98 <HAL_DMA_Init+0x2c0>)
 8003c50:	f7fe fc25 	bl	800249e <assert_failed>
 8003c54:	e022      	b.n	8003c9c <HAL_DMA_Init+0x2c4>
 8003c56:	bf00      	nop
 8003c58:	40026010 	.word	0x40026010
 8003c5c:	40026028 	.word	0x40026028
 8003c60:	40026040 	.word	0x40026040
 8003c64:	40026058 	.word	0x40026058
 8003c68:	40026070 	.word	0x40026070
 8003c6c:	40026088 	.word	0x40026088
 8003c70:	400260a0 	.word	0x400260a0
 8003c74:	400260b8 	.word	0x400260b8
 8003c78:	40026410 	.word	0x40026410
 8003c7c:	40026428 	.word	0x40026428
 8003c80:	40026440 	.word	0x40026440
 8003c84:	40026458 	.word	0x40026458
 8003c88:	40026470 	.word	0x40026470
 8003c8c:	40026488 	.word	0x40026488
 8003c90:	400264a0 	.word	0x400264a0
 8003c94:	400264b8 	.word	0x400264b8
 8003c98:	08013984 	.word	0x08013984
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_DMA_Init+0x2f2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cac:	d00d      	beq.n	8003cca <HAL_DMA_Init+0x2f2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb6:	d008      	beq.n	8003cca <HAL_DMA_Init+0x2f2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cc0:	d003      	beq.n	8003cca <HAL_DMA_Init+0x2f2>
 8003cc2:	21c8      	movs	r1, #200	; 0xc8
 8003cc4:	4850      	ldr	r0, [pc, #320]	; (8003e08 <HAL_DMA_Init+0x430>)
 8003cc6:	f7fe fbea 	bl	800249e <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cea:	e00f      	b.n	8003d0c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cec:	f7fe ff8c 	bl	8002c08 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d908      	bls.n	8003d0c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e078      	b.n	8003dfe <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e8      	bne.n	8003cec <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_DMA_Init+0x434>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0307 	bic.w	r3, r3, #7
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d117      	bne.n	8003dd0 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa80 	bl	80042b8 <DMA_CheckFifoParam>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e016      	b.n	8003dfe <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa37 	bl	800424c <DMA_CalcBaseAndBitshift>
 8003dde:	4603      	mov	r3, r0
 8003de0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	223f      	movs	r2, #63	; 0x3f
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	08013984 	.word	0x08013984
 8003e0c:	f010803f 	.word	0xf010803f

08003e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA_Start_IT+0x26>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d304      	bcc.n	8003e40 <HAL_DMA_Start_IT+0x30>
 8003e36:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003e3a:	4827      	ldr	r0, [pc, #156]	; (8003ed8 <HAL_DMA_Start_IT+0xc8>)
 8003e3c:	f7fe fb2f 	bl	800249e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Start_IT+0x3e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e040      	b.n	8003ed0 <HAL_DMA_Start_IT+0xc0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d12f      	bne.n	8003ec2 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f9ba 	bl	80041f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0216 	orr.w	r2, r2, #22
 8003e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e005      	b.n	8003ece <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08013984 	.word	0x08013984

08003edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ee8:	4b92      	ldr	r3, [pc, #584]	; (8004134 <HAL_DMA_IRQHandler+0x258>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a92      	ldr	r2, [pc, #584]	; (8004138 <HAL_DMA_IRQHandler+0x25c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	2208      	movs	r2, #8
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01a      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0204 	bic.w	r2, r2, #4
 8003f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	2208      	movs	r2, #8
 8003f36:	409a      	lsls	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d012      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2204      	movs	r2, #4
 8003f84:	409a      	lsls	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f043 0204 	orr.w	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2210      	movs	r2, #16
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d043      	beq.n	800404c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d03c      	beq.n	800404c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d018      	beq.n	800401e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d108      	bne.n	800400c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d024      	beq.n	800404c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
 800400a:	e01f      	b.n	800404c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
 800401c:	e016      	b.n	800404c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d107      	bne.n	800403c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0208 	bic.w	r2, r2, #8
 800403a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	2220      	movs	r2, #32
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 808e 	beq.w	800417a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8086 	beq.w	800417a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	2220      	movs	r2, #32
 8004074:	409a      	lsls	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b05      	cmp	r3, #5
 8004084:	d136      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0216 	bic.w	r2, r2, #22
 8004094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x1da>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0208 	bic.w	r2, r2, #8
 80040c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	223f      	movs	r2, #63	; 0x3f
 80040cc:	409a      	lsls	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d07d      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
        }
        return;
 80040f2:	e078      	b.n	80041e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01c      	beq.n	800413c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d108      	bne.n	8004122 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	2b00      	cmp	r3, #0
 8004116:	d030      	beq.n	800417a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	e02b      	b.n	800417a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d027      	beq.n	800417a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e022      	b.n	800417a <HAL_DMA_IRQHandler+0x29e>
 8004134:	20000064 	.word	0x20000064
 8004138:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0210 	bic.w	r2, r2, #16
 8004158:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	d032      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d022      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2205      	movs	r2, #5
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d307      	bcc.n	80041c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f2      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x2ca>
 80041c0:	e000      	b.n	80041c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e000      	b.n	80041e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041e6:	bf00      	nop
    }
  }
}
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800420c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d108      	bne.n	8004230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800422e:	e007      	b.n	8004240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	3b10      	subs	r3, #16
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <DMA_CalcBaseAndBitshift+0x64>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d909      	bls.n	800428e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	659a      	str	r2, [r3, #88]	; 0x58
 800428c:	e007      	b.n	800429e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	aaaaaaab 	.word	0xaaaaaaab
 80042b4:	08013c24 	.word	0x08013c24

080042b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11f      	bne.n	8004312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d855      	bhi.n	8004384 <DMA_CheckFifoParam+0xcc>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x28>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	08004303 	.word	0x08004303
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004385 	.word	0x08004385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d045      	beq.n	8004388 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004300:	e042      	b.n	8004388 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430a:	d13f      	bne.n	800438c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004310:	e03c      	b.n	800438c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431a:	d121      	bne.n	8004360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d836      	bhi.n	8004390 <DMA_CheckFifoParam+0xd8>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <DMA_CheckFifoParam+0x70>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	08004339 	.word	0x08004339
 800432c:	0800433f 	.word	0x0800433f
 8004330:	08004339 	.word	0x08004339
 8004334:	08004351 	.word	0x08004351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e02f      	b.n	800439e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d024      	beq.n	8004394 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434e:	e021      	b.n	8004394 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004358:	d11e      	bne.n	8004398 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800435e:	e01b      	b.n	8004398 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <DMA_CheckFifoParam+0xb4>
 8004366:	2b03      	cmp	r3, #3
 8004368:	d003      	beq.n	8004372 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800436a:	e018      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e015      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
      break;
 8004382:	e00b      	b.n	800439c <DMA_CheckFifoParam+0xe4>
      break;
 8004384:	bf00      	nop
 8004386:	e00a      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;
 8004388:	bf00      	nop
 800438a:	e008      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;
 800438c:	bf00      	nop
 800438e:	e006      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;
 8004390:	bf00      	nop
 8004392:	e004      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;
 8004394:	bf00      	nop
 8004396:	e002      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;   
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <DMA_CheckFifoParam+0xe6>
      break;
 800439c:	bf00      	nop
    }
  } 
  
  return status; 
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a41      	ldr	r2, [pc, #260]	; (80044cc <HAL_GPIO_Init+0x120>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d023      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <HAL_GPIO_Init+0x124>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01f      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <HAL_GPIO_Init+0x128>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01b      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a3e      	ldr	r2, [pc, #248]	; (80044d8 <HAL_GPIO_Init+0x12c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d017      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a3d      	ldr	r2, [pc, #244]	; (80044dc <HAL_GPIO_Init+0x130>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a3c      	ldr	r2, [pc, #240]	; (80044e0 <HAL_GPIO_Init+0x134>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a3b      	ldr	r2, [pc, #236]	; (80044e4 <HAL_GPIO_Init+0x138>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <HAL_GPIO_Init+0x13c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a39      	ldr	r2, [pc, #228]	; (80044ec <HAL_GPIO_Init+0x140>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x66>
 800440a:	21b3      	movs	r1, #179	; 0xb3
 800440c:	4838      	ldr	r0, [pc, #224]	; (80044f0 <HAL_GPIO_Init+0x144>)
 800440e:	f7fe f846 	bl	800249e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_GPIO_Init+0x7c>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x84>
 8004428:	21b4      	movs	r1, #180	; 0xb4
 800442a:	4831      	ldr	r0, [pc, #196]	; (80044f0 <HAL_GPIO_Init+0x144>)
 800442c:	f7fe f837 	bl	800249e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d035      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d031      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b11      	cmp	r3, #17
 8004446:	d02d      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d029      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b12      	cmp	r3, #18
 8004456:	d025      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <HAL_GPIO_Init+0x148>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d020      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <HAL_GPIO_Init+0x14c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01b      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_GPIO_Init+0x150>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d016      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a21      	ldr	r2, [pc, #132]	; (8004500 <HAL_GPIO_Init+0x154>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d011      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_GPIO_Init+0x158>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00c      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_GPIO_Init+0x15c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0xf8>
 800449c:	21b5      	movs	r1, #181	; 0xb5
 800449e:	4814      	ldr	r0, [pc, #80]	; (80044f0 <HAL_GPIO_Init+0x144>)
 80044a0:	f7fd fffd 	bl	800249e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <HAL_GPIO_Init+0x118>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d007      	beq.n	80044c4 <HAL_GPIO_Init+0x118>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x118>
 80044bc:	21b6      	movs	r1, #182	; 0xb6
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <HAL_GPIO_Init+0x144>)
 80044c0:	f7fd ffed 	bl	800249e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e23f      	b.n	800494a <HAL_GPIO_Init+0x59e>
 80044ca:	bf00      	nop
 80044cc:	40020000 	.word	0x40020000
 80044d0:	40020400 	.word	0x40020400
 80044d4:	40020800 	.word	0x40020800
 80044d8:	40020c00 	.word	0x40020c00
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40021400 	.word	0x40021400
 80044e4:	40021800 	.word	0x40021800
 80044e8:	40021c00 	.word	0x40021c00
 80044ec:	40022000 	.word	0x40022000
 80044f0:	080139bc 	.word	0x080139bc
 80044f4:	10110000 	.word	0x10110000
 80044f8:	10210000 	.word	0x10210000
 80044fc:	10310000 	.word	0x10310000
 8004500:	10120000 	.word	0x10120000
 8004504:	10220000 	.word	0x10220000
 8004508:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	f040 820d 	bne.w	8004944 <HAL_GPIO_Init+0x598>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00b      	beq.n	800454a <HAL_GPIO_Init+0x19e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d007      	beq.n	800454a <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453e:	2b11      	cmp	r3, #17
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b12      	cmp	r3, #18
 8004548:	d144      	bne.n	80045d4 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <HAL_GPIO_Init+0x1c6>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d00b      	beq.n	8004572 <HAL_GPIO_Init+0x1c6>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x1c6>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x1c6>
 800456a:	21c8      	movs	r1, #200	; 0xc8
 800456c:	489f      	ldr	r0, [pc, #636]	; (80047ec <HAL_GPIO_Init+0x440>)
 800456e:	f7fd ff96 	bl	800249e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 0201 	and.w	r2, r3, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d004      	beq.n	8004616 <HAL_GPIO_Init+0x26a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b12      	cmp	r3, #18
 8004612:	f040 80bc 	bne.w	800478e <HAL_GPIO_Init+0x3e2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8093 	beq.w	8004746 <HAL_GPIO_Init+0x39a>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b09      	cmp	r3, #9
 8004626:	f000 808e 	beq.w	8004746 <HAL_GPIO_Init+0x39a>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8089 	beq.w	8004746 <HAL_GPIO_Init+0x39a>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8084 	beq.w	8004746 <HAL_GPIO_Init+0x39a>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d07f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d07b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d077      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d073      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d06f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d06b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d067      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d063      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d05f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d05b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d057      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d053      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d04f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d04b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d047      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	d043      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	d03f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b07      	cmp	r3, #7
 80046cc:	d03b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d037      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d033      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d02f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d02b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b09      	cmp	r3, #9
 80046f4:	d027      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b09      	cmp	r3, #9
 80046fc:	d023      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b0a      	cmp	r3, #10
 8004704:	d01f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d01b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b0b      	cmp	r3, #11
 8004714:	d017      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d00f      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b0d      	cmp	r3, #13
 800472c:	d00b      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d007      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x39a>
 800473e:	21e0      	movs	r1, #224	; 0xe0
 8004740:	482a      	ldr	r0, [pc, #168]	; (80047ec <HAL_GPIO_Init+0x440>)
 8004742:	f7fd feac 	bl	800249e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	2203      	movs	r2, #3
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80ba 	beq.w	8004944 <HAL_GPIO_Init+0x598>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_GPIO_Init+0x444>)
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_GPIO_Init+0x444>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	6453      	str	r3, [r2, #68]	; 0x44
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_GPIO_Init+0x444>)
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	e004      	b.n	80047f4 <HAL_GPIO_Init+0x448>
 80047ea:	bf00      	nop
 80047ec:	080139bc 	.word	0x080139bc
 80047f0:	40023800 	.word	0x40023800
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f8:	4a58      	ldr	r2, [pc, #352]	; (800495c <HAL_GPIO_Init+0x5b0>)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	3302      	adds	r3, #2
 8004800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	220f      	movs	r2, #15
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a50      	ldr	r2, [pc, #320]	; (8004960 <HAL_GPIO_Init+0x5b4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02b      	beq.n	800487c <HAL_GPIO_Init+0x4d0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a4f      	ldr	r2, [pc, #316]	; (8004964 <HAL_GPIO_Init+0x5b8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d025      	beq.n	8004878 <HAL_GPIO_Init+0x4cc>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a4e      	ldr	r2, [pc, #312]	; (8004968 <HAL_GPIO_Init+0x5bc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01f      	beq.n	8004874 <HAL_GPIO_Init+0x4c8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a4d      	ldr	r2, [pc, #308]	; (800496c <HAL_GPIO_Init+0x5c0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d019      	beq.n	8004870 <HAL_GPIO_Init+0x4c4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a4c      	ldr	r2, [pc, #304]	; (8004970 <HAL_GPIO_Init+0x5c4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_GPIO_Init+0x4c0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a4b      	ldr	r2, [pc, #300]	; (8004974 <HAL_GPIO_Init+0x5c8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00d      	beq.n	8004868 <HAL_GPIO_Init+0x4bc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a4a      	ldr	r2, [pc, #296]	; (8004978 <HAL_GPIO_Init+0x5cc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <HAL_GPIO_Init+0x4b8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a49      	ldr	r2, [pc, #292]	; (800497c <HAL_GPIO_Init+0x5d0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_GPIO_Init+0x4b4>
 800485c:	2307      	movs	r3, #7
 800485e:	e00e      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004860:	2308      	movs	r3, #8
 8004862:	e00c      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004864:	2306      	movs	r3, #6
 8004866:	e00a      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004868:	2305      	movs	r3, #5
 800486a:	e008      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 800486c:	2304      	movs	r3, #4
 800486e:	e006      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004870:	2303      	movs	r3, #3
 8004872:	e004      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004874:	2302      	movs	r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_Init+0x4d2>
 800487c:	2300      	movs	r3, #0
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800488e:	4933      	ldr	r1, [pc, #204]	; (800495c <HAL_GPIO_Init+0x5b0>)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	3302      	adds	r3, #2
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800489c:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x514>
        {
          temp |= iocurrent;
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c0:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x53e>
        {
          temp |= iocurrent;
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f0:	4b23      	ldr	r3, [pc, #140]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x568>
        {
          temp |= iocurrent;
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x592>
        {
          temp |= iocurrent;
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_GPIO_Init+0x5d4>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	3301      	adds	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b0f      	cmp	r3, #15
 800494e:	f67f addd 	bls.w	800450c <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 8004952:	bf00      	nop
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40013800 	.word	0x40013800
 8004960:	40020000 	.word	0x40020000
 8004964:	40020400 	.word	0x40020400
 8004968:	40020800 	.word	0x40020800
 800496c:	40020c00 	.word	0x40020c00
 8004970:	40021000 	.word	0x40021000
 8004974:	40021400 	.word	0x40021400
 8004978:	40021800 	.word	0x40021800
 800497c:	40021c00 	.word	0x40021c00
 8004980:	40013c00 	.word	0x40013c00

08004984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <HAL_GPIO_WritePin+0x20>
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_GPIO_WritePin+0x2a>
 80049a4:	f240 119f 	movw	r1, #415	; 0x19f
 80049a8:	480e      	ldr	r0, [pc, #56]	; (80049e4 <HAL_GPIO_WritePin+0x60>)
 80049aa:	f7fd fd78 	bl	800249e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80049ae:	787b      	ldrb	r3, [r7, #1]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_GPIO_WritePin+0x40>
 80049b4:	787b      	ldrb	r3, [r7, #1]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d004      	beq.n	80049c4 <HAL_GPIO_WritePin+0x40>
 80049ba:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80049be:	4809      	ldr	r0, [pc, #36]	; (80049e4 <HAL_GPIO_WritePin+0x60>)
 80049c0:	f7fd fd6d 	bl	800249e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049d0:	e003      	b.n	80049da <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	080139bc 	.word	0x080139bc

080049e8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_GPIO_TogglePin+0x1c>
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <HAL_GPIO_TogglePin+0x26>
 8004a04:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004a08:	480a      	ldr	r0, [pc, #40]	; (8004a34 <HAL_GPIO_TogglePin+0x4c>)
 8004a0a:	f7fd fd48 	bl	800249e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	401a      	ands	r2, r3
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	041a      	lsls	r2, r3, #16
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	080139bc 	.word	0x080139bc

08004a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d006      	beq.n	8004a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd fc24 	bl	80022a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6a:	b08f      	sub	sp, #60	; 0x3c
 8004a6c:	af0a      	add	r7, sp, #40	; 0x28
 8004a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e062      	b.n	8004b40 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a82:	d008      	beq.n	8004a96 <HAL_HCD_Init+0x2e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <HAL_HCD_Init+0xe0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <HAL_HCD_Init+0x2e>
 8004a8e:	217a      	movs	r1, #122	; 0x7a
 8004a90:	482e      	ldr	r0, [pc, #184]	; (8004b4c <HAL_HCD_Init+0xe4>)
 8004a92:	f7fd fd04 	bl	800249e <assert_failed>

  USBx = hhcd->Instance;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_HCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f00c f98d 	bl	8010dd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_HCD_Init+0x68>
  {
    hhcd->Init.dma_enable = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f004 fe9f 	bl	8009818 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	687e      	ldr	r6, [r7, #4]
 8004ae2:	466d      	mov	r5, sp
 8004ae4:	f106 0410 	add.w	r4, r6, #16
 8004ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004af8:	1d33      	adds	r3, r6, #4
 8004afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004afc:	6838      	ldr	r0, [r7, #0]
 8004afe:	f004 fe19 	bl	8009734 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f004 fe96 	bl	800983a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	687e      	ldr	r6, [r7, #4]
 8004b16:	466d      	mov	r5, sp
 8004b18:	f106 0410 	add.w	r4, r6, #16
 8004b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b2c:	1d33      	adds	r3, r6, #4
 8004b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f004 ffa9 	bl	8009a88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b48:	40040000 	.word	0x40040000
 8004b4c:	080139f8 	.word	0x080139f8

08004b50 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af04      	add	r7, sp, #16
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	70fb      	strb	r3, [r7, #3]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70bb      	strb	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_HCD_HC_Init+0x28>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e07f      	b.n	8004c78 <HAL_HCD_HC_Init+0x128>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	333d      	adds	r3, #61	; 0x3d
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	440b      	add	r3, r1
 8004ba2:	3338      	adds	r3, #56	; 0x38
 8004ba4:	787a      	ldrb	r2, [r7, #1]
 8004ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3340      	adds	r3, #64	; 0x40
 8004bb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	3339      	adds	r3, #57	; 0x39
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	333f      	adds	r3, #63	; 0x3f
 8004be0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004be4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	78bb      	ldrb	r3, [r7, #2]
 8004bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bee:	b2d8      	uxtb	r0, r3
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	333a      	adds	r3, #58	; 0x3a
 8004bfe:	4602      	mov	r2, r0
 8004c00:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004c02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da0a      	bge.n	8004c20 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	440b      	add	r3, r1
 8004c18:	333b      	adds	r3, #59	; 0x3b
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e009      	b.n	8004c34 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	440b      	add	r3, r1
 8004c2e:	333b      	adds	r3, #59	; 0x3b
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	333c      	adds	r3, #60	; 0x3c
 8004c44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c48:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	787c      	ldrb	r4, [r7, #1]
 8004c50:	78ba      	ldrb	r2, [r7, #2]
 8004c52:	78f9      	ldrb	r1, [r7, #3]
 8004c54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4623      	mov	r3, r4
 8004c66:	f005 f891 	bl	8009d8c <USB_HC_Init>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd90      	pop	{r4, r7, pc}

08004c80 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_HCD_HC_Halt+0x1e>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e00f      	b.n	8004cbe <HAL_HCD_HC_Halt+0x3e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f005 facd 	bl	800a24e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	70fb      	strb	r3, [r7, #3]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70bb      	strb	r3, [r7, #2]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	333b      	adds	r3, #59	; 0x3b
 8004cf2:	78ba      	ldrb	r2, [r7, #2]
 8004cf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	333f      	adds	r3, #63	; 0x3f
 8004d06:	787a      	ldrb	r2, [r7, #1]
 8004d08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d0a:	7c3b      	ldrb	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d114      	bne.n	8004d3a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3342      	adds	r3, #66	; 0x42
 8004d20:	2203      	movs	r2, #3
 8004d22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	333d      	adds	r3, #61	; 0x3d
 8004d34:	7f3a      	ldrb	r2, [r7, #28]
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e009      	b.n	8004d4e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	440b      	add	r3, r1
 8004d48:	3342      	adds	r3, #66	; 0x42
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d4e:	787b      	ldrb	r3, [r7, #1]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	f200 80d6 	bhi.w	8004f02 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d6d 	.word	0x08004d6d
 8004d60:	08004eed 	.word	0x08004eed
 8004d64:	08004dd9 	.word	0x08004dd9
 8004d68:	08004e63 	.word	0x08004e63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d6c:	7c3b      	ldrb	r3, [r7, #16]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	f040 80c9 	bne.w	8004f06 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 80c5 	bne.w	8004f06 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004d7c:	8b3b      	ldrh	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	440b      	add	r3, r1
 8004d90:	3351      	adds	r3, #81	; 0x51
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	440b      	add	r3, r1
 8004da4:	3351      	adds	r3, #81	; 0x51
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	440b      	add	r3, r1
 8004dba:	3342      	adds	r3, #66	; 0x42
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004dc0:	e0a1      	b.n	8004f06 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	3342      	adds	r3, #66	; 0x42
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e096      	b.n	8004f06 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004dd8:	78bb      	ldrb	r3, [r7, #2]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d120      	bne.n	8004e20 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	3351      	adds	r3, #81	; 0x51
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	440b      	add	r3, r1
 8004e02:	3342      	adds	r3, #66	; 0x42
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004e08:	e07e      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	440b      	add	r3, r1
 8004e18:	3342      	adds	r3, #66	; 0x42
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e073      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3350      	adds	r3, #80	; 0x50
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	3342      	adds	r3, #66	; 0x42
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
      break;
 8004e4a:	e05d      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	440b      	add	r3, r1
 8004e5a:	3342      	adds	r3, #66	; 0x42
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	701a      	strb	r2, [r3, #0]
      break;
 8004e60:	e052      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e62:	78bb      	ldrb	r3, [r7, #2]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d120      	bne.n	8004eaa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	440b      	add	r3, r1
 8004e76:	3351      	adds	r3, #81	; 0x51
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3342      	adds	r3, #66	; 0x42
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e92:	e039      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3342      	adds	r3, #66	; 0x42
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	701a      	strb	r2, [r3, #0]
      break;
 8004ea8:	e02e      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3350      	adds	r3, #80	; 0x50
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3342      	adds	r3, #66	; 0x42
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
      break;
 8004ed4:	e018      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3342      	adds	r3, #66	; 0x42
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	701a      	strb	r2, [r3, #0]
      break;
 8004eea:	e00d      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	3342      	adds	r3, #66	; 0x42
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004f06:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	440b      	add	r3, r1
 8004f16:	3344      	adds	r3, #68	; 0x44
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	8b39      	ldrh	r1, [r7, #24]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4403      	add	r3, r0
 8004f2c:	3348      	adds	r3, #72	; 0x48
 8004f2e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	335c      	adds	r3, #92	; 0x5c
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	334c      	adds	r3, #76	; 0x4c
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	3339      	adds	r3, #57	; 0x39
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	335d      	adds	r3, #93	; 0x5d
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	3338      	adds	r3, #56	; 0x38
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	18d1      	adds	r1, r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f005 f800 	bl	8009fa0 <USB_HC_StartXfer>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop

08004fac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f004 fd1d 	bl	8009a02 <USB_GetMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	f040 80ef 	bne.w	80051ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f004 fd01 	bl	80099dc <USB_ReadInterrupts>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80e5 	beq.w	80051ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f004 fcf8 	bl	80099dc <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff6:	d104      	bne.n	8005002 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005000:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f004 fce8 	bl	80099dc <USB_ReadInterrupts>
 800500c:	4603      	mov	r3, r0
 800500e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d104      	bne.n	8005022 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005020:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f004 fcd8 	bl	80099dc <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005036:	d104      	bne.n	8005042 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005040:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fcc8 	bl	80099dc <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d103      	bne.n	800505e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2202      	movs	r2, #2
 800505c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f004 fcba 	bl	80099dc <USB_ReadInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800506e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005072:	d115      	bne.n	80050a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800507c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f00b ff1c 	bl	8010ecc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f004 fdb0 	bl	8009c00 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f004 fc99 	bl	80099dc <USB_ReadInterrupts>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b4:	d102      	bne.n	80050bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 f966 	bl	8006388 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f004 fc8b 	bl	80099dc <USB_ReadInterrupts>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d106      	bne.n	80050de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f00b fedf 	bl	8010e94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f004 fc7a 	bl	80099dc <USB_ReadInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f2:	d138      	bne.n	8005166 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f005 f897 	bl	800a22c <USB_HC_ReadInterrupt>
 80050fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e025      	b.n	8005152 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	d106      	bne.n	8005140 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f8cf 	bl	80052dc <HCD_HC_IN_IRQHandler>
 800513e:	e005      	b.n	800514c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fcfd 	bl	8005b46 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3d4      	bcc.n	8005106 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f004 fc36 	bl	80099dc <USB_ReadInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b10      	cmp	r3, #16
 8005178:	d101      	bne.n	800517e <HAL_HCD_IRQHandler+0x1d2>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_HCD_IRQHandler+0x1d4>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d014      	beq.n	80051ae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0210 	bic.w	r2, r2, #16
 8005192:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 f84b 	bl	8006230 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0210 	orr.w	r2, r2, #16
 80051a8:	619a      	str	r2, [r3, #24]
 80051aa:	e000      	b.n	80051ae <HAL_HCD_IRQHandler+0x202>
      return;
 80051ac:	bf00      	nop
    }
  }
}
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_HCD_Start+0x16>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e013      	b.n	80051f2 <HAL_HCD_Start+0x3e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 fb0d 	bl	80097f6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2101      	movs	r1, #1
 80051e2:	4618      	mov	r0, r3
 80051e4:	f004 fd70 	bl	8009cc8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_HCD_Stop+0x16>
 800520c:	2302      	movs	r3, #2
 800520e:	e00d      	b.n	800522c <HAL_HCD_Stop+0x32>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f005 f951 	bl	800a4c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f004 fd17 	bl	8009c74 <USB_ResetPort>
 8005246:	4603      	mov	r3, r0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	335c      	adds	r3, #92	; 0x5c
 800526c:	781b      	ldrb	r3, [r3, #0]
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	334c      	adds	r3, #76	; 0x4c
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 fd59 	bl	8009d68 <USB_GetCurrentFrame>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fd34 	bl	8009d3a <USB_GetHostSpeed>
 80052d2:	4603      	mov	r3, r0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b04      	cmp	r3, #4
 800530a:	d119      	bne.n	8005340 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	461a      	mov	r2, r3
 800531a:	2304      	movs	r3, #4
 800531c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	440a      	add	r2, r1
 8005334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005338:	f043 0302 	orr.w	r3, r3, #2
 800533c:	60d3      	str	r3, [r2, #12]
 800533e:	e0ce      	b.n	80054de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d12c      	bne.n	80053b2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800536a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	335d      	adds	r3, #93	; 0x5d
 800537c:	2207      	movs	r2, #7
 800537e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	440a      	add	r2, r1
 8005396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 ff4f 	bl	800a24e <USB_HC_Halt>
 80053b0:	e095      	b.n	80054de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d109      	bne.n	80053dc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	461a      	mov	r2, r3
 80053d6:	2320      	movs	r3, #32
 80053d8:	6093      	str	r3, [r2, #8]
 80053da:	e080      	b.n	80054de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d134      	bne.n	800545c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	335d      	adds	r3, #93	; 0x5d
 8005422:	2205      	movs	r2, #5
 8005424:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	2310      	movs	r3, #16
 8005436:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	461a      	mov	r2, r3
 8005446:	2308      	movs	r3, #8
 8005448:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fefa 	bl	800a24e <USB_HC_Halt>
 800545a:	e040      	b.n	80054de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d134      	bne.n	80054de <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	440a      	add	r2, r1
 800548a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548e:	f043 0302 	orr.w	r3, r3, #2
 8005492:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	4611      	mov	r1, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fed5 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	2310      	movs	r3, #16
 80054b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	440b      	add	r3, r1
 80054c4:	335d      	adds	r3, #93	; 0x5d
 80054c6:	2208      	movs	r2, #8
 80054c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	461a      	mov	r2, r3
 80054d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054dc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f4:	d122      	bne.n	800553c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f004 fe94 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	461a      	mov	r2, r3
 8005534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005538:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800553a:	e300      	b.n	8005b3e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	f040 80fd 	bne.w	800574e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	440b      	add	r3, r1
 800556a:	3348      	adds	r3, #72	; 0x48
 800556c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	0159      	lsls	r1, r3, #5
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	440b      	add	r3, r1
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005580:	1ad1      	subs	r1, r2, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4403      	add	r3, r0
 8005590:	334c      	adds	r3, #76	; 0x4c
 8005592:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	440b      	add	r3, r1
 80055a2:	335d      	adds	r3, #93	; 0x5d
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	440b      	add	r3, r1
 80055b6:	3358      	adds	r3, #88	; 0x58
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	461a      	mov	r2, r3
 80055ca:	2301      	movs	r3, #1
 80055cc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	440b      	add	r3, r1
 80055dc:	333f      	adds	r3, #63	; 0x3f
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	440b      	add	r3, r1
 80055f2:	333f      	adds	r3, #63	; 0x3f
 80055f4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d121      	bne.n	800563e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	440a      	add	r2, r1
 8005610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f004 fe12 	bl	800a24e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	461a      	mov	r2, r3
 8005638:	2310      	movs	r3, #16
 800563a:	6093      	str	r3, [r2, #8]
 800563c:	e070      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	440b      	add	r3, r1
 800564c:	333f      	adds	r3, #63	; 0x3f
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d12a      	bne.n	80056aa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	440a      	add	r2, r1
 800566a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005672:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	440b      	add	r3, r1
 8005682:	335c      	adds	r3, #92	; 0x5c
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	b2d8      	uxtb	r0, r3
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	440b      	add	r3, r1
 800569a:	335c      	adds	r3, #92	; 0x5c
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	4601      	mov	r1, r0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f00b fc20 	bl	8010ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056a8:	e03a      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	333f      	adds	r3, #63	; 0x3f
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d12f      	bne.n	8005720 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	335c      	adds	r3, #92	; 0x5c
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	440b      	add	r3, r1
 80056e2:	3350      	adds	r3, #80	; 0x50
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f083 0301 	eor.w	r3, r3, #1
 80056ea:	b2d8      	uxtb	r0, r3
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	3350      	adds	r3, #80	; 0x50
 80056fc:	4602      	mov	r2, r0
 80056fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	b2d8      	uxtb	r0, r3
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	335c      	adds	r3, #92	; 0x5c
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	4601      	mov	r1, r0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f00b fbe4 	bl	8010ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3350      	adds	r3, #80	; 0x50
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2d8      	uxtb	r0, r3
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3350      	adds	r3, #80	; 0x50
 8005748:	4602      	mov	r2, r0
 800574a:	701a      	strb	r2, [r3, #0]
}
 800574c:	e1f7      	b.n	8005b3e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 811a 	bne.w	800599a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005780:	f023 0302 	bic.w	r3, r3, #2
 8005784:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	335d      	adds	r3, #93	; 0x5d
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d10a      	bne.n	80057b2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335c      	adds	r3, #92	; 0x5c
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e0d9      	b.n	8005966 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	335d      	adds	r3, #93	; 0x5d
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	d10a      	bne.n	80057de <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	440b      	add	r3, r1
 80057d6:	335c      	adds	r3, #92	; 0x5c
 80057d8:	2205      	movs	r2, #5
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e0c3      	b.n	8005966 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	335d      	adds	r3, #93	; 0x5d
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d00a      	beq.n	800580a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	335d      	adds	r3, #93	; 0x5d
 8005804:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005806:	2b08      	cmp	r3, #8
 8005808:	d156      	bne.n	80058b8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	3358      	adds	r3, #88	; 0x58
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4403      	add	r3, r0
 800582c:	3358      	adds	r3, #88	; 0x58
 800582e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	440b      	add	r3, r1
 800583e:	3358      	adds	r3, #88	; 0x58
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d914      	bls.n	8005870 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	3358      	adds	r3, #88	; 0x58
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	335c      	adds	r3, #92	; 0x5c
 800586a:	2204      	movs	r2, #4
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e009      	b.n	8005884 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	335c      	adds	r3, #92	; 0x5c
 8005880:	2202      	movs	r2, #2
 8005882:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800589a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e056      	b.n	8005966 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	440b      	add	r3, r1
 80058c6:	335d      	adds	r3, #93	; 0x5d
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d123      	bne.n	8005916 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	335c      	adds	r3, #92	; 0x5c
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005900:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	461a      	mov	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	e027      	b.n	8005966 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	440b      	add	r3, r1
 8005924:	335d      	adds	r3, #93	; 0x5d
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b07      	cmp	r3, #7
 800592a:	d11c      	bne.n	8005966 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	3358      	adds	r3, #88	; 0x58
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	1c59      	adds	r1, r3, #1
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4403      	add	r3, r0
 800594e:	3358      	adds	r3, #88	; 0x58
 8005950:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	440b      	add	r3, r1
 8005960:	335c      	adds	r3, #92	; 0x5c
 8005962:	2204      	movs	r2, #4
 8005964:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	461a      	mov	r2, r3
 8005974:	2302      	movs	r3, #2
 8005976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	b2d8      	uxtb	r0, r3
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	440b      	add	r3, r1
 800598a:	335c      	adds	r3, #92	; 0x5c
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	4601      	mov	r1, r0
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f00b faa8 	bl	8010ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005998:	e0d1      	b.n	8005b3e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d13e      	bne.n	8005a2e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	440b      	add	r3, r1
 80059de:	3358      	adds	r3, #88	; 0x58
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1c59      	adds	r1, r3, #1
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	4403      	add	r3, r0
 80059f2:	3358      	adds	r3, #88	; 0x58
 80059f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	335d      	adds	r3, #93	; 0x5d
 8005a06:	2206      	movs	r2, #6
 8005a08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f004 fc1a 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a26:	461a      	mov	r2, r3
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	6093      	str	r3, [r2, #8]
}
 8005a2c:	e087      	b.n	8005b3e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d17c      	bne.n	8005b3e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	440b      	add	r3, r1
 8005a52:	333f      	adds	r3, #63	; 0x3f
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d122      	bne.n	8005aa0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	3358      	adds	r3, #88	; 0x58
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f004 fbd8 	bl	800a24e <USB_HC_Halt>
 8005a9e:	e045      	b.n	8005b2c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	333f      	adds	r3, #63	; 0x3f
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	333f      	adds	r3, #63	; 0x3f
 8005ac6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d12f      	bne.n	8005b2c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	3358      	adds	r3, #88	; 0x58
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d121      	bne.n	8005b2c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	335d      	adds	r3, #93	; 0x5d
 8005af8:	2203      	movs	r2, #3
 8005afa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f004 fb91 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	6093      	str	r3, [r2, #8]
}
 8005b3e:	bf00      	nop
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d119      	bne.n	8005baa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	461a      	mov	r2, r3
 8005b84:	2304      	movs	r3, #4
 8005b86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005ba8:	e33e      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d141      	bne.n	8005c44 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2320      	movs	r3, #32
 8005bd0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	440b      	add	r3, r1
 8005be0:	333d      	adds	r3, #61	; 0x3d
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 831f 	bne.w	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	333d      	adds	r3, #61	; 0x3d
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	440b      	add	r3, r1
 8005c0c:	335c      	adds	r3, #92	; 0x5c
 8005c0e:	2202      	movs	r2, #2
 8005c10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f004 fb06 	bl	800a24e <USB_HC_Halt>
}
 8005c42:	e2f1      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d13f      	bne.n	8005cda <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	440b      	add	r3, r1
 8005c68:	335d      	adds	r3, #93	; 0x5d
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	440b      	add	r3, r1
 8005c7c:	333d      	adds	r3, #61	; 0x3d
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	440b      	add	r3, r1
 8005c90:	3358      	adds	r3, #88	; 0x58
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb0:	f043 0302 	orr.w	r3, r3, #2
 8005cb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f004 fac4 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	6093      	str	r3, [r2, #8]
}
 8005cd8:	e2a6      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d122      	bne.n	8005d38 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f004 fa96 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d34:	6093      	str	r3, [r2, #8]
}
 8005d36:	e277      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d135      	bne.n	8005dba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3358      	adds	r3, #88	; 0x58
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fa5e 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2301      	movs	r3, #1
 8005da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	335d      	adds	r3, #93	; 0x5d
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
}
 8005db8:	e236      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d12b      	bne.n	8005e28 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2308      	movs	r3, #8
 8005de0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f004 fa1e 	bl	800a24e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	440b      	add	r3, r1
 8005e20:	335d      	adds	r3, #93	; 0x5d
 8005e22:	2205      	movs	r2, #5
 8005e24:	701a      	strb	r2, [r3, #0]
}
 8005e26:	e1ff      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d155      	bne.n	8005eea <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3358      	adds	r3, #88	; 0x58
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	335d      	adds	r3, #93	; 0x5d
 8005e62:	2203      	movs	r2, #3
 8005e64:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	440b      	add	r3, r1
 8005e74:	333d      	adds	r3, #61	; 0x3d
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d114      	bne.n	8005ea6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	333c      	adds	r3, #60	; 0x3c
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	333d      	adds	r3, #61	; 0x3d
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f004 f9bc 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	6093      	str	r3, [r2, #8]
}
 8005ee8:	e19e      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d12b      	bne.n	8005f58 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f004 f98f 	bl	800a24e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	440b      	add	r3, r1
 8005f3e:	335d      	adds	r3, #93	; 0x5d
 8005f40:	2206      	movs	r2, #6
 8005f42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	461a      	mov	r2, r3
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	6093      	str	r3, [r2, #8]
}
 8005f56:	e167      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d135      	bne.n	8005fdc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8a:	f043 0302 	orr.w	r3, r3, #2
 8005f8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f004 f957 	bl	800a24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	461a      	mov	r2, r3
 8005fae:	2310      	movs	r3, #16
 8005fb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	440b      	add	r3, r1
 8005fd4:	335d      	adds	r3, #93	; 0x5d
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	701a      	strb	r2, [r3, #0]
}
 8005fda:	e125      	b.n	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	f040 811a 	bne.w	8006228 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	440a      	add	r2, r1
 800600a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600e:	f023 0302 	bic.w	r3, r3, #2
 8006012:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	335d      	adds	r3, #93	; 0x5d
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d137      	bne.n	800609a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	335c      	adds	r3, #92	; 0x5c
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	333f      	adds	r3, #63	; 0x3f
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d00b      	beq.n	800606c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	333f      	adds	r3, #63	; 0x3f
 8006064:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006066:	2b03      	cmp	r3, #3
 8006068:	f040 80c5 	bne.w	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	440b      	add	r3, r1
 800607a:	3351      	adds	r3, #81	; 0x51
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f083 0301 	eor.w	r3, r3, #1
 8006082:	b2d8      	uxtb	r0, r3
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	440b      	add	r3, r1
 8006092:	3351      	adds	r3, #81	; 0x51
 8006094:	4602      	mov	r2, r0
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e0ad      	b.n	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	440b      	add	r3, r1
 80060a8:	335d      	adds	r3, #93	; 0x5d
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d10a      	bne.n	80060c6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	335c      	adds	r3, #92	; 0x5c
 80060c0:	2202      	movs	r2, #2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e097      	b.n	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	335d      	adds	r3, #93	; 0x5d
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d10a      	bne.n	80060f2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	335c      	adds	r3, #92	; 0x5c
 80060ec:	2202      	movs	r2, #2
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e081      	b.n	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	335d      	adds	r3, #93	; 0x5d
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b05      	cmp	r3, #5
 8006106:	d10a      	bne.n	800611e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	335c      	adds	r3, #92	; 0x5c
 8006118:	2205      	movs	r2, #5
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e06b      	b.n	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	440b      	add	r3, r1
 800612c:	335d      	adds	r3, #93	; 0x5d
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d00a      	beq.n	800614a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	335d      	adds	r3, #93	; 0x5d
 8006144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006146:	2b08      	cmp	r3, #8
 8006148:	d155      	bne.n	80061f6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	3358      	adds	r3, #88	; 0x58
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	1c59      	adds	r1, r3, #1
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4403      	add	r3, r0
 800616c:	3358      	adds	r3, #88	; 0x58
 800616e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	440b      	add	r3, r1
 800617e:	3358      	adds	r3, #88	; 0x58
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d914      	bls.n	80061b0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	440b      	add	r3, r1
 8006194:	3358      	adds	r3, #88	; 0x58
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	335c      	adds	r3, #92	; 0x5c
 80061aa:	2204      	movs	r2, #4
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e009      	b.n	80061c4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	335c      	adds	r3, #92	; 0x5c
 80061c0:	2202      	movs	r2, #2
 80061c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	461a      	mov	r2, r3
 8006204:	2302      	movs	r3, #2
 8006206:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	b2d8      	uxtb	r0, r3
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	440b      	add	r3, r1
 800621a:	335c      	adds	r3, #92	; 0x5c
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	4601      	mov	r1, r0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f00a fe60 	bl	8010ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	0c5b      	lsrs	r3, r3, #17
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	091b      	lsrs	r3, r3, #4
 8006260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006264:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d003      	beq.n	8006274 <HCD_RXQLVL_IRQHandler+0x44>
 800626c:	2b05      	cmp	r3, #5
 800626e:	f000 8082 	beq.w	8006376 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006272:	e083      	b.n	800637c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d07f      	beq.n	800637a <HCD_RXQLVL_IRQHandler+0x14a>
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	3344      	adds	r3, #68	; 0x44
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d074      	beq.n	800637a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	3344      	adds	r3, #68	; 0x44
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	b292      	uxth	r2, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f003 fb6d 	bl	800998a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	440b      	add	r3, r1
 80062be:	3344      	adds	r3, #68	; 0x44
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	18d1      	adds	r1, r2, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4403      	add	r3, r0
 80062d4:	3344      	adds	r3, #68	; 0x44
 80062d6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	440b      	add	r3, r1
 80062e6:	334c      	adds	r3, #76	; 0x4c
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4403      	add	r3, r0
 80062fc:	334c      	adds	r3, #76	; 0x4c
 80062fe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <HCD_RXQLVL_IRQHandler+0x154>)
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d031      	beq.n	800637a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800632c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006334:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	440b      	add	r3, r1
 8006356:	3350      	adds	r3, #80	; 0x50
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2d8      	uxtb	r0, r3
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	440b      	add	r3, r1
 800636e:	3350      	adds	r3, #80	; 0x50
 8006370:	4602      	mov	r2, r0
 8006372:	701a      	strb	r2, [r3, #0]
      break;
 8006374:	e001      	b.n	800637a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800637a:	bf00      	nop
  }
}
 800637c:	bf00      	nop
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	1ff80000 	.word	0x1ff80000

08006388 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d10b      	bne.n	80063d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d102      	bne.n	80063d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f00a fd70 	bl	8010eb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d132      	bne.n	8006448 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f043 0308 	orr.w	r3, r3, #8
 80063e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d126      	bne.n	8006442 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d113      	bne.n	8006424 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006406:	d106      	bne.n	8006416 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2102      	movs	r1, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fbf6 	bl	8009c00 <USB_InitFSLSPClkSel>
 8006414:	e011      	b.n	800643a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2101      	movs	r1, #1
 800641c:	4618      	mov	r0, r3
 800641e:	f003 fbef 	bl	8009c00 <USB_InitFSLSPClkSel>
 8006422:	e00a      	b.n	800643a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d106      	bne.n	800643a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006432:	461a      	mov	r2, r3
 8006434:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006438:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f00a fd62 	bl	8010f04 <HAL_HCD_PortEnabled_Callback>
 8006440:	e002      	b.n	8006448 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f00a fd6c 	bl	8010f20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b20      	cmp	r3, #32
 8006450:	d103      	bne.n	800645a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f043 0320 	orr.w	r3, r3, #32
 8006458:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006460:	461a      	mov	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6013      	str	r3, [r2, #0]
}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e1b1      	b.n	80067e6 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4aa2      	ldr	r2, [pc, #648]	; (8006710 <HAL_I2C_Init+0x2a0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_I2C_Init+0x3a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4aa0      	ldr	r2, [pc, #640]	; (8006714 <HAL_I2C_Init+0x2a4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_I2C_Init+0x3a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a9f      	ldr	r2, [pc, #636]	; (8006718 <HAL_I2C_Init+0x2a8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_I2C_Init+0x3a>
 80064a0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80064a4:	489d      	ldr	r0, [pc, #628]	; (800671c <HAL_I2C_Init+0x2ac>)
 80064a6:	f7fb fffa 	bl	800249e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <HAL_I2C_Init+0x4c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4a9a      	ldr	r2, [pc, #616]	; (8006720 <HAL_I2C_Init+0x2b0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d904      	bls.n	80064c6 <HAL_I2C_Init+0x56>
 80064bc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80064c0:	4896      	ldr	r0, [pc, #600]	; (800671c <HAL_I2C_Init+0x2ac>)
 80064c2:	f7fb ffec 	bl	800249e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <HAL_I2C_Init+0x72>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d6:	d004      	beq.n	80064e2 <HAL_I2C_Init+0x72>
 80064d8:	f240 11c1 	movw	r1, #449	; 0x1c1
 80064dc:	488f      	ldr	r0, [pc, #572]	; (800671c <HAL_I2C_Init+0x2ac>)
 80064de:	f7fb ffde 	bl	800249e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <HAL_I2C_Init+0x8c>
 80064f2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80064f6:	4889      	ldr	r0, [pc, #548]	; (800671c <HAL_I2C_Init+0x2ac>)
 80064f8:	f7fb ffd1 	bl	800249e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006504:	d009      	beq.n	800651a <HAL_I2C_Init+0xaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800650e:	d004      	beq.n	800651a <HAL_I2C_Init+0xaa>
 8006510:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006514:	4881      	ldr	r0, [pc, #516]	; (800671c <HAL_I2C_Init+0x2ac>)
 8006516:	f7fb ffc2 	bl	800249e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_I2C_Init+0xc4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d004      	beq.n	8006534 <HAL_I2C_Init+0xc4>
 800652a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800652e:	487b      	ldr	r0, [pc, #492]	; (800671c <HAL_I2C_Init+0x2ac>)
 8006530:	f7fb ffb5 	bl	800249e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <HAL_I2C_Init+0xda>
 8006540:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006544:	4875      	ldr	r0, [pc, #468]	; (800671c <HAL_I2C_Init+0x2ac>)
 8006546:	f7fb ffaa 	bl	800249e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_I2C_Init+0xf4>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d004      	beq.n	8006564 <HAL_I2C_Init+0xf4>
 800655a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800655e:	486f      	ldr	r0, [pc, #444]	; (800671c <HAL_I2C_Init+0x2ac>)
 8006560:	f7fb ff9d 	bl	800249e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_I2C_Init+0x10e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d004      	beq.n	800657e <HAL_I2C_Init+0x10e>
 8006574:	f240 11c7 	movw	r1, #455	; 0x1c7
 8006578:	4868      	ldr	r0, [pc, #416]	; (800671c <HAL_I2C_Init+0x2ac>)
 800657a:	f7fb ff90 	bl	800249e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fa ff56 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	; 0x24
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065d0:	f000 fea0 	bl	8007314 <HAL_RCC_GetPCLK1Freq>
 80065d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4a52      	ldr	r2, [pc, #328]	; (8006724 <HAL_I2C_Init+0x2b4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d807      	bhi.n	80065f0 <HAL_I2C_Init+0x180>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a51      	ldr	r2, [pc, #324]	; (8006728 <HAL_I2C_Init+0x2b8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bf94      	ite	ls
 80065e8:	2301      	movls	r3, #1
 80065ea:	2300      	movhi	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e006      	b.n	80065fe <HAL_I2C_Init+0x18e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a4e      	ldr	r2, [pc, #312]	; (800672c <HAL_I2C_Init+0x2bc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bf94      	ite	ls
 80065f8:	2301      	movls	r3, #1
 80065fa:	2300      	movhi	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e0ef      	b.n	80067e6 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_I2C_Init+0x2c0>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	0c9b      	lsrs	r3, r3, #18
 8006610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4a3b      	ldr	r2, [pc, #236]	; (8006724 <HAL_I2C_Init+0x2b4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d802      	bhi.n	8006640 <HAL_I2C_Init+0x1d0>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	3301      	adds	r3, #1
 800663e:	e009      	b.n	8006654 <HAL_I2C_Init+0x1e4>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <HAL_I2C_Init+0x2c4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	3301      	adds	r3, #1
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	430b      	orrs	r3, r1
 800665a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	492d      	ldr	r1, [pc, #180]	; (8006724 <HAL_I2C_Init+0x2b4>)
 8006670:	428b      	cmp	r3, r1
 8006672:	d80d      	bhi.n	8006690 <HAL_I2C_Init+0x220>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1e59      	subs	r1, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006682:	3301      	adds	r3, #1
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	2b04      	cmp	r3, #4
 800668a:	bf38      	it	cc
 800668c:	2304      	movcc	r3, #4
 800668e:	e063      	b.n	8006758 <HAL_I2C_Init+0x2e8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d111      	bne.n	80066bc <HAL_I2C_Init+0x24c>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1e58      	subs	r0, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6859      	ldr	r1, [r3, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	440b      	add	r3, r1
 80066a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066aa:	3301      	adds	r3, #1
 80066ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	e012      	b.n	80066e2 <HAL_I2C_Init+0x272>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1e58      	subs	r0, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	0099      	lsls	r1, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_I2C_Init+0x27a>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e036      	b.n	8006758 <HAL_I2C_Init+0x2e8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d122      	bne.n	8006738 <HAL_I2C_Init+0x2c8>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1e58      	subs	r0, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	440b      	add	r3, r1
 8006700:	fbb0 f3f3 	udiv	r3, r0, r3
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	e023      	b.n	8006758 <HAL_I2C_Init+0x2e8>
 8006710:	40005400 	.word	0x40005400
 8006714:	40005800 	.word	0x40005800
 8006718:	40005c00 	.word	0x40005c00
 800671c:	08013a30 	.word	0x08013a30
 8006720:	00061a80 	.word	0x00061a80
 8006724:	000186a0 	.word	0x000186a0
 8006728:	001e847f 	.word	0x001e847f
 800672c:	003d08ff 	.word	0x003d08ff
 8006730:	431bde83 	.word	0x431bde83
 8006734:	10624dd3 	.word	0x10624dd3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1e58      	subs	r0, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6859      	ldr	r1, [r3, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	0099      	lsls	r1, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	fbb0 f3f3 	udiv	r3, r0, r3
 800674e:	3301      	adds	r3, #1
 8006750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	6809      	ldr	r1, [r1, #0]
 800675c:	4313      	orrs	r3, r2
 800675e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69da      	ldr	r2, [r3, #28]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6911      	ldr	r1, [r2, #16]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68d2      	ldr	r2, [r2, #12]
 8006792:	4311      	orrs	r1, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	430b      	orrs	r3, r1
 800679a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop

080067f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e30d      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d903      	bls.n	8006812 <HAL_RCC_OscConfig+0x22>
 800680a:	21e8      	movs	r1, #232	; 0xe8
 800680c:	48a3      	ldr	r0, [pc, #652]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800680e:	f7fb fe46 	bl	800249e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8088 	beq.w	8006930 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00d      	beq.n	8006844 <HAL_RCC_OscConfig+0x54>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d008      	beq.n	8006844 <HAL_RCC_OscConfig+0x54>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800683a:	d003      	beq.n	8006844 <HAL_RCC_OscConfig+0x54>
 800683c:	21ed      	movs	r1, #237	; 0xed
 800683e:	4897      	ldr	r0, [pc, #604]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006840:	f7fb fe2d 	bl	800249e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006844:	4b96      	ldr	r3, [pc, #600]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b04      	cmp	r3, #4
 800684e:	d00c      	beq.n	800686a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006850:	4b93      	ldr	r3, [pc, #588]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006858:	2b08      	cmp	r3, #8
 800685a:	d112      	bne.n	8006882 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800685c:	4b90      	ldr	r3, [pc, #576]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006868:	d10b      	bne.n	8006882 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800686a:	4b8d      	ldr	r3, [pc, #564]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d05b      	beq.n	800692e <HAL_RCC_OscConfig+0x13e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d157      	bne.n	800692e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e2cd      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0xaa>
 800688c:	4b84      	ldr	r3, [pc, #528]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a83      	ldr	r2, [pc, #524]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e01d      	b.n	80068d6 <HAL_RCC_OscConfig+0xe6>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a2:	d10c      	bne.n	80068be <HAL_RCC_OscConfig+0xce>
 80068a4:	4b7e      	ldr	r3, [pc, #504]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7d      	ldr	r2, [pc, #500]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a7a      	ldr	r2, [pc, #488]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e00b      	b.n	80068d6 <HAL_RCC_OscConfig+0xe6>
 80068be:	4b78      	ldr	r3, [pc, #480]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a77      	ldr	r2, [pc, #476]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	4b75      	ldr	r3, [pc, #468]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a74      	ldr	r2, [pc, #464]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d013      	beq.n	8006906 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068de:	f7fc f993 	bl	8002c08 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e6:	f7fc f98f 	bl	8002c08 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b64      	cmp	r3, #100	; 0x64
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e292      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f8:	4b69      	ldr	r3, [pc, #420]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0xf6>
 8006904:	e014      	b.n	8006930 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006906:	f7fc f97f 	bl	8002c08 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800690e:	f7fc f97b 	bl	8002c08 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b64      	cmp	r3, #100	; 0x64
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e27e      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006920:	4b5f      	ldr	r3, [pc, #380]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <HAL_RCC_OscConfig+0x11e>
 800692c:	e000      	b.n	8006930 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d079      	beq.n	8006a30 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_RCC_OscConfig+0x166>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d004      	beq.n	8006956 <HAL_RCC_OscConfig+0x166>
 800694c:	f240 111f 	movw	r1, #287	; 0x11f
 8006950:	4852      	ldr	r0, [pc, #328]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006952:	f7fb fda4 	bl	800249e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b1f      	cmp	r3, #31
 800695c:	d904      	bls.n	8006968 <HAL_RCC_OscConfig+0x178>
 800695e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8006962:	484e      	ldr	r0, [pc, #312]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006964:	f7fb fd9b 	bl	800249e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006968:	4b4d      	ldr	r3, [pc, #308]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006974:	4b4a      	ldr	r3, [pc, #296]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800697c:	2b08      	cmp	r3, #8
 800697e:	d11c      	bne.n	80069ba <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006980:	4b47      	ldr	r3, [pc, #284]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d116      	bne.n	80069ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698c:	4b44      	ldr	r3, [pc, #272]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_OscConfig+0x1b4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e23c      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	493b      	ldr	r1, [pc, #236]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b8:	e03a      	b.n	8006a30 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <HAL_RCC_OscConfig+0x2b4>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fc f91e 	bl	8002c08 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d0:	f7fc f91a 	bl	8002c08 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e21d      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e2:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ee:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4928      	ldr	r1, [pc, #160]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]
 8006a02:	e015      	b.n	8006a30 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a04:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <HAL_RCC_OscConfig+0x2b4>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fc f8fd 	bl	8002c08 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a12:	f7fc f8f9 	bl	8002c08 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e1fc      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f0      	bne.n	8006a12 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d046      	beq.n	8006aca <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_RCC_OscConfig+0x266>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d004      	beq.n	8006a56 <HAL_RCC_OscConfig+0x266>
 8006a4c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006a50:	4812      	ldr	r0, [pc, #72]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a52:	f7fb fd24 	bl	800249e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_RCC_OscConfig+0x2b8>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a64:	f7fc f8d0 	bl	8002c08 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a6c:	f7fc f8cc 	bl	8002c08 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1cf      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0x27c>
 8006a8a:	e01e      	b.n	8006aca <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <HAL_RCC_OscConfig+0x2b8>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a92:	f7fc f8b9 	bl	8002c08 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a98:	e011      	b.n	8006abe <HAL_RCC_OscConfig+0x2ce>
 8006a9a:	bf00      	nop
 8006a9c:	08013a68 	.word	0x08013a68
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	42470000 	.word	0x42470000
 8006aa8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aac:	f7fc f8ac 	bl	8002c08 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1af      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abe:	4b97      	ldr	r3, [pc, #604]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80a8 	beq.w	8006c28 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_RCC_OscConfig+0x30e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d008      	beq.n	8006afe <HAL_RCC_OscConfig+0x30e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d004      	beq.n	8006afe <HAL_RCC_OscConfig+0x30e>
 8006af4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006af8:	4889      	ldr	r0, [pc, #548]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006afa:	f7fb fcd0 	bl	800249e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afe:	4b87      	ldr	r3, [pc, #540]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	4b83      	ldr	r3, [pc, #524]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	4a82      	ldr	r2, [pc, #520]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1a:	4b80      	ldr	r3, [pc, #512]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2a:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <HAL_RCC_OscConfig+0x534>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d118      	bne.n	8006b68 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b36:	4b7b      	ldr	r3, [pc, #492]	; (8006d24 <HAL_RCC_OscConfig+0x534>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a7a      	ldr	r2, [pc, #488]	; (8006d24 <HAL_RCC_OscConfig+0x534>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b42:	f7fc f861 	bl	8002c08 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4a:	f7fc f85d 	bl	8002c08 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e160      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5c:	4b71      	ldr	r3, [pc, #452]	; (8006d24 <HAL_RCC_OscConfig+0x534>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x38e>
 8006b70:	4b6a      	ldr	r3, [pc, #424]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	4a69      	ldr	r2, [pc, #420]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7c:	e01c      	b.n	8006bb8 <HAL_RCC_OscConfig+0x3c8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x3b0>
 8006b86:	4b65      	ldr	r3, [pc, #404]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	4a64      	ldr	r2, [pc, #400]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	6713      	str	r3, [r2, #112]	; 0x70
 8006b92:	4b62      	ldr	r3, [pc, #392]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	4a61      	ldr	r2, [pc, #388]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9e:	e00b      	b.n	8006bb8 <HAL_RCC_OscConfig+0x3c8>
 8006ba0:	4b5e      	ldr	r3, [pc, #376]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	4a5d      	ldr	r2, [pc, #372]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70
 8006bac:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	4a5a      	ldr	r2, [pc, #360]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006bb2:	f023 0304 	bic.w	r3, r3, #4
 8006bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc0:	f7fc f822 	bl	8002c08 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc8:	f7fc f81e 	bl	8002c08 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e11f      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bde:	4b4f      	ldr	r3, [pc, #316]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ee      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x3d8>
 8006bea:	e014      	b.n	8006c16 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bec:	f7fc f80c 	bl	8002c08 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf4:	f7fc f808 	bl	8002c08 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e109      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0a:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ee      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	4a3e      	ldr	r2, [pc, #248]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_RCC_OscConfig+0x45a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d008      	beq.n	8006c4a <HAL_RCC_OscConfig+0x45a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCC_OscConfig+0x45a>
 8006c40:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006c44:	4836      	ldr	r0, [pc, #216]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006c46:	f7fb fc2a 	bl	800249e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80e4 	beq.w	8006e1c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <HAL_RCC_OscConfig+0x52c>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 030c 	and.w	r3, r3, #12
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	f000 80ae 	beq.w	8006dbe <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	f040 8092 	bne.w	8006d90 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <HAL_RCC_OscConfig+0x498>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c7c:	d004      	beq.n	8006c88 <HAL_RCC_OscConfig+0x498>
 8006c7e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006c82:	4827      	ldr	r0, [pc, #156]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006c84:	f7fb fc0b 	bl	800249e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	2b3f      	cmp	r3, #63	; 0x3f
 8006c8e:	d904      	bls.n	8006c9a <HAL_RCC_OscConfig+0x4aa>
 8006c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c94:	4822      	ldr	r0, [pc, #136]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006c96:	f7fb fc02 	bl	800249e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b31      	cmp	r3, #49	; 0x31
 8006ca0:	d904      	bls.n	8006cac <HAL_RCC_OscConfig+0x4bc>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006caa:	d904      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x4c6>
 8006cac:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006cb0:	481b      	ldr	r0, [pc, #108]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006cb2:	f7fb fbf4 	bl	800249e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d010      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4f0>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d00c      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4f0>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d008      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4f0>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d004      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4f0>
 8006cd6:	f240 11db 	movw	r1, #475	; 0x1db
 8006cda:	4811      	ldr	r0, [pc, #68]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006cdc:	f7fb fbdf 	bl	800249e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d903      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x500>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	d904      	bls.n	8006cfa <HAL_RCC_OscConfig+0x50a>
 8006cf0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8006cf4:	480a      	ldr	r0, [pc, #40]	; (8006d20 <HAL_RCC_OscConfig+0x530>)
 8006cf6:	f7fb fbd2 	bl	800249e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_OscConfig+0x538>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d00:	f7fb ff82 	bl	8002c08 <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d06:	e011      	b.n	8006d2c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d08:	f7fb ff7e 	bl	8002c08 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d90a      	bls.n	8006d2c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e081      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	08013a68 	.word	0x08013a68
 8006d24:	40007000 	.word	0x40007000
 8006d28:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <HAL_RCC_OscConfig+0x638>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e7      	bne.n	8006d08 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	019b      	lsls	r3, r3, #6
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	3b01      	subs	r3, #1
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	061b      	lsls	r3, r3, #24
 8006d5c:	4932      	ldr	r1, [pc, #200]	; (8006e28 <HAL_RCC_OscConfig+0x638>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d62:	4b32      	ldr	r3, [pc, #200]	; (8006e2c <HAL_RCC_OscConfig+0x63c>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fb ff4e 	bl	8002c08 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fb ff4a 	bl	8002c08 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e04d      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d82:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <HAL_RCC_OscConfig+0x638>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x580>
 8006d8e:	e045      	b.n	8006e1c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d90:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <HAL_RCC_OscConfig+0x63c>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d96:	f7fb ff37 	bl	8002c08 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9e:	f7fb ff33 	bl	8002c08 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e036      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db0:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_RCC_OscConfig+0x638>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f0      	bne.n	8006d9e <HAL_RCC_OscConfig+0x5ae>
 8006dbc:	e02e      	b.n	8006e1c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e029      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dca:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <HAL_RCC_OscConfig+0x638>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d11c      	bne.n	8006e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d115      	bne.n	8006e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006df2:	4013      	ands	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d10d      	bne.n	8006e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d106      	bne.n	8006e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	42470060 	.word	0x42470060

08006e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e174      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x24>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b0f      	cmp	r3, #15
 8006e52:	d904      	bls.n	8006e5e <HAL_RCC_ClockConfig+0x2e>
 8006e54:	f240 2151 	movw	r1, #593	; 0x251
 8006e58:	487b      	ldr	r0, [pc, #492]	; (8007048 <HAL_RCC_ClockConfig+0x218>)
 8006e5a:	f7fb fb20 	bl	800249e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d019      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d016      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d013      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d00d      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b06      	cmp	r3, #6
 8006e86:	d007      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b07      	cmp	r3, #7
 8006e8c:	d004      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x68>
 8006e8e:	f240 2152 	movw	r1, #594	; 0x252
 8006e92:	486d      	ldr	r0, [pc, #436]	; (8007048 <HAL_RCC_ClockConfig+0x218>)
 8006e94:	f7fb fb03 	bl	800249e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e98:	4b6c      	ldr	r3, [pc, #432]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90c      	bls.n	8006ec0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b69      	ldr	r3, [pc, #420]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b67      	ldr	r3, [pc, #412]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e136      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d049      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ed8:	4b5d      	ldr	r3, [pc, #372]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	4a5c      	ldr	r2, [pc, #368]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ef0:	4b57      	ldr	r3, [pc, #348]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4a56      	ldr	r2, [pc, #344]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d024      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d020      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b90      	cmp	r3, #144	; 0x90
 8006f12:	d01c      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2ba0      	cmp	r3, #160	; 0xa0
 8006f1a:	d018      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2bb0      	cmp	r3, #176	; 0xb0
 8006f22:	d014      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2bc0      	cmp	r3, #192	; 0xc0
 8006f2a:	d010      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2bd0      	cmp	r3, #208	; 0xd0
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2be0      	cmp	r3, #224	; 0xe0
 8006f3a:	d008      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2bf0      	cmp	r3, #240	; 0xf0
 8006f42:	d004      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x11e>
 8006f44:	f240 2175 	movw	r1, #629	; 0x275
 8006f48:	483f      	ldr	r0, [pc, #252]	; (8007048 <HAL_RCC_ClockConfig+0x218>)
 8006f4a:	f7fb faa8 	bl	800249e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4e:	4b40      	ldr	r3, [pc, #256]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	493d      	ldr	r1, [pc, #244]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d059      	beq.n	8007020 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x166>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d00c      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x166>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d008      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x166>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d004      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x166>
 8006f8c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8006f90:	482d      	ldr	r0, [pc, #180]	; (8007048 <HAL_RCC_ClockConfig+0x218>)
 8006f92:	f7fb fa84 	bl	800249e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d119      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e0bf      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d003      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d107      	bne.n	8006fce <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e0af      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fce:	4b20      	ldr	r3, [pc, #128]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0a7      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fde:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f023 0203 	bic.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4919      	ldr	r1, [pc, #100]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff0:	f7fb fe0a 	bl	8002c08 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff8:	f7fb fe06 	bl	8002c08 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	; 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e08f      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	4b10      	ldr	r3, [pc, #64]	; (8007050 <HAL_RCC_ClockConfig+0x220>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 020c 	and.w	r2, r3, #12
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	429a      	cmp	r2, r3
 800701e:	d1eb      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d212      	bcs.n	8007054 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCC_ClockConfig+0x21c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d007      	beq.n	8007054 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e072      	b.n	800712e <HAL_RCC_ClockConfig+0x2fe>
 8007048:	08013a68 	.word	0x08013a68
 800704c:	40023c00 	.word	0x40023c00
 8007050:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d025      	beq.n	80070ac <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d018      	beq.n	800709a <HAL_RCC_ClockConfig+0x26a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007070:	d013      	beq.n	800709a <HAL_RCC_ClockConfig+0x26a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800707a:	d00e      	beq.n	800709a <HAL_RCC_ClockConfig+0x26a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007084:	d009      	beq.n	800709a <HAL_RCC_ClockConfig+0x26a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800708e:	d004      	beq.n	800709a <HAL_RCC_ClockConfig+0x26a>
 8007090:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007094:	4828      	ldr	r0, [pc, #160]	; (8007138 <HAL_RCC_ClockConfig+0x308>)
 8007096:	f7fb fa02 	bl	800249e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709a:	4b28      	ldr	r3, [pc, #160]	; (800713c <HAL_RCC_ClockConfig+0x30c>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	4925      	ldr	r1, [pc, #148]	; (800713c <HAL_RCC_ClockConfig+0x30c>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d026      	beq.n	8007106 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d018      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2c2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d013      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2c2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070d2:	d00e      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2c2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80070dc:	d009      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2c2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80070e6:	d004      	beq.n	80070f2 <HAL_RCC_ClockConfig+0x2c2>
 80070e8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80070ec:	4812      	ldr	r0, [pc, #72]	; (8007138 <HAL_RCC_ClockConfig+0x308>)
 80070ee:	f7fb f9d6 	bl	800249e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCC_ClockConfig+0x30c>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	490e      	ldr	r1, [pc, #56]	; (800713c <HAL_RCC_ClockConfig+0x30c>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007106:	f000 f821 	bl	800714c <HAL_RCC_GetSysClockFreq>
 800710a:	4601      	mov	r1, r0
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <HAL_RCC_ClockConfig+0x30c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <HAL_RCC_ClockConfig+0x310>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	fa21 f303 	lsr.w	r3, r1, r3
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <HAL_RCC_ClockConfig+0x314>)
 8007120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCC_ClockConfig+0x318>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fb fd2a 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08013a68 	.word	0x08013a68
 800713c:	40023800 	.word	0x40023800
 8007140:	08013c0c 	.word	0x08013c0c
 8007144:	20000064 	.word	0x20000064
 8007148:	20000068 	.word	0x20000068

0800714c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007162:	4b63      	ldr	r3, [pc, #396]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 030c 	and.w	r3, r3, #12
 800716a:	2b04      	cmp	r3, #4
 800716c:	d007      	beq.n	800717e <HAL_RCC_GetSysClockFreq+0x32>
 800716e:	2b08      	cmp	r3, #8
 8007170:	d008      	beq.n	8007184 <HAL_RCC_GetSysClockFreq+0x38>
 8007172:	2b00      	cmp	r3, #0
 8007174:	f040 80b4 	bne.w	80072e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007178:	4b5e      	ldr	r3, [pc, #376]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800717a:	60bb      	str	r3, [r7, #8]
       break;
 800717c:	e0b3      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800717e:	4b5e      	ldr	r3, [pc, #376]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007180:	60bb      	str	r3, [r7, #8]
      break;
 8007182:	e0b0      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007184:	4b5a      	ldr	r3, [pc, #360]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800718c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800718e:	4b58      	ldr	r3, [pc, #352]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d04a      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800719a:	4b55      	ldr	r3, [pc, #340]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	099b      	lsrs	r3, r3, #6
 80071a0:	f04f 0400 	mov.w	r4, #0
 80071a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	ea03 0501 	and.w	r5, r3, r1
 80071b0:	ea04 0602 	and.w	r6, r4, r2
 80071b4:	4629      	mov	r1, r5
 80071b6:	4632      	mov	r2, r6
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	0154      	lsls	r4, r2, #5
 80071c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071c6:	014b      	lsls	r3, r1, #5
 80071c8:	4619      	mov	r1, r3
 80071ca:	4622      	mov	r2, r4
 80071cc:	1b49      	subs	r1, r1, r5
 80071ce:	eb62 0206 	sbc.w	r2, r2, r6
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	f04f 0400 	mov.w	r4, #0
 80071da:	0194      	lsls	r4, r2, #6
 80071dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071e0:	018b      	lsls	r3, r1, #6
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	eb64 0402 	sbc.w	r4, r4, r2
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	00e2      	lsls	r2, r4, #3
 80071f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071f6:	00d9      	lsls	r1, r3, #3
 80071f8:	460b      	mov	r3, r1
 80071fa:	4614      	mov	r4, r2
 80071fc:	195b      	adds	r3, r3, r5
 80071fe:	eb44 0406 	adc.w	r4, r4, r6
 8007202:	f04f 0100 	mov.w	r1, #0
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	0262      	lsls	r2, r4, #9
 800720c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007210:	0259      	lsls	r1, r3, #9
 8007212:	460b      	mov	r3, r1
 8007214:	4614      	mov	r4, r2
 8007216:	4618      	mov	r0, r3
 8007218:	4621      	mov	r1, r4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f04f 0400 	mov.w	r4, #0
 8007220:	461a      	mov	r2, r3
 8007222:	4623      	mov	r3, r4
 8007224:	f7f9 fd40 	bl	8000ca8 <__aeabi_uldivmod>
 8007228:	4603      	mov	r3, r0
 800722a:	460c      	mov	r4, r1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e049      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007230:	4b2f      	ldr	r3, [pc, #188]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	099b      	lsrs	r3, r3, #6
 8007236:	f04f 0400 	mov.w	r4, #0
 800723a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	ea03 0501 	and.w	r5, r3, r1
 8007246:	ea04 0602 	and.w	r6, r4, r2
 800724a:	4629      	mov	r1, r5
 800724c:	4632      	mov	r2, r6
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	f04f 0400 	mov.w	r4, #0
 8007256:	0154      	lsls	r4, r2, #5
 8007258:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800725c:	014b      	lsls	r3, r1, #5
 800725e:	4619      	mov	r1, r3
 8007260:	4622      	mov	r2, r4
 8007262:	1b49      	subs	r1, r1, r5
 8007264:	eb62 0206 	sbc.w	r2, r2, r6
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	0194      	lsls	r4, r2, #6
 8007272:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007276:	018b      	lsls	r3, r1, #6
 8007278:	1a5b      	subs	r3, r3, r1
 800727a:	eb64 0402 	sbc.w	r4, r4, r2
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	00e2      	lsls	r2, r4, #3
 8007288:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800728c:	00d9      	lsls	r1, r3, #3
 800728e:	460b      	mov	r3, r1
 8007290:	4614      	mov	r4, r2
 8007292:	195b      	adds	r3, r3, r5
 8007294:	eb44 0406 	adc.w	r4, r4, r6
 8007298:	f04f 0100 	mov.w	r1, #0
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	02a2      	lsls	r2, r4, #10
 80072a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80072a6:	0299      	lsls	r1, r3, #10
 80072a8:	460b      	mov	r3, r1
 80072aa:	4614      	mov	r4, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	4621      	mov	r1, r4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f04f 0400 	mov.w	r4, #0
 80072b6:	461a      	mov	r2, r3
 80072b8:	4623      	mov	r3, r4
 80072ba:	f7f9 fcf5 	bl	8000ca8 <__aeabi_uldivmod>
 80072be:	4603      	mov	r3, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	3301      	adds	r3, #1
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	60bb      	str	r3, [r7, #8]
      break;
 80072de:	e002      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072e0:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072e2:	60bb      	str	r3, [r7, #8]
      break;
 80072e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072e6:	68bb      	ldr	r3, [r7, #8]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f0:	40023800 	.word	0x40023800
 80072f4:	00f42400 	.word	0x00f42400
 80072f8:	007a1200 	.word	0x007a1200

080072fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007300:	4b03      	ldr	r3, [pc, #12]	; (8007310 <HAL_RCC_GetHCLKFreq+0x14>)
 8007302:	681b      	ldr	r3, [r3, #0]
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000064 	.word	0x20000064

08007314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007318:	f7ff fff0 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 800731c:	4601      	mov	r1, r0
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	0a9b      	lsrs	r3, r3, #10
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	4a03      	ldr	r2, [pc, #12]	; (8007338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800732a:	5cd3      	ldrb	r3, [r2, r3]
 800732c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007330:	4618      	mov	r0, r3
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40023800 	.word	0x40023800
 8007338:	08013c1c 	.word	0x08013c1c

0800733c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b07      	cmp	r3, #7
 800735a:	d904      	bls.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800735c:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8007360:	4899      	ldr	r0, [pc, #612]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8007362:	f7fb f89c 	bl	800249e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800737a:	2b00      	cmp	r3, #0
 800737c:	d050      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d903      	bls.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b07      	cmp	r3, #7
 800738c:	d904      	bls.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800738e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8007392:	488d      	ldr	r0, [pc, #564]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8007394:	f7fb f883 	bl	800249e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b31      	cmp	r3, #49	; 0x31
 800739e:	d904      	bls.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80073a8:	d904      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80073aa:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80073ae:	4886      	ldr	r0, [pc, #536]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80073b0:	f7fb f875 	bl	800249e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073b4:	4b85      	ldr	r3, [pc, #532]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ba:	f7fb fc25 	bl	8002c08 <HAL_GetTick>
 80073be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073c0:	e008      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073c2:	f7fb fc21 	bl	8002c08 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e1a0      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073d4:	4b7e      	ldr	r3, [pc, #504]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f0      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	019a      	lsls	r2, r3, #6
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	071b      	lsls	r3, r3, #28
 80073ec:	4978      	ldr	r1, [pc, #480]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073f4:	4b75      	ldr	r3, [pc, #468]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fa:	f7fb fc05 	bl	8002c08 <HAL_GetTick>
 80073fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007400:	e008      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007402:	f7fb fc01 	bl	8002c08 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e180      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007414:	4b6e      	ldr	r3, [pc, #440]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8173 	beq.w	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007436:	f000 80a6 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007442:	f000 80a0 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4a62      	ldr	r2, [pc, #392]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800744c:	4293      	cmp	r3, r2
 800744e:	f000 809a 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	4a60      	ldr	r2, [pc, #384]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	f000 8094 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	4a5e      	ldr	r2, [pc, #376]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	f000 808e 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	4a5c      	ldr	r2, [pc, #368]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	f000 8088 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	4a5a      	ldr	r2, [pc, #360]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	f000 8082 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4a58      	ldr	r2, [pc, #352]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d07c      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a56      	ldr	r2, [pc, #344]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d077      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4a55      	ldr	r2, [pc, #340]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d072      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4a53      	ldr	r2, [pc, #332]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d06d      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	4a52      	ldr	r2, [pc, #328]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d068      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a50      	ldr	r2, [pc, #320]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d063      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4a4f      	ldr	r2, [pc, #316]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d05e      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a4d      	ldr	r2, [pc, #308]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d059      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4a4c      	ldr	r2, [pc, #304]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d054      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4a4a      	ldr	r2, [pc, #296]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d04f      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4a49      	ldr	r2, [pc, #292]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a47      	ldr	r2, [pc, #284]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a46      	ldr	r2, [pc, #280]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a44      	ldr	r2, [pc, #272]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4a43      	ldr	r2, [pc, #268]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a41      	ldr	r2, [pc, #260]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	4a40      	ldr	r2, [pc, #256]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4a3e      	ldr	r2, [pc, #248]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	4a3d      	ldr	r2, [pc, #244]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	4a3a      	ldr	r2, [pc, #232]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a38      	ldr	r2, [pc, #224]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	4a37      	ldr	r2, [pc, #220]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a35      	ldr	r2, [pc, #212]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4a34      	ldr	r2, [pc, #208]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800757c:	f640 2112 	movw	r1, #2578	; 0xa12
 8007580:	4811      	ldr	r0, [pc, #68]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8007582:	f7fa ff8c 	bl	800249e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007594:	6413      	str	r3, [r2, #64]	; 0x40
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075a2:	4b2a      	ldr	r3, [pc, #168]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a29      	ldr	r2, [pc, #164]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075ae:	f7fb fb2b 	bl	8002c08 <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075b4:	e04c      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x314>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075b6:	f7fb fb27 	bl	8002c08 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d945      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e0a6      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80075c8:	08013aa0 	.word	0x08013aa0
 80075cc:	42470068 	.word	0x42470068
 80075d0:	40023800 	.word	0x40023800
 80075d4:	00020300 	.word	0x00020300
 80075d8:	00030300 	.word	0x00030300
 80075dc:	00040300 	.word	0x00040300
 80075e0:	00050300 	.word	0x00050300
 80075e4:	00060300 	.word	0x00060300
 80075e8:	00070300 	.word	0x00070300
 80075ec:	00080300 	.word	0x00080300
 80075f0:	00090300 	.word	0x00090300
 80075f4:	000a0300 	.word	0x000a0300
 80075f8:	000b0300 	.word	0x000b0300
 80075fc:	000c0300 	.word	0x000c0300
 8007600:	000d0300 	.word	0x000d0300
 8007604:	000e0300 	.word	0x000e0300
 8007608:	000f0300 	.word	0x000f0300
 800760c:	00100300 	.word	0x00100300
 8007610:	00110300 	.word	0x00110300
 8007614:	00120300 	.word	0x00120300
 8007618:	00130300 	.word	0x00130300
 800761c:	00140300 	.word	0x00140300
 8007620:	00150300 	.word	0x00150300
 8007624:	00160300 	.word	0x00160300
 8007628:	00170300 	.word	0x00170300
 800762c:	00180300 	.word	0x00180300
 8007630:	00190300 	.word	0x00190300
 8007634:	001a0300 	.word	0x001a0300
 8007638:	001b0300 	.word	0x001b0300
 800763c:	001c0300 	.word	0x001c0300
 8007640:	001d0300 	.word	0x001d0300
 8007644:	001e0300 	.word	0x001e0300
 8007648:	001f0300 	.word	0x001f0300
 800764c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007650:	4b33      	ldr	r3, [pc, #204]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0ac      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800765c:	4b31      	ldr	r3, [pc, #196]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007664:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x390>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	429a      	cmp	r2, r3
 8007678:	d028      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800767a:	4b2a      	ldr	r3, [pc, #168]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007684:	4b28      	ldr	r3, [pc, #160]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007690:	4a24      	ldr	r2, [pc, #144]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007696:	4b23      	ldr	r3, [pc, #140]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d114      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x390>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076a2:	f7fb fab1 	bl	8002c08 <HAL_GetTick>
 80076a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076aa:	f7fb faad 	bl	8002c08 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e02a      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c0:	4b18      	ldr	r3, [pc, #96]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0ee      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ee:	490d      	ldr	r1, [pc, #52]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	608b      	str	r3, [r1, #8]
 80076f4:	e005      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007700:	6093      	str	r3, [r2, #8]
 8007702:	4b08      	ldr	r3, [pc, #32]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	4905      	ldr	r1, [pc, #20]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007710:	4313      	orrs	r3, r2
 8007712:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40007000 	.word	0x40007000
 8007724:	40023800 	.word	0x40023800
 8007728:	42470e40 	.word	0x42470e40

0800772c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e0d6      	b.n	80078ec <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d007      	beq.n	8007756 <HAL_RTC_Init+0x2a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_RTC_Init+0x2a>
 800774e:	21ff      	movs	r1, #255	; 0xff
 8007750:	4868      	ldr	r0, [pc, #416]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 8007752:	f7fa fea4 	bl	800249e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b7f      	cmp	r3, #127	; 0x7f
 800775c:	d904      	bls.n	8007768 <HAL_RTC_Init+0x3c>
 800775e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007762:	4864      	ldr	r0, [pc, #400]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 8007764:	f7fa fe9b 	bl	800249e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007770:	d304      	bcc.n	800777c <HAL_RTC_Init+0x50>
 8007772:	f240 1101 	movw	r1, #257	; 0x101
 8007776:	485f      	ldr	r0, [pc, #380]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 8007778:	f7fa fe91 	bl	800249e <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d013      	beq.n	80077ac <HAL_RTC_Init+0x80>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800778c:	d00e      	beq.n	80077ac <HAL_RTC_Init+0x80>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007796:	d009      	beq.n	80077ac <HAL_RTC_Init+0x80>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077a0:	d004      	beq.n	80077ac <HAL_RTC_Init+0x80>
 80077a2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80077a6:	4853      	ldr	r0, [pc, #332]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 80077a8:	f7fa fe79 	bl	800249e <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <HAL_RTC_Init+0x9c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077bc:	d004      	beq.n	80077c8 <HAL_RTC_Init+0x9c>
 80077be:	f240 1103 	movw	r1, #259	; 0x103
 80077c2:	484c      	ldr	r0, [pc, #304]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 80077c4:	f7fa fe6b 	bl	800249e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <HAL_RTC_Init+0xb8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077d8:	d004      	beq.n	80077e4 <HAL_RTC_Init+0xb8>
 80077da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80077de:	4845      	ldr	r0, [pc, #276]	; (80078f4 <HAL_RTC_Init+0x1c8>)
 80077e0:	f7fa fe5d 	bl	800249e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7f5b      	ldrb	r3, [r3, #29]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7fa feb7 	bl	8002568 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	22ca      	movs	r2, #202	; 0xca
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2253      	movs	r2, #83	; 0x53
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fbfd 	bl	8008010 <RTC_EnterInitMode>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	22ff      	movs	r2, #255	; 0xff
 8007822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2204      	movs	r2, #4
 8007828:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e05e      	b.n	80078ec <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800783c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007840:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68d2      	ldr	r2, [r2, #12]
 8007868:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6919      	ldr	r1, [r3, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	041a      	lsls	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10e      	bne.n	80078ba <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fb8f 	bl	8007fc0 <HAL_RTC_WaitForSynchro>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	22ff      	movs	r2, #255	; 0xff
 80078ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2204      	movs	r2, #4
 80078b4:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e018      	b.n	80078ec <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80078ea:	2300      	movs	r3, #0
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	08013adc 	.word	0x08013adc

080078f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_RTC_SetTime+0x26>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d004      	beq.n	800791e <HAL_RTC_SetTime+0x26>
 8007914:	f240 21da 	movw	r1, #730	; 0x2da
 8007918:	48a4      	ldr	r0, [pc, #656]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 800791a:	f7fa fdc0 	bl	800249e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007926:	d00d      	beq.n	8007944 <HAL_RTC_SetTime+0x4c>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d008      	beq.n	8007944 <HAL_RTC_SetTime+0x4c>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <HAL_RTC_SetTime+0x4c>
 800793a:	f240 21db 	movw	r1, #731	; 0x2db
 800793e:	489b      	ldr	r0, [pc, #620]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007940:	f7fa fdad 	bl	800249e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <HAL_RTC_SetTime+0x68>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007954:	d004      	beq.n	8007960 <HAL_RTC_SetTime+0x68>
 8007956:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800795a:	4894      	ldr	r0, [pc, #592]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 800795c:	f7fa fd9f 	bl	800249e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	7f1b      	ldrb	r3, [r3, #28]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_RTC_SetTime+0x74>
 8007968:	2302      	movs	r3, #2
 800796a:	e12c      	b.n	8007bc6 <HAL_RTC_SetTime+0x2ce>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2202      	movs	r2, #2
 8007976:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d15c      	bne.n	8007a38 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_RTC_SetTime+0xa4>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b0c      	cmp	r3, #12
 800799a:	d904      	bls.n	80079a6 <HAL_RTC_SetTime+0xae>
 800799c:	f240 21e7 	movw	r1, #743	; 0x2e7
 80079a0:	4882      	ldr	r0, [pc, #520]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 80079a2:	f7fa fd7c 	bl	800249e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	78db      	ldrb	r3, [r3, #3]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d015      	beq.n	80079da <HAL_RTC_SetTime+0xe2>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	78db      	ldrb	r3, [r3, #3]
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d011      	beq.n	80079da <HAL_RTC_SetTime+0xe2>
 80079b6:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80079ba:	487c      	ldr	r0, [pc, #496]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 80079bc:	f7fa fd6f 	bl	800249e <assert_failed>
 80079c0:	e00b      	b.n	80079da <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b17      	cmp	r3, #23
 80079ce:	d904      	bls.n	80079da <HAL_RTC_SetTime+0xe2>
 80079d0:	f240 21ed 	movw	r1, #749	; 0x2ed
 80079d4:	4875      	ldr	r0, [pc, #468]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 80079d6:	f7fa fd62 	bl	800249e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b3b      	cmp	r3, #59	; 0x3b
 80079e0:	d904      	bls.n	80079ec <HAL_RTC_SetTime+0xf4>
 80079e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079e6:	4871      	ldr	r0, [pc, #452]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 80079e8:	f7fa fd59 	bl	800249e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	789b      	ldrb	r3, [r3, #2]
 80079f0:	2b3b      	cmp	r3, #59	; 0x3b
 80079f2:	d904      	bls.n	80079fe <HAL_RTC_SetTime+0x106>
 80079f4:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80079f8:	486c      	ldr	r0, [pc, #432]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 80079fa:	f7fa fd50 	bl	800249e <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb30 	bl	8008068 <RTC_ByteToBcd2>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fb29 	bl	8008068 <RTC_ByteToBcd2>
 8007a16:	4603      	mov	r3, r0
 8007a18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a1a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fb21 	bl	8008068 <RTC_ByteToBcd2>
 8007a26:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	78db      	ldrb	r3, [r3, #3]
 8007a30:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e062      	b.n	8007afe <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d022      	beq.n	8007a8c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fb2a 	bl	80080a4 <RTC_Bcd2ToByte>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_RTC_SetTime+0x16e>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fb22 	bl	80080a4 <RTC_Bcd2ToByte>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b0c      	cmp	r3, #12
 8007a64:	d904      	bls.n	8007a70 <HAL_RTC_SetTime+0x178>
 8007a66:	f240 21fb 	movw	r1, #763	; 0x2fb
 8007a6a:	4850      	ldr	r0, [pc, #320]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007a6c:	f7fa fd17 	bl	800249e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d019      	beq.n	8007aac <HAL_RTC_SetTime+0x1b4>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	d015      	beq.n	8007aac <HAL_RTC_SetTime+0x1b4>
 8007a80:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8007a84:	4849      	ldr	r0, [pc, #292]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007a86:	f7fa fd0a 	bl	800249e <assert_failed>
 8007a8a:	e00f      	b.n	8007aac <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fb04 	bl	80080a4 <RTC_Bcd2ToByte>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b17      	cmp	r3, #23
 8007aa0:	d904      	bls.n	8007aac <HAL_RTC_SetTime+0x1b4>
 8007aa2:	f240 3101 	movw	r1, #769	; 0x301
 8007aa6:	4841      	ldr	r0, [pc, #260]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007aa8:	f7fa fcf9 	bl	800249e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 faf7 	bl	80080a4 <RTC_Bcd2ToByte>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b3b      	cmp	r3, #59	; 0x3b
 8007aba:	d904      	bls.n	8007ac6 <HAL_RTC_SetTime+0x1ce>
 8007abc:	f240 3103 	movw	r1, #771	; 0x303
 8007ac0:	483a      	ldr	r0, [pc, #232]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007ac2:	f7fa fcec 	bl	800249e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	789b      	ldrb	r3, [r3, #2]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 faea 	bl	80080a4 <RTC_Bcd2ToByte>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b3b      	cmp	r3, #59	; 0x3b
 8007ad4:	d904      	bls.n	8007ae0 <HAL_RTC_SetTime+0x1e8>
 8007ad6:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007ada:	4834      	ldr	r0, [pc, #208]	; (8007bac <HAL_RTC_SetTime+0x2b4>)
 8007adc:	f7fa fcdf 	bl	800249e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007aec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007af2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	78db      	ldrb	r3, [r3, #3]
 8007af8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	22ca      	movs	r2, #202	; 0xca
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2253      	movs	r2, #83	; 0x53
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fa7e 	bl	8008010 <RTC_EnterInitMode>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	22ff      	movs	r2, #255	; 0xff
 8007b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2204      	movs	r2, #4
 8007b26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e049      	b.n	8007bc6 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6899      	ldr	r1, [r3, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d113      	bne.n	8007bb0 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fa19 	bl	8007fc0 <HAL_RTC_WaitForSynchro>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e00c      	b.n	8007bc6 <HAL_RTC_SetTime+0x2ce>
 8007bac:	08013adc 	.word	0x08013adc
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
  }
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd90      	pop	{r4, r7, pc}
 8007bce:	bf00      	nop

08007bd0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d007      	beq.n	8007bf6 <HAL_RTC_GetTime+0x26>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d004      	beq.n	8007bf6 <HAL_RTC_GetTime+0x26>
 8007bec:	f240 315d 	movw	r1, #861	; 0x35d
 8007bf0:	482c      	ldr	r0, [pc, #176]	; (8007ca4 <HAL_RTC_GetTime+0xd4>)
 8007bf2:	f7fa fc54 	bl	800249e <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007c18:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	0c1b      	lsrs	r3, r3, #16
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	0c1b      	lsrs	r3, r3, #16
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d11a      	bne.n	8007c98 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fa1c 	bl	80080a4 <RTC_Bcd2ToByte>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fa13 	bl	80080a4 <RTC_Bcd2ToByte>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	461a      	mov	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	789b      	ldrb	r3, [r3, #2]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fa0a 	bl	80080a4 <RTC_Bcd2ToByte>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08013adc 	.word	0x08013adc

08007ca8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <HAL_RTC_SetDate+0x26>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d004      	beq.n	8007cce <HAL_RTC_SetDate+0x26>
 8007cc4:	f240 318a 	movw	r1, #906	; 0x38a
 8007cc8:	488e      	ldr	r0, [pc, #568]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007cca:	f7fa fbe8 	bl	800249e <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	7f1b      	ldrb	r3, [r3, #28]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_RTC_SetDate+0x32>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e10f      	b.n	8007efa <HAL_RTC_SetDate+0x252>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10e      	bne.n	8007d0a <HAL_RTC_SetDate+0x62>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	f023 0310 	bic.w	r3, r3, #16
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	330a      	adds	r3, #10
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d01c      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d018      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d014      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d010      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b05      	cmp	r3, #5
 8007d30:	d00c      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b06      	cmp	r3, #6
 8007d38:	d008      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b07      	cmp	r3, #7
 8007d40:	d004      	beq.n	8007d4c <HAL_RTC_SetDate+0xa4>
 8007d42:	f240 3196 	movw	r1, #918	; 0x396
 8007d46:	486f      	ldr	r0, [pc, #444]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007d48:	f7fa fba9 	bl	800249e <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d13f      	bne.n	8007dd2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	78db      	ldrb	r3, [r3, #3]
 8007d56:	2b63      	cmp	r3, #99	; 0x63
 8007d58:	d904      	bls.n	8007d64 <HAL_RTC_SetDate+0xbc>
 8007d5a:	f240 319a 	movw	r1, #922	; 0x39a
 8007d5e:	4869      	ldr	r0, [pc, #420]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007d60:	f7fa fb9d 	bl	800249e <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RTC_SetDate+0xcc>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b0c      	cmp	r3, #12
 8007d72:	d904      	bls.n	8007d7e <HAL_RTC_SetDate+0xd6>
 8007d74:	f240 319b 	movw	r1, #923	; 0x39b
 8007d78:	4862      	ldr	r0, [pc, #392]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007d7a:	f7fa fb90 	bl	800249e <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	789b      	ldrb	r3, [r3, #2]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_RTC_SetDate+0xe6>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	789b      	ldrb	r3, [r3, #2]
 8007d8a:	2b1f      	cmp	r3, #31
 8007d8c:	d904      	bls.n	8007d98 <HAL_RTC_SetDate+0xf0>
 8007d8e:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8007d92:	485c      	ldr	r0, [pc, #368]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007d94:	f7fa fb83 	bl	800249e <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	78db      	ldrb	r3, [r3, #3]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 f963 	bl	8008068 <RTC_ByteToBcd2>
 8007da2:	4603      	mov	r3, r0
 8007da4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f95c 	bl	8008068 <RTC_ByteToBcd2>
 8007db0:	4603      	mov	r3, r0
 8007db2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007db4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	789b      	ldrb	r3, [r3, #2]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f954 	bl	8008068 <RTC_ByteToBcd2>
 8007dc0:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007dc2:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e045      	b.n	8007e5e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	78db      	ldrb	r3, [r3, #3]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f964 	bl	80080a4 <RTC_Bcd2ToByte>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b63      	cmp	r3, #99	; 0x63
 8007de0:	d904      	bls.n	8007dec <HAL_RTC_SetDate+0x144>
 8007de2:	f240 31a5 	movw	r1, #933	; 0x3a5
 8007de6:	4847      	ldr	r0, [pc, #284]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007de8:	f7fa fb59 	bl	800249e <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f957 	bl	80080a4 <RTC_Bcd2ToByte>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <HAL_RTC_SetDate+0x164>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f94f 	bl	80080a4 <RTC_Bcd2ToByte>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b0c      	cmp	r3, #12
 8007e0a:	d904      	bls.n	8007e16 <HAL_RTC_SetDate+0x16e>
 8007e0c:	f240 31a6 	movw	r1, #934	; 0x3a6
 8007e10:	483c      	ldr	r0, [pc, #240]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007e12:	f7fa fb44 	bl	800249e <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	789b      	ldrb	r3, [r3, #2]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f942 	bl	80080a4 <RTC_Bcd2ToByte>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_RTC_SetDate+0x18e>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	789b      	ldrb	r3, [r3, #2]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f93a 	bl	80080a4 <RTC_Bcd2ToByte>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b1f      	cmp	r3, #31
 8007e34:	d904      	bls.n	8007e40 <HAL_RTC_SetDate+0x198>
 8007e36:	f240 31a7 	movw	r1, #935	; 0x3a7
 8007e3a:	4832      	ldr	r0, [pc, #200]	; (8007f04 <HAL_RTC_SetDate+0x25c>)
 8007e3c:	f7fa fb2f 	bl	800249e <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	78db      	ldrb	r3, [r3, #3]
 8007e44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	22ca      	movs	r2, #202	; 0xca
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2253      	movs	r2, #83	; 0x53
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f8ce 	bl	8008010 <RTC_EnterInitMode>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00b      	beq.n	8007e92 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	22ff      	movs	r2, #255	; 0xff
 8007e80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2204      	movs	r2, #4
 8007e86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e033      	b.n	8007efa <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ea0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d111      	bne.n	8007ee4 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f87d 	bl	8007fc0 <HAL_RTC_WaitForSynchro>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	22ff      	movs	r2, #255	; 0xff
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e00a      	b.n	8007efa <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
  }
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd90      	pop	{r4, r7, pc}
 8007f02:	bf00      	nop
 8007f04:	08013adc 	.word	0x08013adc

08007f08 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <HAL_RTC_GetDate+0x26>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d004      	beq.n	8007f2e <HAL_RTC_GetDate+0x26>
 8007f24:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007f28:	4824      	ldr	r0, [pc, #144]	; (8007fbc <HAL_RTC_GetDate+0xb4>)
 8007f2a:	f7fa fab8 	bl	800249e <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	0b5b      	lsrs	r3, r3, #13
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11a      	bne.n	8007fb2 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	78db      	ldrb	r3, [r3, #3]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f88f 	bl	80080a4 <RTC_Bcd2ToByte>
 8007f86:	4603      	mov	r3, r0
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f886 	bl	80080a4 <RTC_Bcd2ToByte>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	789b      	ldrb	r3, [r3, #2]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f87d 	bl	80080a4 <RTC_Bcd2ToByte>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	08013adc 	.word	0x08013adc

08007fc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fda:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fdc:	f7fa fe14 	bl	8002c08 <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fe2:	e009      	b.n	8007ff8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fe4:	f7fa fe10 	bl	8002c08 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e007      	b.n	8008008 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0ee      	beq.n	8007fe4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d119      	bne.n	800805e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008032:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008034:	f7fa fde8 	bl	8002c08 <HAL_GetTick>
 8008038:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800803a:	e009      	b.n	8008050 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800803c:	f7fa fde4 	bl	8002c08 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800804a:	d901      	bls.n	8008050 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e007      	b.n	8008060 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0ee      	beq.n	800803c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008076:	e005      	b.n	8008084 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	3b0a      	subs	r3, #10
 8008082:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	2b09      	cmp	r3, #9
 8008088:	d8f6      	bhi.n	8008078 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	b2da      	uxtb	r2, r3
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	4313      	orrs	r3, r2
 8008096:	b2db      	uxtb	r3, r3
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	b2db      	uxtb	r3, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e109      	b.n	8008306 <HAL_SPI_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a86      	ldr	r2, [pc, #536]	; (8008310 <HAL_SPI_Init+0x230>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00e      	beq.n	800811a <HAL_SPI_Init+0x3a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a84      	ldr	r2, [pc, #528]	; (8008314 <HAL_SPI_Init+0x234>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d009      	beq.n	800811a <HAL_SPI_Init+0x3a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a83      	ldr	r2, [pc, #524]	; (8008318 <HAL_SPI_Init+0x238>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d004      	beq.n	800811a <HAL_SPI_Init+0x3a>
 8008110:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008114:	4881      	ldr	r0, [pc, #516]	; (800831c <HAL_SPI_Init+0x23c>)
 8008116:	f7fa f9c2 	bl	800249e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <HAL_SPI_Init+0x56>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800812a:	d004      	beq.n	8008136 <HAL_SPI_Init+0x56>
 800812c:	f240 1143 	movw	r1, #323	; 0x143
 8008130:	487a      	ldr	r0, [pc, #488]	; (800831c <HAL_SPI_Init+0x23c>)
 8008132:	f7fa f9b4 	bl	800249e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00e      	beq.n	800815c <HAL_SPI_Init+0x7c>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008146:	d009      	beq.n	800815c <HAL_SPI_Init+0x7c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008150:	d004      	beq.n	800815c <HAL_SPI_Init+0x7c>
 8008152:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008156:	4871      	ldr	r0, [pc, #452]	; (800831c <HAL_SPI_Init+0x23c>)
 8008158:	f7fa f9a1 	bl	800249e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008164:	d008      	beq.n	8008178 <HAL_SPI_Init+0x98>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <HAL_SPI_Init+0x98>
 800816e:	f240 1145 	movw	r1, #325	; 0x145
 8008172:	486a      	ldr	r0, [pc, #424]	; (800831c <HAL_SPI_Init+0x23c>)
 8008174:	f7fa f993 	bl	800249e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008180:	d00d      	beq.n	800819e <HAL_SPI_Init+0xbe>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_SPI_Init+0xbe>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008192:	d004      	beq.n	800819e <HAL_SPI_Init+0xbe>
 8008194:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008198:	4860      	ldr	r0, [pc, #384]	; (800831c <HAL_SPI_Init+0x23c>)
 800819a:	f7fa f980 	bl	800249e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d020      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	2b08      	cmp	r3, #8
 80081ac:	d01c      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	2b10      	cmp	r3, #16
 80081b4:	d018      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b18      	cmp	r3, #24
 80081bc:	d014      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d010      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	2b28      	cmp	r3, #40	; 0x28
 80081cc:	d00c      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	2b30      	cmp	r3, #48	; 0x30
 80081d4:	d008      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	2b38      	cmp	r3, #56	; 0x38
 80081dc:	d004      	beq.n	80081e8 <HAL_SPI_Init+0x108>
 80081de:	f240 1147 	movw	r1, #327	; 0x147
 80081e2:	484e      	ldr	r0, [pc, #312]	; (800831c <HAL_SPI_Init+0x23c>)
 80081e4:	f7fa f95b 	bl	800249e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d008      	beq.n	8008202 <HAL_SPI_Init+0x122>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	2b80      	cmp	r3, #128	; 0x80
 80081f6:	d004      	beq.n	8008202 <HAL_SPI_Init+0x122>
 80081f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80081fc:	4847      	ldr	r0, [pc, #284]	; (800831c <HAL_SPI_Init+0x23c>)
 80081fe:	f7fa f94e 	bl	800249e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d008      	beq.n	800821c <HAL_SPI_Init+0x13c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b10      	cmp	r3, #16
 8008210:	d004      	beq.n	800821c <HAL_SPI_Init+0x13c>
 8008212:	f240 1149 	movw	r1, #329	; 0x149
 8008216:	4841      	ldr	r0, [pc, #260]	; (800831c <HAL_SPI_Init+0x23c>)
 8008218:	f7fa f941 	bl	800249e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d119      	bne.n	8008258 <HAL_SPI_Init+0x178>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <HAL_SPI_Init+0x15e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d004      	beq.n	800823e <HAL_SPI_Init+0x15e>
 8008234:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008238:	4838      	ldr	r0, [pc, #224]	; (800831c <HAL_SPI_Init+0x23c>)
 800823a:	f7fa f930 	bl	800249e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <HAL_SPI_Init+0x178>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d004      	beq.n	8008258 <HAL_SPI_Init+0x178>
 800824e:	f240 114d 	movw	r1, #333	; 0x14d
 8008252:	4832      	ldr	r0, [pc, #200]	; (800831c <HAL_SPI_Init+0x23c>)
 8008254:	f7fa f923 	bl	800249e <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_SPI_Init+0x198>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fa fa5c 	bl	8002730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	ea42 0103 	orr.w	r1, r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	f003 0104 	and.w	r1, r3, #4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40013000 	.word	0x40013000
 8008314:	40003800 	.word	0x40003800
 8008318:	40003c00 	.word	0x40003c00
 800831c:	08013b14 	.word	0x08013b14

08008320 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d009      	beq.n	8008350 <HAL_SPI_Transmit+0x30>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008344:	d004      	beq.n	8008350 <HAL_SPI_Transmit+0x30>
 8008346:	f240 21f2 	movw	r1, #754	; 0x2f2
 800834a:	4896      	ldr	r0, [pc, #600]	; (80085a4 <HAL_SPI_Transmit+0x284>)
 800834c:	f7fa f8a7 	bl	800249e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_SPI_Transmit+0x3e>
 800835a:	2302      	movs	r3, #2
 800835c:	e11e      	b.n	800859c <HAL_SPI_Transmit+0x27c>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008366:	f7fa fc4f 	bl	8002c08 <HAL_GetTick>
 800836a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d002      	beq.n	8008382 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800837c:	2302      	movs	r3, #2
 800837e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008380:	e103      	b.n	800858a <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_SPI_Transmit+0x6e>
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008392:	e0fa      	b.n	800858a <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2203      	movs	r2, #3
 8008398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083da:	d107      	bne.n	80083ec <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d007      	beq.n	800840a <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008412:	d14b      	bne.n	80084ac <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_SPI_Transmit+0x102>
 800841c:	8afb      	ldrh	r3, [r7, #22]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d13e      	bne.n	80084a0 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	881a      	ldrh	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008446:	e02b      	b.n	80084a0 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b02      	cmp	r3, #2
 8008454:	d112      	bne.n	800847c <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	1c9a      	adds	r2, r3, #2
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	86da      	strh	r2, [r3, #54]	; 0x36
 800847a:	e011      	b.n	80084a0 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800847c:	f7fa fbc4 	bl	8002c08 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d803      	bhi.n	8008494 <HAL_SPI_Transmit+0x174>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008492:	d102      	bne.n	800849a <HAL_SPI_Transmit+0x17a>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800849e:	e074      	b.n	800858a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1ce      	bne.n	8008448 <HAL_SPI_Transmit+0x128>
 80084aa:	e04c      	b.n	8008546 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_SPI_Transmit+0x19a>
 80084b4:	8afb      	ldrh	r3, [r7, #22]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d140      	bne.n	800853c <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80084e0:	e02c      	b.n	800853c <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d113      	bne.n	8008518 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	7812      	ldrb	r2, [r2, #0]
 80084fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	86da      	strh	r2, [r3, #54]	; 0x36
 8008516:	e011      	b.n	800853c <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008518:	f7fa fb76 	bl	8002c08 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d803      	bhi.n	8008530 <HAL_SPI_Transmit+0x210>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852e:	d102      	bne.n	8008536 <HAL_SPI_Transmit+0x216>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800853a:	e026      	b.n	800858a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1cd      	bne.n	80084e2 <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f896 	bl	800867c <SPI_EndRxTxTransaction>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	77fb      	strb	r3, [r7, #31]
 8008586:	e000      	b.n	800858a <HAL_SPI_Transmit+0x26a>
  }

error:
 8008588:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800859a:	7ffb      	ldrb	r3, [r7, #31]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	08013b14 	.word	0x08013b14

080085a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085b8:	e04c      	b.n	8008654 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c0:	d048      	beq.n	8008654 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80085c2:	f7fa fb21 	bl	8002c08 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d902      	bls.n	80085d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d13d      	bne.n	8008654 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f0:	d111      	bne.n	8008616 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fa:	d004      	beq.n	8008606 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d107      	bne.n	8008616 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861e:	d10f      	bne.n	8008640 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800863e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e00f      	b.n	8008674 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	429a      	cmp	r2, r3
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	429a      	cmp	r2, r3
 8008670:	d1a3      	bne.n	80085ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008688:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <SPI_EndRxTxTransaction+0x7c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <SPI_EndRxTxTransaction+0x80>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	0d5b      	lsrs	r3, r3, #21
 8008694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008698:	fb02 f303 	mul.w	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086a6:	d112      	bne.n	80086ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff ff78 	bl	80085a8 <SPI_WaitFlagStateUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d016      	beq.n	80086ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	f043 0220 	orr.w	r2, r3, #32
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e00f      	b.n	80086ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e4:	2b80      	cmp	r3, #128	; 0x80
 80086e6:	d0f2      	beq.n	80086ce <SPI_EndRxTxTransaction+0x52>
 80086e8:	e000      	b.n	80086ec <SPI_EndRxTxTransaction+0x70>
        break;
 80086ea:	bf00      	nop
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000064 	.word	0x20000064
 80086fc:	165e9f81 	.word	0x165e9f81

08008700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e0a1      	b.n	8008856 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a52      	ldr	r2, [pc, #328]	; (8008860 <HAL_TIM_Base_Init+0x160>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d045      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d040      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a4e      	ldr	r2, [pc, #312]	; (8008864 <HAL_TIM_Base_Init+0x164>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d03b      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a4c      	ldr	r2, [pc, #304]	; (8008868 <HAL_TIM_Base_Init+0x168>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d036      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a4b      	ldr	r2, [pc, #300]	; (800886c <HAL_TIM_Base_Init+0x16c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d031      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a49      	ldr	r2, [pc, #292]	; (8008870 <HAL_TIM_Base_Init+0x170>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d02c      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a48      	ldr	r2, [pc, #288]	; (8008874 <HAL_TIM_Base_Init+0x174>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d027      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a46      	ldr	r2, [pc, #280]	; (8008878 <HAL_TIM_Base_Init+0x178>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a45      	ldr	r2, [pc, #276]	; (800887c <HAL_TIM_Base_Init+0x17c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d01d      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a43      	ldr	r2, [pc, #268]	; (8008880 <HAL_TIM_Base_Init+0x180>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a42      	ldr	r2, [pc, #264]	; (8008884 <HAL_TIM_Base_Init+0x184>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a40      	ldr	r2, [pc, #256]	; (8008888 <HAL_TIM_Base_Init+0x188>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a3f      	ldr	r2, [pc, #252]	; (800888c <HAL_TIM_Base_Init+0x18c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a3d      	ldr	r2, [pc, #244]	; (8008890 <HAL_TIM_Base_Init+0x190>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_TIM_Base_Init+0xa8>
 800879e:	f44f 7189 	mov.w	r1, #274	; 0x112
 80087a2:	483c      	ldr	r0, [pc, #240]	; (8008894 <HAL_TIM_Base_Init+0x194>)
 80087a4:	f7f9 fe7b 	bl	800249e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d014      	beq.n	80087da <HAL_TIM_Base_Init+0xda>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d010      	beq.n	80087da <HAL_TIM_Base_Init+0xda>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	2b20      	cmp	r3, #32
 80087be:	d00c      	beq.n	80087da <HAL_TIM_Base_Init+0xda>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b40      	cmp	r3, #64	; 0x40
 80087c6:	d008      	beq.n	80087da <HAL_TIM_Base_Init+0xda>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b60      	cmp	r3, #96	; 0x60
 80087ce:	d004      	beq.n	80087da <HAL_TIM_Base_Init+0xda>
 80087d0:	f240 1113 	movw	r1, #275	; 0x113
 80087d4:	482f      	ldr	r0, [pc, #188]	; (8008894 <HAL_TIM_Base_Init+0x194>)
 80087d6:	f7f9 fe62 	bl	800249e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <HAL_TIM_Base_Init+0x100>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d009      	beq.n	8008800 <HAL_TIM_Base_Init+0x100>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f4:	d004      	beq.n	8008800 <HAL_TIM_Base_Init+0x100>
 80087f6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80087fa:	4826      	ldr	r0, [pc, #152]	; (8008894 <HAL_TIM_Base_Init+0x194>)
 80087fc:	f7f9 fe4f 	bl	800249e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_TIM_Base_Init+0x11a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	2b80      	cmp	r3, #128	; 0x80
 800880e:	d004      	beq.n	800881a <HAL_TIM_Base_Init+0x11a>
 8008810:	f240 1115 	movw	r1, #277	; 0x115
 8008814:	481f      	ldr	r0, [pc, #124]	; (8008894 <HAL_TIM_Base_Init+0x194>)
 8008816:	f7f9 fe42 	bl	800249e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fa f932 	bl	8002a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f000 fd48 	bl	80092dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40010000 	.word	0x40010000
 8008864:	40000400 	.word	0x40000400
 8008868:	40000800 	.word	0x40000800
 800886c:	40000c00 	.word	0x40000c00
 8008870:	40001000 	.word	0x40001000
 8008874:	40001400 	.word	0x40001400
 8008878:	40010400 	.word	0x40010400
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800
 8008888:	40001800 	.word	0x40001800
 800888c:	40001c00 	.word	0x40001c00
 8008890:	40002000 	.word	0x40002000
 8008894:	08013b4c 	.word	0x08013b4c

08008898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a33      	ldr	r2, [pc, #204]	; (8008974 <HAL_TIM_Base_Start_IT+0xdc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d045      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b2:	d040      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a2f      	ldr	r2, [pc, #188]	; (8008978 <HAL_TIM_Base_Start_IT+0xe0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d03b      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a2e      	ldr	r2, [pc, #184]	; (800897c <HAL_TIM_Base_Start_IT+0xe4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d036      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a2c      	ldr	r2, [pc, #176]	; (8008980 <HAL_TIM_Base_Start_IT+0xe8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d031      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a2b      	ldr	r2, [pc, #172]	; (8008984 <HAL_TIM_Base_Start_IT+0xec>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d02c      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a29      	ldr	r2, [pc, #164]	; (8008988 <HAL_TIM_Base_Start_IT+0xf0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d027      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a28      	ldr	r2, [pc, #160]	; (800898c <HAL_TIM_Base_Start_IT+0xf4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a26      	ldr	r2, [pc, #152]	; (8008990 <HAL_TIM_Base_Start_IT+0xf8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01d      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a25      	ldr	r2, [pc, #148]	; (8008994 <HAL_TIM_Base_Start_IT+0xfc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d018      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a23      	ldr	r2, [pc, #140]	; (8008998 <HAL_TIM_Base_Start_IT+0x100>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a22      	ldr	r2, [pc, #136]	; (800899c <HAL_TIM_Base_Start_IT+0x104>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a20      	ldr	r2, [pc, #128]	; (80089a0 <HAL_TIM_Base_Start_IT+0x108>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <HAL_TIM_Base_Start_IT+0x10c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0x9e>
 800892c:	f240 11b9 	movw	r1, #441	; 0x1b9
 8008930:	481d      	ldr	r0, [pc, #116]	; (80089a8 <HAL_TIM_Base_Start_IT+0x110>)
 8008932:	f7f9 fdb4 	bl	800249e <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0201 	orr.w	r2, r2, #1
 8008944:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b06      	cmp	r3, #6
 8008956:	d007      	beq.n	8008968 <HAL_TIM_Base_Start_IT+0xd0>
  {
    __HAL_TIM_ENABLE(htim);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	40010000 	.word	0x40010000
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40000c00 	.word	0x40000c00
 8008984:	40001000 	.word	0x40001000
 8008988:	40001400 	.word	0x40001400
 800898c:	40010400 	.word	0x40010400
 8008990:	40014000 	.word	0x40014000
 8008994:	40014400 	.word	0x40014400
 8008998:	40014800 	.word	0x40014800
 800899c:	40001800 	.word	0x40001800
 80089a0:	40001c00 	.word	0x40001c00
 80089a4:	40002000 	.word	0x40002000
 80089a8:	08013b4c 	.word	0x08013b4c

080089ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d122      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d11b      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f06f 0202 	mvn.w	r2, #2
 80089d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc56 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 80089f4:	e005      	b.n	8008a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fc48 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc59 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d122      	bne.n	8008a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	d11b      	bne.n	8008a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0204 	mvn.w	r2, #4
 8008a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc2c 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008a48:	e005      	b.n	8008a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fc1e 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fc2f 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0308 	and.w	r3, r3, #8
 8008a66:	2b08      	cmp	r3, #8
 8008a68:	d122      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d11b      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0208 	mvn.w	r2, #8
 8008a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2204      	movs	r2, #4
 8008a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fc02 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008a9c:	e005      	b.n	8008aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fbf4 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc05 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b10      	cmp	r3, #16
 8008abc:	d122      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d11b      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0210 	mvn.w	r2, #16
 8008ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2208      	movs	r2, #8
 8008ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fbd8 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008af0:	e005      	b.n	8008afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fbca 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fbdb 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10e      	bne.n	8008b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d107      	bne.n	8008b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0201 	mvn.w	r2, #1
 8008b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7f9 fbf2 	bl	8002314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	d10e      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	2b80      	cmp	r3, #128	; 0x80
 8008b4a:	d107      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fde2 	bl	8009720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b40      	cmp	r3, #64	; 0x40
 8008b68:	d10e      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fba0 	bl	80092c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d10e      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d107      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0220 	mvn.w	r2, #32
 8008bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fdac 	bl	800970c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_TIM_ConfigClockSource+0x18>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e347      	b.n	8009264 <HAL_TIM_ConfigClockSource+0x6a8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bec:	d029      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf6:	d024      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d020      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b10      	cmp	r3, #16
 8008c06:	d01c      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d018      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b30      	cmp	r3, #48	; 0x30
 8008c16:	d014      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d010      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b50      	cmp	r3, #80	; 0x50
 8008c26:	d00c      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b60      	cmp	r3, #96	; 0x60
 8008c2e:	d008      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b70      	cmp	r3, #112	; 0x70
 8008c36:	d004      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x86>
 8008c38:	f241 118b 	movw	r1, #4491	; 0x118b
 8008c3c:	488a      	ldr	r0, [pc, #552]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008c3e:	f7f9 fc2e 	bl	800249e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b40      	cmp	r3, #64	; 0x40
 8008c68:	f000 825c 	beq.w	8009124 <HAL_TIM_ConfigClockSource+0x568>
 8008c6c:	2b40      	cmp	r3, #64	; 0x40
 8008c6e:	d80f      	bhi.n	8008c90 <HAL_TIM_ConfigClockSource+0xd4>
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	f000 82b7 	beq.w	80091e4 <HAL_TIM_ConfigClockSource+0x628>
 8008c76:	2b10      	cmp	r3, #16
 8008c78:	d803      	bhi.n	8008c82 <HAL_TIM_ConfigClockSource+0xc6>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 82b2 	beq.w	80091e4 <HAL_TIM_ConfigClockSource+0x628>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c80:	e2e7      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	f000 82ae 	beq.w	80091e4 <HAL_TIM_ConfigClockSource+0x628>
 8008c88:	2b30      	cmp	r3, #48	; 0x30
 8008c8a:	f000 82ab 	beq.w	80091e4 <HAL_TIM_ConfigClockSource+0x628>
      break;
 8008c8e:	e2e0      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008c90:	2b70      	cmp	r3, #112	; 0x70
 8008c92:	d06a      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x1ae>
 8008c94:	2b70      	cmp	r3, #112	; 0x70
 8008c96:	d806      	bhi.n	8008ca6 <HAL_TIM_ConfigClockSource+0xea>
 8008c98:	2b50      	cmp	r3, #80	; 0x50
 8008c9a:	f000 8172 	beq.w	8008f82 <HAL_TIM_ConfigClockSource+0x3c6>
 8008c9e:	2b60      	cmp	r3, #96	; 0x60
 8008ca0:	f000 81cf 	beq.w	8009042 <HAL_TIM_ConfigClockSource+0x486>
      break;
 8008ca4:	e2d5      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
  switch (sClockSourceConfig->ClockSource)
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008caa:	d004      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb0:	f000 80f6 	beq.w	8008ea0 <HAL_TIM_ConfigClockSource+0x2e4>
      break;
 8008cb4:	e2cd      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a6c      	ldr	r2, [pc, #432]	; (8008e6c <HAL_TIM_ConfigClockSource+0x2b0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	f000 82c7 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	f000 82c1 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a67      	ldr	r2, [pc, #412]	; (8008e70 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	f000 82bb 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a65      	ldr	r2, [pc, #404]	; (8008e74 <HAL_TIM_ConfigClockSource+0x2b8>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	f000 82b5 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a63      	ldr	r2, [pc, #396]	; (8008e78 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	f000 82af 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a61      	ldr	r2, [pc, #388]	; (8008e7c <HAL_TIM_ConfigClockSource+0x2c0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	f000 82a9 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5f      	ldr	r2, [pc, #380]	; (8008e80 <HAL_TIM_ConfigClockSource+0x2c4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	f000 82a3 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a5d      	ldr	r2, [pc, #372]	; (8008e84 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	f000 829d 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a5b      	ldr	r2, [pc, #364]	; (8008e88 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	f000 8297 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a59      	ldr	r2, [pc, #356]	; (8008e8c <HAL_TIM_ConfigClockSource+0x2d0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	f000 8291 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a57      	ldr	r2, [pc, #348]	; (8008e90 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	f000 828b 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a55      	ldr	r2, [pc, #340]	; (8008e94 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	f000 8285 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a53      	ldr	r2, [pc, #332]	; (8008e98 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	f000 827f 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a51      	ldr	r2, [pc, #324]	; (8008e9c <HAL_TIM_ConfigClockSource+0x2e0>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	f000 8279 	beq.w	8009250 <HAL_TIM_ConfigClockSource+0x694>
 8008d5e:	f241 1197 	movw	r1, #4503	; 0x1197
 8008d62:	4841      	ldr	r0, [pc, #260]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008d64:	f7f9 fb9b 	bl	800249e <assert_failed>
      break;
 8008d68:	e272      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x694>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a3f      	ldr	r2, [pc, #252]	; (8008e6c <HAL_TIM_ConfigClockSource+0x2b0>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d027      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7c:	d022      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a3b      	ldr	r2, [pc, #236]	; (8008e70 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01d      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a39      	ldr	r2, [pc, #228]	; (8008e74 <HAL_TIM_ConfigClockSource+0x2b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <HAL_TIM_ConfigClockSource+0x2bc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a38      	ldr	r2, [pc, #224]	; (8008e84 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a37      	ldr	r2, [pc, #220]	; (8008e88 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a37      	ldr	r2, [pc, #220]	; (8008e94 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_TIM_ConfigClockSource+0x208>
 8008dba:	f241 119e 	movw	r1, #4510	; 0x119e
 8008dbe:	482a      	ldr	r0, [pc, #168]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008dc0:	f7f9 fb6d 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d013      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0x238>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd4:	d00e      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0x238>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dde:	d009      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0x238>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008de8:	d004      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0x238>
 8008dea:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8008dee:	481e      	ldr	r0, [pc, #120]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008df0:	f7f9 fb55 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dfc:	d014      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x26c>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d010      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x26c>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00c      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x26c>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d008      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x26c>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b0a      	cmp	r3, #10
 8008e1c:	d004      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x26c>
 8008e1e:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8008e22:	4811      	ldr	r0, [pc, #68]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008e24:	f7f9 fb3b 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d904      	bls.n	8008e3a <HAL_TIM_ConfigClockSource+0x27e>
 8008e30:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008e34:	480c      	ldr	r0, [pc, #48]	; (8008e68 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008e36:	f7f9 fb32 	bl	800249e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	6899      	ldr	r1, [r3, #8]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f000 fb61 	bl	8009510 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	609a      	str	r2, [r3, #8]
      break;
 8008e66:	e1f4      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
 8008e68:	08013b4c 	.word	0x08013b4c
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40001000 	.word	0x40001000
 8008e80:	40001400 	.word	0x40001400
 8008e84:	40010400 	.word	0x40010400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40014400 	.word	0x40014400
 8008e90:	40014800 	.word	0x40014800
 8008e94:	40001800 	.word	0x40001800
 8008e98:	40001c00 	.word	0x40001c00
 8008e9c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a97      	ldr	r2, [pc, #604]	; (8009104 <HAL_TIM_ConfigClockSource+0x548>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d01d      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb2:	d018      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a93      	ldr	r2, [pc, #588]	; (8009108 <HAL_TIM_ConfigClockSource+0x54c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d013      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a92      	ldr	r2, [pc, #584]	; (800910c <HAL_TIM_ConfigClockSource+0x550>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00e      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a90      	ldr	r2, [pc, #576]	; (8009110 <HAL_TIM_ConfigClockSource+0x554>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a8f      	ldr	r2, [pc, #572]	; (8009114 <HAL_TIM_ConfigClockSource+0x558>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x32a>
 8008edc:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8008ee0:	488d      	ldr	r0, [pc, #564]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8008ee2:	f7f9 fadc 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d013      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x35a>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef6:	d00e      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x35a>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f00:	d009      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x35a>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f0a:	d004      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x35a>
 8008f0c:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8008f10:	4881      	ldr	r0, [pc, #516]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f12:	f7f9 fac4 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f1e:	d014      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x38e>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x38e>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00c      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x38e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d008      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x38e>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b0a      	cmp	r3, #10
 8008f3e:	d004      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x38e>
 8008f40:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008f44:	4874      	ldr	r0, [pc, #464]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f46:	f7f9 faaa 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	2b0f      	cmp	r3, #15
 8008f50:	d904      	bls.n	8008f5c <HAL_TIM_ConfigClockSource+0x3a0>
 8008f52:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008f56:	4870      	ldr	r0, [pc, #448]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8008f58:	f7f9 faa1 	bl	800249e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6899      	ldr	r1, [r3, #8]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f000 fad0 	bl	8009510 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f7e:	609a      	str	r2, [r3, #8]
      break;
 8008f80:	e167      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a5f      	ldr	r2, [pc, #380]	; (8009104 <HAL_TIM_ConfigClockSource+0x548>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d027      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f94:	d022      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a5b      	ldr	r2, [pc, #364]	; (8009108 <HAL_TIM_ConfigClockSource+0x54c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d01d      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a59      	ldr	r2, [pc, #356]	; (800910c <HAL_TIM_ConfigClockSource+0x550>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d018      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a58      	ldr	r2, [pc, #352]	; (8009110 <HAL_TIM_ConfigClockSource+0x554>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d013      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a56      	ldr	r2, [pc, #344]	; (8009114 <HAL_TIM_ConfigClockSource+0x558>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00e      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a56      	ldr	r2, [pc, #344]	; (800911c <HAL_TIM_ConfigClockSource+0x560>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d009      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a54      	ldr	r2, [pc, #336]	; (8009120 <HAL_TIM_ConfigClockSource+0x564>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d004      	beq.n	8008fdc <HAL_TIM_ConfigClockSource+0x420>
 8008fd2:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8008fd6:	4850      	ldr	r0, [pc, #320]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8008fd8:	f7f9 fa61 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe4:	d014      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0x454>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d010      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0x454>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00c      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0x454>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d008      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0x454>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2b0a      	cmp	r3, #10
 8009004:	d004      	beq.n	8009010 <HAL_TIM_ConfigClockSource+0x454>
 8009006:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800900a:	4843      	ldr	r0, [pc, #268]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 800900c:	f7f9 fa47 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b0f      	cmp	r3, #15
 8009016:	d904      	bls.n	8009022 <HAL_TIM_ConfigClockSource+0x466>
 8009018:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800901c:	483e      	ldr	r0, [pc, #248]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 800901e:	f7f9 fa3e 	bl	800249e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	f000 f9f4 	bl	800941c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2150      	movs	r1, #80	; 0x50
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fa4d 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009040:	e107      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2f      	ldr	r2, [pc, #188]	; (8009104 <HAL_TIM_ConfigClockSource+0x548>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d027      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009054:	d022      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a2b      	ldr	r2, [pc, #172]	; (8009108 <HAL_TIM_ConfigClockSource+0x54c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d01d      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a29      	ldr	r2, [pc, #164]	; (800910c <HAL_TIM_ConfigClockSource+0x550>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d018      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a28      	ldr	r2, [pc, #160]	; (8009110 <HAL_TIM_ConfigClockSource+0x554>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a26      	ldr	r2, [pc, #152]	; (8009114 <HAL_TIM_ConfigClockSource+0x558>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00e      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a26      	ldr	r2, [pc, #152]	; (800911c <HAL_TIM_ConfigClockSource+0x560>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d009      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a24      	ldr	r2, [pc, #144]	; (8009120 <HAL_TIM_ConfigClockSource+0x564>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <HAL_TIM_ConfigClockSource+0x4e0>
 8009092:	f241 11da 	movw	r1, #4570	; 0x11da
 8009096:	4820      	ldr	r0, [pc, #128]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 8009098:	f7f9 fa01 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090a4:	d014      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x514>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x514>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00c      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x514>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d008      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x514>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b0a      	cmp	r3, #10
 80090c4:	d004      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x514>
 80090c6:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80090ca:	4813      	ldr	r0, [pc, #76]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 80090cc:	f7f9 f9e7 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b0f      	cmp	r3, #15
 80090d6:	d904      	bls.n	80090e2 <HAL_TIM_ConfigClockSource+0x526>
 80090d8:	f241 11de 	movw	r1, #4574	; 0x11de
 80090dc:	480e      	ldr	r0, [pc, #56]	; (8009118 <HAL_TIM_ConfigClockSource+0x55c>)
 80090de:	f7f9 f9de 	bl	800249e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6859      	ldr	r1, [r3, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f000 f9c3 	bl	800947a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2160      	movs	r1, #96	; 0x60
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f9ed 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009100:	e0a7      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
 8009102:	bf00      	nop
 8009104:	40010000 	.word	0x40010000
 8009108:	40000400 	.word	0x40000400
 800910c:	40000800 	.word	0x40000800
 8009110:	40000c00 	.word	0x40000c00
 8009114:	40010400 	.word	0x40010400
 8009118:	08013b4c 	.word	0x08013b4c
 800911c:	40014000 	.word	0x40014000
 8009120:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a50      	ldr	r2, [pc, #320]	; (800926c <HAL_TIM_ConfigClockSource+0x6b0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d027      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009136:	d022      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a4c      	ldr	r2, [pc, #304]	; (8009270 <HAL_TIM_ConfigClockSource+0x6b4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d01d      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a4b      	ldr	r2, [pc, #300]	; (8009274 <HAL_TIM_ConfigClockSource+0x6b8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d018      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a49      	ldr	r2, [pc, #292]	; (8009278 <HAL_TIM_ConfigClockSource+0x6bc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a48      	ldr	r2, [pc, #288]	; (800927c <HAL_TIM_ConfigClockSource+0x6c0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00e      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a46      	ldr	r2, [pc, #280]	; (8009280 <HAL_TIM_ConfigClockSource+0x6c4>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d009      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a45      	ldr	r2, [pc, #276]	; (8009284 <HAL_TIM_ConfigClockSource+0x6c8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d004      	beq.n	800917e <HAL_TIM_ConfigClockSource+0x5c2>
 8009174:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8009178:	4843      	ldr	r0, [pc, #268]	; (8009288 <HAL_TIM_ConfigClockSource+0x6cc>)
 800917a:	f7f9 f990 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009186:	d014      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x5f6>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d010      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x5f6>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00c      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x5f6>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d008      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x5f6>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b0a      	cmp	r3, #10
 80091a6:	d004      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x5f6>
 80091a8:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80091ac:	4836      	ldr	r0, [pc, #216]	; (8009288 <HAL_TIM_ConfigClockSource+0x6cc>)
 80091ae:	f7f9 f976 	bl	800249e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b0f      	cmp	r3, #15
 80091b8:	d904      	bls.n	80091c4 <HAL_TIM_ConfigClockSource+0x608>
 80091ba:	f241 11ee 	movw	r1, #4590	; 0x11ee
 80091be:	4832      	ldr	r0, [pc, #200]	; (8009288 <HAL_TIM_ConfigClockSource+0x6cc>)
 80091c0:	f7f9 f96d 	bl	800249e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	6859      	ldr	r1, [r3, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	461a      	mov	r2, r3
 80091d2:	f000 f923 	bl	800941c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2140      	movs	r1, #64	; 0x40
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f97c 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 80091e2:	e036      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a20      	ldr	r2, [pc, #128]	; (800926c <HAL_TIM_ConfigClockSource+0x6b0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d027      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f6:	d022      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1c      	ldr	r2, [pc, #112]	; (8009270 <HAL_TIM_ConfigClockSource+0x6b4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d01d      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1b      	ldr	r2, [pc, #108]	; (8009274 <HAL_TIM_ConfigClockSource+0x6b8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d018      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <HAL_TIM_ConfigClockSource+0x6bc>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d013      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a18      	ldr	r2, [pc, #96]	; (800927c <HAL_TIM_ConfigClockSource+0x6c0>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00e      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a16      	ldr	r2, [pc, #88]	; (8009280 <HAL_TIM_ConfigClockSource+0x6c4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d009      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a15      	ldr	r2, [pc, #84]	; (8009284 <HAL_TIM_ConfigClockSource+0x6c8>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d004      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x682>
 8009234:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8009238:	4813      	ldr	r0, [pc, #76]	; (8009288 <HAL_TIM_ConfigClockSource+0x6cc>)
 800923a:	f7f9 f930 	bl	800249e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f000 f946 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 800924e:	e000      	b.n	8009252 <HAL_TIM_ConfigClockSource+0x696>
      break;
 8009250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40010000 	.word	0x40010000
 8009270:	40000400 	.word	0x40000400
 8009274:	40000800 	.word	0x40000800
 8009278:	40000c00 	.word	0x40000c00
 800927c:	40010400 	.word	0x40010400
 8009280:	40014000 	.word	0x40014000
 8009284:	40001800 	.word	0x40001800
 8009288:	08013b4c 	.word	0x08013b4c

0800928c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a40      	ldr	r2, [pc, #256]	; (80093f0 <TIM_Base_SetConfig+0x114>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d013      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fa:	d00f      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3d      	ldr	r2, [pc, #244]	; (80093f4 <TIM_Base_SetConfig+0x118>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00b      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a3c      	ldr	r2, [pc, #240]	; (80093f8 <TIM_Base_SetConfig+0x11c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d007      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a3b      	ldr	r2, [pc, #236]	; (80093fc <TIM_Base_SetConfig+0x120>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d003      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a3a      	ldr	r2, [pc, #232]	; (8009400 <TIM_Base_SetConfig+0x124>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d108      	bne.n	800932e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2f      	ldr	r2, [pc, #188]	; (80093f0 <TIM_Base_SetConfig+0x114>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d02b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933c:	d027      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2c      	ldr	r2, [pc, #176]	; (80093f4 <TIM_Base_SetConfig+0x118>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d023      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a2b      	ldr	r2, [pc, #172]	; (80093f8 <TIM_Base_SetConfig+0x11c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01f      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <TIM_Base_SetConfig+0x120>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d01b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a29      	ldr	r2, [pc, #164]	; (8009400 <TIM_Base_SetConfig+0x124>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d017      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a28      	ldr	r2, [pc, #160]	; (8009404 <TIM_Base_SetConfig+0x128>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a27      	ldr	r2, [pc, #156]	; (8009408 <TIM_Base_SetConfig+0x12c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00f      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a26      	ldr	r2, [pc, #152]	; (800940c <TIM_Base_SetConfig+0x130>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a25      	ldr	r2, [pc, #148]	; (8009410 <TIM_Base_SetConfig+0x134>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a24      	ldr	r2, [pc, #144]	; (8009414 <TIM_Base_SetConfig+0x138>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a23      	ldr	r2, [pc, #140]	; (8009418 <TIM_Base_SetConfig+0x13c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d108      	bne.n	80093a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a0a      	ldr	r2, [pc, #40]	; (80093f0 <TIM_Base_SetConfig+0x114>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_Base_SetConfig+0xf8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a0c      	ldr	r2, [pc, #48]	; (8009400 <TIM_Base_SetConfig+0x124>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d103      	bne.n	80093dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	615a      	str	r2, [r3, #20]
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40000400 	.word	0x40000400
 80093f8:	40000800 	.word	0x40000800
 80093fc:	40000c00 	.word	0x40000c00
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40014400 	.word	0x40014400
 800940c:	40014800 	.word	0x40014800
 8009410:	40001800 	.word	0x40001800
 8009414:	40001c00 	.word	0x40001c00
 8009418:	40002000 	.word	0x40002000

0800941c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	f023 0201 	bic.w	r2, r3, #1
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f023 030a 	bic.w	r3, r3, #10
 8009458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	621a      	str	r2, [r3, #32]
}
 800946e:	bf00      	nop
 8009470:	371c      	adds	r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800947a:	b480      	push	{r7}
 800947c:	b087      	sub	sp, #28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f023 0210 	bic.w	r2, r3, #16
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	621a      	str	r2, [r3, #32]
}
 80094ce:	bf00      	nop
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f043 0307 	orr.w	r3, r3, #7
 80094fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	609a      	str	r2, [r3, #8]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800952a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	021a      	lsls	r2, r3, #8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	431a      	orrs	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4313      	orrs	r3, r2
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a61      	ldr	r2, [pc, #388]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d027      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956c:	d022      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a5d      	ldr	r2, [pc, #372]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01d      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a5b      	ldr	r2, [pc, #364]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d018      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a5a      	ldr	r2, [pc, #360]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d013      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a58      	ldr	r2, [pc, #352]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00e      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a57      	ldr	r2, [pc, #348]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d009      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a55      	ldr	r2, [pc, #340]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d004      	beq.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095aa:	f240 6164 	movw	r1, #1636	; 0x664
 80095ae:	4854      	ldr	r0, [pc, #336]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80095b0:	f7f8 ff75 	bl	800249e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d020      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	d01c      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	d018      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b30      	cmp	r3, #48	; 0x30
 80095d2:	d014      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	d010      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b50      	cmp	r3, #80	; 0x50
 80095e2:	d00c      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b60      	cmp	r3, #96	; 0x60
 80095ea:	d008      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b70      	cmp	r3, #112	; 0x70
 80095f2:	d004      	beq.n	80095fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095f4:	f240 6165 	movw	r1, #1637	; 0x665
 80095f8:	4841      	ldr	r0, [pc, #260]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80095fa:	f7f8 ff50 	bl	800249e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d008      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800960e:	f240 6166 	movw	r1, #1638	; 0x666
 8009612:	483b      	ldr	r0, [pc, #236]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009614:	f7f8 ff43 	bl	800249e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009622:	2302      	movs	r3, #2
 8009624:	e05a      	b.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2202      	movs	r2, #2
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1f      	ldr	r2, [pc, #124]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d022      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009672:	d01d      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a1b      	ldr	r2, [pc, #108]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d018      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a1a      	ldr	r2, [pc, #104]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d013      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a18      	ldr	r2, [pc, #96]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00e      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a19      	ldr	r2, [pc, #100]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d009      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a18      	ldr	r2, [pc, #96]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d004      	beq.n	80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10c      	bne.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40010000 	.word	0x40010000
 80096e8:	40000400 	.word	0x40000400
 80096ec:	40000800 	.word	0x40000800
 80096f0:	40000c00 	.word	0x40000c00
 80096f4:	40001000 	.word	0x40001000
 80096f8:	40001400 	.word	0x40001400
 80096fc:	40010400 	.word	0x40010400
 8009700:	08013b84 	.word	0x08013b84
 8009704:	40014000 	.word	0x40014000
 8009708:	40001800 	.word	0x40001800

0800970c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009734:	b084      	sub	sp, #16
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	f107 001c 	add.w	r0, r7, #28
 8009742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	2b01      	cmp	r3, #1
 800974a:	d122      	bne.n	8009792 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	2b01      	cmp	r3, #1
 8009778:	d105      	bne.n	8009786 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f94a 	bl	8009a20 <USB_CoreReset>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
 8009790:	e01a      	b.n	80097c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f93e 	bl	8009a20 <USB_CoreReset>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38
 80097ba:	e005      	b.n	80097c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d10b      	bne.n	80097e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f043 0206 	orr.w	r2, r3, #6
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f043 0220 	orr.w	r2, r3, #32
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097f2:	b004      	add	sp, #16
 80097f4:	4770      	bx	lr

080097f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f043 0201 	orr.w	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f023 0201 	bic.w	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d106      	bne.n	8009866 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]
 8009864:	e00b      	b.n	800987e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	60da      	str	r2, [r3, #12]
 8009878:	e001      	b.n	800987e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e003      	b.n	8009886 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800987e:	2032      	movs	r0, #50	; 0x32
 8009880:	f7f9 f9ce 	bl	8002c20 <HAL_Delay>

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	019b      	lsls	r3, r3, #6
 80098a2:	f043 0220 	orr.w	r2, r3, #32
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a09      	ldr	r2, [pc, #36]	; (80098d8 <USB_FlushTxFifo+0x48>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d901      	bls.n	80098bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e006      	b.n	80098ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	d0f0      	beq.n	80098aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	00030d40 	.word	0x00030d40

080098dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2210      	movs	r2, #16
 80098ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <USB_FlushRxFifo+0x40>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d901      	bls.n	8009900 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e006      	b.n	800990e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b10      	cmp	r3, #16
 800990a:	d0f0      	beq.n	80098ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	00030d40 	.word	0x00030d40

08009920 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009920:	b480      	push	{r7}
 8009922:	b089      	sub	sp, #36	; 0x24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4611      	mov	r1, r2
 800992c:	461a      	mov	r2, r3
 800992e:	460b      	mov	r3, r1
 8009930:	71fb      	strb	r3, [r7, #7]
 8009932:	4613      	mov	r3, r2
 8009934:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800993e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11a      	bne.n	800997c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009946:	88bb      	ldrh	r3, [r7, #4]
 8009948:	3303      	adds	r3, #3
 800994a:	089b      	lsrs	r3, r3, #2
 800994c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800994e:	2300      	movs	r3, #0
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	e00f      	b.n	8009974 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	031a      	lsls	r2, r3, #12
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4413      	add	r3, r2
 800995c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009960:	461a      	mov	r2, r3
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	3304      	adds	r3, #4
 800996c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	3301      	adds	r3, #1
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	429a      	cmp	r2, r3
 800997a:	d3eb      	bcc.n	8009954 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3724      	adds	r7, #36	; 0x24
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800998a:	b480      	push	{r7}
 800998c:	b089      	sub	sp, #36	; 0x24
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	4613      	mov	r3, r2
 8009996:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80099a0:	88fb      	ldrh	r3, [r7, #6]
 80099a2:	3303      	adds	r3, #3
 80099a4:	089b      	lsrs	r3, r3, #2
 80099a6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e00b      	b.n	80099c6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	3304      	adds	r3, #4
 80099be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	3301      	adds	r3, #1
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d3ef      	bcc.n	80099ae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80099ce:	69fb      	ldr	r3, [r7, #28]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3724      	adds	r7, #36	; 0x24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4013      	ands	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <USB_CoreReset+0x64>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d901      	bls.n	8009a3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e01b      	b.n	8009a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	daf2      	bge.n	8009a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f043 0201 	orr.w	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <USB_CoreReset+0x64>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d901      	bls.n	8009a68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e006      	b.n	8009a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d0f0      	beq.n	8009a56 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	00030d40 	.word	0x00030d40

08009a88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a88:	b084      	sub	sp, #16
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	f107 001c 	add.w	r0, r7, #28
 8009a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d018      	beq.n	8009b0c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d10a      	bne.n	8009af6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009aee:	f043 0304 	orr.w	r3, r3, #4
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	e014      	b.n	8009b20 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b04:	f023 0304 	bic.w	r3, r3, #4
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	e009      	b.n	8009b20 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b1a:	f023 0304 	bic.w	r3, r3, #4
 8009b1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009b20:	2110      	movs	r1, #16
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff feb4 	bl	8009890 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fed7 	bl	80098dc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e015      	b.n	8009b60 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	461a      	mov	r2, r3
 8009b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b54:	461a      	mov	r2, r3
 8009b56:	2300      	movs	r3, #0
 8009b58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d3e5      	bcc.n	8009b34 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009b68:	2101      	movs	r1, #1
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8ac 	bl	8009cc8 <USB_DriveVbus>

  HAL_Delay(200U);
 8009b70:	20c8      	movs	r0, #200	; 0xc8
 8009b72:	f7f9 f855 	bl	8002c20 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b82:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a14      	ldr	r2, [pc, #80]	; (8009bec <USB_HostInit+0x164>)
 8009b9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <USB_HostInit+0x168>)
 8009ba2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009ba6:	e009      	b.n	8009bbc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2280      	movs	r2, #128	; 0x80
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a10      	ldr	r2, [pc, #64]	; (8009bf4 <USB_HostInit+0x16c>)
 8009bb2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a10      	ldr	r2, [pc, #64]	; (8009bf8 <USB_HostInit+0x170>)
 8009bb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d105      	bne.n	8009bce <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f043 0210 	orr.w	r2, r3, #16
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <USB_HostInit+0x174>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009be6:	b004      	add	sp, #16
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	01000200 	.word	0x01000200
 8009bf0:	00e00300 	.word	0x00e00300
 8009bf4:	00600080 	.word	0x00600080
 8009bf8:	004000e0 	.word	0x004000e0
 8009bfc:	a3200008 	.word	0xa3200008

08009c00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c1e:	f023 0303 	bic.w	r3, r3, #3
 8009c22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	68f9      	ldr	r1, [r7, #12]
 8009c34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d107      	bne.n	8009c52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009c4e:	6053      	str	r3, [r2, #4]
 8009c50:	e009      	b.n	8009c66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d106      	bne.n	8009c66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f241 7370 	movw	r3, #6000	; 0x1770
 8009c64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ca4:	2064      	movs	r0, #100	; 0x64
 8009ca6:	f7f8 ffbb 	bl	8002c20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009cb8:	200a      	movs	r0, #10
 8009cba:	f7f8 ffb1 	bl	8002c20 <HAL_Delay>

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009cec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <USB_DriveVbus+0x44>
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d106      	bne.n	8009d0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d16:	d109      	bne.n	8009d2c <USB_DriveVbus+0x64>
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	0c5b      	lsrs	r3, r3, #17
 8009d58:	f003 0303 	and.w	r3, r3, #3
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	b29b      	uxth	r3, r3
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
	...

08009d8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	70fb      	strb	r3, [r7, #3]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70bb      	strb	r3, [r7, #2]
 8009da2:	4613      	mov	r3, r2
 8009da4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009dc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d87e      	bhi.n	8009ec8 <USB_HC_Init+0x13c>
 8009dca:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <USB_HC_Init+0x44>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009de1 	.word	0x08009de1
 8009dd4:	08009e8b 	.word	0x08009e8b
 8009dd8:	08009de1 	.word	0x08009de1
 8009ddc:	08009e4d 	.word	0x08009e4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dec:	461a      	mov	r2, r3
 8009dee:	f240 439d 	movw	r3, #1181	; 0x49d
 8009df2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da10      	bge.n	8009e1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e1a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009e1c:	e057      	b.n	8009ece <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d051      	beq.n	8009ece <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	78fa      	ldrb	r2, [r7, #3]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e48:	60d3      	str	r3, [r2, #12]
      break;
 8009e4a:	e040      	b.n	8009ece <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8009e5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da34      	bge.n	8009ed2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	78fa      	ldrb	r2, [r7, #3]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e88:	e023      	b.n	8009ed2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e8a:	78fb      	ldrb	r3, [r7, #3]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e96:	461a      	mov	r2, r3
 8009e98:	f240 2325 	movw	r3, #549	; 0x225
 8009e9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da17      	bge.n	8009ed6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ec0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009ec4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ec6:	e006      	b.n	8009ed6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
      break;
 8009ecc:	e004      	b.n	8009ed8 <USB_HC_Init+0x14c>
      break;
 8009ece:	bf00      	nop
 8009ed0:	e002      	b.n	8009ed8 <USB_HC_Init+0x14c>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e000      	b.n	8009ed8 <USB_HC_Init+0x14c>
      break;
 8009ed6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009f02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da03      	bge.n	8009f12 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f0e:	613b      	str	r3, [r7, #16]
 8009f10:	e001      	b.n	8009f16 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d103      	bne.n	8009f26 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	e001      	b.n	8009f2a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f2a:	787b      	ldrb	r3, [r7, #1]
 8009f2c:	059b      	lsls	r3, r3, #22
 8009f2e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f32:	78bb      	ldrb	r3, [r7, #2]
 8009f34:	02db      	lsls	r3, r3, #11
 8009f36:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f3a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f40:	049b      	lsls	r3, r3, #18
 8009f42:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f46:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f4e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	0159      	lsls	r1, r3, #5
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	440b      	add	r3, r1
 8009f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f60:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f66:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009f68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d10f      	bne.n	8009f90 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f8e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop

08009fa0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08c      	sub	sp, #48	; 0x30
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d028      	beq.n	800a01c <USB_HC_StartXfer+0x7c>
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d124      	bne.n	800a01c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <USB_HC_StartXfer+0x50>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	795b      	ldrb	r3, [r3, #5]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d107      	bne.n	8009ff0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fa30 	bl	800a44c <USB_DoPing>
      return HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e114      	b.n	800a21a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d112      	bne.n	800a01c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	6a3a      	ldr	r2, [r7, #32]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a010:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a014:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d018      	beq.n	800a056 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	8912      	ldrh	r2, [r2, #8]
 800a02c:	4413      	add	r3, r2
 800a02e:	3b01      	subs	r3, #1
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	8912      	ldrh	r2, [r2, #8]
 800a034:	fbb3 f3f2 	udiv	r3, r3, r2
 800a038:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a03a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a03c:	8b7b      	ldrh	r3, [r7, #26]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d90b      	bls.n	800a05a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a042:	8b7b      	ldrh	r3, [r7, #26]
 800a044:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	8912      	ldrh	r2, [r2, #8]
 800a04c:	fb02 f203 	mul.w	r2, r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	611a      	str	r2, [r3, #16]
 800a054:	e001      	b.n	800a05a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a056:	2301      	movs	r3, #1
 800a058:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	78db      	ldrb	r3, [r3, #3]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d006      	beq.n	800a070 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	8912      	ldrh	r2, [r2, #8]
 800a068:	fb02 f203 	mul.w	r2, r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a07a:	04d9      	lsls	r1, r3, #19
 800a07c:	4b69      	ldr	r3, [pc, #420]	; (800a224 <USB_HC_StartXfer+0x284>)
 800a07e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a080:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	7a9b      	ldrb	r3, [r3, #10]
 800a086:	075b      	lsls	r3, r3, #29
 800a088:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a08c:	69f9      	ldr	r1, [r7, #28]
 800a08e:	0148      	lsls	r0, r1, #5
 800a090:	6a39      	ldr	r1, [r7, #32]
 800a092:	4401      	add	r1, r0
 800a094:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a098:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a09a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	68d9      	ldr	r1, [r3, #12]
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b2:	460a      	mov	r2, r1
 800a0b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bf0c      	ite	eq
 800a0c6:	2301      	moveq	r3, #1
 800a0c8:	2300      	movne	r3, #0
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69fa      	ldr	r2, [r7, #28]
 800a0de:	0151      	lsls	r1, r2, #5
 800a0e0:	6a3a      	ldr	r2, [r7, #32]
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	7e7b      	ldrb	r3, [r7, #25]
 800a0fe:	075b      	lsls	r3, r3, #29
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	0148      	lsls	r0, r1, #5
 800a104:	6a39      	ldr	r1, [r7, #32]
 800a106:	4401      	add	r1, r0
 800a108:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a10c:	4313      	orrs	r3, r2
 800a10e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a42      	ldr	r2, [pc, #264]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a120:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a122:	4b41      	ldr	r3, [pc, #260]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a12c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d006      	beq.n	800a144 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a136:	4b3c      	ldr	r3, [pc, #240]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a13e:	4a3a      	ldr	r2, [pc, #232]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	e005      	b.n	800a150 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a144:	4b38      	ldr	r3, [pc, #224]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a14c:	4a36      	ldr	r2, [pc, #216]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a14e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a150:	4b35      	ldr	r3, [pc, #212]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a158:	4a33      	ldr	r2, [pc, #204]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a15a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	4413      	add	r3, r2
 800a164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a168:	461a      	mov	r2, r3
 800a16a:	4b2f      	ldr	r3, [pc, #188]	; (800a228 <USB_HC_StartXfer+0x288>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	e04f      	b.n	800a21a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	78db      	ldrb	r3, [r3, #3]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d14a      	bne.n	800a218 <USB_HC_StartXfer+0x278>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d046      	beq.n	800a218 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	79db      	ldrb	r3, [r3, #7]
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d830      	bhi.n	800a1f4 <USB_HC_StartXfer+0x254>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <USB_HC_StartXfer+0x1f8>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1cd 	.word	0x0800a1cd
 800a1a0:	0800a1a9 	.word	0x0800a1a9
 800a1a4:	0800a1cd 	.word	0x0800a1cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	3303      	adds	r3, #3
 800a1ae:	089b      	lsrs	r3, r3, #2
 800a1b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a1b2:	8afa      	ldrh	r2, [r7, #22]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d91c      	bls.n	800a1f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	f043 0220 	orr.w	r2, r3, #32
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1ca:	e015      	b.n	800a1f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	3303      	adds	r3, #3
 800a1d2:	089b      	lsrs	r3, r3, #2
 800a1d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a1d6:	8afa      	ldrh	r2, [r7, #22]
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d90a      	bls.n	800a1fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1f2:	e003      	b.n	800a1fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <USB_HC_StartXfer+0x25e>
        break;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <USB_HC_StartXfer+0x25e>
        break;
 800a1fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	68d9      	ldr	r1, [r3, #12]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	785a      	ldrb	r2, [r3, #1]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	b298      	uxth	r0, r3
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4603      	mov	r3, r0
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fb84 	bl	8009920 <USB_WritePacket>
  }

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3728      	adds	r7, #40	; 0x28
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	1ff80000 	.word	0x1ff80000
 800a228:	200002a0 	.word	0x200002a0

0800a22c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	b29b      	uxth	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a24e:	b480      	push	{r7}
 800a250:	b087      	sub	sp, #28
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	0c9b      	lsrs	r3, r3, #18
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <USB_HC_Halt+0x3a>
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d16c      	bne.n	800a362 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2a6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d143      	bne.n	800a33c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a30e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a312:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	3301      	adds	r3, #1
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a320:	d81d      	bhi.n	800a35e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a338:	d0ec      	beq.n	800a314 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a33a:	e080      	b.n	800a43e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4413      	add	r3, r2
 800a344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	440a      	add	r2, r1
 800a352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a35a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a35c:	e06f      	b.n	800a43e <USB_HC_Halt+0x1f0>
          break;
 800a35e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a360:	e06d      	b.n	800a43e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	440a      	add	r2, r1
 800a378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a37c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a380:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d143      	bne.n	800a41a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3f0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3fe:	d81d      	bhi.n	800a43c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	4413      	add	r3, r2
 800a408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a416:	d0ec      	beq.n	800a3f2 <USB_HC_Halt+0x1a4>
 800a418:	e011      	b.n	800a43e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	4413      	add	r3, r2
 800a422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	e000      	b.n	800a43e <USB_HC_Halt+0x1f0>
          break;
 800a43c:	bf00      	nop
    }
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a460:	2301      	movs	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	04da      	lsls	r2, r3, #19
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <USB_DoPing+0x74>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	440a      	add	r2, r1
 800a474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a47c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	4413      	add	r3, r2
 800a486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a494:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a49c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	371c      	adds	r7, #28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	1ff80000 	.word	0x1ff80000

0800a4c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff f99f 	bl	8009818 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a4da:	2110      	movs	r1, #16
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff f9d7 	bl	8009890 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff f9fa 	bl	80098dc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]
 800a4ec:	e01f      	b.n	800a52e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a504:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a50c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a514:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a522:	461a      	mov	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3301      	adds	r3, #1
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b0f      	cmp	r3, #15
 800a532:	d9dc      	bls.n	800a4ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a534:	2300      	movs	r3, #0
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	e034      	b.n	800a5a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a550:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a558:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a560:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56e:	461a      	mov	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3301      	adds	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a580:	d80c      	bhi.n	800a59c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a598:	d0ec      	beq.n	800a574 <USB_StopHost+0xb0>
 800a59a:	e000      	b.n	800a59e <USB_StopHost+0xda>
        break;
 800a59c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	613b      	str	r3, [r7, #16]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b0f      	cmp	r3, #15
 800a5a8:	d9c7      	bls.n	800a53a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff f918 	bl	80097f6 <USB_EnableGlobalInt>

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a5d4:	4904      	ldr	r1, [pc, #16]	; (800a5e8 <MX_FATFS_Init+0x18>)
 800a5d6:	4805      	ldr	r0, [pc, #20]	; (800a5ec <MX_FATFS_Init+0x1c>)
 800a5d8:	f006 fac6 	bl	8010b68 <FATFS_LinkDriver>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <MX_FATFS_Init+0x20>)
 800a5e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a5e4:	bf00      	nop
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200031bc 	.word	0x200031bc
 800a5ec:	08013c2c 	.word	0x08013c2c
 800a5f0:	20003624 	.word	0x20003624

0800a5f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a5f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a62a:	79fb      	ldrb	r3, [r7, #7]
 800a62c:	4619      	mov	r1, r3
 800a62e:	4808      	ldr	r0, [pc, #32]	; (800a650 <USBH_status+0x34>)
 800a630:	f001 fa0f 	bl	800ba52 <USBH_MSC_UnitIsReady>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <USBH_status+0x24>
  {
    res = RES_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
 800a63e:	e001      	b.n	800a644 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a644:	7bfb      	ldrb	r3, [r7, #15]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20003628 	.word	0x20003628

0800a654 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b094      	sub	sp, #80	; 0x50
 800a658:	af02      	add	r7, sp, #8
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	607a      	str	r2, [r7, #4]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a66a:	7bf9      	ldrb	r1, [r7, #15]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4812      	ldr	r0, [pc, #72]	; (800a6c0 <USBH_read+0x6c>)
 800a676:	f001 fa36 	bl	800bae6 <USBH_MSC_Read>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <USBH_read+0x34>
  {
    res = RES_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a686:	e015      	b.n	800a6b4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a688:	f107 0210 	add.w	r2, r7, #16
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	4619      	mov	r1, r3
 800a690:	480b      	ldr	r0, [pc, #44]	; (800a6c0 <USBH_read+0x6c>)
 800a692:	f001 fa04 	bl	800ba9e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a696:	7f7b      	ldrb	r3, [r7, #29]
 800a698:	2b28      	cmp	r3, #40	; 0x28
 800a69a:	d003      	beq.n	800a6a4 <USBH_read+0x50>
 800a69c:	2b3a      	cmp	r3, #58	; 0x3a
 800a69e:	d001      	beq.n	800a6a4 <USBH_read+0x50>
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d103      	bne.n	800a6ac <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6aa:	e003      	b.n	800a6b4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a6b2:	bf00      	nop
    }
  }

  return res;
 800a6b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3748      	adds	r7, #72	; 0x48
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20003628 	.word	0x20003628

0800a6c4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b094      	sub	sp, #80	; 0x50
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a6da:	7bf9      	ldrb	r1, [r7, #15]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	4817      	ldr	r0, [pc, #92]	; (800a744 <USBH_write+0x80>)
 800a6e6:	f001 fa67 	bl	800bbb8 <USBH_MSC_Write>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <USBH_write+0x34>
  {
    res = RES_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a6f6:	e01f      	b.n	800a738 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a6f8:	f107 0210 	add.w	r2, r7, #16
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4810      	ldr	r0, [pc, #64]	; (800a744 <USBH_write+0x80>)
 800a702:	f001 f9cc 	bl	800ba9e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a706:	7f7b      	ldrb	r3, [r7, #29]
 800a708:	2b27      	cmp	r3, #39	; 0x27
 800a70a:	d009      	beq.n	800a720 <USBH_write+0x5c>
 800a70c:	2b27      	cmp	r3, #39	; 0x27
 800a70e:	dc02      	bgt.n	800a716 <USBH_write+0x52>
 800a710:	2b04      	cmp	r3, #4
 800a712:	d009      	beq.n	800a728 <USBH_write+0x64>
 800a714:	e00c      	b.n	800a730 <USBH_write+0x6c>
 800a716:	2b28      	cmp	r3, #40	; 0x28
 800a718:	d006      	beq.n	800a728 <USBH_write+0x64>
 800a71a:	2b3a      	cmp	r3, #58	; 0x3a
 800a71c:	d004      	beq.n	800a728 <USBH_write+0x64>
 800a71e:	e007      	b.n	800a730 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a720:	2302      	movs	r3, #2
 800a722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a726:	e007      	b.n	800a738 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a728:	2303      	movs	r3, #3
 800a72a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a72e:	e003      	b.n	800a738 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a736:	bf00      	nop
    }
  }

  return res;
 800a738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3748      	adds	r7, #72	; 0x48
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20003628 	.word	0x20003628

0800a748 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b090      	sub	sp, #64	; 0x40
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	603a      	str	r2, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
 800a754:	460b      	mov	r3, r1
 800a756:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a75e:	79bb      	ldrb	r3, [r7, #6]
 800a760:	2b03      	cmp	r3, #3
 800a762:	d852      	bhi.n	800a80a <USBH_ioctl+0xc2>
 800a764:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <USBH_ioctl+0x24>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a77d 	.word	0x0800a77d
 800a770:	0800a785 	.word	0x0800a785
 800a774:	0800a7af 	.word	0x0800a7af
 800a778:	0800a7db 	.word	0x0800a7db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a782:	e045      	b.n	800a810 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a784:	f107 0208 	add.w	r2, r7, #8
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	4619      	mov	r1, r3
 800a78c:	4823      	ldr	r0, [pc, #140]	; (800a81c <USBH_ioctl+0xd4>)
 800a78e:	f001 f986 	bl	800ba9e <USBH_MSC_GetLUNInfo>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d106      	bne.n	800a7a6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7a4:	e034      	b.n	800a810 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7ac:	e030      	b.n	800a810 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a7ae:	f107 0208 	add.w	r2, r7, #8
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4819      	ldr	r0, [pc, #100]	; (800a81c <USBH_ioctl+0xd4>)
 800a7b8:	f001 f971 	bl	800ba9e <USBH_MSC_GetLUNInfo>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d107      	bne.n	800a7d2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a7c2:	8a3b      	ldrh	r3, [r7, #16]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a7d0:	e01e      	b.n	800a810 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a7d8:	e01a      	b.n	800a810 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a7da:	f107 0208 	add.w	r2, r7, #8
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	480e      	ldr	r0, [pc, #56]	; (800a81c <USBH_ioctl+0xd4>)
 800a7e4:	f001 f95b 	bl	800ba9e <USBH_MSC_GetLUNInfo>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a7ee:	8a3b      	ldrh	r3, [r7, #16]
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a800:	e006      	b.n	800a810 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a808:	e002      	b.n	800a810 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a80a:	2304      	movs	r3, #4
 800a80c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a814:	4618      	mov	r0, r3
 800a816:	3740      	adds	r7, #64	; 0x40
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20003628 	.word	0x20003628

0800a820 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fbd8 	bl	800afe0 <LCD5110_refresh_ll>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f880 	bl	800a954 <LCD5110_wset_cursor>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f95e 	bl	800ab28 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	2100      	movs	r1, #0
 800a870:	2000      	movs	r0, #0
 800a872:	f7ff ffe1 	bl	800a838 <LCD5110_set_cursor>
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 f892 	bl	800a9be <LCD5110_wprint>
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	b08b      	sub	sp, #44	; 0x2c
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	db41      	blt.n	800a942 <LCD5110_wputchar+0x9e>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	db3c      	blt.n	800a942 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	2306      	movs	r3, #6
 800a8d2:	4413      	add	r3, r2
 800a8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d833      	bhi.n	800a946 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2308      	movs	r3, #8
 800a8e8:	4413      	add	r3, r2
 800a8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d828      	bhi.n	800a946 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 800a8f4:	4b16      	ldr	r3, [pc, #88]	; (800a950 <LCD5110_wputchar+0xac>)
 800a8f6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8fe:	461a      	mov	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	18d0      	adds	r0, r2, r3
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	18d1      	adds	r1, r2, r3
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2206      	movs	r2, #6
 800a914:	fb02 f303 	mul.w	r3, r2, r3
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	441a      	add	r2, r3
 800a91c:	2306      	movs	r3, #6
 800a91e:	461e      	mov	r6, r3
 800a920:	2308      	movs	r3, #8
 800a922:	461c      	mov	r4, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	bf0c      	ite	eq
 800a92a:	2301      	moveq	r3, #1
 800a92c:	2300      	movne	r3, #0
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	461d      	mov	r5, r3
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	9302      	str	r3, [sp, #8]
 800a936:	9501      	str	r5, [sp, #4]
 800a938:	9400      	str	r4, [sp, #0]
 800a93a:	4633      	mov	r3, r6
 800a93c:	f000 f94e 	bl	800abdc <LCD5110_drawBitmap>
 800a940:	e002      	b.n	800a948 <LCD5110_wputchar+0xa4>
		return;
 800a942:	bf00      	nop
 800a944:	e000      	b.n	800a948 <LCD5110_wputchar+0xa4>
		return;
 800a946:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 800a948:	371c      	adds	r7, #28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94e:	bf00      	nop
 800a950:	08013c40 	.word	0x08013c40

0800a954 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	b21a      	sxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	b21a      	sxth	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	815a      	strh	r2, [r3, #10]
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a98e:	b29a      	uxth	r2, r3
 800a990:	2308      	movs	r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	4413      	add	r3, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	3301      	adds	r3, #1
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	b21a      	sxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7b1b      	ldrb	r3, [r3, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800a9b0:	6838      	ldr	r0, [r7, #0]
 800a9b2:	f7ff ff35 	bl	800a820 <LCD5110_refresh>
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b086      	sub	sp, #24
 800a9c2:	af02      	add	r7, sp, #8
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 800a9cc:	e055      	b.n	800aa7a <LCD5110_wprint+0xbc>
		if (*str != '\n') {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b0a      	cmp	r3, #10
 800a9d4:	d010      	beq.n	800a9f8 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f7ff ff56 	bl	800a8a4 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	2306      	movs	r3, #6
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	4413      	add	r3, r2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	b21a      	sxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa14:	461a      	mov	r2, r3
 800aa16:	2306      	movs	r3, #6
 800aa18:	4413      	add	r3, r2
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d904      	bls.n	800aa2e <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3301      	adds	r3, #1
 800aa28:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800aa2a:	2b0a      	cmp	r3, #10
 800aa2c:	d103      	bne.n	800aa36 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b0a      	cmp	r3, #10
 800aa34:	d113      	bne.n	800aa5e <LCD5110_wprint+0xa0>
		{
			LCD5110_wendl(win, lcd_conf);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff ffa0 	bl	800a97e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 800aa3e:	f007 ff21 	bl	8012884 <__locale_ctype_ptr>
 800aa42:	4602      	mov	r2, r0
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	4413      	add	r3, r2
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 0308 	and.w	r3, r3, #8
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <LCD5110_wprint+0xa0>
				++str;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800aa64:	461a      	mov	r2, r3
 800aa66:	2308      	movs	r3, #8
 800aa68:	4413      	add	r3, r2
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d807      	bhi.n	800aa84 <LCD5110_wprint+0xc6>
			break;
		str++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1a5      	bne.n	800a9ce <LCD5110_wprint+0x10>

	}
}
 800aa82:	e000      	b.n	800aa86 <LCD5110_wprint+0xc8>
			break;
 800aa84:	bf00      	nop
}
 800aa86:	bf00      	nop
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 800aa8e:	b40c      	push	{r2, r3}
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b09e      	sub	sp, #120	; 0x78
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 800aa9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aa9e:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 800aaa0:	f107 0010 	add.w	r0, r7, #16
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aaaa:	2164      	movs	r1, #100	; 0x64
 800aaac:	f008 f846 	bl	8012b3c <vsniprintf>
 800aab0:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 800aab2:	f107 0310 	add.w	r3, r7, #16
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7ff fedf 	bl	800a87e <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d002      	beq.n	800aad0 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff fea8 	bl	800a820 <LCD5110_refresh>

	va_end(vargs);

	return res;
 800aad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3778      	adds	r7, #120	; 0x78
 800aad6:	46bd      	mov	sp, r7
 800aad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aadc:	b002      	add	sp, #8
 800aade:	4770      	bx	lr

0800aae0 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	10db      	asrs	r3, r3, #3
 800aaf0:	2254      	movs	r2, #84	; 0x54
 800aaf2:	fb02 f203 	mul.w	r2, r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	4413      	add	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	2201      	movs	r2, #1
 800ab04:	fa02 f303 	lsl.w	r3, r2, r3
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	753b      	strb	r3, [r7, #20]

	return res;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f107 0310 	add.w	r3, r7, #16
 800ab14:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab18:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	371c      	adds	r7, #28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800ab30:	2300      	movs	r3, #0
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e008      	b.n	800ab48 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	331c      	adds	r3, #28
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3301      	adds	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800ab4e:	dbf2      	blt.n	800ab36 <LCD5110_clrscr+0xe>
	}
}
 800ab50:	bf00      	nop
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	db31      	blt.n	800abd4 <LCD5110_putpix+0x78>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	db2e      	blt.n	800abd4 <LCD5110_putpix+0x78>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b53      	cmp	r3, #83	; 0x53
 800ab7a:	dc2b      	bgt.n	800abd4 <LCD5110_putpix+0x78>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b2f      	cmp	r3, #47	; 0x2f
 800ab80:	dc28      	bgt.n	800abd4 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 800ab82:	f107 0310 	add.w	r3, r7, #16
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff ffa8 	bl	800aae0 <xy_to_pix>

	if (color)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00c      	beq.n	800abb0 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	7f19      	ldrb	r1, [r3, #28]
 800ab9e:	7d3a      	ldrb	r2, [r7, #20]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	b2d1      	uxtb	r1, r2
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	4413      	add	r3, r2
 800abaa:	460a      	mov	r2, r1
 800abac:	771a      	strb	r2, [r3, #28]
 800abae:	e012      	b.n	800abd6 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4413      	add	r3, r2
 800abb6:	7f1b      	ldrb	r3, [r3, #28]
 800abb8:	b25a      	sxtb	r2, r3
 800abba:	7d3b      	ldrb	r3, [r7, #20]
 800abbc:	b25b      	sxtb	r3, r3
 800abbe:	43db      	mvns	r3, r3
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	4013      	ands	r3, r2
 800abc4:	b25a      	sxtb	r2, r3
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	b2d1      	uxtb	r1, r2
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	460a      	mov	r2, r1
 800abd0:	771a      	strb	r2, [r3, #28]
 800abd2:	e000      	b.n	800abd6 <LCD5110_putpix+0x7a>
		return;
 800abd4:	bf00      	nop
}
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800abea:	2300      	movs	r3, #0
 800abec:	61fb      	str	r3, [r7, #28]
 800abee:	e042      	b.n	800ac76 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 800abf0:	2300      	movs	r3, #0
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	e038      	b.n	800ac68 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	da00      	bge.n	800abfe <LCD5110_drawBitmap+0x22>
 800abfc:	3307      	adds	r3, #7
 800abfe:	10db      	asrs	r3, r3, #3
 800ac00:	461a      	mov	r2, r3
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	fb03 f202 	mul.w	r2, r3, r2
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	425a      	negs	r2, r3
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	f002 0207 	and.w	r2, r2, #7
 800ac22:	bf58      	it	pl
 800ac24:	4253      	negpl	r3, r2
 800ac26:	2201      	movs	r2, #1
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	b25a      	sxtb	r2, r3
 800ac2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac32:	4013      	ands	r3, r2
 800ac34:	b25b      	sxtb	r3, r3
 800ac36:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	18d0      	adds	r0, r2, r3
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	18d1      	adds	r1, r2, r3
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <LCD5110_drawBitmap+0x7e>
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bf0c      	ite	eq
 800ac50:	2301      	moveq	r3, #1
 800ac52:	2300      	movne	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	461a      	mov	r2, r3
 800ac58:	e000      	b.n	800ac5c <LCD5110_drawBitmap+0x80>
 800ac5a:	7dfa      	ldrb	r2, [r7, #23]
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	f7ff ff7d 	bl	800ab5c <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	3301      	adds	r3, #1
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	dbc2      	blt.n	800abf6 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	3301      	adds	r3, #1
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	69fa      	ldr	r2, [r7, #28]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	dbb8      	blt.n	800abf0 <LCD5110_drawBitmap+0x14>
		}
	}
}
 800ac7e:	bf00      	nop
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	6039      	str	r1, [r7, #0]
 800ac90:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	1df9      	adds	r1, r7, #7
 800ac98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f7fd fb3f 	bl	8008320 <HAL_SPI_Transmit>
 800aca2:	4603      	mov	r3, r0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	460b      	mov	r3, r1
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	897a      	ldrh	r2, [r7, #10]
 800acc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	f7fd fb2b 	bl	8008320 <HAL_SPI_Transmit>
 800acca:	4603      	mov	r3, r0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6898      	ldr	r0, [r3, #8]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	889b      	ldrh	r3, [r3, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	4619      	mov	r1, r3
 800ace8:	f7f9 fe4c 	bl	8004984 <HAL_GPIO_WritePin>
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6998      	ldr	r0, [r3, #24]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	8a9b      	ldrh	r3, [r3, #20]
 800ad04:	2201      	movs	r2, #1
 800ad06:	4619      	mov	r1, r3
 800ad08:	f7f9 fe3c 	bl	8004984 <HAL_GPIO_WritePin>
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6998      	ldr	r0, [r3, #24]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	8a9b      	ldrh	r3, [r3, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	4619      	mov	r1, r3
 800ad28:	f7f9 fe2c 	bl	8004984 <HAL_GPIO_WritePin>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6918      	ldr	r0, [r3, #16]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	899b      	ldrh	r3, [r3, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	4619      	mov	r1, r3
 800ad48:	f7f9 fe1c 	bl	8004984 <HAL_GPIO_WritePin>
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6918      	ldr	r0, [r3, #16]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	899b      	ldrh	r3, [r3, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	4619      	mov	r1, r3
 800ad68:	f7f9 fe0c 	bl	8004984 <HAL_GPIO_WritePin>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	6039      	str	r1, [r7, #0]
 800ad7e:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	2b07      	cmp	r3, #7
 800ad88:	dd01      	ble.n	800ad8e <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e008      	b.n	800ada0 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	f043 0320 	orr.w	r3, r3, #32
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff ff74 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	6039      	str	r1, [r7, #0]
 800adb2:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	f023 030d 	bic.w	r3, r3, #13
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 800adbe:	2302      	movs	r3, #2
 800adc0:	e005      	b.n	800adce <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff ff5d 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	4603      	mov	r3, r0
 800adde:	6039      	str	r1, [r7, #0]
 800ade0:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 800ade2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	da01      	bge.n	800adee <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 800adea:	2303      	movs	r3, #3
 800adec:	e008      	b.n	800ae00 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ff44 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	6039      	str	r1, [r7, #0]
 800ae12:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d901      	bls.n	800ae1e <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 800ae1a:	2304      	movs	r3, #4
 800ae1c:	e008      	b.n	800ae30 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	f043 0304 	orr.w	r3, r3, #4
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff ff2c 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	6039      	str	r1, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 800ae44:	79fb      	ldrb	r3, [r7, #7]
 800ae46:	2b07      	cmp	r3, #7
 800ae48:	d901      	bls.n	800ae4e <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 800ae4a:	2305      	movs	r3, #5
 800ae4c:	e008      	b.n	800ae60 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	f043 0310 	orr.w	r3, r3, #16
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ff14 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 800ae74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	db03      	blt.n	800ae84 <LCD5110_set_X_base+0x1c>
 800ae7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae80:	2b53      	cmp	r3, #83	; 0x53
 800ae82:	dd01      	ble.n	800ae88 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 800ae84:	2307      	movs	r3, #7
 800ae86:	e00a      	b.n	800ae9e <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 800ae88:	88fb      	ldrh	r3, [r7, #6]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae90:	b25b      	sxtb	r3, r3
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff fef5 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	4603      	mov	r3, r0
 800aeae:	6039      	str	r1, [r7, #0]
 800aeb0:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800aeb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	db03      	blt.n	800aec2 <LCD5110_set_Y_base+0x1c>
 800aeba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	dd01      	ble.n	800aec6 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800aec2:	2307      	movs	r3, #7
 800aec4:	e00a      	b.n	800aedc <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aece:	b25b      	sxtb	r3, r3
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff fed6 	bl	800ac86 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	4603      	mov	r3, r0
 800aeec:	603a      	str	r2, [r7, #0]
 800aeee:	80fb      	strh	r3, [r7, #6]
 800aef0:	460b      	mov	r3, r1
 800aef2:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800aef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff ffb4 	bl	800ae68 <LCD5110_set_X_base>
 800af00:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <LCD5110_set_XY_base+0x28>
		return res;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	e00c      	b.n	800af26 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 800af0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff ffc7 	bl	800aea6 <LCD5110_set_Y_base>
 800af18:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <LCD5110_set_XY_base+0x40>
		return res;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	e000      	b.n	800af26 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af48:	601a      	str	r2, [r3, #0]
}
 800af4a:	bf00      	nop
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	4608      	mov	r0, r1
 800af60:	4611      	mov	r1, r2
 800af62:	461a      	mov	r2, r3
 800af64:	4603      	mov	r3, r0
 800af66:	70fb      	strb	r3, [r7, #3]
 800af68:	460b      	mov	r3, r1
 800af6a:	70bb      	strb	r3, [r7, #2]
 800af6c:	4613      	mov	r3, r2
 800af6e:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff ffdc 	bl	800af2e <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff feac 	bl	800acd4 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff fee9 	bl	800ad54 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 800af82:	2364      	movs	r3, #100	; 0x64
 800af84:	60fb      	str	r3, [r7, #12]
	while (--i){}
 800af86:	bf00      	nop
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1fa      	bne.n	800af88 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff fece 	bl	800ad34 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7ff febb 	bl	800ad14 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	2001      	movs	r0, #1
 800afa2:	f7ff fee7 	bl	800ad74 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 800afa6:	78bb      	ldrb	r3, [r7, #2]
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff ff13 	bl	800add6 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800afb0:	787b      	ldrb	r3, [r7, #1]
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff ff27 	bl	800ae08 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 800afba:	7e3b      	ldrb	r3, [r7, #24]
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff ff3a 	bl	800ae38 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	2000      	movs	r0, #0
 800afc8:	f7ff fed4 	bl	800ad74 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 800afcc:	78fb      	ldrb	r3, [r7, #3]
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fee9 	bl	800ada8 <LCD5110_set_mode_base>

	return LCD5110_OK;
 800afd6:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff fe73 	bl	800acd4 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fe90 	bl	800ad14 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	2100      	movs	r1, #0
 800aff8:	2000      	movs	r0, #0
 800affa:	f7ff ff73 	bl	800aee4 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff fe78 	bl	800acf4 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	331c      	adds	r3, #28
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fe4c 	bl	800acac <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	af04      	add	r7, sp, #16
 800b022:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b02a:	7919      	ldrb	r1, [r3, #4]
 800b02c:	2350      	movs	r3, #80	; 0x50
 800b02e:	2206      	movs	r2, #6
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fc4f 	bl	800c8d4 <USBH_FindInterface>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2bff      	cmp	r3, #255	; 0xff
 800b03e:	d002      	beq.n	800b046 <USBH_MSC_InterfaceInit+0x2a>
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d901      	bls.n	800b04a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b046:	2302      	movs	r3, #2
 800b048:	e0ef      	b.n	800b22a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 fc24 	bl	800c89c <USBH_SelectInterface>
 800b054:	4603      	mov	r3, r0
 800b056:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b05e:	2302      	movs	r3, #2
 800b060:	e0e3      	b.n	800b22a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b068:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b06c:	f007 fc18 	bl	80128a0 <malloc>
 800b070:	4603      	mov	r3, r0
 800b072:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b084:	2302      	movs	r3, #2
 800b086:	e0d0      	b.n	800b22a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b08c:	2100      	movs	r1, #0
 800b08e:	68b8      	ldr	r0, [r7, #8]
 800b090:	f007 fc33 	bl	80128fa <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	211a      	movs	r1, #26
 800b09a:	fb01 f303 	mul.w	r3, r1, r3
 800b09e:	4413      	add	r3, r2
 800b0a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	b25b      	sxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	da16      	bge.n	800b0da <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	211a      	movs	r1, #26
 800b0b2:	fb01 f303 	mul.w	r3, r1, r3
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0bc:	781a      	ldrb	r2, [r3, #0]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	211a      	movs	r1, #26
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b0d2:	881a      	ldrh	r2, [r3, #0]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	815a      	strh	r2, [r3, #10]
 800b0d8:	e015      	b.n	800b106 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	211a      	movs	r1, #26
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	211a      	movs	r1, #26
 800b0f6:	fb01 f303 	mul.w	r3, r1, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b100:	881a      	ldrh	r2, [r3, #0]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	211a      	movs	r1, #26
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	4413      	add	r3, r2
 800b112:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	b25b      	sxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da16      	bge.n	800b14c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	211a      	movs	r1, #26
 800b124:	fb01 f303 	mul.w	r3, r1, r3
 800b128:	4413      	add	r3, r2
 800b12a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b12e:	781a      	ldrb	r2, [r3, #0]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	211a      	movs	r1, #26
 800b13a:	fb01 f303 	mul.w	r3, r1, r3
 800b13e:	4413      	add	r3, r2
 800b140:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b144:	881a      	ldrh	r2, [r3, #0]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	815a      	strh	r2, [r3, #10]
 800b14a:	e015      	b.n	800b178 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	211a      	movs	r1, #26
 800b152:	fb01 f303 	mul.w	r3, r1, r3
 800b156:	4413      	add	r3, r2
 800b158:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	211a      	movs	r1, #26
 800b168:	fb01 f303 	mul.w	r3, r1, r3
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b172:	881a      	ldrh	r2, [r3, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2200      	movs	r2, #0
 800b17c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	799b      	ldrb	r3, [r3, #6]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f002 fdc2 	bl	800dd1a <USBH_AllocPipe>
 800b196:	4603      	mov	r3, r0
 800b198:	461a      	mov	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	79db      	ldrb	r3, [r3, #7]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f002 fdb8 	bl	800dd1a <USBH_AllocPipe>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fda4 	bl	800bd00 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	7959      	ldrb	r1, [r3, #5]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	7998      	ldrb	r0, [r3, #6]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	8912      	ldrh	r2, [r2, #8]
 800b1d0:	9202      	str	r2, [sp, #8]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	9201      	str	r2, [sp, #4]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	4623      	mov	r3, r4
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f002 fd6d 	bl	800dcbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	7919      	ldrb	r1, [r3, #4]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	79d8      	ldrb	r0, [r3, #7]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	8952      	ldrh	r2, [r2, #10]
 800b1fa:	9202      	str	r2, [sp, #8]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	4623      	mov	r3, r4
 800b204:	4602      	mov	r2, r0
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f002 fd58 	bl	800dcbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	791b      	ldrb	r3, [r3, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f005 ffff 	bl	8011218 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	795b      	ldrb	r3, [r3, #5]
 800b21e:	2200      	movs	r2, #0
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f005 fff8 	bl	8011218 <USBH_LL_SetToggle>

  return USBH_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd90      	pop	{r4, r7, pc}

0800b232 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	795b      	ldrb	r3, [r3, #5]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00e      	beq.n	800b26a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	795b      	ldrb	r3, [r3, #5]
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f002 fd51 	bl	800dcfa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	795b      	ldrb	r3, [r3, #5]
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f002 fd7c 	bl	800dd5c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	791b      	ldrb	r3, [r3, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	791b      	ldrb	r3, [r3, #4]
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f002 fd3e 	bl	800dcfa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	791b      	ldrb	r3, [r3, #4]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 fd69 	bl	800dd5c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f007 fb03 	bl	80128b0 <free>
    phost->pActiveClass->pData = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	7b9b      	ldrb	r3, [r3, #14]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d004      	beq.n	800b2e6 <USBH_MSC_ClassRequest+0x28>
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d03e      	beq.n	800b35e <USBH_MSC_ClassRequest+0xa0>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d000      	beq.n	800b2e6 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800b2e4:	e04a      	b.n	800b37c <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fcea 	bl	800bcc4 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d104      	bne.n	800b304 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d135      	bne.n	800b376 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d804      	bhi.n	800b31c <USBH_MSC_ClassRequest+0x5e>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	3301      	adds	r3, #1
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	e000      	b.n	800b31e <USBH_MSC_ClassRequest+0x60>
 800b31c:	2202      	movs	r2, #2
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b322:	2300      	movs	r3, #0
 800b324:	73bb      	strb	r3, [r7, #14]
 800b326:	e014      	b.n	800b352 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	2134      	movs	r1, #52	; 0x34
 800b32e:	fb01 f303 	mul.w	r3, r1, r3
 800b332:	4413      	add	r3, r2
 800b334:	3392      	adds	r3, #146	; 0x92
 800b336:	2202      	movs	r2, #2
 800b338:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	2134      	movs	r1, #52	; 0x34
 800b340:	fb01 f303 	mul.w	r3, r1, r3
 800b344:	4413      	add	r3, r2
 800b346:	33c1      	adds	r3, #193	; 0xc1
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	3301      	adds	r3, #1
 800b350:	73bb      	strb	r3, [r7, #14]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	7bba      	ldrb	r2, [r7, #14]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d3e5      	bcc.n	800b328 <USBH_MSC_ClassRequest+0x6a>
      break;
 800b35c:	e00b      	b.n	800b376 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b35e:	2100      	movs	r1, #0
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f002 f878 	bl	800d456 <USBH_ClrFeature>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	7bda      	ldrb	r2, [r3, #15]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	739a      	strb	r2, [r3, #14]
      break;
 800b374:	e001      	b.n	800b37a <USBH_MSC_ClassRequest+0xbc>
      break;
 800b376:	bf00      	nop
 800b378:	e000      	b.n	800b37c <USBH_MSC_ClassRequest+0xbe>
      break;
 800b37a:	bf00      	nop
  }

  return status;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b39a:	2301      	movs	r3, #1
 800b39c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	7b1b      	ldrb	r3, [r3, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d003      	beq.n	800b3b6 <USBH_MSC_Process+0x2e>
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	f000 8271 	beq.w	800b896 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b3b4:	e272      	b.n	800b89c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	f080 824f 	bcs.w	800b866 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	2334      	movs	r3, #52	; 0x34
 800b3d4:	fb03 f301 	mul.w	r3, r3, r1
 800b3d8:	4413      	add	r3, r2
 800b3da:	3391      	adds	r3, #145	; 0x91
 800b3dc:	2201      	movs	r2, #1
 800b3de:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	2334      	movs	r3, #52	; 0x34
 800b3ec:	fb03 f301 	mul.w	r3, r3, r1
 800b3f0:	4413      	add	r3, r2
 800b3f2:	3390      	adds	r3, #144	; 0x90
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	f200 8243 	bhi.w	800b882 <USBH_MSC_Process+0x4fa>
 800b3fc:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <USBH_MSC_Process+0x7c>)
 800b3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b402:	bf00      	nop
 800b404:	0800b429 	.word	0x0800b429
 800b408:	0800b883 	.word	0x0800b883
 800b40c:	0800b4f1 	.word	0x0800b4f1
 800b410:	0800b675 	.word	0x0800b675
 800b414:	0800b44f 	.word	0x0800b44f
 800b418:	0800b741 	.word	0x0800b741
 800b41c:	0800b883 	.word	0x0800b883
 800b420:	0800b883 	.word	0x0800b883
 800b424:	0800b855 	.word	0x0800b855
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b42e:	4619      	mov	r1, r3
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	2334      	movs	r3, #52	; 0x34
 800b434:	fb03 f301 	mul.w	r3, r3, r1
 800b438:	4413      	add	r3, r2
 800b43a:	3390      	adds	r3, #144	; 0x90
 800b43c:	2204      	movs	r2, #4
 800b43e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b44c:	e222      	b.n	800b894 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b454:	b2d9      	uxtb	r1, r3
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b45c:	461a      	mov	r2, r3
 800b45e:	2334      	movs	r3, #52	; 0x34
 800b460:	fb03 f302 	mul.w	r3, r3, r2
 800b464:	3398      	adds	r3, #152	; 0x98
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	4413      	add	r3, r2
 800b46a:	3307      	adds	r3, #7
 800b46c:	461a      	mov	r2, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 ff68 	bl	800c344 <USBH_MSC_SCSI_Inquiry>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10b      	bne.n	800b496 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b484:	4619      	mov	r1, r3
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	2334      	movs	r3, #52	; 0x34
 800b48a:	fb03 f301 	mul.w	r3, r3, r1
 800b48e:	4413      	add	r3, r2
 800b490:	3390      	adds	r3, #144	; 0x90
 800b492:	2202      	movs	r2, #2
 800b494:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d10c      	bne.n	800b4b6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	2334      	movs	r3, #52	; 0x34
 800b4a8:	fb03 f301 	mul.w	r3, r3, r1
 800b4ac:	4413      	add	r3, r2
 800b4ae:	3390      	adds	r3, #144	; 0x90
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	701a      	strb	r2, [r3, #0]
            break;
 800b4b4:	e1e7      	b.n	800b886 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	f040 81e4 	bne.w	800b886 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	2334      	movs	r3, #52	; 0x34
 800b4ca:	fb03 f301 	mul.w	r3, r3, r1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3390      	adds	r3, #144	; 0x90
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4dc:	4619      	mov	r1, r3
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	2334      	movs	r3, #52	; 0x34
 800b4e2:	fb03 f301 	mul.w	r3, r3, r1
 800b4e6:	4413      	add	r3, r2
 800b4e8:	3391      	adds	r3, #145	; 0x91
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	701a      	strb	r2, [r3, #0]
            break;
 800b4ee:	e1ca      	b.n	800b886 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fe64 	bl	800c1c8 <USBH_MSC_SCSI_TestUnitReady>
 800b500:	4603      	mov	r3, r0
 800b502:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d149      	bne.n	800b59e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b510:	4619      	mov	r1, r3
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	2334      	movs	r3, #52	; 0x34
 800b516:	fb03 f301 	mul.w	r3, r3, r1
 800b51a:	4413      	add	r3, r2
 800b51c:	3392      	adds	r3, #146	; 0x92
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00c      	beq.n	800b53e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b52a:	4619      	mov	r1, r3
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	2334      	movs	r3, #52	; 0x34
 800b530:	fb03 f301 	mul.w	r3, r3, r1
 800b534:	4413      	add	r3, r2
 800b536:	33c1      	adds	r3, #193	; 0xc1
 800b538:	2201      	movs	r2, #1
 800b53a:	701a      	strb	r2, [r3, #0]
 800b53c:	e00b      	b.n	800b556 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b544:	4619      	mov	r1, r3
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	2334      	movs	r3, #52	; 0x34
 800b54a:	fb03 f301 	mul.w	r3, r3, r1
 800b54e:	4413      	add	r3, r2
 800b550:	33c1      	adds	r3, #193	; 0xc1
 800b552:	2200      	movs	r2, #0
 800b554:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b55c:	4619      	mov	r1, r3
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	2334      	movs	r3, #52	; 0x34
 800b562:	fb03 f301 	mul.w	r3, r3, r1
 800b566:	4413      	add	r3, r2
 800b568:	3390      	adds	r3, #144	; 0x90
 800b56a:	2203      	movs	r2, #3
 800b56c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b574:	4619      	mov	r1, r3
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	2334      	movs	r3, #52	; 0x34
 800b57a:	fb03 f301 	mul.w	r3, r3, r1
 800b57e:	4413      	add	r3, r2
 800b580:	3391      	adds	r3, #145	; 0x91
 800b582:	2200      	movs	r2, #0
 800b584:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b58c:	4619      	mov	r1, r3
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	2334      	movs	r3, #52	; 0x34
 800b592:	fb03 f301 	mul.w	r3, r3, r1
 800b596:	4413      	add	r3, r2
 800b598:	3392      	adds	r3, #146	; 0x92
 800b59a:	2200      	movs	r2, #0
 800b59c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d14a      	bne.n	800b63a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	2334      	movs	r3, #52	; 0x34
 800b5b0:	fb03 f301 	mul.w	r3, r3, r1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	3392      	adds	r3, #146	; 0x92
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d00c      	beq.n	800b5d8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	2334      	movs	r3, #52	; 0x34
 800b5ca:	fb03 f301 	mul.w	r3, r3, r1
 800b5ce:	4413      	add	r3, r2
 800b5d0:	33c1      	adds	r3, #193	; 0xc1
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	e00b      	b.n	800b5f0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5de:	4619      	mov	r1, r3
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	2334      	movs	r3, #52	; 0x34
 800b5e4:	fb03 f301 	mul.w	r3, r3, r1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	33c1      	adds	r3, #193	; 0xc1
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	2334      	movs	r3, #52	; 0x34
 800b5fc:	fb03 f301 	mul.w	r3, r3, r1
 800b600:	4413      	add	r3, r2
 800b602:	3390      	adds	r3, #144	; 0x90
 800b604:	2205      	movs	r2, #5
 800b606:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b60e:	4619      	mov	r1, r3
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	2334      	movs	r3, #52	; 0x34
 800b614:	fb03 f301 	mul.w	r3, r3, r1
 800b618:	4413      	add	r3, r2
 800b61a:	3391      	adds	r3, #145	; 0x91
 800b61c:	2201      	movs	r2, #1
 800b61e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b626:	4619      	mov	r1, r3
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	2334      	movs	r3, #52	; 0x34
 800b62c:	fb03 f301 	mul.w	r3, r3, r1
 800b630:	4413      	add	r3, r2
 800b632:	3392      	adds	r3, #146	; 0x92
 800b634:	2202      	movs	r2, #2
 800b636:	701a      	strb	r2, [r3, #0]
            break;
 800b638:	e127      	b.n	800b88a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b04      	cmp	r3, #4
 800b63e:	f040 8124 	bne.w	800b88a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b648:	4619      	mov	r1, r3
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	2334      	movs	r3, #52	; 0x34
 800b64e:	fb03 f301 	mul.w	r3, r3, r1
 800b652:	4413      	add	r3, r2
 800b654:	3390      	adds	r3, #144	; 0x90
 800b656:	2201      	movs	r2, #1
 800b658:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b660:	4619      	mov	r1, r3
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	2334      	movs	r3, #52	; 0x34
 800b666:	fb03 f301 	mul.w	r3, r3, r1
 800b66a:	4413      	add	r3, r2
 800b66c:	3391      	adds	r3, #145	; 0x91
 800b66e:	2202      	movs	r2, #2
 800b670:	701a      	strb	r2, [r3, #0]
            break;
 800b672:	e10a      	b.n	800b88a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b67a:	b2d9      	uxtb	r1, r3
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b682:	461a      	mov	r2, r3
 800b684:	2334      	movs	r3, #52	; 0x34
 800b686:	fb03 f302 	mul.w	r3, r3, r2
 800b68a:	3390      	adds	r3, #144	; 0x90
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4413      	add	r3, r2
 800b690:	3304      	adds	r3, #4
 800b692:	461a      	mov	r2, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fdda 	bl	800c24e <USBH_MSC_SCSI_ReadCapacity>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d120      	bne.n	800b6e6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	2334      	movs	r3, #52	; 0x34
 800b6b0:	fb03 f301 	mul.w	r3, r3, r1
 800b6b4:	4413      	add	r3, r2
 800b6b6:	3390      	adds	r3, #144	; 0x90
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	2334      	movs	r3, #52	; 0x34
 800b6c8:	fb03 f301 	mul.w	r3, r3, r1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	3391      	adds	r3, #145	; 0x91
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6da:	3301      	adds	r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b6e4:	e0d3      	b.n	800b88e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d10c      	bne.n	800b706 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	2334      	movs	r3, #52	; 0x34
 800b6f8:	fb03 f301 	mul.w	r3, r3, r1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3390      	adds	r3, #144	; 0x90
 800b700:	2205      	movs	r2, #5
 800b702:	701a      	strb	r2, [r3, #0]
            break;
 800b704:	e0c3      	b.n	800b88e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	2b04      	cmp	r3, #4
 800b70a:	f040 80c0 	bne.w	800b88e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b714:	4619      	mov	r1, r3
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	2334      	movs	r3, #52	; 0x34
 800b71a:	fb03 f301 	mul.w	r3, r3, r1
 800b71e:	4413      	add	r3, r2
 800b720:	3390      	adds	r3, #144	; 0x90
 800b722:	2201      	movs	r2, #1
 800b724:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b72c:	4619      	mov	r1, r3
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	2334      	movs	r3, #52	; 0x34
 800b732:	fb03 f301 	mul.w	r3, r3, r1
 800b736:	4413      	add	r3, r2
 800b738:	3391      	adds	r3, #145	; 0x91
 800b73a:	2202      	movs	r2, #2
 800b73c:	701a      	strb	r2, [r3, #0]
            break;
 800b73e:	e0a6      	b.n	800b88e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b746:	b2d9      	uxtb	r1, r3
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b74e:	461a      	mov	r2, r3
 800b750:	2334      	movs	r3, #52	; 0x34
 800b752:	fb03 f302 	mul.w	r3, r3, r2
 800b756:	3398      	adds	r3, #152	; 0x98
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4413      	add	r3, r2
 800b75c:	3304      	adds	r3, #4
 800b75e:	461a      	mov	r2, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fe94 	bl	800c48e <USBH_MSC_SCSI_RequestSense>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d145      	bne.n	800b7fc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b776:	4619      	mov	r1, r3
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	2334      	movs	r3, #52	; 0x34
 800b77c:	fb03 f301 	mul.w	r3, r3, r1
 800b780:	4413      	add	r3, r2
 800b782:	339c      	adds	r3, #156	; 0x9c
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b06      	cmp	r3, #6
 800b788:	d00c      	beq.n	800b7a4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b790:	4619      	mov	r1, r3
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	2334      	movs	r3, #52	; 0x34
 800b796:	fb03 f301 	mul.w	r3, r3, r1
 800b79a:	4413      	add	r3, r2
 800b79c:	339c      	adds	r3, #156	; 0x9c
 800b79e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d117      	bne.n	800b7d4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	f242 720f 	movw	r2, #9999	; 0x270f
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d80c      	bhi.n	800b7d4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	2334      	movs	r3, #52	; 0x34
 800b7c6:	fb03 f301 	mul.w	r3, r3, r1
 800b7ca:	4413      	add	r3, r2
 800b7cc:	3390      	adds	r3, #144	; 0x90
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	701a      	strb	r2, [r3, #0]
                  break;
 800b7d2:	e05f      	b.n	800b894 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	2334      	movs	r3, #52	; 0x34
 800b7e0:	fb03 f301 	mul.w	r3, r3, r1
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3390      	adds	r3, #144	; 0x90
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d10c      	bne.n	800b81c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b808:	4619      	mov	r1, r3
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	2334      	movs	r3, #52	; 0x34
 800b80e:	fb03 f301 	mul.w	r3, r3, r1
 800b812:	4413      	add	r3, r2
 800b814:	3390      	adds	r3, #144	; 0x90
 800b816:	2208      	movs	r2, #8
 800b818:	701a      	strb	r2, [r3, #0]
            break;
 800b81a:	e03a      	b.n	800b892 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d137      	bne.n	800b892 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b828:	4619      	mov	r1, r3
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	2334      	movs	r3, #52	; 0x34
 800b82e:	fb03 f301 	mul.w	r3, r3, r1
 800b832:	4413      	add	r3, r2
 800b834:	3390      	adds	r3, #144	; 0x90
 800b836:	2201      	movs	r2, #1
 800b838:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b840:	4619      	mov	r1, r3
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	2334      	movs	r3, #52	; 0x34
 800b846:	fb03 f301 	mul.w	r3, r3, r1
 800b84a:	4413      	add	r3, r2
 800b84c:	3391      	adds	r3, #145	; 0x91
 800b84e:	2202      	movs	r2, #2
 800b850:	701a      	strb	r2, [r3, #0]
            break;
 800b852:	e01e      	b.n	800b892 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b85a:	3301      	adds	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b864:	e016      	b.n	800b894 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2200      	movs	r2, #0
 800b86a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2201      	movs	r2, #1
 800b872:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b87a:	2102      	movs	r1, #2
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	4798      	blx	r3
      break;
 800b880:	e00c      	b.n	800b89c <USBH_MSC_Process+0x514>
            break;
 800b882:	bf00      	nop
 800b884:	e00a      	b.n	800b89c <USBH_MSC_Process+0x514>
            break;
 800b886:	bf00      	nop
 800b888:	e008      	b.n	800b89c <USBH_MSC_Process+0x514>
            break;
 800b88a:	bf00      	nop
 800b88c:	e006      	b.n	800b89c <USBH_MSC_Process+0x514>
            break;
 800b88e:	bf00      	nop
 800b890:	e004      	b.n	800b89c <USBH_MSC_Process+0x514>
            break;
 800b892:	bf00      	nop
      break;
 800b894:	e002      	b.n	800b89c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	75fb      	strb	r3, [r7, #23]
      break;
 800b89a:	bf00      	nop
  }
  return error;
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop

0800b8a8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b088      	sub	sp, #32
 800b8c2:	af02      	add	r7, sp, #8
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	2134      	movs	r1, #52	; 0x34
 800b8e2:	fb01 f303 	mul.w	r3, r1, r3
 800b8e6:	4413      	add	r3, r2
 800b8e8:	3390      	adds	r3, #144	; 0x90
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b06      	cmp	r3, #6
 800b8ee:	d004      	beq.n	800b8fa <USBH_MSC_RdWrProcess+0x3c>
 800b8f0:	2b07      	cmp	r3, #7
 800b8f2:	d037      	beq.n	800b964 <USBH_MSC_RdWrProcess+0xa6>
 800b8f4:	2b05      	cmp	r3, #5
 800b8f6:	d06a      	beq.n	800b9ce <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800b8f8:	e0a6      	b.n	800ba48 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b8fa:	78f9      	ldrb	r1, [r7, #3]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fea6 	bl	800c656 <USBH_MSC_SCSI_Read>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	2134      	movs	r1, #52	; 0x34
 800b91a:	fb01 f303 	mul.w	r3, r1, r3
 800b91e:	4413      	add	r3, r2
 800b920:	3390      	adds	r3, #144	; 0x90
 800b922:	2201      	movs	r2, #1
 800b924:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
      break;
 800b92a:	e088      	b.n	800ba3e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d109      	bne.n	800b946 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b932:	78fb      	ldrb	r3, [r7, #3]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	2134      	movs	r1, #52	; 0x34
 800b938:	fb01 f303 	mul.w	r3, r1, r3
 800b93c:	4413      	add	r3, r2
 800b93e:	3390      	adds	r3, #144	; 0x90
 800b940:	2205      	movs	r2, #5
 800b942:	701a      	strb	r2, [r3, #0]
      break;
 800b944:	e07b      	b.n	800ba3e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b946:	7bfb      	ldrb	r3, [r7, #15]
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d178      	bne.n	800ba3e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	2134      	movs	r1, #52	; 0x34
 800b952:	fb01 f303 	mul.w	r3, r1, r3
 800b956:	4413      	add	r3, r2
 800b958:	3390      	adds	r3, #144	; 0x90
 800b95a:	2208      	movs	r2, #8
 800b95c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b95e:	2302      	movs	r3, #2
 800b960:	75fb      	strb	r3, [r7, #23]
      break;
 800b962:	e06c      	b.n	800ba3e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b964:	78f9      	ldrb	r1, [r7, #3]
 800b966:	2300      	movs	r3, #0
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	2300      	movs	r3, #0
 800b96c:	2200      	movs	r2, #0
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fe06 	bl	800c580 <USBH_MSC_SCSI_Write>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10b      	bne.n	800b996 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	2134      	movs	r1, #52	; 0x34
 800b984:	fb01 f303 	mul.w	r3, r1, r3
 800b988:	4413      	add	r3, r2
 800b98a:	3390      	adds	r3, #144	; 0x90
 800b98c:	2201      	movs	r2, #1
 800b98e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	75fb      	strb	r3, [r7, #23]
      break;
 800b994:	e055      	b.n	800ba42 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d109      	bne.n	800b9b0 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	2134      	movs	r1, #52	; 0x34
 800b9a2:	fb01 f303 	mul.w	r3, r1, r3
 800b9a6:	4413      	add	r3, r2
 800b9a8:	3390      	adds	r3, #144	; 0x90
 800b9aa:	2205      	movs	r2, #5
 800b9ac:	701a      	strb	r2, [r3, #0]
      break;
 800b9ae:	e048      	b.n	800ba42 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d145      	bne.n	800ba42 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b9b6:	78fb      	ldrb	r3, [r7, #3]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	2134      	movs	r1, #52	; 0x34
 800b9bc:	fb01 f303 	mul.w	r3, r1, r3
 800b9c0:	4413      	add	r3, r2
 800b9c2:	3390      	adds	r3, #144	; 0x90
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b9cc:	e039      	b.n	800ba42 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	2234      	movs	r2, #52	; 0x34
 800b9d2:	fb02 f303 	mul.w	r3, r2, r3
 800b9d6:	3398      	adds	r3, #152	; 0x98
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4413      	add	r3, r2
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd53 	bl	800c48e <USBH_MSC_SCSI_RequestSense>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d113      	bne.n	800ba1a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	2134      	movs	r1, #52	; 0x34
 800b9f8:	fb01 f303 	mul.w	r3, r1, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	3390      	adds	r3, #144	; 0x90
 800ba00:	2201      	movs	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	2134      	movs	r1, #52	; 0x34
 800ba0a:	fb01 f303 	mul.w	r3, r1, r3
 800ba0e:	4413      	add	r3, r2
 800ba10:	3391      	adds	r3, #145	; 0x91
 800ba12:	2202      	movs	r2, #2
 800ba14:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800ba16:	2302      	movs	r3, #2
 800ba18:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d012      	beq.n	800ba46 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	2b04      	cmp	r3, #4
 800ba24:	d10f      	bne.n	800ba46 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	2134      	movs	r1, #52	; 0x34
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	4413      	add	r3, r2
 800ba32:	3390      	adds	r3, #144	; 0x90
 800ba34:	2208      	movs	r2, #8
 800ba36:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3c:	e003      	b.n	800ba46 <USBH_MSC_RdWrProcess+0x188>
      break;
 800ba3e:	bf00      	nop
 800ba40:	e002      	b.n	800ba48 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800ba42:	bf00      	nop
 800ba44:	e000      	b.n	800ba48 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800ba46:	bf00      	nop

  }
  return error;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b085      	sub	sp, #20
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b0b      	cmp	r3, #11
 800ba70:	d10c      	bne.n	800ba8c <USBH_MSC_UnitIsReady+0x3a>
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	2134      	movs	r1, #52	; 0x34
 800ba78:	fb01 f303 	mul.w	r3, r1, r3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	3391      	adds	r3, #145	; 0x91
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d102      	bne.n	800ba8c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ba86:	2301      	movs	r3, #1
 800ba88:	73fb      	strb	r3, [r7, #15]
 800ba8a:	e001      	b.n	800ba90 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	460b      	mov	r3, r1
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b0b      	cmp	r3, #11
 800babe:	d10d      	bne.n	800badc <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bac0:	7afb      	ldrb	r3, [r7, #11]
 800bac2:	2234      	movs	r2, #52	; 0x34
 800bac4:	fb02 f303 	mul.w	r3, r2, r3
 800bac8:	3390      	adds	r3, #144	; 0x90
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	4413      	add	r3, r2
 800bace:	2234      	movs	r2, #52	; 0x34
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f006 ff06 	bl	80128e4 <memcpy>
    return USBH_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	e000      	b.n	800bade <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800badc:	2302      	movs	r3, #2
  }
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b088      	sub	sp, #32
 800baea:	af02      	add	r7, sp, #8
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
 800baf2:	460b      	mov	r3, r1
 800baf4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00e      	beq.n	800bb2a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bb12:	2b0b      	cmp	r3, #11
 800bb14:	d109      	bne.n	800bb2a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bb16:	7afb      	ldrb	r3, [r7, #11]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	2134      	movs	r1, #52	; 0x34
 800bb1c:	fb01 f303 	mul.w	r3, r1, r3
 800bb20:	4413      	add	r3, r2
 800bb22:	3390      	adds	r3, #144	; 0x90
 800bb24:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d001      	beq.n	800bb2e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e040      	b.n	800bbb0 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2206      	movs	r2, #6
 800bb32:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	2134      	movs	r1, #52	; 0x34
 800bb3a:	fb01 f303 	mul.w	r3, r1, r3
 800bb3e:	4413      	add	r3, r2
 800bb40:	3390      	adds	r3, #144	; 0x90
 800bb42:	2206      	movs	r2, #6
 800bb44:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bb46:	7afb      	ldrb	r3, [r7, #11]
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bb50:	7af9      	ldrb	r1, [r7, #11]
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 fd7b 	bl	800c656 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb66:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb68:	e016      	b.n	800bb98 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	1ad2      	subs	r2, r2, r3
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	f242 7110 	movw	r1, #10000	; 0x2710
 800bb7a:	fb01 f303 	mul.w	r3, r1, r3
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d805      	bhi.n	800bb8e <USBH_MSC_Read+0xa8>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d104      	bne.n	800bb98 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2201      	movs	r2, #1
 800bb92:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bb94:	2302      	movs	r3, #2
 800bb96:	e00b      	b.n	800bbb0 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fe8e 	bl	800b8be <USBH_MSC_RdWrProcess>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d0e0      	beq.n	800bb6a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00e      	beq.n	800bbfc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bbe4:	2b0b      	cmp	r3, #11
 800bbe6:	d109      	bne.n	800bbfc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	2134      	movs	r1, #52	; 0x34
 800bbee:	fb01 f303 	mul.w	r3, r1, r3
 800bbf2:	4413      	add	r3, r2
 800bbf4:	3390      	adds	r3, #144	; 0x90
 800bbf6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d001      	beq.n	800bc00 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e040      	b.n	800bc82 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2207      	movs	r2, #7
 800bc04:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	2134      	movs	r1, #52	; 0x34
 800bc0c:	fb01 f303 	mul.w	r3, r1, r3
 800bc10:	4413      	add	r3, r2
 800bc12:	3390      	adds	r3, #144	; 0x90
 800bc14:	2207      	movs	r2, #7
 800bc16:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bc18:	7afb      	ldrb	r3, [r7, #11]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bc22:	7af9      	ldrb	r1, [r7, #11]
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 fca7 	bl	800c580 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc38:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc3a:	e016      	b.n	800bc6a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	1ad2      	subs	r2, r2, r3
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	f242 7110 	movw	r1, #10000	; 0x2710
 800bc4c:	fb01 f303 	mul.w	r3, r1, r3
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d805      	bhi.n	800bc60 <USBH_MSC_Write+0xa8>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d104      	bne.n	800bc6a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2201      	movs	r2, #1
 800bc64:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bc66:	2302      	movs	r3, #2
 800bc68:	e00b      	b.n	800bc82 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc6a:	7afb      	ldrb	r3, [r7, #11]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fe25 	bl	800b8be <USBH_MSC_RdWrProcess>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d0e0      	beq.n	800bc3c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2221      	movs	r2, #33	; 0x21
 800bc96:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	22ff      	movs	r2, #255	; 0xff
 800bc9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 fdae 	bl	800d816 <USBH_CtlReq>
 800bcba:	4603      	mov	r3, r0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	22a1      	movs	r2, #161	; 0xa1
 800bcd2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	22fe      	movs	r2, #254	; 0xfe
 800bcd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bcec:	2201      	movs	r2, #1
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 fd90 	bl	800d816 <USBH_CtlReq>
 800bcf6:	4603      	mov	r3, r0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <USBH_MSC_BOT_Init+0x3c>)
 800bd16:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <USBH_MSC_BOT_Init+0x40>)
 800bd1c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	43425355 	.word	0x43425355
 800bd40:	20304050 	.word	0x20304050

0800bd44 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bd54:	2301      	movs	r3, #1
 800bd56:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd74:	3b01      	subs	r3, #1
 800bd76:	2b0a      	cmp	r3, #10
 800bd78:	f200 81a1 	bhi.w	800c0be <USBH_MSC_BOT_Process+0x37a>
 800bd7c:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <USBH_MSC_BOT_Process+0x40>)
 800bd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd82:	bf00      	nop
 800bd84:	0800bdb1 	.word	0x0800bdb1
 800bd88:	0800bddb 	.word	0x0800bddb
 800bd8c:	0800be45 	.word	0x0800be45
 800bd90:	0800be63 	.word	0x0800be63
 800bd94:	0800bee7 	.word	0x0800bee7
 800bd98:	0800bf0b 	.word	0x0800bf0b
 800bd9c:	0800bfa5 	.word	0x0800bfa5
 800bda0:	0800bfc1 	.word	0x0800bfc1
 800bda4:	0800c013 	.word	0x0800c013
 800bda8:	0800c043 	.word	0x0800c043
 800bdac:	0800c0a5 	.word	0x0800c0a5
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	795a      	ldrb	r2, [r3, #5]
 800bdca:	2301      	movs	r3, #1
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	221f      	movs	r2, #31
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 ff2f 	bl	800dc36 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bdd8:	e180      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	795b      	ldrb	r3, [r3, #5]
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f005 f9ef 	bl	80111c4 <USBH_LL_GetURBState>
 800bde6:	4603      	mov	r3, r0
 800bde8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bdea:	7d3b      	ldrb	r3, [r7, #20]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d118      	bne.n	800be22 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00f      	beq.n	800be18 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bdfe:	b25b      	sxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	da04      	bge.n	800be0e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2203      	movs	r2, #3
 800be08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800be0c:	e159      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2205      	movs	r2, #5
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be16:	e154      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	2207      	movs	r2, #7
 800be1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be20:	e14f      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be22:	7d3b      	ldrb	r3, [r7, #20]
 800be24:	2b02      	cmp	r3, #2
 800be26:	d104      	bne.n	800be32 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be30:	e147      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800be32:	7d3b      	ldrb	r3, [r7, #20]
 800be34:	2b05      	cmp	r3, #5
 800be36:	f040 8144 	bne.w	800c0c2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	220a      	movs	r2, #10
 800be3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800be42:	e13e      	b.n	800c0c2 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	895a      	ldrh	r2, [r3, #10]
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	791b      	ldrb	r3, [r3, #4]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 ff14 	bl	800dc80 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2204      	movs	r2, #4
 800be5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800be60:	e13c      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	791b      	ldrb	r3, [r3, #4]
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f005 f9ab 	bl	80111c4 <USBH_LL_GetURBState>
 800be6e:	4603      	mov	r3, r0
 800be70:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800be72:	7d3b      	ldrb	r3, [r7, #20]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d12d      	bne.n	800bed4 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	8952      	ldrh	r2, [r2, #10]
 800be80:	4293      	cmp	r3, r2
 800be82:	d910      	bls.n	800bea6 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	8952      	ldrh	r2, [r2, #10]
 800be8e:	441a      	add	r2, r3
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	8952      	ldrh	r2, [r2, #10]
 800be9e:	1a9a      	subs	r2, r3, r2
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	65da      	str	r2, [r3, #92]	; 0x5c
 800bea4:	e002      	b.n	800beac <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2200      	movs	r2, #0
 800beaa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	895a      	ldrh	r2, [r3, #10]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	791b      	ldrb	r3, [r3, #4]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f001 fedc 	bl	800dc80 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bec8:	e0fd      	b.n	800c0c6 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2207      	movs	r2, #7
 800bece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bed2:	e0f8      	b.n	800c0c6 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800bed4:	7d3b      	ldrb	r3, [r7, #20]
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	f040 80f5 	bne.w	800c0c6 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2209      	movs	r2, #9
 800bee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bee4:	e0ef      	b.n	800c0c6 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	891a      	ldrh	r2, [r3, #8]
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	7958      	ldrb	r0, [r3, #5]
 800bef4:	2301      	movs	r3, #1
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	4603      	mov	r3, r0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 fe9b 	bl	800dc36 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2206      	movs	r2, #6
 800bf04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf08:	e0e8      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	795b      	ldrb	r3, [r3, #5]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f005 f957 	bl	80111c4 <USBH_LL_GetURBState>
 800bf16:	4603      	mov	r3, r0
 800bf18:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf1a:	7d3b      	ldrb	r3, [r7, #20]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d130      	bne.n	800bf82 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	8912      	ldrh	r2, [r2, #8]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d910      	bls.n	800bf4e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	8912      	ldrh	r2, [r2, #8]
 800bf36:	441a      	add	r2, r3
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	8912      	ldrh	r2, [r2, #8]
 800bf46:	1a9a      	subs	r2, r3, r2
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf4c:	e002      	b.n	800bf54 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	2200      	movs	r2, #0
 800bf52:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	891a      	ldrh	r2, [r3, #8]
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	7958      	ldrb	r0, [r3, #5]
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4603      	mov	r3, r0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 fe60 	bl	800dc36 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bf76:	e0a8      	b.n	800c0ca <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	2207      	movs	r2, #7
 800bf7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf80:	e0a3      	b.n	800c0ca <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf82:	7d3b      	ldrb	r3, [r7, #20]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d104      	bne.n	800bf92 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	2205      	movs	r2, #5
 800bf8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf90:	e09b      	b.n	800c0ca <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800bf92:	7d3b      	ldrb	r3, [r7, #20]
 800bf94:	2b05      	cmp	r3, #5
 800bf96:	f040 8098 	bne.w	800c0ca <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	220a      	movs	r2, #10
 800bf9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfa2:	e092      	b.n	800c0ca <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	791b      	ldrb	r3, [r3, #4]
 800bfae:	220d      	movs	r2, #13
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 fe65 	bl	800dc80 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2208      	movs	r2, #8
 800bfba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bfbe:	e08d      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f005 f8fc 	bl	80111c4 <USBH_LL_GetURBState>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bfd0:	7d3b      	ldrb	r3, [r7, #20]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d115      	bne.n	800c002 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f8aa 	bl	800c140 <USBH_MSC_DecodeCSW>
 800bfec:	4603      	mov	r3, r0
 800bfee:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bff0:	7d7b      	ldrb	r3, [r7, #21]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d102      	bne.n	800bffc <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bffa:	e068      	b.n	800c0ce <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800bffc:	2302      	movs	r3, #2
 800bffe:	75fb      	strb	r3, [r7, #23]
      break;
 800c000:	e065      	b.n	800c0ce <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800c002:	7d3b      	ldrb	r3, [r7, #20]
 800c004:	2b05      	cmp	r3, #5
 800c006:	d162      	bne.n	800c0ce <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2209      	movs	r2, #9
 800c00c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c010:	e05d      	b.n	800c0ce <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c012:	78fb      	ldrb	r3, [r7, #3]
 800c014:	2200      	movs	r2, #0
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f865 	bl	800c0e8 <USBH_MSC_BOT_Abort>
 800c01e:	4603      	mov	r3, r0
 800c020:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c022:	7dbb      	ldrb	r3, [r7, #22]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d104      	bne.n	800c032 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2207      	movs	r2, #7
 800c02c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c030:	e04f      	b.n	800c0d2 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c032:	7dbb      	ldrb	r3, [r7, #22]
 800c034:	2b04      	cmp	r3, #4
 800c036:	d14c      	bne.n	800c0d2 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	220b      	movs	r2, #11
 800c03c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c040:	e047      	b.n	800c0d2 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c042:	78fb      	ldrb	r3, [r7, #3]
 800c044:	2201      	movs	r2, #1
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f84d 	bl	800c0e8 <USBH_MSC_BOT_Abort>
 800c04e:	4603      	mov	r3, r0
 800c050:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c052:	7dbb      	ldrb	r3, [r7, #22]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d11d      	bne.n	800c094 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	795b      	ldrb	r3, [r3, #5]
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f005 f90d 	bl	801127e <USBH_LL_GetToggle>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	7959      	ldrb	r1, [r3, #5]
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	f1c3 0301 	rsb	r3, r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f005 f8ce 	bl	8011218 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	791b      	ldrb	r3, [r3, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f005 f8c7 	bl	8011218 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	2209      	movs	r2, #9
 800c08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c092:	e020      	b.n	800c0d6 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800c094:	7dbb      	ldrb	r3, [r7, #22]
 800c096:	2b04      	cmp	r3, #4
 800c098:	d11d      	bne.n	800c0d6 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	220b      	movs	r2, #11
 800c09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0a2:	e018      	b.n	800c0d6 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff fdf0 	bl	800bc8a <USBH_MSC_BOT_REQ_Reset>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d112      	bne.n	800c0da <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c0bc:	e00d      	b.n	800c0da <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800c0be:	bf00      	nop
 800c0c0:	e00c      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0c2:	bf00      	nop
 800c0c4:	e00a      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0c6:	bf00      	nop
 800c0c8:	e008      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0ca:	bf00      	nop
 800c0cc:	e006      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0ce:	bf00      	nop
 800c0d0:	e004      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0d2:	bf00      	nop
 800c0d4:	e002      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <USBH_MSC_BOT_Process+0x398>
      break;
 800c0da:	bf00      	nop
  }
  return status;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c106:	78bb      	ldrb	r3, [r7, #2]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <USBH_MSC_BOT_Abort+0x2a>
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d009      	beq.n	800c124 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c110:	e011      	b.n	800c136 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	79db      	ldrb	r3, [r3, #7]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 f99c 	bl	800d456 <USBH_ClrFeature>
 800c11e:	4603      	mov	r3, r0
 800c120:	73fb      	strb	r3, [r7, #15]
      break;
 800c122:	e008      	b.n	800c136 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	799b      	ldrb	r3, [r3, #6]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f993 	bl	800d456 <USBH_ClrFeature>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
      break;
 800c134:	bf00      	nop
  }
  return status;
 800c136:	7bfb      	ldrb	r3, [r7, #15]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c152:	2301      	movs	r3, #1
 800c154:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	791b      	ldrb	r3, [r3, #4]
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f004 ff9f 	bl	80110a0 <USBH_LL_GetLastXferSize>
 800c162:	4603      	mov	r3, r0
 800c164:	2b0d      	cmp	r3, #13
 800c166:	d002      	beq.n	800c16e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c168:	2302      	movs	r3, #2
 800c16a:	73fb      	strb	r3, [r7, #15]
 800c16c:	e024      	b.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c172:	4a14      	ldr	r2, [pc, #80]	; (800c1c4 <USBH_MSC_DecodeCSW+0x84>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d11d      	bne.n	800c1b4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c180:	429a      	cmp	r2, r3
 800c182:	d119      	bne.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]
 800c192:	e011      	b.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d102      	bne.n	800c1a4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	73fb      	strb	r3, [r7, #15]
 800c1a2:	e009      	b.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d104      	bne.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	73fb      	strb	r3, [r7, #15]
 800c1b2:	e001      	b.n	800c1b8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	53425355 	.word	0x53425355

0800c1c8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1de:	69db      	ldr	r3, [r3, #28]
 800c1e0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d002      	beq.n	800c1f2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d021      	beq.n	800c234 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c1f0:	e028      	b.n	800c244 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	220a      	movs	r2, #10
 800c204:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	3363      	adds	r3, #99	; 0x63
 800c20c:	2210      	movs	r2, #16
 800c20e:	2100      	movs	r1, #0
 800c210:	4618      	mov	r0, r3
 800c212:	f006 fb72 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2202      	movs	r2, #2
 800c22a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c22e:	2301      	movs	r3, #1
 800c230:	73fb      	strb	r3, [r7, #15]
      break;
 800c232:	e007      	b.n	800c244 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff fd83 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
      break;
 800c242:	bf00      	nop
  }

  return error;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b086      	sub	sp, #24
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	460b      	mov	r3, r1
 800c258:	607a      	str	r2, [r7, #4]
 800c25a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c25c:	2301      	movs	r3, #1
 800c25e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c266:	69db      	ldr	r3, [r3, #28]
 800c268:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c270:	2b01      	cmp	r3, #1
 800c272:	d002      	beq.n	800c27a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c274:	2b02      	cmp	r3, #2
 800c276:	d027      	beq.n	800c2c8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c278:	e05f      	b.n	800c33a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2208      	movs	r2, #8
 800c27e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2280      	movs	r2, #128	; 0x80
 800c284:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	220a      	movs	r2, #10
 800c28c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	3363      	adds	r3, #99	; 0x63
 800c294:	2210      	movs	r2, #16
 800c296:	2100      	movs	r1, #0
 800c298:	4618      	mov	r0, r3
 800c29a:	f006 fb2e 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2225      	movs	r2, #37	; 0x25
 800c2a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f103 0210 	add.w	r2, r3, #16
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	75fb      	strb	r3, [r7, #23]
      break;
 800c2c6:	e038      	b.n	800c33a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7ff fd39 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d12d      	bne.n	800c338 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e2:	3303      	adds	r3, #3
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c302:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	061b      	lsls	r3, r3, #24
 800c30e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31a:	3307      	adds	r3, #7
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b29a      	uxth	r2, r3
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c326:	3306      	adds	r3, #6
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	021b      	lsls	r3, r3, #8
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4313      	orrs	r3, r2
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	809a      	strh	r2, [r3, #4]
      break;
 800c338:	bf00      	nop
  }

  return error;
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3718      	adds	r7, #24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	460b      	mov	r3, r1
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c352:	2302      	movs	r3, #2
 800c354:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c366:	2b01      	cmp	r3, #1
 800c368:	d002      	beq.n	800c370 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d03d      	beq.n	800c3ea <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c36e:	e089      	b.n	800c484 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	2224      	movs	r2, #36	; 0x24
 800c374:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2280      	movs	r2, #128	; 0x80
 800c37a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	220a      	movs	r2, #10
 800c382:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	3363      	adds	r3, #99	; 0x63
 800c38a:	220a      	movs	r2, #10
 800c38c:	2100      	movs	r1, #0
 800c38e:	4618      	mov	r0, r3
 800c390:	f006 fab3 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2212      	movs	r2, #18
 800c398:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	015b      	lsls	r3, r3, #5
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2224      	movs	r2, #36	; 0x24
 800c3bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f103 0210 	add.w	r2, r3, #16
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c3e8:	e04c      	b.n	800c484 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fca8 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d141      	bne.n	800c482 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c3fe:	2222      	movs	r2, #34	; 0x22
 800c400:	2100      	movs	r1, #0
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f006 fa79 	bl	80128fa <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 031f 	and.w	r3, r3, #31
 800c414:	b2da      	uxtb	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	095b      	lsrs	r3, r3, #5
 800c424:	b2da      	uxtb	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c430:	3301      	adds	r3, #1
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	b25b      	sxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	da03      	bge.n	800c442 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	709a      	strb	r2, [r3, #2]
 800c440:	e002      	b.n	800c448 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	1cd8      	adds	r0, r3, #3
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c452:	3308      	adds	r3, #8
 800c454:	2208      	movs	r2, #8
 800c456:	4619      	mov	r1, r3
 800c458:	f006 fa44 	bl	80128e4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f103 000c 	add.w	r0, r3, #12
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c468:	3310      	adds	r3, #16
 800c46a:	2210      	movs	r2, #16
 800c46c:	4619      	mov	r1, r3
 800c46e:	f006 fa39 	bl	80128e4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	331d      	adds	r3, #29
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c47c:	3220      	adds	r2, #32
 800c47e:	6812      	ldr	r2, [r2, #0]
 800c480:	601a      	str	r2, [r3, #0]
      break;
 800c482:	bf00      	nop
  }

  return error;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b086      	sub	sp, #24
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	460b      	mov	r3, r1
 800c498:	607a      	str	r2, [r7, #4]
 800c49a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c49c:	2302      	movs	r3, #2
 800c49e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d002      	beq.n	800c4ba <USBH_MSC_SCSI_RequestSense+0x2c>
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d03d      	beq.n	800c534 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c4b8:	e05d      	b.n	800c576 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	220e      	movs	r2, #14
 800c4be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	2280      	movs	r2, #128	; 0x80
 800c4c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	220a      	movs	r2, #10
 800c4cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	3363      	adds	r3, #99	; 0x63
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f006 fa0e 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2203      	movs	r2, #3
 800c4e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c4e6:	7afb      	ldrb	r3, [r7, #11]
 800c4e8:	015b      	lsls	r3, r3, #5
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	220e      	movs	r2, #14
 800c506:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2202      	movs	r2, #2
 800c51e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f103 0210 	add.w	r2, r3, #16
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c52e:	2301      	movs	r3, #1
 800c530:	75fb      	strb	r3, [r7, #23]
      break;
 800c532:	e020      	b.n	800c576 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	4619      	mov	r1, r3
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7ff fc03 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c53e:	4603      	mov	r3, r0
 800c540:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c542:	7dfb      	ldrb	r3, [r7, #23]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d115      	bne.n	800c574 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54e:	3302      	adds	r3, #2
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 030f 	and.w	r3, r3, #15
 800c556:	b2da      	uxtb	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c562:	7b1a      	ldrb	r2, [r3, #12]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c56e:	7b5a      	ldrb	r2, [r3, #13]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	709a      	strb	r2, [r3, #2]
      break;
 800c574:	bf00      	nop
  }

  return error;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	460b      	mov	r3, r1
 800c58e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c590:	2302      	movs	r3, #2
 800c592:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d002      	beq.n	800c5ae <USBH_MSC_SCSI_Write+0x2e>
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d047      	beq.n	800c63c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c5ac:	e04e      	b.n	800c64c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	fb03 f202 	mul.w	r2, r3, r2
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	220a      	movs	r2, #10
 800c5cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3363      	adds	r3, #99	; 0x63
 800c5d4:	2210      	movs	r2, #16
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f006 f98e 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	222a      	movs	r2, #42	; 0x2a
 800c5e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c5e6:	79fa      	ldrb	r2, [r7, #7]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c5ee:	79ba      	ldrb	r2, [r7, #6]
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c5f6:	797a      	ldrb	r2, [r7, #5]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c5fe:	1d3b      	adds	r3, r7, #4
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c608:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c612:	f107 0320 	add.w	r3, r7, #32
 800c616:	781a      	ldrb	r2, [r3, #0]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2202      	movs	r2, #2
 800c62a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c636:	2301      	movs	r3, #1
 800c638:	75fb      	strb	r3, [r7, #23]
      break;
 800c63a:	e007      	b.n	800c64c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c63c:	7afb      	ldrb	r3, [r7, #11]
 800c63e:	4619      	mov	r1, r3
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff fb7f 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
      break;
 800c64a:	bf00      	nop
  }

  return error;
 800c64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
 800c662:	460b      	mov	r3, r1
 800c664:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c666:	2302      	movs	r3, #2
 800c668:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d002      	beq.n	800c684 <USBH_MSC_SCSI_Read+0x2e>
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d047      	beq.n	800c712 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c682:	e04e      	b.n	800c722 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c68a:	461a      	mov	r2, r3
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	fb03 f202 	mul.w	r2, r3, r2
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2280      	movs	r2, #128	; 0x80
 800c69a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	3363      	adds	r3, #99	; 0x63
 800c6aa:	2210      	movs	r2, #16
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f006 f923 	bl	80128fa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2228      	movs	r2, #40	; 0x28
 800c6b8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c6bc:	79fa      	ldrb	r2, [r7, #7]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c6c4:	79ba      	ldrb	r2, [r7, #6]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c6cc:	797a      	ldrb	r2, [r7, #5]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c6d4:	1d3b      	adds	r3, r7, #4
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c6de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c6e8:	f107 0320 	add.w	r3, r7, #32
 800c6ec:	781a      	ldrb	r2, [r3, #0]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2202      	movs	r2, #2
 800c700:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c70c:	2301      	movs	r3, #1
 800c70e:	75fb      	strb	r3, [r7, #23]
      break;
 800c710:	e007      	b.n	800c722 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c712:	7afb      	ldrb	r3, [r7, #11]
 800c714:	4619      	mov	r1, r3
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7ff fb14 	bl	800bd44 <USBH_MSC_BOT_Process>
 800c71c:	4603      	mov	r3, r0
 800c71e:	75fb      	strb	r3, [r7, #23]
      break;
 800c720:	bf00      	nop
  }

  return error;
 800c722:	7dfb      	ldrb	r3, [r7, #23]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c740:	2302      	movs	r3, #2
 800c742:	e029      	b.n	800c798 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	79fa      	ldrb	r2, [r7, #7]
 800c748:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 f81f 	bl	800c7a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d003      	beq.n	800c790 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f004 fbd3 	bl	8010f3c <USBH_LL_Init>

  return USBH_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e009      	b.n	800c7c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	33e0      	adds	r3, #224	; 0xe0
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	2200      	movs	r2, #0
 800c7be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b0e      	cmp	r3, #14
 800c7ca:	d9f2      	bls.n	800c7b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	e009      	b.n	800c7e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ec:	d3f1      	bcc.n	800c7d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2240      	movs	r2, #64	; 0x40
 800c812:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d016      	beq.n	800c88a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10e      	bne.n	800c884 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c86c:	1c59      	adds	r1, r3, #1
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	33de      	adds	r3, #222	; 0xde
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]
 800c882:	e004      	b.n	800c88e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c884:	2302      	movs	r3, #2
 800c886:	73fb      	strb	r3, [r7, #15]
 800c888:	e001      	b.n	800c88e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c88a:	2302      	movs	r3, #2
 800c88c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c8b2:	78fa      	ldrb	r2, [r7, #3]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d204      	bcs.n	800c8c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	78fa      	ldrb	r2, [r7, #3]
 800c8bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c8c0:	e001      	b.n	800c8c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	4608      	mov	r0, r1
 800c8de:	4611      	mov	r1, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	70fb      	strb	r3, [r7, #3]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	70bb      	strb	r3, [r7, #2]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c8fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8fe:	e025      	b.n	800c94c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	221a      	movs	r2, #26
 800c904:	fb02 f303 	mul.w	r3, r2, r3
 800c908:	3308      	adds	r3, #8
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	3302      	adds	r3, #2
 800c910:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	795b      	ldrb	r3, [r3, #5]
 800c916:	78fa      	ldrb	r2, [r7, #3]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d002      	beq.n	800c922 <USBH_FindInterface+0x4e>
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	2bff      	cmp	r3, #255	; 0xff
 800c920:	d111      	bne.n	800c946 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c926:	78ba      	ldrb	r2, [r7, #2]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d002      	beq.n	800c932 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c92c:	78bb      	ldrb	r3, [r7, #2]
 800c92e:	2bff      	cmp	r3, #255	; 0xff
 800c930:	d109      	bne.n	800c946 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c936:	787a      	ldrb	r2, [r7, #1]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d002      	beq.n	800c942 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c93c:	787b      	ldrb	r3, [r7, #1]
 800c93e:	2bff      	cmp	r3, #255	; 0xff
 800c940:	d101      	bne.n	800c946 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	e006      	b.n	800c954 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	3301      	adds	r3, #1
 800c94a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d9d6      	bls.n	800c900 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c952:	23ff      	movs	r3, #255	; 0xff
}
 800c954:	4618      	mov	r0, r3
 800c956:	371c      	adds	r7, #28
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f004 fb23 	bl	8010fb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c96e:	2101      	movs	r1, #1
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f004 fc3a 	bl	80111ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af04      	add	r7, sp, #16
 800c986:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c988:	2302      	movs	r3, #2
 800c98a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d102      	bne.n	800c9a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2203      	movs	r2, #3
 800c9a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b0b      	cmp	r3, #11
 800c9aa:	f200 81b3 	bhi.w	800cd14 <USBH_Process+0x394>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <USBH_Process+0x34>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9e5 	.word	0x0800c9e5
 800c9b8:	0800ca17 	.word	0x0800ca17
 800c9bc:	0800ca7f 	.word	0x0800ca7f
 800c9c0:	0800ccaf 	.word	0x0800ccaf
 800c9c4:	0800cd15 	.word	0x0800cd15
 800c9c8:	0800cb23 	.word	0x0800cb23
 800c9cc:	0800cc55 	.word	0x0800cc55
 800c9d0:	0800cb59 	.word	0x0800cb59
 800c9d4:	0800cb79 	.word	0x0800cb79
 800c9d8:	0800cb99 	.word	0x0800cb99
 800c9dc:	0800cbc7 	.word	0x0800cbc7
 800c9e0:	0800cc97 	.word	0x0800cc97
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 8193 	beq.w	800cd18 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c9f8:	20c8      	movs	r0, #200	; 0xc8
 800c9fa:	f004 fc73 	bl	80112e4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f004 fb33 	bl	801106a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ca14:	e180      	b.n	800cd18 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d107      	bne.n	800ca30 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca2e:	e182      	b.n	800cd36 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca3a:	d914      	bls.n	800ca66 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d903      	bls.n	800ca5e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	220d      	movs	r2, #13
 800ca5a:	701a      	strb	r2, [r3, #0]
      break;
 800ca5c:	e16b      	b.n	800cd36 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	701a      	strb	r2, [r3, #0]
      break;
 800ca64:	e167      	b.n	800cd36 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ca6c:	f103 020a 	add.w	r2, r3, #10
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ca76:	200a      	movs	r0, #10
 800ca78:	f004 fc34 	bl	80112e4 <USBH_Delay>
      break;
 800ca7c:	e15b      	b.n	800cd36 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca8e:	2104      	movs	r1, #4
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca94:	2064      	movs	r0, #100	; 0x64
 800ca96:	f004 fc25 	bl	80112e4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f004 fac0 	bl	8011020 <USBH_LL_GetSpeed>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2205      	movs	r2, #5
 800caae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cab0:	2100      	movs	r1, #0
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f001 f931 	bl	800dd1a <USBH_AllocPipe>
 800cab8:	4603      	mov	r3, r0
 800caba:	461a      	mov	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cac0:	2180      	movs	r1, #128	; 0x80
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 f929 	bl	800dd1a <USBH_AllocPipe>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7919      	ldrb	r1, [r3, #4]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cae4:	b292      	uxth	r2, r2
 800cae6:	9202      	str	r2, [sp, #8]
 800cae8:	2200      	movs	r2, #0
 800caea:	9201      	str	r2, [sp, #4]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4603      	mov	r3, r0
 800caf0:	2280      	movs	r2, #128	; 0x80
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 f8e2 	bl	800dcbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7959      	ldrb	r1, [r3, #5]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cb0c:	b292      	uxth	r2, r2
 800cb0e:	9202      	str	r2, [sp, #8]
 800cb10:	2200      	movs	r2, #0
 800cb12:	9201      	str	r2, [sp, #4]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4603      	mov	r3, r0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f001 f8ce 	bl	800dcbc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb20:	e109      	b.n	800cd36 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f90c 	bl	800cd40 <USBH_HandleEnum>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f040 80f3 	bne.w	800cd1c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d103      	bne.n	800cb50 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2208      	movs	r2, #8
 800cb4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cb4e:	e0e5      	b.n	800cd1c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2207      	movs	r2, #7
 800cb54:	701a      	strb	r2, [r3, #0]
      break;
 800cb56:	e0e1      	b.n	800cd1c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 80de 	beq.w	800cd20 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2208      	movs	r2, #8
 800cb74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cb76:	e0d3      	b.n	800cd20 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fc20 	bl	800d3c8 <USBH_SetCfg>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f040 80ca 	bne.w	800cd24 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2209      	movs	r2, #9
 800cb94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb96:	e0c5      	b.n	800cd24 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cb9e:	f003 0320 	and.w	r3, r3, #32
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00b      	beq.n	800cbbe <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cba6:	2101      	movs	r1, #1
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fc30 	bl	800d40e <USBH_SetFeature>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f040 80b9 	bne.w	800cd28 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	220a      	movs	r2, #10
 800cbba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cbbc:	e0b4      	b.n	800cd28 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	701a      	strb	r2, [r3, #0]
      break;
 800cbc4:	e0b0      	b.n	800cd28 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 80ad 	beq.w	800cd2c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cbda:	2300      	movs	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]
 800cbde:	e016      	b.n	800cc0e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cbe0:	7bfa      	ldrb	r2, [r7, #15]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	32de      	adds	r2, #222	; 0xde
 800cbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbea:	791a      	ldrb	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d108      	bne.n	800cc08 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cbf6:	7bfa      	ldrb	r2, [r7, #15]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	32de      	adds	r2, #222	; 0xde
 800cbfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cc06:	e005      	b.n	800cc14 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	73fb      	strb	r3, [r7, #15]
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0e5      	beq.n	800cbe0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d016      	beq.n	800cc4c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	4798      	blx	r3
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d109      	bne.n	800cc44 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2206      	movs	r2, #6
 800cc34:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc3c:	2103      	movs	r1, #3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc42:	e073      	b.n	800cd2c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	220d      	movs	r2, #13
 800cc48:	701a      	strb	r2, [r3, #0]
      break;
 800cc4a:	e06f      	b.n	800cd2c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	220d      	movs	r2, #13
 800cc50:	701a      	strb	r2, [r3, #0]
      break;
 800cc52:	e06b      	b.n	800cd2c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d017      	beq.n	800cc8e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	4798      	blx	r3
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	220b      	movs	r2, #11
 800cc7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc7c:	e058      	b.n	800cd30 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800cc7e:	7bbb      	ldrb	r3, [r7, #14]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d154      	bne.n	800cd30 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	220d      	movs	r2, #13
 800cc8a:	701a      	strb	r2, [r3, #0]
      break;
 800cc8c:	e050      	b.n	800cd30 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	220d      	movs	r2, #13
 800cc92:	701a      	strb	r2, [r3, #0]
      break;
 800cc94:	e04c      	b.n	800cd30 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d049      	beq.n	800cd34 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	4798      	blx	r3
      }
      break;
 800ccac:	e042      	b.n	800cd34 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fd72 	bl	800c7a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d005      	beq.n	800ccf0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccea:	2105      	movs	r1, #5
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d107      	bne.n	800cd0c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff fe2b 	bl	800c960 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cd0a:	e014      	b.n	800cd36 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f004 f951 	bl	8010fb4 <USBH_LL_Start>
      break;
 800cd12:	e010      	b.n	800cd36 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd14:	bf00      	nop
 800cd16:	e00e      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd18:	bf00      	nop
 800cd1a:	e00c      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd1c:	bf00      	nop
 800cd1e:	e00a      	b.n	800cd36 <USBH_Process+0x3b6>
    break;
 800cd20:	bf00      	nop
 800cd22:	e008      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd24:	bf00      	nop
 800cd26:	e006      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd28:	bf00      	nop
 800cd2a:	e004      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd2c:	bf00      	nop
 800cd2e:	e002      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd30:	bf00      	nop
 800cd32:	e000      	b.n	800cd36 <USBH_Process+0x3b6>
      break;
 800cd34:	bf00      	nop
  }
  return USBH_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	2b07      	cmp	r3, #7
 800cd56:	f200 81c1 	bhi.w	800d0dc <USBH_HandleEnum+0x39c>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <USBH_HandleEnum+0x20>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd81 	.word	0x0800cd81
 800cd64:	0800ce3f 	.word	0x0800ce3f
 800cd68:	0800cea9 	.word	0x0800cea9
 800cd6c:	0800cf37 	.word	0x0800cf37
 800cd70:	0800cfa1 	.word	0x0800cfa1
 800cd74:	0800d011 	.word	0x0800d011
 800cd78:	0800d057 	.word	0x0800d057
 800cd7c:	0800d09d 	.word	0x0800d09d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cd80:	2108      	movs	r1, #8
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fa50 	bl	800d228 <USBH_Get_DevDesc>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd8c:	7bbb      	ldrb	r3, [r7, #14]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d130      	bne.n	800cdf4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7919      	ldrb	r1, [r3, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cdb6:	b292      	uxth	r2, r2
 800cdb8:	9202      	str	r2, [sp, #8]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	9201      	str	r2, [sp, #4]
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2280      	movs	r2, #128	; 0x80
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 ff79 	bl	800dcbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7959      	ldrb	r1, [r3, #5]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdde:	b292      	uxth	r2, r2
 800cde0:	9202      	str	r2, [sp, #8]
 800cde2:	2200      	movs	r2, #0
 800cde4:	9201      	str	r2, [sp, #4]
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	4603      	mov	r3, r0
 800cdea:	2200      	movs	r2, #0
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 ff65 	bl	800dcbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cdf2:	e175      	b.n	800d0e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f040 8172 	bne.w	800d0e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d903      	bls.n	800ce1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220d      	movs	r2, #13
 800ce1a:	701a      	strb	r2, [r3, #0]
      break;
 800ce1c:	e160      	b.n	800d0e0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	795b      	ldrb	r3, [r3, #5]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 ff99 	bl	800dd5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	791b      	ldrb	r3, [r3, #4]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 ff93 	bl	800dd5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	701a      	strb	r2, [r3, #0]
      break;
 800ce3c:	e150      	b.n	800d0e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ce3e:	2112      	movs	r1, #18
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f9f1 	bl	800d228 <USBH_Get_DevDesc>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d103      	bne.n	800ce58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2202      	movs	r2, #2
 800ce54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce56:	e145      	b.n	800d0e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	f040 8142 	bne.w	800d0e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce66:	3301      	adds	r3, #1
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d903      	bls.n	800ce82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	220d      	movs	r2, #13
 800ce7e:	701a      	strb	r2, [r3, #0]
      break;
 800ce80:	e130      	b.n	800d0e4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	795b      	ldrb	r3, [r3, #5]
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 ff67 	bl	800dd5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	791b      	ldrb	r3, [r3, #4]
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 ff61 	bl	800dd5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	701a      	strb	r2, [r3, #0]
      break;
 800cea6:	e11d      	b.n	800d0e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cea8:	2101      	movs	r1, #1
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa68 	bl	800d380 <USBH_SetAddress>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ceb4:	7bbb      	ldrb	r3, [r7, #14]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d132      	bne.n	800cf20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ceba:	2002      	movs	r0, #2
 800cebc:	f004 fa12 	bl	80112e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2203      	movs	r2, #3
 800cecc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7919      	ldrb	r1, [r3, #4]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cee2:	b292      	uxth	r2, r2
 800cee4:	9202      	str	r2, [sp, #8]
 800cee6:	2200      	movs	r2, #0
 800cee8:	9201      	str	r2, [sp, #4]
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	4603      	mov	r3, r0
 800ceee:	2280      	movs	r2, #128	; 0x80
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fee3 	bl	800dcbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7959      	ldrb	r1, [r3, #5]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf0a:	b292      	uxth	r2, r2
 800cf0c:	9202      	str	r2, [sp, #8]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	9201      	str	r2, [sp, #4]
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4603      	mov	r3, r0
 800cf16:	2200      	movs	r2, #0
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fecf 	bl	800dcbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf1e:	e0e3      	b.n	800d0e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	f040 80e0 	bne.w	800d0e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	220d      	movs	r2, #13
 800cf2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	705a      	strb	r2, [r3, #1]
      break;
 800cf34:	e0d8      	b.n	800d0e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf36:	2109      	movs	r1, #9
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f99d 	bl	800d278 <USBH_Get_CfgDesc>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2204      	movs	r2, #4
 800cf4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf4e:	e0cd      	b.n	800d0ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	f040 80ca 	bne.w	800d0ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf5e:	3301      	adds	r3, #1
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf6e:	2b03      	cmp	r3, #3
 800cf70:	d903      	bls.n	800cf7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	220d      	movs	r2, #13
 800cf76:	701a      	strb	r2, [r3, #0]
      break;
 800cf78:	e0b8      	b.n	800d0ec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	795b      	ldrb	r3, [r3, #5]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 feeb 	bl	800dd5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	791b      	ldrb	r3, [r3, #4]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fee5 	bl	800dd5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
      break;
 800cf9e:	e0a5      	b.n	800d0ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f965 	bl	800d278 <USBH_Get_CfgDesc>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfb2:	7bbb      	ldrb	r3, [r7, #14]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2205      	movs	r2, #5
 800cfbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfbe:	e097      	b.n	800d0f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	f040 8094 	bne.w	800d0f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfce:	3301      	adds	r3, #1
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d903      	bls.n	800cfea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	220d      	movs	r2, #13
 800cfe6:	701a      	strb	r2, [r3, #0]
      break;
 800cfe8:	e082      	b.n	800d0f0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	795b      	ldrb	r3, [r3, #5]
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 feb3 	bl	800dd5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	791b      	ldrb	r3, [r3, #4]
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 fead 	bl	800dd5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	701a      	strb	r2, [r3, #0]
      break;
 800d00e:	e06f      	b.n	800d0f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d016:	2b00      	cmp	r3, #0
 800d018:	d019      	beq.n	800d04e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d026:	23ff      	movs	r3, #255	; 0xff
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f949 	bl	800d2c0 <USBH_Get_StringDesc>
 800d02e:	4603      	mov	r3, r0
 800d030:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d103      	bne.n	800d040 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2206      	movs	r2, #6
 800d03c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d03e:	e059      	b.n	800d0f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	2b03      	cmp	r3, #3
 800d044:	d156      	bne.n	800d0f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2206      	movs	r2, #6
 800d04a:	705a      	strb	r2, [r3, #1]
      break;
 800d04c:	e052      	b.n	800d0f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2206      	movs	r2, #6
 800d052:	705a      	strb	r2, [r3, #1]
      break;
 800d054:	e04e      	b.n	800d0f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d019      	beq.n	800d094 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d06c:	23ff      	movs	r3, #255	; 0xff
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f926 	bl	800d2c0 <USBH_Get_StringDesc>
 800d074:	4603      	mov	r3, r0
 800d076:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d078:	7bbb      	ldrb	r3, [r7, #14]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d103      	bne.n	800d086 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2207      	movs	r2, #7
 800d082:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d084:	e038      	b.n	800d0f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d086:	7bbb      	ldrb	r3, [r7, #14]
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d135      	bne.n	800d0f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2207      	movs	r2, #7
 800d090:	705a      	strb	r2, [r3, #1]
      break;
 800d092:	e031      	b.n	800d0f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2207      	movs	r2, #7
 800d098:	705a      	strb	r2, [r3, #1]
      break;
 800d09a:	e02d      	b.n	800d0f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d017      	beq.n	800d0d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0b2:	23ff      	movs	r3, #255	; 0xff
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f903 	bl	800d2c0 <USBH_Get_StringDesc>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d0c8:	e018      	b.n	800d0fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0ca:	7bbb      	ldrb	r3, [r7, #14]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d115      	bne.n	800d0fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d4:	e012      	b.n	800d0fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0da:	e00f      	b.n	800d0fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d0dc:	bf00      	nop
 800d0de:	e00e      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0e0:	bf00      	nop
 800d0e2:	e00c      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0e4:	bf00      	nop
 800d0e6:	e00a      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0e8:	bf00      	nop
 800d0ea:	e008      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0ec:	bf00      	nop
 800d0ee:	e006      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0f0:	bf00      	nop
 800d0f2:	e004      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0f4:	bf00      	nop
 800d0f6:	e002      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <USBH_HandleEnum+0x3be>
      break;
 800d0fc:	bf00      	nop
  }
  return Status;
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d11a:	bf00      	nop
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d134:	1c5a      	adds	r2, r3, #1
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f804 	bl	800d14a <USBH_HandleSof>
}
 800d142:	bf00      	nop
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b082      	sub	sp, #8
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b0b      	cmp	r3, #11
 800d15a:	d10a      	bne.n	800d172 <USBH_HandleSof+0x28>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d162:	2b00      	cmp	r3, #0
 800d164:	d005      	beq.n	800d172 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	4798      	blx	r3
  }
}
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b083      	sub	sp, #12
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d18a:	bf00      	nop
}
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d1a6:	bf00      	nop
}
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d1b2:	b480      	push	{r7}
 800d1b4:	b083      	sub	sp, #12
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f003 fef2 	bl	8010fea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	791b      	ldrb	r3, [r3, #4]
 800d20a:	4619      	mov	r1, r3
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 fda5 	bl	800dd5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	795b      	ldrb	r3, [r3, #5]
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fd9f 	bl	800dd5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af02      	add	r7, sp, #8
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d23a:	78fb      	ldrb	r3, [r7, #3]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	4613      	mov	r3, r2
 800d242:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d246:	2100      	movs	r1, #0
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f864 	bl	800d316 <USBH_GetDescriptor>
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	b292      	uxth	r2, r2
 800d268:	4619      	mov	r1, r3
 800d26a:	f000 f918 	bl	800d49e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	331c      	adds	r3, #28
 800d288:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d28a:	887b      	ldrh	r3, [r7, #2]
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d294:	2100      	movs	r1, #0
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f83d 	bl	800d316 <USBH_GetDescriptor>
 800d29c:	4603      	mov	r3, r0
 800d29e:	72fb      	strb	r3, [r7, #11]
 800d2a0:	7afb      	ldrb	r3, [r7, #11]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d107      	bne.n	800d2b6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d2ac:	887a      	ldrh	r2, [r7, #2]
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f964 	bl	800d57e <USBH_ParseCfgDesc>
  }

  return status;
 800d2b6:	7afb      	ldrb	r3, [r7, #11]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af02      	add	r7, sp, #8
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	72fb      	strb	r3, [r7, #11]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d2d4:	7afb      	ldrb	r3, [r7, #11]
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d2dc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d2e4:	893b      	ldrh	r3, [r7, #8]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f812 	bl	800d316 <USBH_GetDescriptor>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d107      	bne.n	800d30c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d302:	893a      	ldrh	r2, [r7, #8]
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 fa37 	bl	800d77a <USBH_ParseStringDesc>
  }

  return status;
 800d30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	607b      	str	r3, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	72fb      	strb	r3, [r7, #11]
 800d324:	4613      	mov	r3, r2
 800d326:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	789b      	ldrb	r3, [r3, #2]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d11c      	bne.n	800d36a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d330:	7afb      	ldrb	r3, [r7, #11]
 800d332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d336:	b2da      	uxtb	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2206      	movs	r2, #6
 800d340:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	893a      	ldrh	r2, [r7, #8]
 800d346:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d348:	893b      	ldrh	r3, [r7, #8]
 800d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d352:	d104      	bne.n	800d35e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f240 4209 	movw	r2, #1033	; 0x409
 800d35a:	829a      	strh	r2, [r3, #20]
 800d35c:	e002      	b.n	800d364 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	8b3a      	ldrh	r2, [r7, #24]
 800d368:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d36a:	8b3b      	ldrh	r3, [r7, #24]
 800d36c:	461a      	mov	r2, r3
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 fa50 	bl	800d816 <USBH_CtlReq>
 800d376:	4603      	mov	r3, r0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	789b      	ldrb	r3, [r3, #2]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d10f      	bne.n	800d3b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2205      	movs	r2, #5
 800d39e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fa2c 	bl	800d816 <USBH_CtlReq>
 800d3be:	4603      	mov	r3, r0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	789b      	ldrb	r3, [r3, #2]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d10e      	bne.n	800d3fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2209      	movs	r2, #9
 800d3e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	887a      	ldrh	r2, [r7, #2]
 800d3ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa09 	bl	800d816 <USBH_CtlReq>
 800d404:	4603      	mov	r3, r0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b082      	sub	sp, #8
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	460b      	mov	r3, r1
 800d418:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	789b      	ldrb	r3, [r3, #2]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d10f      	bne.n	800d442 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2203      	movs	r2, #3
 800d42c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	b29a      	uxth	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d442:	2200      	movs	r2, #0
 800d444:	2100      	movs	r1, #0
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f9e5 	bl	800d816 <USBH_CtlReq>
 800d44c:	4603      	mov	r3, r0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	460b      	mov	r3, r1
 800d460:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	789b      	ldrb	r3, [r3, #2]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d10f      	bne.n	800d48a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2202      	movs	r2, #2
 800d46e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	b29a      	uxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d48a:	2200      	movs	r2, #0
 800d48c:	2100      	movs	r1, #0
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f9c1 	bl	800d816 <USBH_CtlReq>
 800d494:	4603      	mov	r3, r0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	60f8      	str	r0, [r7, #12]
 800d4a6:	60b9      	str	r1, [r7, #8]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	781a      	ldrb	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	785a      	ldrb	r2, [r3, #1]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	3302      	adds	r3, #2
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	3303      	adds	r3, #3
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	021b      	lsls	r3, r3, #8
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	791a      	ldrb	r2, [r3, #4]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	795a      	ldrb	r2, [r3, #5]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	799a      	ldrb	r2, [r3, #6]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	79da      	ldrb	r2, [r3, #7]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d4f8:	88fb      	ldrh	r3, [r7, #6]
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d939      	bls.n	800d572 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	3308      	adds	r3, #8
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b29a      	uxth	r2, r3
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	3309      	adds	r3, #9
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	021b      	lsls	r3, r3, #8
 800d510:	b29b      	uxth	r3, r3
 800d512:	4313      	orrs	r3, r2
 800d514:	b29a      	uxth	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	330a      	adds	r3, #10
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	b29a      	uxth	r2, r3
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	330b      	adds	r3, #11
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	4313      	orrs	r3, r2
 800d530:	b29a      	uxth	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	330c      	adds	r3, #12
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	330d      	adds	r3, #13
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	b29b      	uxth	r3, r3
 800d546:	021b      	lsls	r3, r3, #8
 800d548:	b29b      	uxth	r3, r3
 800d54a:	4313      	orrs	r3, r2
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	7b9a      	ldrb	r2, [r3, #14]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	7bda      	ldrb	r2, [r3, #15]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	7c1a      	ldrb	r2, [r3, #16]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	7c5a      	ldrb	r2, [r3, #17]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	745a      	strb	r2, [r3, #17]
  }
}
 800d572:	bf00      	nop
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b08a      	sub	sp, #40	; 0x28
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	4613      	mov	r3, r2
 800d58a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d590:	2300      	movs	r3, #0
 800d592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	781a      	ldrb	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	785a      	ldrb	r2, [r3, #1]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	3302      	adds	r3, #2
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	3303      	adds	r3, #3
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	021b      	lsls	r3, r3, #8
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	791a      	ldrb	r2, [r3, #4]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	795a      	ldrb	r2, [r3, #5]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	799a      	ldrb	r2, [r3, #6]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	79da      	ldrb	r2, [r3, #7]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	7a1a      	ldrb	r2, [r3, #8]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	2b09      	cmp	r3, #9
 800d5f8:	d95f      	bls.n	800d6ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5fa:	2309      	movs	r3, #9
 800d5fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d602:	e051      	b.n	800d6a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d604:	f107 0316 	add.w	r3, r7, #22
 800d608:	4619      	mov	r1, r3
 800d60a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d60c:	f000 f8e8 	bl	800d7e0 <USBH_GetNextDesc>
 800d610:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	785b      	ldrb	r3, [r3, #1]
 800d616:	2b04      	cmp	r3, #4
 800d618:	d146      	bne.n	800d6a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d61a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d61e:	221a      	movs	r2, #26
 800d620:	fb02 f303 	mul.w	r3, r2, r3
 800d624:	3308      	adds	r3, #8
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	4413      	add	r3, r2
 800d62a:	3302      	adds	r3, #2
 800d62c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d62e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d630:	69f8      	ldr	r0, [r7, #28]
 800d632:	f000 f846 	bl	800d6c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d636:	2300      	movs	r3, #0
 800d638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d640:	e022      	b.n	800d688 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d642:	f107 0316 	add.w	r3, r7, #22
 800d646:	4619      	mov	r1, r3
 800d648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d64a:	f000 f8c9 	bl	800d7e0 <USBH_GetNextDesc>
 800d64e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	785b      	ldrb	r3, [r3, #1]
 800d654:	2b05      	cmp	r3, #5
 800d656:	d117      	bne.n	800d688 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d65c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d660:	3201      	adds	r2, #1
 800d662:	00d2      	lsls	r2, r2, #3
 800d664:	211a      	movs	r1, #26
 800d666:	fb01 f303 	mul.w	r3, r1, r3
 800d66a:	4413      	add	r3, r2
 800d66c:	3308      	adds	r3, #8
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	4413      	add	r3, r2
 800d672:	3304      	adds	r3, #4
 800d674:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d678:	69b8      	ldr	r0, [r7, #24]
 800d67a:	f000 f851 	bl	800d720 <USBH_ParseEPDesc>
            ep_ix++;
 800d67e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d682:	3301      	adds	r3, #1
 800d684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	791b      	ldrb	r3, [r3, #4]
 800d68c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d690:	429a      	cmp	r2, r3
 800d692:	d204      	bcs.n	800d69e <USBH_ParseCfgDesc+0x120>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	885a      	ldrh	r2, [r3, #2]
 800d698:	8afb      	ldrh	r3, [r7, #22]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d8d1      	bhi.n	800d642 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d804      	bhi.n	800d6ba <USBH_ParseCfgDesc+0x13c>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	885a      	ldrh	r2, [r3, #2]
 800d6b4:	8afb      	ldrh	r3, [r7, #22]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d8a4      	bhi.n	800d604 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d6ba:	bf00      	nop
 800d6bc:	3728      	adds	r7, #40	; 0x28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b083      	sub	sp, #12
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	781a      	ldrb	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	785a      	ldrb	r2, [r3, #1]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	789a      	ldrb	r2, [r3, #2]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	78da      	ldrb	r2, [r3, #3]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	791a      	ldrb	r2, [r3, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	795a      	ldrb	r2, [r3, #5]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	799a      	ldrb	r2, [r3, #6]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	79da      	ldrb	r2, [r3, #7]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	7a1a      	ldrb	r2, [r3, #8]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	721a      	strb	r2, [r3, #8]
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781a      	ldrb	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	785a      	ldrb	r2, [r3, #1]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	789a      	ldrb	r2, [r3, #2]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	78da      	ldrb	r2, [r3, #3]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	3304      	adds	r3, #4
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	b29a      	uxth	r2, r3
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	3305      	adds	r3, #5
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	021b      	lsls	r3, r3, #8
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4313      	orrs	r3, r2
 800d760:	b29a      	uxth	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	799a      	ldrb	r2, [r3, #6]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	719a      	strb	r2, [r3, #6]
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b087      	sub	sp, #28
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	4613      	mov	r3, r2
 800d786:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3301      	adds	r3, #1
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d120      	bne.n	800d7d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	1e9a      	subs	r2, r3, #2
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	4293      	cmp	r3, r2
 800d79c:	bf28      	it	cs
 800d79e:	4613      	movcs	r3, r2
 800d7a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3302      	adds	r3, #2
 800d7a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	82fb      	strh	r3, [r7, #22]
 800d7ac:	e00b      	b.n	800d7c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d7ae:	8afb      	ldrh	r3, [r7, #22]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	781a      	ldrb	r2, [r3, #0]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7c0:	8afb      	ldrh	r3, [r7, #22]
 800d7c2:	3302      	adds	r3, #2
 800d7c4:	82fb      	strh	r3, [r7, #22]
 800d7c6:	8afa      	ldrh	r2, [r7, #22]
 800d7c8:	8abb      	ldrh	r3, [r7, #20]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d3ef      	bcc.n	800d7ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
  }
}
 800d7d4:	bf00      	nop
 800d7d6:	371c      	adds	r7, #28
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	881a      	ldrh	r2, [r3, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4413      	add	r3, r2
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4413      	add	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d808:	68fb      	ldr	r3, [r7, #12]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b086      	sub	sp, #24
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	60f8      	str	r0, [r7, #12]
 800d81e:	60b9      	str	r1, [r7, #8]
 800d820:	4613      	mov	r3, r2
 800d822:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d824:	2301      	movs	r3, #1
 800d826:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d002      	beq.n	800d836 <USBH_CtlReq+0x20>
 800d830:	2b02      	cmp	r3, #2
 800d832:	d00f      	beq.n	800d854 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d834:	e027      	b.n	800d886 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	88fa      	ldrh	r2, [r7, #6]
 800d840:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2201      	movs	r2, #1
 800d846:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2202      	movs	r2, #2
 800d84c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d84e:	2301      	movs	r3, #1
 800d850:	75fb      	strb	r3, [r7, #23]
      break;
 800d852:	e018      	b.n	800d886 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f000 f81b 	bl	800d890 <USBH_HandleControl>
 800d85a:	4603      	mov	r3, r0
 800d85c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <USBH_CtlReq+0x54>
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	2b03      	cmp	r3, #3
 800d868:	d106      	bne.n	800d878 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	761a      	strb	r2, [r3, #24]
      break;
 800d876:	e005      	b.n	800d884 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d878:	7dfb      	ldrb	r3, [r7, #23]
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d102      	bne.n	800d884 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2201      	movs	r2, #1
 800d882:	709a      	strb	r2, [r3, #2]
      break;
 800d884:	bf00      	nop
  }
  return status;
 800d886:	7dfb      	ldrb	r3, [r7, #23]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af02      	add	r7, sp, #8
 800d896:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d898:	2301      	movs	r3, #1
 800d89a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d89c:	2300      	movs	r3, #0
 800d89e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7e1b      	ldrb	r3, [r3, #24]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	2b0a      	cmp	r3, #10
 800d8a8:	f200 8158 	bhi.w	800db5c <USBH_HandleControl+0x2cc>
 800d8ac:	a201      	add	r2, pc, #4	; (adr r2, 800d8b4 <USBH_HandleControl+0x24>)
 800d8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b2:	bf00      	nop
 800d8b4:	0800d8e1 	.word	0x0800d8e1
 800d8b8:	0800d8fb 	.word	0x0800d8fb
 800d8bc:	0800d965 	.word	0x0800d965
 800d8c0:	0800d98b 	.word	0x0800d98b
 800d8c4:	0800d9c3 	.word	0x0800d9c3
 800d8c8:	0800d9ef 	.word	0x0800d9ef
 800d8cc:	0800da41 	.word	0x0800da41
 800d8d0:	0800da63 	.word	0x0800da63
 800d8d4:	0800da9f 	.word	0x0800da9f
 800d8d8:	0800dac7 	.word	0x0800dac7
 800d8dc:	0800db05 	.word	0x0800db05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f103 0110 	add.w	r1, r3, #16
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	795b      	ldrb	r3, [r3, #5]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f945 	bl	800db7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	761a      	strb	r2, [r3, #24]
      break;
 800d8f8:	e13b      	b.n	800db72 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	795b      	ldrb	r3, [r3, #5]
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f003 fc5f 	bl	80111c4 <USBH_LL_GetURBState>
 800d906:	4603      	mov	r3, r0
 800d908:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d11e      	bne.n	800d94e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7c1b      	ldrb	r3, [r3, #16]
 800d914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d918:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	8adb      	ldrh	r3, [r3, #22]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00a      	beq.n	800d938 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d922:	7b7b      	ldrb	r3, [r7, #13]
 800d924:	2b80      	cmp	r3, #128	; 0x80
 800d926:	d103      	bne.n	800d930 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2203      	movs	r2, #3
 800d92c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d92e:	e117      	b.n	800db60 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2205      	movs	r2, #5
 800d934:	761a      	strb	r2, [r3, #24]
      break;
 800d936:	e113      	b.n	800db60 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800d938:	7b7b      	ldrb	r3, [r7, #13]
 800d93a:	2b80      	cmp	r3, #128	; 0x80
 800d93c:	d103      	bne.n	800d946 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2209      	movs	r2, #9
 800d942:	761a      	strb	r2, [r3, #24]
      break;
 800d944:	e10c      	b.n	800db60 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2207      	movs	r2, #7
 800d94a:	761a      	strb	r2, [r3, #24]
      break;
 800d94c:	e108      	b.n	800db60 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
 800d950:	2b04      	cmp	r3, #4
 800d952:	d003      	beq.n	800d95c <USBH_HandleControl+0xcc>
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	2b02      	cmp	r3, #2
 800d958:	f040 8102 	bne.w	800db60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	220b      	movs	r2, #11
 800d960:	761a      	strb	r2, [r3, #24]
      break;
 800d962:	e0fd      	b.n	800db60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6899      	ldr	r1, [r3, #8]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	899a      	ldrh	r2, [r3, #12]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	791b      	ldrb	r3, [r3, #4]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 f93c 	bl	800dbfa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2204      	movs	r2, #4
 800d986:	761a      	strb	r2, [r3, #24]
      break;
 800d988:	e0f3      	b.n	800db72 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	791b      	ldrb	r3, [r3, #4]
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f003 fc17 	bl	80111c4 <USBH_LL_GetURBState>
 800d996:	4603      	mov	r3, r0
 800d998:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d99a:	7bbb      	ldrb	r3, [r7, #14]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d102      	bne.n	800d9a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2209      	movs	r2, #9
 800d9a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	2b05      	cmp	r3, #5
 800d9aa:	d102      	bne.n	800d9b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9b0:	e0d8      	b.n	800db64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d9b2:	7bbb      	ldrb	r3, [r7, #14]
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	f040 80d5 	bne.w	800db64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	220b      	movs	r2, #11
 800d9be:	761a      	strb	r2, [r3, #24]
      break;
 800d9c0:	e0d0      	b.n	800db64 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6899      	ldr	r1, [r3, #8]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	899a      	ldrh	r2, [r3, #12]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	7958      	ldrb	r0, [r3, #5]
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f8eb 	bl	800dbb0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2206      	movs	r2, #6
 800d9ea:	761a      	strb	r2, [r3, #24]
      break;
 800d9ec:	e0c1      	b.n	800db72 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	795b      	ldrb	r3, [r3, #5]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f003 fbe5 	bl	80111c4 <USBH_LL_GetURBState>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d9fe:	7bbb      	ldrb	r3, [r7, #14]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d103      	bne.n	800da0c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2207      	movs	r2, #7
 800da08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da0a:	e0ad      	b.n	800db68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
 800da0e:	2b05      	cmp	r3, #5
 800da10:	d105      	bne.n	800da1e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	220c      	movs	r2, #12
 800da16:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da18:	2303      	movs	r3, #3
 800da1a:	73fb      	strb	r3, [r7, #15]
      break;
 800da1c:	e0a4      	b.n	800db68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	2b02      	cmp	r3, #2
 800da22:	d103      	bne.n	800da2c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2205      	movs	r2, #5
 800da28:	761a      	strb	r2, [r3, #24]
      break;
 800da2a:	e09d      	b.n	800db68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
 800da2e:	2b04      	cmp	r3, #4
 800da30:	f040 809a 	bne.w	800db68 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	220b      	movs	r2, #11
 800da38:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da3a:	2302      	movs	r3, #2
 800da3c:	73fb      	strb	r3, [r7, #15]
      break;
 800da3e:	e093      	b.n	800db68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	791b      	ldrb	r3, [r3, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	2100      	movs	r1, #0
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f8d6 	bl	800dbfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da54:	b29a      	uxth	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2208      	movs	r2, #8
 800da5e:	761a      	strb	r2, [r3, #24]

      break;
 800da60:	e087      	b.n	800db72 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	791b      	ldrb	r3, [r3, #4]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f003 fbab 	bl	80111c4 <USBH_LL_GetURBState>
 800da6e:	4603      	mov	r3, r0
 800da70:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da72:	7bbb      	ldrb	r3, [r7, #14]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d105      	bne.n	800da84 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	220d      	movs	r2, #13
 800da7c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da82:	e073      	b.n	800db6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800da84:	7bbb      	ldrb	r3, [r7, #14]
 800da86:	2b04      	cmp	r3, #4
 800da88:	d103      	bne.n	800da92 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	220b      	movs	r2, #11
 800da8e:	761a      	strb	r2, [r3, #24]
      break;
 800da90:	e06c      	b.n	800db6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800da92:	7bbb      	ldrb	r3, [r7, #14]
 800da94:	2b05      	cmp	r3, #5
 800da96:	d169      	bne.n	800db6c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800da98:	2303      	movs	r3, #3
 800da9a:	73fb      	strb	r3, [r7, #15]
      break;
 800da9c:	e066      	b.n	800db6c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	795a      	ldrb	r2, [r3, #5]
 800daa2:	2301      	movs	r3, #1
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	4613      	mov	r3, r2
 800daa8:	2200      	movs	r2, #0
 800daaa:	2100      	movs	r1, #0
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 f87f 	bl	800dbb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	220a      	movs	r2, #10
 800dac2:	761a      	strb	r2, [r3, #24]
      break;
 800dac4:	e055      	b.n	800db72 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	795b      	ldrb	r3, [r3, #5]
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f003 fb79 	bl	80111c4 <USBH_LL_GetURBState>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d105      	bne.n	800dae8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800dadc:	2300      	movs	r3, #0
 800dade:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	220d      	movs	r2, #13
 800dae4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dae6:	e043      	b.n	800db70 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d103      	bne.n	800daf6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2209      	movs	r2, #9
 800daf2:	761a      	strb	r2, [r3, #24]
      break;
 800daf4:	e03c      	b.n	800db70 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	2b04      	cmp	r3, #4
 800dafa:	d139      	bne.n	800db70 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	220b      	movs	r2, #11
 800db00:	761a      	strb	r2, [r3, #24]
      break;
 800db02:	e035      	b.n	800db70 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7e5b      	ldrb	r3, [r3, #25]
 800db08:	3301      	adds	r3, #1
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	765a      	strb	r2, [r3, #25]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7e5b      	ldrb	r3, [r3, #25]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d806      	bhi.n	800db26 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db24:	e025      	b.n	800db72 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db2c:	2106      	movs	r1, #6
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	795b      	ldrb	r3, [r3, #5]
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f90c 	bl	800dd5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	791b      	ldrb	r3, [r3, #4]
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f906 	bl	800dd5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db56:	2302      	movs	r3, #2
 800db58:	73fb      	strb	r3, [r7, #15]
      break;
 800db5a:	e00a      	b.n	800db72 <USBH_HandleControl+0x2e2>

    default:
      break;
 800db5c:	bf00      	nop
 800db5e:	e008      	b.n	800db72 <USBH_HandleControl+0x2e2>
      break;
 800db60:	bf00      	nop
 800db62:	e006      	b.n	800db72 <USBH_HandleControl+0x2e2>
      break;
 800db64:	bf00      	nop
 800db66:	e004      	b.n	800db72 <USBH_HandleControl+0x2e2>
      break;
 800db68:	bf00      	nop
 800db6a:	e002      	b.n	800db72 <USBH_HandleControl+0x2e2>
      break;
 800db6c:	bf00      	nop
 800db6e:	e000      	b.n	800db72 <USBH_HandleControl+0x2e2>
      break;
 800db70:	bf00      	nop
  }

  return status;
 800db72:	7bfb      	ldrb	r3, [r7, #15]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af04      	add	r7, sp, #16
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	4613      	mov	r3, r2
 800db88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db8a:	79f9      	ldrb	r1, [r7, #7]
 800db8c:	2300      	movs	r3, #0
 800db8e:	9303      	str	r3, [sp, #12]
 800db90:	2308      	movs	r3, #8
 800db92:	9302      	str	r3, [sp, #8]
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	9301      	str	r3, [sp, #4]
 800db98:	2300      	movs	r3, #0
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	2300      	movs	r3, #0
 800db9e:	2200      	movs	r2, #0
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f003 fade 	bl	8011162 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af04      	add	r7, sp, #16
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	4611      	mov	r1, r2
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	80fb      	strh	r3, [r7, #6]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbd4:	7979      	ldrb	r1, [r7, #5]
 800dbd6:	7e3b      	ldrb	r3, [r7, #24]
 800dbd8:	9303      	str	r3, [sp, #12]
 800dbda:	88fb      	ldrh	r3, [r7, #6]
 800dbdc:	9302      	str	r3, [sp, #8]
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f003 fab9 	bl	8011162 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b088      	sub	sp, #32
 800dbfe:	af04      	add	r7, sp, #16
 800dc00:	60f8      	str	r0, [r7, #12]
 800dc02:	60b9      	str	r1, [r7, #8]
 800dc04:	4611      	mov	r1, r2
 800dc06:	461a      	mov	r2, r3
 800dc08:	460b      	mov	r3, r1
 800dc0a:	80fb      	strh	r3, [r7, #6]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc10:	7979      	ldrb	r1, [r7, #5]
 800dc12:	2300      	movs	r3, #0
 800dc14:	9303      	str	r3, [sp, #12]
 800dc16:	88fb      	ldrh	r3, [r7, #6]
 800dc18:	9302      	str	r3, [sp, #8]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	2300      	movs	r3, #0
 800dc24:	2201      	movs	r2, #1
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f003 fa9b 	bl	8011162 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dc2c:	2300      	movs	r3, #0

}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b088      	sub	sp, #32
 800dc3a:	af04      	add	r7, sp, #16
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	4611      	mov	r1, r2
 800dc42:	461a      	mov	r2, r3
 800dc44:	460b      	mov	r3, r1
 800dc46:	80fb      	strh	r3, [r7, #6]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc5a:	7979      	ldrb	r1, [r7, #5]
 800dc5c:	7e3b      	ldrb	r3, [r7, #24]
 800dc5e:	9303      	str	r3, [sp, #12]
 800dc60:	88fb      	ldrh	r3, [r7, #6]
 800dc62:	9302      	str	r3, [sp, #8]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	9301      	str	r3, [sp, #4]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f003 fa76 	bl	8011162 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af04      	add	r7, sp, #16
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	460b      	mov	r3, r1
 800dc90:	80fb      	strh	r3, [r7, #6]
 800dc92:	4613      	mov	r3, r2
 800dc94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc96:	7979      	ldrb	r1, [r7, #5]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	9303      	str	r3, [sp, #12]
 800dc9c:	88fb      	ldrh	r3, [r7, #6]
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	2301      	movs	r3, #1
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	2302      	movs	r3, #2
 800dcaa:	2201      	movs	r2, #1
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f003 fa58 	bl	8011162 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af04      	add	r7, sp, #16
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4603      	mov	r3, r0
 800dccc:	70fb      	strb	r3, [r7, #3]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70bb      	strb	r3, [r7, #2]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dcd6:	7878      	ldrb	r0, [r7, #1]
 800dcd8:	78ba      	ldrb	r2, [r7, #2]
 800dcda:	78f9      	ldrb	r1, [r7, #3]
 800dcdc:	8b3b      	ldrh	r3, [r7, #24]
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	7d3b      	ldrb	r3, [r7, #20]
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	7c3b      	ldrb	r3, [r7, #16]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	4603      	mov	r3, r0
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f003 f9eb 	bl	80110c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b082      	sub	sp, #8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f003 fa0a 	bl	8011124 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f836 	bl	800dd98 <USBH_GetFreePipe>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd30:	89fb      	ldrh	r3, [r7, #14]
 800dd32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d00a      	beq.n	800dd50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dd3a:	78fa      	ldrb	r2, [r7, #3]
 800dd3c:	89fb      	ldrh	r3, [r7, #14]
 800dd3e:	f003 030f 	and.w	r3, r3, #15
 800dd42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	33e0      	adds	r3, #224	; 0xe0
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	440b      	add	r3, r1
 800dd4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd50:	89fb      	ldrh	r3, [r7, #14]
 800dd52:	b2db      	uxtb	r3, r3
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800dd68:	78fb      	ldrb	r3, [r7, #3]
 800dd6a:	2b0a      	cmp	r3, #10
 800dd6c:	d80d      	bhi.n	800dd8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dd6e:	78fb      	ldrb	r3, [r7, #3]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	33e0      	adds	r3, #224	; 0xe0
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	685a      	ldr	r2, [r3, #4]
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	33e0      	adds	r3, #224	; 0xe0
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	440b      	add	r3, r1
 800dd88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dda4:	2300      	movs	r3, #0
 800dda6:	73fb      	strb	r3, [r7, #15]
 800dda8:	e00f      	b.n	800ddca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	33e0      	adds	r3, #224	; 0xe0
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d102      	bne.n	800ddc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	e007      	b.n	800ddd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	73fb      	strb	r3, [r7, #15]
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	2b0a      	cmp	r3, #10
 800ddce:	d9ec      	bls.n	800ddaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ddd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	4a08      	ldr	r2, [pc, #32]	; (800de10 <disk_status+0x30>)
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	79fa      	ldrb	r2, [r7, #7]
 800ddf8:	4905      	ldr	r1, [pc, #20]	; (800de10 <disk_status+0x30>)
 800ddfa:	440a      	add	r2, r1
 800ddfc:	7a12      	ldrb	r2, [r2, #8]
 800ddfe:	4610      	mov	r0, r2
 800de00:	4798      	blx	r3
 800de02:	4603      	mov	r3, r0
 800de04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	200004dc 	.word	0x200004dc

0800de14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <disk_initialize+0x48>)
 800de26:	5cd3      	ldrb	r3, [r2, r3]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d111      	bne.n	800de50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	4a0b      	ldr	r2, [pc, #44]	; (800de5c <disk_initialize+0x48>)
 800de30:	2101      	movs	r1, #1
 800de32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	4a09      	ldr	r2, [pc, #36]	; (800de5c <disk_initialize+0x48>)
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	79fa      	ldrb	r2, [r7, #7]
 800de42:	4906      	ldr	r1, [pc, #24]	; (800de5c <disk_initialize+0x48>)
 800de44:	440a      	add	r2, r1
 800de46:	7a12      	ldrb	r2, [r2, #8]
 800de48:	4610      	mov	r0, r2
 800de4a:	4798      	blx	r3
 800de4c:	4603      	mov	r3, r0
 800de4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	200004dc 	.word	0x200004dc

0800de60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	607a      	str	r2, [r7, #4]
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	4a0a      	ldr	r2, [pc, #40]	; (800de9c <disk_read+0x3c>)
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4413      	add	r3, r2
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	689c      	ldr	r4, [r3, #8]
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
 800de7e:	4a07      	ldr	r2, [pc, #28]	; (800de9c <disk_read+0x3c>)
 800de80:	4413      	add	r3, r2
 800de82:	7a18      	ldrb	r0, [r3, #8]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	47a0      	blx	r4
 800de8c:	4603      	mov	r3, r0
 800de8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
}
 800de92:	4618      	mov	r0, r3
 800de94:	371c      	adds	r7, #28
 800de96:	46bd      	mov	sp, r7
 800de98:	bd90      	pop	{r4, r7, pc}
 800de9a:	bf00      	nop
 800de9c:	200004dc 	.word	0x200004dc

0800dea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4a0a      	ldr	r2, [pc, #40]	; (800dedc <disk_write+0x3c>)
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	68dc      	ldr	r4, [r3, #12]
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	4a07      	ldr	r2, [pc, #28]	; (800dedc <disk_write+0x3c>)
 800dec0:	4413      	add	r3, r2
 800dec2:	7a18      	ldrb	r0, [r3, #8]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	68b9      	ldr	r1, [r7, #8]
 800deca:	47a0      	blx	r4
 800decc:	4603      	mov	r3, r0
 800dece:	75fb      	strb	r3, [r7, #23]
  return res;
 800ded0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	371c      	adds	r7, #28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd90      	pop	{r4, r7, pc}
 800deda:	bf00      	nop
 800dedc:	200004dc 	.word	0x200004dc

0800dee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	603a      	str	r2, [r7, #0]
 800deea:	71fb      	strb	r3, [r7, #7]
 800deec:	460b      	mov	r3, r1
 800deee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	4a09      	ldr	r2, [pc, #36]	; (800df18 <disk_ioctl+0x38>)
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	4413      	add	r3, r2
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	4906      	ldr	r1, [pc, #24]	; (800df18 <disk_ioctl+0x38>)
 800df00:	440a      	add	r2, r1
 800df02:	7a10      	ldrb	r0, [r2, #8]
 800df04:	79b9      	ldrb	r1, [r7, #6]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	4798      	blx	r3
 800df0a:	4603      	mov	r3, r0
 800df0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	200004dc 	.word	0x200004dc

0800df1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	3301      	adds	r3, #1
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df2c:	89fb      	ldrh	r3, [r7, #14]
 800df2e:	021b      	lsls	r3, r3, #8
 800df30:	b21a      	sxth	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	b21b      	sxth	r3, r3
 800df38:	4313      	orrs	r3, r2
 800df3a:	b21b      	sxth	r3, r3
 800df3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df3e:	89fb      	ldrh	r3, [r7, #14]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3303      	adds	r3, #3
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	021b      	lsls	r3, r3, #8
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	3202      	adds	r2, #2
 800df64:	7812      	ldrb	r2, [r2, #0]
 800df66:	4313      	orrs	r3, r2
 800df68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	021b      	lsls	r3, r3, #8
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	3201      	adds	r2, #1
 800df72:	7812      	ldrb	r2, [r2, #0]
 800df74:	4313      	orrs	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	021b      	lsls	r3, r3, #8
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	7812      	ldrb	r2, [r2, #0]
 800df80:	4313      	orrs	r3, r2
 800df82:	60fb      	str	r3, [r7, #12]
	return rv;
 800df84:	68fb      	ldr	r3, [r7, #12]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	460b      	mov	r3, r1
 800df9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	887a      	ldrh	r2, [r7, #2]
 800dfa6:	b2d2      	uxtb	r2, r2
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	887b      	ldrh	r3, [r7, #2]
 800dfac:	0a1b      	lsrs	r3, r3, #8
 800dfae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	607a      	str	r2, [r7, #4]
 800dfb6:	887a      	ldrh	r2, [r7, #2]
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	701a      	strb	r2, [r3, #0]
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	b2d2      	uxtb	r2, r2
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	0a1b      	lsrs	r3, r3, #8
 800dfe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	607a      	str	r2, [r7, #4]
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	b2d2      	uxtb	r2, r2
 800dfee:	701a      	strb	r2, [r3, #0]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	0a1b      	lsrs	r3, r3, #8
 800dff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	b2d2      	uxtb	r2, r2
 800e000:	701a      	strb	r2, [r3, #0]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	0a1b      	lsrs	r3, r3, #8
 800e006:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	607a      	str	r2, [r7, #4]
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	b2d2      	uxtb	r2, r2
 800e012:	701a      	strb	r2, [r3, #0]
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e020:	b480      	push	{r7}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00d      	beq.n	800e056 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	1c53      	adds	r3, r2, #1
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	1c59      	adds	r1, r3, #1
 800e044:	6179      	str	r1, [r7, #20]
 800e046:	7812      	ldrb	r2, [r2, #0]
 800e048:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	607b      	str	r3, [r7, #4]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1f1      	bne.n	800e03a <mem_cpy+0x1a>
	}
}
 800e056:	bf00      	nop
 800e058:	371c      	adds	r7, #28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e062:	b480      	push	{r7}
 800e064:	b087      	sub	sp, #28
 800e066:	af00      	add	r7, sp, #0
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	617a      	str	r2, [r7, #20]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	3b01      	subs	r3, #1
 800e082:	607b      	str	r3, [r7, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1f3      	bne.n	800e072 <mem_set+0x10>
}
 800e08a:	bf00      	nop
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e096:	b480      	push	{r7}
 800e098:	b089      	sub	sp, #36	; 0x24
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	61fb      	str	r3, [r7, #28]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	61fa      	str	r2, [r7, #28]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	61ba      	str	r2, [r7, #24]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	1acb      	subs	r3, r1, r3
 800e0c2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	607b      	str	r3, [r7, #4]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <mem_cmp+0x40>
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0eb      	beq.n	800e0ae <mem_cmp+0x18>

	return r;
 800e0d6:	697b      	ldr	r3, [r7, #20]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3724      	adds	r7, #36	; 0x24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e0ee:	e002      	b.n	800e0f6 <chk_chr+0x12>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <chk_chr+0x26>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	4293      	cmp	r3, r2
 800e108:	d1f2      	bne.n	800e0f0 <chk_chr+0xc>
	return *str;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	781b      	ldrb	r3, [r3, #0]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
	...

0800e11c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e126:	2300      	movs	r3, #0
 800e128:	60bb      	str	r3, [r7, #8]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	60fb      	str	r3, [r7, #12]
 800e12e:	e029      	b.n	800e184 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e130:	4a27      	ldr	r2, [pc, #156]	; (800e1d0 <chk_lock+0xb4>)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	4413      	add	r3, r2
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d01d      	beq.n	800e17a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e13e:	4a24      	ldr	r2, [pc, #144]	; (800e1d0 <chk_lock+0xb4>)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	4413      	add	r3, r2
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d116      	bne.n	800e17e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e150:	4a1f      	ldr	r2, [pc, #124]	; (800e1d0 <chk_lock+0xb4>)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	4413      	add	r3, r2
 800e158:	3304      	adds	r3, #4
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e160:	429a      	cmp	r2, r3
 800e162:	d10c      	bne.n	800e17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e164:	4a1a      	ldr	r2, [pc, #104]	; (800e1d0 <chk_lock+0xb4>)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	011b      	lsls	r3, r3, #4
 800e16a:	4413      	add	r3, r2
 800e16c:	3308      	adds	r3, #8
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e174:	429a      	cmp	r2, r3
 800e176:	d102      	bne.n	800e17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e178:	e007      	b.n	800e18a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3301      	adds	r3, #1
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b02      	cmp	r3, #2
 800e188:	d9d2      	bls.n	800e130 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d109      	bne.n	800e1a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <chk_lock+0x80>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d101      	bne.n	800e1a0 <chk_lock+0x84>
 800e19c:	2300      	movs	r3, #0
 800e19e:	e010      	b.n	800e1c2 <chk_lock+0xa6>
 800e1a0:	2312      	movs	r3, #18
 800e1a2:	e00e      	b.n	800e1c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d108      	bne.n	800e1bc <chk_lock+0xa0>
 800e1aa:	4a09      	ldr	r2, [pc, #36]	; (800e1d0 <chk_lock+0xb4>)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	011b      	lsls	r3, r3, #4
 800e1b0:	4413      	add	r3, r2
 800e1b2:	330c      	adds	r3, #12
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ba:	d101      	bne.n	800e1c0 <chk_lock+0xa4>
 800e1bc:	2310      	movs	r3, #16
 800e1be:	e000      	b.n	800e1c2 <chk_lock+0xa6>
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3714      	adds	r7, #20
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	200002ac 	.word	0x200002ac

0800e1d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	e002      	b.n	800e1e6 <enq_lock+0x12>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d806      	bhi.n	800e1fa <enq_lock+0x26>
 800e1ec:	4a09      	ldr	r2, [pc, #36]	; (800e214 <enq_lock+0x40>)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	011b      	lsls	r3, r3, #4
 800e1f2:	4413      	add	r3, r2
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1f2      	bne.n	800e1e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	b2db      	uxtb	r3, r3
}
 800e206:	4618      	mov	r0, r3
 800e208:	370c      	adds	r7, #12
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	200002ac 	.word	0x200002ac

0800e218 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e222:	2300      	movs	r3, #0
 800e224:	60fb      	str	r3, [r7, #12]
 800e226:	e01f      	b.n	800e268 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e228:	4a41      	ldr	r2, [pc, #260]	; (800e330 <inc_lock+0x118>)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	011b      	lsls	r3, r3, #4
 800e22e:	4413      	add	r3, r2
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	429a      	cmp	r2, r3
 800e238:	d113      	bne.n	800e262 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e23a:	4a3d      	ldr	r2, [pc, #244]	; (800e330 <inc_lock+0x118>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	011b      	lsls	r3, r3, #4
 800e240:	4413      	add	r3, r2
 800e242:	3304      	adds	r3, #4
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d109      	bne.n	800e262 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e24e:	4a38      	ldr	r2, [pc, #224]	; (800e330 <inc_lock+0x118>)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	4413      	add	r3, r2
 800e256:	3308      	adds	r3, #8
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e25e:	429a      	cmp	r2, r3
 800e260:	d006      	beq.n	800e270 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	3301      	adds	r3, #1
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d9dc      	bls.n	800e228 <inc_lock+0x10>
 800e26e:	e000      	b.n	800e272 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e270:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b03      	cmp	r3, #3
 800e276:	d132      	bne.n	800e2de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e278:	2300      	movs	r3, #0
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	e002      	b.n	800e284 <inc_lock+0x6c>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3301      	adds	r3, #1
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b02      	cmp	r3, #2
 800e288:	d806      	bhi.n	800e298 <inc_lock+0x80>
 800e28a:	4a29      	ldr	r2, [pc, #164]	; (800e330 <inc_lock+0x118>)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	011b      	lsls	r3, r3, #4
 800e290:	4413      	add	r3, r2
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1f2      	bne.n	800e27e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d101      	bne.n	800e2a2 <inc_lock+0x8a>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e040      	b.n	800e324 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	4922      	ldr	r1, [pc, #136]	; (800e330 <inc_lock+0x118>)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	011b      	lsls	r3, r3, #4
 800e2ac:	440b      	add	r3, r1
 800e2ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	689a      	ldr	r2, [r3, #8]
 800e2b4:	491e      	ldr	r1, [pc, #120]	; (800e330 <inc_lock+0x118>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	011b      	lsls	r3, r3, #4
 800e2ba:	440b      	add	r3, r1
 800e2bc:	3304      	adds	r3, #4
 800e2be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	695a      	ldr	r2, [r3, #20]
 800e2c4:	491a      	ldr	r1, [pc, #104]	; (800e330 <inc_lock+0x118>)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	011b      	lsls	r3, r3, #4
 800e2ca:	440b      	add	r3, r1
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e2d0:	4a17      	ldr	r2, [pc, #92]	; (800e330 <inc_lock+0x118>)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	011b      	lsls	r3, r3, #4
 800e2d6:	4413      	add	r3, r2
 800e2d8:	330c      	adds	r3, #12
 800e2da:	2200      	movs	r2, #0
 800e2dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d009      	beq.n	800e2f8 <inc_lock+0xe0>
 800e2e4:	4a12      	ldr	r2, [pc, #72]	; (800e330 <inc_lock+0x118>)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	011b      	lsls	r3, r3, #4
 800e2ea:	4413      	add	r3, r2
 800e2ec:	330c      	adds	r3, #12
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <inc_lock+0xe0>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e015      	b.n	800e324 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d108      	bne.n	800e310 <inc_lock+0xf8>
 800e2fe:	4a0c      	ldr	r2, [pc, #48]	; (800e330 <inc_lock+0x118>)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	011b      	lsls	r3, r3, #4
 800e304:	4413      	add	r3, r2
 800e306:	330c      	adds	r3, #12
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	3301      	adds	r3, #1
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	e001      	b.n	800e314 <inc_lock+0xfc>
 800e310:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e314:	4906      	ldr	r1, [pc, #24]	; (800e330 <inc_lock+0x118>)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	011b      	lsls	r3, r3, #4
 800e31a:	440b      	add	r3, r1
 800e31c:	330c      	adds	r3, #12
 800e31e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3301      	adds	r3, #1
}
 800e324:	4618      	mov	r0, r3
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	200002ac 	.word	0x200002ac

0800e334 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3b01      	subs	r3, #1
 800e340:	607b      	str	r3, [r7, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b02      	cmp	r3, #2
 800e346:	d825      	bhi.n	800e394 <dec_lock+0x60>
		n = Files[i].ctr;
 800e348:	4a17      	ldr	r2, [pc, #92]	; (800e3a8 <dec_lock+0x74>)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	4413      	add	r3, r2
 800e350:	330c      	adds	r3, #12
 800e352:	881b      	ldrh	r3, [r3, #0]
 800e354:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e356:	89fb      	ldrh	r3, [r7, #14]
 800e358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e35c:	d101      	bne.n	800e362 <dec_lock+0x2e>
 800e35e:	2300      	movs	r3, #0
 800e360:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e362:	89fb      	ldrh	r3, [r7, #14]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <dec_lock+0x3a>
 800e368:	89fb      	ldrh	r3, [r7, #14]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e36e:	4a0e      	ldr	r2, [pc, #56]	; (800e3a8 <dec_lock+0x74>)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	011b      	lsls	r3, r3, #4
 800e374:	4413      	add	r3, r2
 800e376:	330c      	adds	r3, #12
 800e378:	89fa      	ldrh	r2, [r7, #14]
 800e37a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e37c:	89fb      	ldrh	r3, [r7, #14]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d105      	bne.n	800e38e <dec_lock+0x5a>
 800e382:	4a09      	ldr	r2, [pc, #36]	; (800e3a8 <dec_lock+0x74>)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	011b      	lsls	r3, r3, #4
 800e388:	4413      	add	r3, r2
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	737b      	strb	r3, [r7, #13]
 800e392:	e001      	b.n	800e398 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e394:	2302      	movs	r3, #2
 800e396:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e398:	7b7b      	ldrb	r3, [r7, #13]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	200002ac 	.word	0x200002ac

0800e3ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	60fb      	str	r3, [r7, #12]
 800e3b8:	e010      	b.n	800e3dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e3ba:	4a0d      	ldr	r2, [pc, #52]	; (800e3f0 <clear_lock+0x44>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	011b      	lsls	r3, r3, #4
 800e3c0:	4413      	add	r3, r2
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d105      	bne.n	800e3d6 <clear_lock+0x2a>
 800e3ca:	4a09      	ldr	r2, [pc, #36]	; (800e3f0 <clear_lock+0x44>)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	4413      	add	r3, r2
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	d9eb      	bls.n	800e3ba <clear_lock+0xe>
	}
}
 800e3e2:	bf00      	nop
 800e3e4:	3714      	adds	r7, #20
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop
 800e3f0:	200002ac 	.word	0x200002ac

0800e3f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	78db      	ldrb	r3, [r3, #3]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d034      	beq.n	800e472 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e40c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	7858      	ldrb	r0, [r3, #1]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e418:	2301      	movs	r3, #1
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	f7ff fd40 	bl	800dea0 <disk_write>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e426:	2301      	movs	r3, #1
 800e428:	73fb      	strb	r3, [r7, #15]
 800e42a:	e022      	b.n	800e472 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2200      	movs	r2, #0
 800e430:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	1ad2      	subs	r2, r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d217      	bcs.n	800e472 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	789b      	ldrb	r3, [r3, #2]
 800e446:	613b      	str	r3, [r7, #16]
 800e448:	e010      	b.n	800e46c <sync_window+0x78>
					wsect += fs->fsize;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	4413      	add	r3, r2
 800e452:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	7858      	ldrb	r0, [r3, #1]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e45e:	2301      	movs	r3, #1
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	f7ff fd1d 	bl	800dea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	3b01      	subs	r3, #1
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d8eb      	bhi.n	800e44a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e472:	7bfb      	ldrb	r3, [r7, #15]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	429a      	cmp	r2, r3
 800e492:	d01b      	beq.n	800e4cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff ffad 	bl	800e3f4 <sync_window>
 800e49a:	4603      	mov	r3, r0
 800e49c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e49e:	7bfb      	ldrb	r3, [r7, #15]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d113      	bne.n	800e4cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7858      	ldrb	r0, [r3, #1]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	f7ff fcd5 	bl	800de60 <disk_read>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ff87 	bl	800e3f4 <sync_window>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e4ea:	7bfb      	ldrb	r3, [r7, #15]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d158      	bne.n	800e5a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b03      	cmp	r3, #3
 800e4f6:	d148      	bne.n	800e58a <sync_fs+0xb2>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	791b      	ldrb	r3, [r3, #4]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d144      	bne.n	800e58a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3334      	adds	r3, #52	; 0x34
 800e504:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e508:	2100      	movs	r1, #0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7ff fda9 	bl	800e062 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3334      	adds	r3, #52	; 0x34
 800e514:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e518:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff fd38 	bl	800df92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	3334      	adds	r3, #52	; 0x34
 800e526:	4921      	ldr	r1, [pc, #132]	; (800e5ac <sync_fs+0xd4>)
 800e528:	4618      	mov	r0, r3
 800e52a:	f7ff fd4d 	bl	800dfc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3334      	adds	r3, #52	; 0x34
 800e532:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e536:	491e      	ldr	r1, [pc, #120]	; (800e5b0 <sync_fs+0xd8>)
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fd45 	bl	800dfc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3334      	adds	r3, #52	; 0x34
 800e542:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	4619      	mov	r1, r3
 800e54c:	4610      	mov	r0, r2
 800e54e:	f7ff fd3b 	bl	800dfc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	3334      	adds	r3, #52	; 0x34
 800e556:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	4619      	mov	r1, r3
 800e560:	4610      	mov	r0, r2
 800e562:	f7ff fd31 	bl	800dfc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a1b      	ldr	r3, [r3, #32]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7858      	ldrb	r0, [r3, #1]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e57e:	2301      	movs	r3, #1
 800e580:	f7ff fc8e 	bl	800dea0 <disk_write>
			fs->fsi_flag = 0;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2200      	movs	r2, #0
 800e590:	2100      	movs	r1, #0
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fca4 	bl	800dee0 <disk_ioctl>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <sync_fs+0xca>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	41615252 	.word	0x41615252
 800e5b0:	61417272 	.word	0x61417272

0800e5b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	3b02      	subs	r3, #2
 800e5c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	3b02      	subs	r3, #2
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d301      	bcc.n	800e5d4 <clust2sect+0x20>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e008      	b.n	800e5e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	895b      	ldrh	r3, [r3, #10]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	fb03 f202 	mul.w	r2, r3, r2
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	4413      	add	r3, r2
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b086      	sub	sp, #24
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d904      	bls.n	800e612 <get_fat+0x20>
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d302      	bcc.n	800e618 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e612:	2301      	movs	r3, #1
 800e614:	617b      	str	r3, [r7, #20]
 800e616:	e08c      	b.n	800e732 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e61c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b02      	cmp	r3, #2
 800e624:	d045      	beq.n	800e6b2 <get_fat+0xc0>
 800e626:	2b03      	cmp	r3, #3
 800e628:	d05d      	beq.n	800e6e6 <get_fat+0xf4>
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d177      	bne.n	800e71e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	60fb      	str	r3, [r7, #12]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	085b      	lsrs	r3, r3, #1
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	4413      	add	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	0a5b      	lsrs	r3, r3, #9
 800e644:	4413      	add	r3, r2
 800e646:	4619      	mov	r1, r3
 800e648:	6938      	ldr	r0, [r7, #16]
 800e64a:	f7ff ff17 	bl	800e47c <move_window>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d167      	bne.n	800e724 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	1c5a      	adds	r2, r3, #1
 800e658:	60fa      	str	r2, [r7, #12]
 800e65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	4413      	add	r3, r2
 800e662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e666:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	0a5b      	lsrs	r3, r3, #9
 800e670:	4413      	add	r3, r2
 800e672:	4619      	mov	r1, r3
 800e674:	6938      	ldr	r0, [r7, #16]
 800e676:	f7ff ff01 	bl	800e47c <move_window>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d153      	bne.n	800e728 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	4413      	add	r3, r2
 800e68a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e68e:	021b      	lsls	r3, r3, #8
 800e690:	461a      	mov	r2, r3
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	4313      	orrs	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f003 0301 	and.w	r3, r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <get_fat+0xb6>
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	091b      	lsrs	r3, r3, #4
 800e6a6:	e002      	b.n	800e6ae <get_fat+0xbc>
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6ae:	617b      	str	r3, [r7, #20]
			break;
 800e6b0:	e03f      	b.n	800e732 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	0a1b      	lsrs	r3, r3, #8
 800e6ba:	4413      	add	r3, r2
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6938      	ldr	r0, [r7, #16]
 800e6c0:	f7ff fedc 	bl	800e47c <move_window>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d130      	bne.n	800e72c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e6d8:	4413      	add	r3, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7ff fc1e 	bl	800df1c <ld_word>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	617b      	str	r3, [r7, #20]
			break;
 800e6e4:	e025      	b.n	800e732 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	09db      	lsrs	r3, r3, #7
 800e6ee:	4413      	add	r3, r2
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6938      	ldr	r0, [r7, #16]
 800e6f4:	f7ff fec2 	bl	800e47c <move_window>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d118      	bne.n	800e730 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e70c:	4413      	add	r3, r2
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fc1c 	bl	800df4c <ld_dword>
 800e714:	4603      	mov	r3, r0
 800e716:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e71a:	617b      	str	r3, [r7, #20]
			break;
 800e71c:	e009      	b.n	800e732 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e71e:	2301      	movs	r3, #1
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	e006      	b.n	800e732 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e724:	bf00      	nop
 800e726:	e004      	b.n	800e732 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e728:	bf00      	nop
 800e72a:	e002      	b.n	800e732 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e72c:	bf00      	nop
 800e72e:	e000      	b.n	800e732 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e730:	bf00      	nop
		}
	}

	return val;
 800e732:	697b      	ldr	r3, [r7, #20]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b089      	sub	sp, #36	; 0x24
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e748:	2302      	movs	r3, #2
 800e74a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	f240 80d6 	bls.w	800e900 <put_fat+0x1c4>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	f080 80d0 	bcs.w	800e900 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d073      	beq.n	800e850 <put_fat+0x114>
 800e768:	2b03      	cmp	r3, #3
 800e76a:	f000 8091 	beq.w	800e890 <put_fat+0x154>
 800e76e:	2b01      	cmp	r3, #1
 800e770:	f040 80c6 	bne.w	800e900 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	61bb      	str	r3, [r7, #24]
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	085b      	lsrs	r3, r3, #1
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	4413      	add	r3, r2
 800e780:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	0a5b      	lsrs	r3, r3, #9
 800e78a:	4413      	add	r3, r2
 800e78c:	4619      	mov	r1, r3
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f7ff fe74 	bl	800e47c <move_window>
 800e794:	4603      	mov	r3, r0
 800e796:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e798:	7ffb      	ldrb	r3, [r7, #31]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 80a9 	bne.w	800e8f2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	1c59      	adds	r1, r3, #1
 800e7aa:	61b9      	str	r1, [r7, #24]
 800e7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7b0:	4413      	add	r3, r2
 800e7b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00d      	beq.n	800e7da <put_fat+0x9e>
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	b25b      	sxtb	r3, r3
 800e7c4:	f003 030f 	and.w	r3, r3, #15
 800e7c8:	b25a      	sxtb	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	011b      	lsls	r3, r3, #4
 800e7d0:	b25b      	sxtb	r3, r3
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	b25b      	sxtb	r3, r3
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	e001      	b.n	800e7de <put_fat+0xa2>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	697a      	ldr	r2, [r7, #20]
 800e7e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	0a5b      	lsrs	r3, r3, #9
 800e7f0:	4413      	add	r3, r2
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7ff fe41 	bl	800e47c <move_window>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7fe:	7ffb      	ldrb	r3, [r7, #31]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d178      	bne.n	800e8f6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e810:	4413      	add	r3, r2
 800e812:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <put_fat+0xea>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	091b      	lsrs	r3, r3, #4
 800e822:	b2db      	uxtb	r3, r3
 800e824:	e00e      	b.n	800e844 <put_fat+0x108>
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	b25b      	sxtb	r3, r3
 800e82c:	f023 030f 	bic.w	r3, r3, #15
 800e830:	b25a      	sxtb	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	0a1b      	lsrs	r3, r3, #8
 800e836:	b25b      	sxtb	r3, r3
 800e838:	f003 030f 	and.w	r3, r3, #15
 800e83c:	b25b      	sxtb	r3, r3
 800e83e:	4313      	orrs	r3, r2
 800e840:	b25b      	sxtb	r3, r3
 800e842:	b2db      	uxtb	r3, r3
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2201      	movs	r2, #1
 800e84c:	70da      	strb	r2, [r3, #3]
			break;
 800e84e:	e057      	b.n	800e900 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	0a1b      	lsrs	r3, r3, #8
 800e858:	4413      	add	r3, r2
 800e85a:	4619      	mov	r1, r3
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f7ff fe0d 	bl	800e47c <move_window>
 800e862:	4603      	mov	r3, r0
 800e864:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e866:	7ffb      	ldrb	r3, [r7, #31]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d146      	bne.n	800e8fa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e87a:	4413      	add	r3, r2
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	b292      	uxth	r2, r2
 800e880:	4611      	mov	r1, r2
 800e882:	4618      	mov	r0, r3
 800e884:	f7ff fb85 	bl	800df92 <st_word>
			fs->wflag = 1;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	70da      	strb	r2, [r3, #3]
			break;
 800e88e:	e037      	b.n	800e900 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	09db      	lsrs	r3, r3, #7
 800e898:	4413      	add	r3, r2
 800e89a:	4619      	mov	r1, r3
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f7ff fded 	bl	800e47c <move_window>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8a6:	7ffb      	ldrb	r3, [r7, #31]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d128      	bne.n	800e8fe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e8c0:	4413      	add	r3, r2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff fb42 	bl	800df4c <ld_dword>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e8ce:	4323      	orrs	r3, r4
 800e8d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e8e0:	4413      	add	r3, r2
 800e8e2:	6879      	ldr	r1, [r7, #4]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff fb6f 	bl	800dfc8 <st_dword>
			fs->wflag = 1;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	70da      	strb	r2, [r3, #3]
			break;
 800e8f0:	e006      	b.n	800e900 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8f2:	bf00      	nop
 800e8f4:	e004      	b.n	800e900 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8f6:	bf00      	nop
 800e8f8:	e002      	b.n	800e900 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8fa:	bf00      	nop
 800e8fc:	e000      	b.n	800e900 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e8fe:	bf00      	nop
		}
	}
	return res;
 800e900:	7ffb      	ldrb	r3, [r7, #31]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3724      	adds	r7, #36	; 0x24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd90      	pop	{r4, r7, pc}

0800e90a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b088      	sub	sp, #32
 800e90e:	af00      	add	r7, sp, #0
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	60b9      	str	r1, [r7, #8]
 800e914:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d904      	bls.n	800e930 <remove_chain+0x26>
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d301      	bcc.n	800e934 <remove_chain+0x2a>
 800e930:	2302      	movs	r3, #2
 800e932:	e04b      	b.n	800e9cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00c      	beq.n	800e954 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e93a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	69b8      	ldr	r0, [r7, #24]
 800e942:	f7ff fefb 	bl	800e73c <put_fat>
 800e946:	4603      	mov	r3, r0
 800e948:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e94a:	7ffb      	ldrb	r3, [r7, #31]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <remove_chain+0x4a>
 800e950:	7ffb      	ldrb	r3, [r7, #31]
 800e952:	e03b      	b.n	800e9cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e954:	68b9      	ldr	r1, [r7, #8]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f7ff fe4b 	bl	800e5f2 <get_fat>
 800e95c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d031      	beq.n	800e9c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d101      	bne.n	800e96e <remove_chain+0x64>
 800e96a:	2302      	movs	r3, #2
 800e96c:	e02e      	b.n	800e9cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e974:	d101      	bne.n	800e97a <remove_chain+0x70>
 800e976:	2301      	movs	r3, #1
 800e978:	e028      	b.n	800e9cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e97a:	2200      	movs	r2, #0
 800e97c:	68b9      	ldr	r1, [r7, #8]
 800e97e:	69b8      	ldr	r0, [r7, #24]
 800e980:	f7ff fedc 	bl	800e73c <put_fat>
 800e984:	4603      	mov	r3, r0
 800e986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e988:	7ffb      	ldrb	r3, [r7, #31]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <remove_chain+0x88>
 800e98e:	7ffb      	ldrb	r3, [r7, #31]
 800e990:	e01c      	b.n	800e9cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	695a      	ldr	r2, [r3, #20]
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	3b02      	subs	r3, #2
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d20b      	bcs.n	800e9b8 <remove_chain+0xae>
			fs->free_clst++;
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	791b      	ldrb	r3, [r3, #4]
 800e9ae:	f043 0301 	orr.w	r3, r3, #1
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d3c6      	bcc.n	800e954 <remove_chain+0x4a>
 800e9c6:	e000      	b.n	800e9ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e9c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3720      	adds	r7, #32
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10d      	bne.n	800ea06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d004      	beq.n	800ea00 <create_chain+0x2c>
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	69ba      	ldr	r2, [r7, #24]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d31b      	bcc.n	800ea38 <create_chain+0x64>
 800ea00:	2301      	movs	r3, #1
 800ea02:	61bb      	str	r3, [r7, #24]
 800ea04:	e018      	b.n	800ea38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff fdf2 	bl	800e5f2 <get_fat>
 800ea0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d801      	bhi.n	800ea1a <create_chain+0x46>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e070      	b.n	800eafc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea20:	d101      	bne.n	800ea26 <create_chain+0x52>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	e06a      	b.n	800eafc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	699b      	ldr	r3, [r3, #24]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d201      	bcs.n	800ea34 <create_chain+0x60>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	e063      	b.n	800eafc <create_chain+0x128>
		scl = clst;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	69fa      	ldr	r2, [r7, #28]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d307      	bcc.n	800ea5c <create_chain+0x88>
				ncl = 2;
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea50:	69fa      	ldr	r2, [r7, #28]
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d901      	bls.n	800ea5c <create_chain+0x88>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e04f      	b.n	800eafc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea5c:	69f9      	ldr	r1, [r7, #28]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff fdc7 	bl	800e5f2 <get_fat>
 800ea64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00e      	beq.n	800ea8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d003      	beq.n	800ea7a <create_chain+0xa6>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea78:	d101      	bne.n	800ea7e <create_chain+0xaa>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	e03e      	b.n	800eafc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d1da      	bne.n	800ea3c <create_chain+0x68>
 800ea86:	2300      	movs	r3, #0
 800ea88:	e038      	b.n	800eafc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea90:	69f9      	ldr	r1, [r7, #28]
 800ea92:	6938      	ldr	r0, [r7, #16]
 800ea94:	f7ff fe52 	bl	800e73c <put_fat>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ea9c:	7dfb      	ldrb	r3, [r7, #23]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d109      	bne.n	800eab6 <create_chain+0xe2>
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d006      	beq.n	800eab6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eaa8:	69fa      	ldr	r2, [r7, #28]
 800eaaa:	6839      	ldr	r1, [r7, #0]
 800eaac:	6938      	ldr	r0, [r7, #16]
 800eaae:	f7ff fe45 	bl	800e73c <put_fat>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d116      	bne.n	800eaea <create_chain+0x116>
		fs->last_clst = ncl;
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	69fa      	ldr	r2, [r7, #28]
 800eac0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	695a      	ldr	r2, [r3, #20]
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	3b02      	subs	r3, #2
 800eacc:	429a      	cmp	r2, r3
 800eace:	d804      	bhi.n	800eada <create_chain+0x106>
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	1e5a      	subs	r2, r3, #1
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	791b      	ldrb	r3, [r3, #4]
 800eade:	f043 0301 	orr.w	r3, r3, #1
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	711a      	strb	r2, [r3, #4]
 800eae8:	e007      	b.n	800eafa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d102      	bne.n	800eaf6 <create_chain+0x122>
 800eaf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaf4:	e000      	b.n	800eaf8 <create_chain+0x124>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eafa:	69fb      	ldr	r3, [r7, #28]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b087      	sub	sp, #28
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	3304      	adds	r3, #4
 800eb1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	0a5b      	lsrs	r3, r3, #9
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	8952      	ldrh	r2, [r2, #10]
 800eb24:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	1d1a      	adds	r2, r3, #4
 800eb2e:	613a      	str	r2, [r7, #16]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <clmt_clust+0x3a>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	e010      	b.n	800eb60 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d307      	bcc.n	800eb56 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb46:	697a      	ldr	r2, [r7, #20]
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	617b      	str	r3, [r7, #20]
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	3304      	adds	r3, #4
 800eb52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb54:	e7e9      	b.n	800eb2a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eb56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	4413      	add	r3, r2
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	371c      	adds	r7, #28
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b086      	sub	sp, #24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb82:	d204      	bcs.n	800eb8e <dir_sdi+0x22>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	f003 031f 	and.w	r3, r3, #31
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	e063      	b.n	800ec5a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	683a      	ldr	r2, [r7, #0]
 800eb96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <dir_sdi+0x46>
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d902      	bls.n	800ebb2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10c      	bne.n	800ebd2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	095b      	lsrs	r3, r3, #5
 800ebbc:	693a      	ldr	r2, [r7, #16]
 800ebbe:	8912      	ldrh	r2, [r2, #8]
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d301      	bcc.n	800ebc8 <dir_sdi+0x5c>
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	e048      	b.n	800ec5a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	61da      	str	r2, [r3, #28]
 800ebd0:	e029      	b.n	800ec26 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	895b      	ldrh	r3, [r3, #10]
 800ebd6:	025b      	lsls	r3, r3, #9
 800ebd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebda:	e019      	b.n	800ec10 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6979      	ldr	r1, [r7, #20]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7ff fd06 	bl	800e5f2 <get_fat>
 800ebe6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebee:	d101      	bne.n	800ebf4 <dir_sdi+0x88>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e032      	b.n	800ec5a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d904      	bls.n	800ec04 <dir_sdi+0x98>
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d301      	bcc.n	800ec08 <dir_sdi+0x9c>
 800ec04:	2302      	movs	r3, #2
 800ec06:	e028      	b.n	800ec5a <dir_sdi+0xee>
			ofs -= csz;
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec10:	683a      	ldr	r2, [r7, #0]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d2e1      	bcs.n	800ebdc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ec18:	6979      	ldr	r1, [r7, #20]
 800ec1a:	6938      	ldr	r0, [r7, #16]
 800ec1c:	f7ff fcca 	bl	800e5b4 <clust2sect>
 800ec20:	4602      	mov	r2, r0
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	697a      	ldr	r2, [r7, #20]
 800ec2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <dir_sdi+0xcc>
 800ec34:	2302      	movs	r3, #2
 800ec36:	e010      	b.n	800ec5a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	69da      	ldr	r2, [r3, #28]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	0a5b      	lsrs	r3, r3, #9
 800ec40:	441a      	add	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec52:	441a      	add	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b086      	sub	sp, #24
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	3320      	adds	r3, #32
 800ec78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d003      	beq.n	800ec8a <dir_next+0x28>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec88:	d301      	bcc.n	800ec8e <dir_next+0x2c>
 800ec8a:	2304      	movs	r3, #4
 800ec8c:	e0aa      	b.n	800ede4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f040 8098 	bne.w	800edca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	69db      	ldr	r3, [r3, #28]
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10b      	bne.n	800ecc4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	095b      	lsrs	r3, r3, #5
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	8912      	ldrh	r2, [r2, #8]
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	f0c0 8088 	bcc.w	800edca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	61da      	str	r2, [r3, #28]
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	e08f      	b.n	800ede4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	0a5b      	lsrs	r3, r3, #9
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	8952      	ldrh	r2, [r2, #10]
 800eccc:	3a01      	subs	r2, #1
 800ecce:	4013      	ands	r3, r2
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d17a      	bne.n	800edca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	699b      	ldr	r3, [r3, #24]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4610      	mov	r0, r2
 800ecde:	f7ff fc88 	bl	800e5f2 <get_fat>
 800ece2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d801      	bhi.n	800ecee <dir_next+0x8c>
 800ecea:	2302      	movs	r3, #2
 800ecec:	e07a      	b.n	800ede4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecf4:	d101      	bne.n	800ecfa <dir_next+0x98>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e074      	b.n	800ede4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d358      	bcc.n	800edb6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d104      	bne.n	800ed14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	61da      	str	r2, [r3, #28]
 800ed10:	2304      	movs	r3, #4
 800ed12:	e067      	b.n	800ede4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	f7ff fe59 	bl	800e9d4 <create_chain>
 800ed22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <dir_next+0xcc>
 800ed2a:	2307      	movs	r3, #7
 800ed2c:	e05a      	b.n	800ede4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d101      	bne.n	800ed38 <dir_next+0xd6>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e055      	b.n	800ede4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed3e:	d101      	bne.n	800ed44 <dir_next+0xe2>
 800ed40:	2301      	movs	r3, #1
 800ed42:	e04f      	b.n	800ede4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f7ff fb55 	bl	800e3f4 <sync_window>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <dir_next+0xf2>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e047      	b.n	800ede4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3334      	adds	r3, #52	; 0x34
 800ed58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff f97f 	bl	800e062 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed64:	2300      	movs	r3, #0
 800ed66:	613b      	str	r3, [r7, #16]
 800ed68:	6979      	ldr	r1, [r7, #20]
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff fc22 	bl	800e5b4 <clust2sect>
 800ed70:	4602      	mov	r2, r0
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	631a      	str	r2, [r3, #48]	; 0x30
 800ed76:	e012      	b.n	800ed9e <dir_next+0x13c>
						fs->wflag = 1;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff fb38 	bl	800e3f4 <sync_window>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <dir_next+0x12c>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e02a      	b.n	800ede4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	3301      	adds	r3, #1
 800ed92:	613b      	str	r3, [r7, #16]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	631a      	str	r2, [r3, #48]	; 0x30
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	895b      	ldrh	r3, [r3, #10]
 800eda2:	461a      	mov	r2, r3
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d3e6      	bcc.n	800ed78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	1ad2      	subs	r2, r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800edbc:	6979      	ldr	r1, [r7, #20]
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f7ff fbf8 	bl	800e5b4 <clust2sect>
 800edc4:	4602      	mov	r2, r0
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eddc:	441a      	add	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800edfc:	2100      	movs	r1, #0
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff feb4 	bl	800eb6c <dir_sdi>
 800ee04:	4603      	mov	r3, r0
 800ee06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee08:	7dfb      	ldrb	r3, [r7, #23]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d12b      	bne.n	800ee66 <dir_alloc+0x7a>
		n = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	4619      	mov	r1, r3
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fb2f 	bl	800e47c <move_window>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d11d      	bne.n	800ee64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a1b      	ldr	r3, [r3, #32]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2be5      	cmp	r3, #229	; 0xe5
 800ee30:	d004      	beq.n	800ee3c <dir_alloc+0x50>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d107      	bne.n	800ee4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d102      	bne.n	800ee50 <dir_alloc+0x64>
 800ee4a:	e00c      	b.n	800ee66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee50:	2101      	movs	r1, #1
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff ff05 	bl	800ec62 <dir_next>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0d7      	beq.n	800ee12 <dir_alloc+0x26>
 800ee62:	e000      	b.n	800ee66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ee64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee66:	7dfb      	ldrb	r3, [r7, #23]
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	d101      	bne.n	800ee70 <dir_alloc+0x84>
 800ee6c:	2307      	movs	r3, #7
 800ee6e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3718      	adds	r7, #24
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b084      	sub	sp, #16
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	331a      	adds	r3, #26
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7ff f847 	bl	800df1c <ld_word>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d109      	bne.n	800eeae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	3314      	adds	r3, #20
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff f83c 	bl	800df1c <ld_word>
 800eea4:	4603      	mov	r3, r0
 800eea6:	041b      	lsls	r3, r3, #16
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eeae:	68fb      	ldr	r3, [r7, #12]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	331a      	adds	r3, #26
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	b292      	uxth	r2, r2
 800eecc:	4611      	mov	r1, r2
 800eece:	4618      	mov	r0, r3
 800eed0:	f7ff f85f 	bl	800df92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	2b03      	cmp	r3, #3
 800eeda:	d109      	bne.n	800eef0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f103 0214 	add.w	r2, r3, #20
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	0c1b      	lsrs	r3, r3, #16
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4619      	mov	r1, r3
 800eeea:	4610      	mov	r0, r2
 800eeec:	f7ff f851 	bl	800df92 <st_word>
	}
}
 800eef0:	bf00      	nop
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eef8:	b590      	push	{r4, r7, lr}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	331a      	adds	r3, #26
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff f808 	bl	800df1c <ld_word>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <cmp_lfn+0x1e>
 800ef12:	2300      	movs	r3, #0
 800ef14:	e059      	b.n	800efca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef1e:	1e5a      	subs	r2, r3, #1
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	4413      	add	r3, r2
 800ef2a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	81fb      	strh	r3, [r7, #14]
 800ef30:	2300      	movs	r3, #0
 800ef32:	613b      	str	r3, [r7, #16]
 800ef34:	e033      	b.n	800ef9e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef36:	4a27      	ldr	r2, [pc, #156]	; (800efd4 <cmp_lfn+0xdc>)
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	4413      	add	r3, r2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe ffe9 	bl	800df1c <ld_word>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ef4e:	89fb      	ldrh	r3, [r7, #14]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d01a      	beq.n	800ef8a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2bfe      	cmp	r3, #254	; 0xfe
 800ef58:	d812      	bhi.n	800ef80 <cmp_lfn+0x88>
 800ef5a:	89bb      	ldrh	r3, [r7, #12]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f001 fe4f 	bl	8010c00 <ff_wtoupper>
 800ef62:	4603      	mov	r3, r0
 800ef64:	461c      	mov	r4, r3
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	1c5a      	adds	r2, r3, #1
 800ef6a:	617a      	str	r2, [r7, #20]
 800ef6c:	005b      	lsls	r3, r3, #1
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	4413      	add	r3, r2
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f001 fe43 	bl	8010c00 <ff_wtoupper>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	429c      	cmp	r4, r3
 800ef7e:	d001      	beq.n	800ef84 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ef80:	2300      	movs	r3, #0
 800ef82:	e022      	b.n	800efca <cmp_lfn+0xd2>
			}
			wc = uc;
 800ef84:	89bb      	ldrh	r3, [r7, #12]
 800ef86:	81fb      	strh	r3, [r7, #14]
 800ef88:	e006      	b.n	800ef98 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef8a:	89bb      	ldrh	r3, [r7, #12]
 800ef8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d001      	beq.n	800ef98 <cmp_lfn+0xa0>
 800ef94:	2300      	movs	r3, #0
 800ef96:	e018      	b.n	800efca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	613b      	str	r3, [r7, #16]
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2b0c      	cmp	r3, #12
 800efa2:	d9c8      	bls.n	800ef36 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00b      	beq.n	800efc8 <cmp_lfn+0xd0>
 800efb0:	89fb      	ldrh	r3, [r7, #14]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d008      	beq.n	800efc8 <cmp_lfn+0xd0>
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <cmp_lfn+0xd0>
 800efc4:	2300      	movs	r3, #0
 800efc6:	e000      	b.n	800efca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800efc8:	2301      	movs	r3, #1
}
 800efca:	4618      	mov	r0, r3
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd90      	pop	{r4, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	080142d0 	.word	0x080142d0

0800efd8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	4611      	mov	r1, r2
 800efe4:	461a      	mov	r2, r3
 800efe6:	460b      	mov	r3, r1
 800efe8:	71fb      	strb	r3, [r7, #7]
 800efea:	4613      	mov	r3, r2
 800efec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	330d      	adds	r3, #13
 800eff2:	79ba      	ldrb	r2, [r7, #6]
 800eff4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	330b      	adds	r3, #11
 800effa:	220f      	movs	r2, #15
 800effc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	330c      	adds	r3, #12
 800f002:	2200      	movs	r2, #0
 800f004:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	331a      	adds	r3, #26
 800f00a:	2100      	movs	r1, #0
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe ffc0 	bl	800df92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	1e5a      	subs	r2, r3, #1
 800f016:	4613      	mov	r3, r2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4413      	add	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4413      	add	r3, r2
 800f020:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f022:	2300      	movs	r3, #0
 800f024:	82fb      	strh	r3, [r7, #22]
 800f026:	2300      	movs	r3, #0
 800f028:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f02a:	8afb      	ldrh	r3, [r7, #22]
 800f02c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f030:	4293      	cmp	r3, r2
 800f032:	d007      	beq.n	800f044 <put_lfn+0x6c>
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	61fa      	str	r2, [r7, #28]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f044:	4a17      	ldr	r2, [pc, #92]	; (800f0a4 <put_lfn+0xcc>)
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	4413      	add	r3, r2
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	461a      	mov	r2, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	4413      	add	r3, r2
 800f052:	8afa      	ldrh	r2, [r7, #22]
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe ff9b 	bl	800df92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f05c:	8afb      	ldrh	r3, [r7, #22]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d102      	bne.n	800f068 <put_lfn+0x90>
 800f062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f066:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	3301      	adds	r3, #1
 800f06c:	61bb      	str	r3, [r7, #24]
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b0c      	cmp	r3, #12
 800f072:	d9da      	bls.n	800f02a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f074:	8afb      	ldrh	r3, [r7, #22]
 800f076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d006      	beq.n	800f08c <put_lfn+0xb4>
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	4413      	add	r3, r2
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d103      	bne.n	800f094 <put_lfn+0xbc>
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f092:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	79fa      	ldrb	r2, [r7, #7]
 800f098:	701a      	strb	r2, [r3, #0]
}
 800f09a:	bf00      	nop
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	080142d0 	.word	0x080142d0

0800f0a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b08c      	sub	sp, #48	; 0x30
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
 800f0b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f0b6:	220b      	movs	r2, #11
 800f0b8:	68b9      	ldr	r1, [r7, #8]
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f7fe ffb0 	bl	800e020 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2b05      	cmp	r3, #5
 800f0c4:	d92b      	bls.n	800f11e <gen_numname+0x76>
		sr = seq;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f0ca:	e022      	b.n	800f112 <gen_numname+0x6a>
			wc = *lfn++;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	1c9a      	adds	r2, r3, #2
 800f0d0:	607a      	str	r2, [r7, #4]
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0da:	e017      	b.n	800f10c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	005a      	lsls	r2, r3, #1
 800f0e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0e2:	f003 0301 	and.w	r3, r3, #1
 800f0e6:	4413      	add	r3, r2
 800f0e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f0ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0ec:	085b      	lsrs	r3, r3, #1
 800f0ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d005      	beq.n	800f106 <gen_numname+0x5e>
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f100:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f104:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	3301      	adds	r3, #1
 800f10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	2b0f      	cmp	r3, #15
 800f110:	d9e4      	bls.n	800f0dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1d8      	bne.n	800f0cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f11e:	2307      	movs	r3, #7
 800f120:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	f003 030f 	and.w	r3, r3, #15
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	3330      	adds	r3, #48	; 0x30
 800f12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f136:	2b39      	cmp	r3, #57	; 0x39
 800f138:	d904      	bls.n	800f144 <gen_numname+0x9c>
 800f13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f13e:	3307      	adds	r3, #7
 800f140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	1e5a      	subs	r2, r3, #1
 800f148:	62ba      	str	r2, [r7, #40]	; 0x28
 800f14a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f14e:	4413      	add	r3, r2
 800f150:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f154:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	091b      	lsrs	r3, r3, #4
 800f15c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1de      	bne.n	800f122 <gen_numname+0x7a>
	ns[i] = '~';
 800f164:	f107 0214 	add.w	r2, r7, #20
 800f168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16a:	4413      	add	r3, r2
 800f16c:	227e      	movs	r2, #126	; 0x7e
 800f16e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f170:	2300      	movs	r3, #0
 800f172:	627b      	str	r3, [r7, #36]	; 0x24
 800f174:	e002      	b.n	800f17c <gen_numname+0xd4>
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	3301      	adds	r3, #1
 800f17a:	627b      	str	r3, [r7, #36]	; 0x24
 800f17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f180:	429a      	cmp	r2, r3
 800f182:	d205      	bcs.n	800f190 <gen_numname+0xe8>
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	4413      	add	r3, r2
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	2b20      	cmp	r3, #32
 800f18e:	d1f2      	bne.n	800f176 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	2b07      	cmp	r3, #7
 800f194:	d808      	bhi.n	800f1a8 <gen_numname+0x100>
 800f196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	62ba      	str	r2, [r7, #40]	; 0x28
 800f19c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f1a0:	4413      	add	r3, r2
 800f1a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f1a6:	e000      	b.n	800f1aa <gen_numname+0x102>
 800f1a8:	2120      	movs	r1, #32
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	1c5a      	adds	r2, r3, #1
 800f1ae:	627a      	str	r2, [r7, #36]	; 0x24
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	460a      	mov	r2, r1
 800f1b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	2b07      	cmp	r3, #7
 800f1bc:	d9e8      	bls.n	800f190 <gen_numname+0xe8>
}
 800f1be:	bf00      	nop
 800f1c0:	3730      	adds	r7, #48	; 0x30
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b085      	sub	sp, #20
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f1d2:	230b      	movs	r3, #11
 800f1d4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f1d6:	7bfb      	ldrb	r3, [r7, #15]
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	0852      	lsrs	r2, r2, #1
 800f1dc:	01db      	lsls	r3, r3, #7
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	1c59      	adds	r1, r3, #1
 800f1e6:	6079      	str	r1, [r7, #4]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	60bb      	str	r3, [r7, #8]
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1ed      	bne.n	800f1d6 <sum_sfn+0x10>
	return sum;
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3714      	adds	r7, #20
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f216:	2100      	movs	r1, #0
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff fca7 	bl	800eb6c <dir_sdi>
 800f21e:	4603      	mov	r3, r0
 800f220:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <dir_find+0x24>
 800f228:	7dfb      	ldrb	r3, [r7, #23]
 800f22a:	e0a9      	b.n	800f380 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f22c:	23ff      	movs	r3, #255	; 0xff
 800f22e:	753b      	strb	r3, [r7, #20]
 800f230:	7d3b      	ldrb	r3, [r7, #20]
 800f232:	757b      	strb	r3, [r7, #21]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f23a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	69db      	ldr	r3, [r3, #28]
 800f240:	4619      	mov	r1, r3
 800f242:	6938      	ldr	r0, [r7, #16]
 800f244:	f7ff f91a 	bl	800e47c <move_window>
 800f248:	4603      	mov	r3, r0
 800f24a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f24c:	7dfb      	ldrb	r3, [r7, #23]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 8090 	bne.w	800f374 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f25c:	7dbb      	ldrb	r3, [r7, #22]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d102      	bne.n	800f268 <dir_find+0x60>
 800f262:	2304      	movs	r3, #4
 800f264:	75fb      	strb	r3, [r7, #23]
 800f266:	e08a      	b.n	800f37e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a1b      	ldr	r3, [r3, #32]
 800f26c:	330b      	adds	r3, #11
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f274:	73fb      	strb	r3, [r7, #15]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	7bfa      	ldrb	r2, [r7, #15]
 800f27a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f27c:	7dbb      	ldrb	r3, [r7, #22]
 800f27e:	2be5      	cmp	r3, #229	; 0xe5
 800f280:	d007      	beq.n	800f292 <dir_find+0x8a>
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d009      	beq.n	800f2a0 <dir_find+0x98>
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
 800f28e:	2b0f      	cmp	r3, #15
 800f290:	d006      	beq.n	800f2a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f292:	23ff      	movs	r3, #255	; 0xff
 800f294:	757b      	strb	r3, [r7, #21]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f29c:	631a      	str	r2, [r3, #48]	; 0x30
 800f29e:	e05e      	b.n	800f35e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
 800f2a2:	2b0f      	cmp	r3, #15
 800f2a4:	d136      	bne.n	800f314 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d154      	bne.n	800f35e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f2b4:	7dbb      	ldrb	r3, [r7, #22]
 800f2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00d      	beq.n	800f2da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	7b5b      	ldrb	r3, [r3, #13]
 800f2c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f2c6:	7dbb      	ldrb	r3, [r7, #22]
 800f2c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2cc:	75bb      	strb	r3, [r7, #22]
 800f2ce:	7dbb      	ldrb	r3, [r7, #22]
 800f2d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	695a      	ldr	r2, [r3, #20]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f2da:	7dba      	ldrb	r2, [r7, #22]
 800f2dc:	7d7b      	ldrb	r3, [r7, #21]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d115      	bne.n	800f30e <dir_find+0x106>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a1b      	ldr	r3, [r3, #32]
 800f2e6:	330d      	adds	r3, #13
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	7d3a      	ldrb	r2, [r7, #20]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d10e      	bne.n	800f30e <dir_find+0x106>
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	68da      	ldr	r2, [r3, #12]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7ff fdfc 	bl	800eef8 <cmp_lfn>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <dir_find+0x106>
 800f306:	7d7b      	ldrb	r3, [r7, #21]
 800f308:	3b01      	subs	r3, #1
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	e000      	b.n	800f310 <dir_find+0x108>
 800f30e:	23ff      	movs	r3, #255	; 0xff
 800f310:	757b      	strb	r3, [r7, #21]
 800f312:	e024      	b.n	800f35e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f314:	7d7b      	ldrb	r3, [r7, #21]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d109      	bne.n	800f32e <dir_find+0x126>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff ff51 	bl	800f1c6 <sum_sfn>
 800f324:	4603      	mov	r3, r0
 800f326:	461a      	mov	r2, r3
 800f328:	7d3b      	ldrb	r3, [r7, #20]
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d024      	beq.n	800f378 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f334:	f003 0301 	and.w	r3, r3, #1
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d10a      	bne.n	800f352 <dir_find+0x14a>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a18      	ldr	r0, [r3, #32]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3324      	adds	r3, #36	; 0x24
 800f344:	220b      	movs	r2, #11
 800f346:	4619      	mov	r1, r3
 800f348:	f7fe fea5 	bl	800e096 <mem_cmp>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d014      	beq.n	800f37c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f352:	23ff      	movs	r3, #255	; 0xff
 800f354:	757b      	strb	r3, [r7, #21]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f35c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f35e:	2100      	movs	r1, #0
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fc7e 	bl	800ec62 <dir_next>
 800f366:	4603      	mov	r3, r0
 800f368:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f43f af65 	beq.w	800f23c <dir_find+0x34>
 800f372:	e004      	b.n	800f37e <dir_find+0x176>
		if (res != FR_OK) break;
 800f374:	bf00      	nop
 800f376:	e002      	b.n	800f37e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f378:	bf00      	nop
 800f37a:	e000      	b.n	800f37e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f37c:	bf00      	nop

	return res;
 800f37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3718      	adds	r7, #24
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08c      	sub	sp, #48	; 0x30
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f39c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <dir_register+0x20>
 800f3a4:	2306      	movs	r3, #6
 800f3a6:	e0e0      	b.n	800f56a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f3ac:	e002      	b.n	800f3b4 <dir_register+0x2c>
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	4413      	add	r3, r2
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1f4      	bne.n	800f3ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f3ca:	f107 030c 	add.w	r3, r7, #12
 800f3ce:	220c      	movs	r2, #12
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fe fe25 	bl	800e020 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f3d6:	7dfb      	ldrb	r3, [r7, #23]
 800f3d8:	f003 0301 	and.w	r3, r3, #1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d032      	beq.n	800f446 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2240      	movs	r2, #64	; 0x40
 800f3e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3ec:	e016      	b.n	800f41c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	f107 010c 	add.w	r1, r7, #12
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	f7ff fe53 	bl	800f0a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7ff ff00 	bl	800f208 <dir_find>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f412:	2b00      	cmp	r3, #0
 800f414:	d106      	bne.n	800f424 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	3301      	adds	r3, #1
 800f41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	2b63      	cmp	r3, #99	; 0x63
 800f420:	d9e5      	bls.n	800f3ee <dir_register+0x66>
 800f422:	e000      	b.n	800f426 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f424:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f428:	2b64      	cmp	r3, #100	; 0x64
 800f42a:	d101      	bne.n	800f430 <dir_register+0xa8>
 800f42c:	2307      	movs	r3, #7
 800f42e:	e09c      	b.n	800f56a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f434:	2b04      	cmp	r3, #4
 800f436:	d002      	beq.n	800f43e <dir_register+0xb6>
 800f438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f43c:	e095      	b.n	800f56a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f43e:	7dfa      	ldrb	r2, [r7, #23]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	f003 0302 	and.w	r3, r3, #2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d007      	beq.n	800f460 <dir_register+0xd8>
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	330c      	adds	r3, #12
 800f454:	4a47      	ldr	r2, [pc, #284]	; (800f574 <dir_register+0x1ec>)
 800f456:	fba2 2303 	umull	r2, r3, r2, r3
 800f45a:	089b      	lsrs	r3, r3, #2
 800f45c:	3301      	adds	r3, #1
 800f45e:	e000      	b.n	800f462 <dir_register+0xda>
 800f460:	2301      	movs	r3, #1
 800f462:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f464:	6a39      	ldr	r1, [r7, #32]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff fcc0 	bl	800edec <dir_alloc>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f476:	2b00      	cmp	r3, #0
 800f478:	d148      	bne.n	800f50c <dir_register+0x184>
 800f47a:	6a3b      	ldr	r3, [r7, #32]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	623b      	str	r3, [r7, #32]
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d042      	beq.n	800f50c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	695a      	ldr	r2, [r3, #20]
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	015b      	lsls	r3, r3, #5
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7ff fb6a 	bl	800eb6c <dir_sdi>
 800f498:	4603      	mov	r3, r0
 800f49a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d132      	bne.n	800f50c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	3324      	adds	r3, #36	; 0x24
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7ff fe8b 	bl	800f1c6 <sum_sfn>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	69f8      	ldr	r0, [r7, #28]
 800f4bc:	f7fe ffde 	bl	800e47c <move_window>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d11d      	bne.n	800f50a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	68d8      	ldr	r0, [r3, #12]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a19      	ldr	r1, [r3, #32]
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	7efb      	ldrb	r3, [r7, #27]
 800f4dc:	f7ff fd7c 	bl	800efd8 <put_lfn>
				fs->wflag = 1;
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff fbba 	bl	800ec62 <dir_next>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d107      	bne.n	800f50c <dir_register+0x184>
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	623b      	str	r3, [r7, #32]
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1d5      	bne.n	800f4b4 <dir_register+0x12c>
 800f508:	e000      	b.n	800f50c <dir_register+0x184>
				if (res != FR_OK) break;
 800f50a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f50c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f510:	2b00      	cmp	r3, #0
 800f512:	d128      	bne.n	800f566 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	69db      	ldr	r3, [r3, #28]
 800f518:	4619      	mov	r1, r3
 800f51a:	69f8      	ldr	r0, [r7, #28]
 800f51c:	f7fe ffae 	bl	800e47c <move_window>
 800f520:	4603      	mov	r3, r0
 800f522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d11b      	bne.n	800f566 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	2220      	movs	r2, #32
 800f534:	2100      	movs	r1, #0
 800f536:	4618      	mov	r0, r3
 800f538:	f7fe fd93 	bl	800e062 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a18      	ldr	r0, [r3, #32]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3324      	adds	r3, #36	; 0x24
 800f544:	220b      	movs	r2, #11
 800f546:	4619      	mov	r1, r3
 800f548:	f7fe fd6a 	bl	800e020 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	330c      	adds	r3, #12
 800f558:	f002 0218 	and.w	r2, r2, #24
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	2201      	movs	r2, #1
 800f564:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3730      	adds	r7, #48	; 0x30
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	4ec4ec4f 	.word	0x4ec4ec4f

0800f578 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08a      	sub	sp, #40	; 0x28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	613b      	str	r3, [r7, #16]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	60fb      	str	r3, [r7, #12]
 800f590:	2300      	movs	r3, #0
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	1c5a      	adds	r2, r3, #1
 800f59c:	61ba      	str	r2, [r7, #24]
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a8:	2b1f      	cmp	r3, #31
 800f5aa:	d940      	bls.n	800f62e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f5ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ae:	2b2f      	cmp	r3, #47	; 0x2f
 800f5b0:	d006      	beq.n	800f5c0 <create_name+0x48>
 800f5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b4:	2b5c      	cmp	r3, #92	; 0x5c
 800f5b6:	d110      	bne.n	800f5da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5b8:	e002      	b.n	800f5c0 <create_name+0x48>
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	61bb      	str	r3, [r7, #24]
 800f5c0:	693a      	ldr	r2, [r7, #16]
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b2f      	cmp	r3, #47	; 0x2f
 800f5ca:	d0f6      	beq.n	800f5ba <create_name+0x42>
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b5c      	cmp	r3, #92	; 0x5c
 800f5d6:	d0f0      	beq.n	800f5ba <create_name+0x42>
			break;
 800f5d8:	e02a      	b.n	800f630 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	2bfe      	cmp	r3, #254	; 0xfe
 800f5de:	d901      	bls.n	800f5e4 <create_name+0x6c>
 800f5e0:	2306      	movs	r3, #6
 800f5e2:	e177      	b.n	800f8d4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f5ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f001 faca 	bl	8010b88 <ff_convert>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f5f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <create_name+0x8a>
 800f5fe:	2306      	movs	r3, #6
 800f600:	e168      	b.n	800f8d4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f604:	2b7f      	cmp	r3, #127	; 0x7f
 800f606:	d809      	bhi.n	800f61c <create_name+0xa4>
 800f608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f60a:	4619      	mov	r1, r3
 800f60c:	48b3      	ldr	r0, [pc, #716]	; (800f8dc <create_name+0x364>)
 800f60e:	f7fe fd69 	bl	800e0e4 <chk_chr>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d001      	beq.n	800f61c <create_name+0xa4>
 800f618:	2306      	movs	r3, #6
 800f61a:	e15b      	b.n	800f8d4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	1c5a      	adds	r2, r3, #1
 800f620:	617a      	str	r2, [r7, #20]
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	4413      	add	r3, r2
 800f628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f62a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f62c:	e7b4      	b.n	800f598 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f62e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	441a      	add	r2, r3
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f63c:	2b1f      	cmp	r3, #31
 800f63e:	d801      	bhi.n	800f644 <create_name+0xcc>
 800f640:	2304      	movs	r3, #4
 800f642:	e000      	b.n	800f646 <create_name+0xce>
 800f644:	2300      	movs	r3, #0
 800f646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f64a:	e011      	b.n	800f670 <create_name+0xf8>
		w = lfn[di - 1];
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f652:	3b01      	subs	r3, #1
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	4413      	add	r3, r2
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f65e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f660:	2b20      	cmp	r3, #32
 800f662:	d002      	beq.n	800f66a <create_name+0xf2>
 800f664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f666:	2b2e      	cmp	r3, #46	; 0x2e
 800f668:	d106      	bne.n	800f678 <create_name+0x100>
		di--;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	3b01      	subs	r3, #1
 800f66e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1ea      	bne.n	800f64c <create_name+0xd4>
 800f676:	e000      	b.n	800f67a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f678:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	4413      	add	r3, r2
 800f682:	2200      	movs	r2, #0
 800f684:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d101      	bne.n	800f690 <create_name+0x118>
 800f68c:	2306      	movs	r3, #6
 800f68e:	e121      	b.n	800f8d4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	3324      	adds	r3, #36	; 0x24
 800f694:	220b      	movs	r2, #11
 800f696:	2120      	movs	r1, #32
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fe fce2 	bl	800e062 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f69e:	2300      	movs	r3, #0
 800f6a0:	61bb      	str	r3, [r7, #24]
 800f6a2:	e002      	b.n	800f6aa <create_name+0x132>
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	61bb      	str	r3, [r7, #24]
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	2b20      	cmp	r3, #32
 800f6b6:	d0f5      	beq.n	800f6a4 <create_name+0x12c>
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	005b      	lsls	r3, r3, #1
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4413      	add	r3, r2
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6c4:	d0ee      	beq.n	800f6a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d009      	beq.n	800f6e0 <create_name+0x168>
 800f6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d0:	f043 0303 	orr.w	r3, r3, #3
 800f6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f6d8:	e002      	b.n	800f6e0 <create_name+0x168>
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d009      	beq.n	800f6fa <create_name+0x182>
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	2b2e      	cmp	r3, #46	; 0x2e
 800f6f8:	d1ef      	bne.n	800f6da <create_name+0x162>

	i = b = 0; ni = 8;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f700:	2300      	movs	r3, #0
 800f702:	623b      	str	r3, [r7, #32]
 800f704:	2308      	movs	r3, #8
 800f706:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	61ba      	str	r2, [r7, #24]
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4413      	add	r3, r2
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f000 8090 	beq.w	800f840 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f722:	2b20      	cmp	r3, #32
 800f724:	d006      	beq.n	800f734 <create_name+0x1bc>
 800f726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f728:	2b2e      	cmp	r3, #46	; 0x2e
 800f72a:	d10a      	bne.n	800f742 <create_name+0x1ca>
 800f72c:	69ba      	ldr	r2, [r7, #24]
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	429a      	cmp	r2, r3
 800f732:	d006      	beq.n	800f742 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f738:	f043 0303 	orr.w	r3, r3, #3
 800f73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f740:	e07d      	b.n	800f83e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f742:	6a3a      	ldr	r2, [r7, #32]
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	429a      	cmp	r2, r3
 800f748:	d203      	bcs.n	800f752 <create_name+0x1da>
 800f74a:	69ba      	ldr	r2, [r7, #24]
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d123      	bne.n	800f79a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	2b0b      	cmp	r3, #11
 800f756:	d106      	bne.n	800f766 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f75c:	f043 0303 	orr.w	r3, r3, #3
 800f760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f764:	e06f      	b.n	800f846 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f766:	69ba      	ldr	r2, [r7, #24]
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d005      	beq.n	800f77a <create_name+0x202>
 800f76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f772:	f043 0303 	orr.w	r3, r3, #3
 800f776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f77a:	69ba      	ldr	r2, [r7, #24]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d860      	bhi.n	800f844 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	61bb      	str	r3, [r7, #24]
 800f786:	2308      	movs	r3, #8
 800f788:	623b      	str	r3, [r7, #32]
 800f78a:	230b      	movs	r3, #11
 800f78c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f78e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f798:	e051      	b.n	800f83e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f79c:	2b7f      	cmp	r3, #127	; 0x7f
 800f79e:	d914      	bls.n	800f7ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f001 f9ef 	bl	8010b88 <ff_convert>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d004      	beq.n	800f7be <create_name+0x246>
 800f7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b6:	3b80      	subs	r3, #128	; 0x80
 800f7b8:	4a49      	ldr	r2, [pc, #292]	; (800f8e0 <create_name+0x368>)
 800f7ba:	5cd3      	ldrb	r3, [r2, r3]
 800f7bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f7be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7c2:	f043 0302 	orr.w	r3, r3, #2
 800f7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d007      	beq.n	800f7e0 <create_name+0x268>
 800f7d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4843      	ldr	r0, [pc, #268]	; (800f8e4 <create_name+0x36c>)
 800f7d6:	f7fe fc85 	bl	800e0e4 <chk_chr>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d008      	beq.n	800f7f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f7e0:	235f      	movs	r3, #95	; 0x5f
 800f7e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7e8:	f043 0303 	orr.w	r3, r3, #3
 800f7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7f0:	e01b      	b.n	800f82a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7f4:	2b40      	cmp	r3, #64	; 0x40
 800f7f6:	d909      	bls.n	800f80c <create_name+0x294>
 800f7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fa:	2b5a      	cmp	r3, #90	; 0x5a
 800f7fc:	d806      	bhi.n	800f80c <create_name+0x294>
					b |= 2;
 800f7fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f802:	f043 0302 	orr.w	r3, r3, #2
 800f806:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f80a:	e00e      	b.n	800f82a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80e:	2b60      	cmp	r3, #96	; 0x60
 800f810:	d90b      	bls.n	800f82a <create_name+0x2b2>
 800f812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f814:	2b7a      	cmp	r3, #122	; 0x7a
 800f816:	d808      	bhi.n	800f82a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f81c:	f043 0301 	orr.w	r3, r3, #1
 800f820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f826:	3b20      	subs	r3, #32
 800f828:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	623a      	str	r2, [r7, #32]
 800f830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f832:	b2d1      	uxtb	r1, r2
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	4413      	add	r3, r2
 800f838:	460a      	mov	r2, r1
 800f83a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f83e:	e763      	b.n	800f708 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f840:	bf00      	nop
 800f842:	e000      	b.n	800f846 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800f844:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f84c:	2be5      	cmp	r3, #229	; 0xe5
 800f84e:	d103      	bne.n	800f858 <create_name+0x2e0>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2205      	movs	r2, #5
 800f854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	2b08      	cmp	r3, #8
 800f85c:	d104      	bne.n	800f868 <create_name+0x2f0>
 800f85e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f86c:	f003 030c 	and.w	r3, r3, #12
 800f870:	2b0c      	cmp	r3, #12
 800f872:	d005      	beq.n	800f880 <create_name+0x308>
 800f874:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f878:	f003 0303 	and.w	r3, r3, #3
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d105      	bne.n	800f88c <create_name+0x314>
 800f880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f884:	f043 0302 	orr.w	r3, r3, #2
 800f888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f890:	f003 0302 	and.w	r3, r3, #2
 800f894:	2b00      	cmp	r3, #0
 800f896:	d117      	bne.n	800f8c8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f89c:	f003 0303 	and.w	r3, r3, #3
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d105      	bne.n	800f8b0 <create_name+0x338>
 800f8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a8:	f043 0310 	orr.w	r3, r3, #16
 800f8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8b4:	f003 030c 	and.w	r3, r3, #12
 800f8b8:	2b04      	cmp	r3, #4
 800f8ba:	d105      	bne.n	800f8c8 <create_name+0x350>
 800f8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8c0:	f043 0308 	orr.w	r3, r3, #8
 800f8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f8d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3728      	adds	r7, #40	; 0x28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08013bc4 	.word	0x08013bc4
 800f8e0:	08014250 	.word	0x08014250
 800f8e4:	08013bd0 	.word	0x08013bd0

0800f8e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8fc:	e002      	b.n	800f904 <follow_path+0x1c>
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	3301      	adds	r3, #1
 800f902:	603b      	str	r3, [r7, #0]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b2f      	cmp	r3, #47	; 0x2f
 800f90a:	d0f8      	beq.n	800f8fe <follow_path+0x16>
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b5c      	cmp	r3, #92	; 0x5c
 800f912:	d0f4      	beq.n	800f8fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	2200      	movs	r2, #0
 800f918:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	2b1f      	cmp	r3, #31
 800f920:	d80a      	bhi.n	800f938 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2280      	movs	r2, #128	; 0x80
 800f926:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f92a:	2100      	movs	r1, #0
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7ff f91d 	bl	800eb6c <dir_sdi>
 800f932:	4603      	mov	r3, r0
 800f934:	75fb      	strb	r3, [r7, #23]
 800f936:	e043      	b.n	800f9c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f938:	463b      	mov	r3, r7
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7ff fe1b 	bl	800f578 <create_name>
 800f942:	4603      	mov	r3, r0
 800f944:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d134      	bne.n	800f9b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7ff fc5b 	bl	800f208 <dir_find>
 800f952:	4603      	mov	r3, r0
 800f954:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f95c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00a      	beq.n	800f97a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	2b04      	cmp	r3, #4
 800f968:	d127      	bne.n	800f9ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f96a:	7afb      	ldrb	r3, [r7, #11]
 800f96c:	f003 0304 	and.w	r3, r3, #4
 800f970:	2b00      	cmp	r3, #0
 800f972:	d122      	bne.n	800f9ba <follow_path+0xd2>
 800f974:	2305      	movs	r3, #5
 800f976:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f978:	e01f      	b.n	800f9ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f97a:	7afb      	ldrb	r3, [r7, #11]
 800f97c:	f003 0304 	and.w	r3, r3, #4
 800f980:	2b00      	cmp	r3, #0
 800f982:	d11c      	bne.n	800f9be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	799b      	ldrb	r3, [r3, #6]
 800f988:	f003 0310 	and.w	r3, r3, #16
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f990:	2305      	movs	r3, #5
 800f992:	75fb      	strb	r3, [r7, #23]
 800f994:	e014      	b.n	800f9c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	695b      	ldr	r3, [r3, #20]
 800f9a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9a4:	4413      	add	r3, r2
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff fa66 	bl	800ee7a <ld_clust>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9b4:	e7c0      	b.n	800f938 <follow_path+0x50>
			if (res != FR_OK) break;
 800f9b6:	bf00      	nop
 800f9b8:	e002      	b.n	800f9c0 <follow_path+0xd8>
				break;
 800f9ba:	bf00      	nop
 800f9bc:	e000      	b.n	800f9c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9be:	bf00      	nop
			}
		}
	}

	return res;
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3718      	adds	r7, #24
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9ca:	b480      	push	{r7}
 800f9cc:	b087      	sub	sp, #28
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d031      	beq.n	800fa44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e002      	b.n	800f9ee <get_ldnumber+0x24>
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	2b1f      	cmp	r3, #31
 800f9f4:	d903      	bls.n	800f9fe <get_ldnumber+0x34>
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b3a      	cmp	r3, #58	; 0x3a
 800f9fc:	d1f4      	bne.n	800f9e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b3a      	cmp	r3, #58	; 0x3a
 800fa04:	d11c      	bne.n	800fa40 <get_ldnumber+0x76>
			tp = *path;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	1c5a      	adds	r2, r3, #1
 800fa10:	60fa      	str	r2, [r7, #12]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	3b30      	subs	r3, #48	; 0x30
 800fa16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	2b09      	cmp	r3, #9
 800fa1c:	d80e      	bhi.n	800fa3c <get_ldnumber+0x72>
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d10a      	bne.n	800fa3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d107      	bne.n	800fa3c <get_ldnumber+0x72>
					vol = (int)i;
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	3301      	adds	r3, #1
 800fa34:	617b      	str	r3, [r7, #20]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	697a      	ldr	r2, [r7, #20]
 800fa3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	e002      	b.n	800fa46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa40:	2300      	movs	r3, #0
 800fa42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa44:	693b      	ldr	r3, [r7, #16]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	371c      	adds	r7, #28
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
	...

0800fa54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	70da      	strb	r2, [r3, #3]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7fe fd04 	bl	800e47c <move_window>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <check_fs+0x2a>
 800fa7a:	2304      	movs	r3, #4
 800fa7c:	e038      	b.n	800faf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	3334      	adds	r3, #52	; 0x34
 800fa82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fe fa48 	bl	800df1c <ld_word>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	461a      	mov	r2, r3
 800fa90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d001      	beq.n	800fa9c <check_fs+0x48>
 800fa98:	2303      	movs	r3, #3
 800fa9a:	e029      	b.n	800faf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faa2:	2be9      	cmp	r3, #233	; 0xe9
 800faa4:	d009      	beq.n	800faba <check_fs+0x66>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faac:	2beb      	cmp	r3, #235	; 0xeb
 800faae:	d11e      	bne.n	800faee <check_fs+0x9a>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fab6:	2b90      	cmp	r3, #144	; 0x90
 800fab8:	d119      	bne.n	800faee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3334      	adds	r3, #52	; 0x34
 800fabe:	3336      	adds	r3, #54	; 0x36
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe fa43 	bl	800df4c <ld_dword>
 800fac6:	4603      	mov	r3, r0
 800fac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800facc:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <check_fs+0xa4>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d101      	bne.n	800fad6 <check_fs+0x82>
 800fad2:	2300      	movs	r3, #0
 800fad4:	e00c      	b.n	800faf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	3334      	adds	r3, #52	; 0x34
 800fada:	3352      	adds	r3, #82	; 0x52
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe fa35 	bl	800df4c <ld_dword>
 800fae2:	4602      	mov	r2, r0
 800fae4:	4b05      	ldr	r3, [pc, #20]	; (800fafc <check_fs+0xa8>)
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d101      	bne.n	800faee <check_fs+0x9a>
 800faea:	2300      	movs	r3, #0
 800faec:	e000      	b.n	800faf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800faee:	2302      	movs	r3, #2
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	00544146 	.word	0x00544146
 800fafc:	33544146 	.word	0x33544146

0800fb00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b096      	sub	sp, #88	; 0x58
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff ff58 	bl	800f9ca <get_ldnumber>
 800fb1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	da01      	bge.n	800fb26 <find_volume+0x26>
 800fb22:	230b      	movs	r3, #11
 800fb24:	e231      	b.n	800ff8a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb26:	4aa8      	ldr	r2, [pc, #672]	; (800fdc8 <find_volume+0x2c8>)
 800fb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <find_volume+0x3a>
 800fb36:	230c      	movs	r3, #12
 800fb38:	e227      	b.n	800ff8a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb40:	79fb      	ldrb	r3, [r7, #7]
 800fb42:	f023 0301 	bic.w	r3, r3, #1
 800fb46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d01a      	beq.n	800fb86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fe f943 	bl	800dde0 <disk_status>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10c      	bne.n	800fb86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d007      	beq.n	800fb82 <find_volume+0x82>
 800fb72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb76:	f003 0304 	and.w	r3, r3, #4
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb7e:	230a      	movs	r3, #10
 800fb80:	e203      	b.n	800ff8a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800fb82:	2300      	movs	r3, #0
 800fb84:	e201      	b.n	800ff8a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb88:	2200      	movs	r2, #0
 800fb8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fe f93b 	bl	800de14 <disk_initialize>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbb0:	2303      	movs	r3, #3
 800fbb2:	e1ea      	b.n	800ff8a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d007      	beq.n	800fbca <find_volume+0xca>
 800fbba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbbe:	f003 0304 	and.w	r3, r3, #4
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbc6:	230a      	movs	r3, #10
 800fbc8:	e1df      	b.n	800ff8a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbd2:	f7ff ff3f 	bl	800fa54 <check_fs>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbe0:	2b02      	cmp	r3, #2
 800fbe2:	d14b      	bne.n	800fc7c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	643b      	str	r3, [r7, #64]	; 0x40
 800fbe8:	e01f      	b.n	800fc2a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf2:	011b      	lsls	r3, r3, #4
 800fbf4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbf8:	4413      	add	r3, r2
 800fbfa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	3304      	adds	r3, #4
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d006      	beq.n	800fc14 <find_volume+0x114>
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	3308      	adds	r3, #8
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fe f99e 	bl	800df4c <ld_dword>
 800fc10:	4602      	mov	r2, r0
 800fc12:	e000      	b.n	800fc16 <find_volume+0x116>
 800fc14:	2200      	movs	r2, #0
 800fc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fc1e:	440b      	add	r3, r1
 800fc20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc26:	3301      	adds	r3, #1
 800fc28:	643b      	str	r3, [r7, #64]	; 0x40
 800fc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2c:	2b03      	cmp	r3, #3
 800fc2e:	d9dc      	bls.n	800fbea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc30:	2300      	movs	r3, #0
 800fc32:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <find_volume+0x140>
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc48:	4413      	add	r3, r2
 800fc4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d005      	beq.n	800fc62 <find_volume+0x162>
 800fc56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc5a:	f7ff fefb 	bl	800fa54 <check_fs>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	e000      	b.n	800fc64 <find_volume+0x164>
 800fc62:	2303      	movs	r3, #3
 800fc64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d905      	bls.n	800fc7c <find_volume+0x17c>
 800fc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc72:	3301      	adds	r3, #1
 800fc74:	643b      	str	r3, [r7, #64]	; 0x40
 800fc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc78:	2b03      	cmp	r3, #3
 800fc7a:	d9e1      	bls.n	800fc40 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc80:	2b04      	cmp	r3, #4
 800fc82:	d101      	bne.n	800fc88 <find_volume+0x188>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e180      	b.n	800ff8a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d901      	bls.n	800fc94 <find_volume+0x194>
 800fc90:	230d      	movs	r3, #13
 800fc92:	e17a      	b.n	800ff8a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	3334      	adds	r3, #52	; 0x34
 800fc98:	330b      	adds	r3, #11
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fe f93e 	bl	800df1c <ld_word>
 800fca0:	4603      	mov	r3, r0
 800fca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca6:	d001      	beq.n	800fcac <find_volume+0x1ac>
 800fca8:	230d      	movs	r3, #13
 800fcaa:	e16e      	b.n	800ff8a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	3334      	adds	r3, #52	; 0x34
 800fcb0:	3316      	adds	r3, #22
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe f932 	bl	800df1c <ld_word>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d106      	bne.n	800fcd0 <find_volume+0x1d0>
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	3334      	adds	r3, #52	; 0x34
 800fcc6:	3324      	adds	r3, #36	; 0x24
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fe f93f 	bl	800df4c <ld_dword>
 800fcce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	789b      	ldrb	r3, [r3, #2]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d005      	beq.n	800fcf4 <find_volume+0x1f4>
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	789b      	ldrb	r3, [r3, #2]
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d001      	beq.n	800fcf4 <find_volume+0x1f4>
 800fcf0:	230d      	movs	r3, #13
 800fcf2:	e14a      	b.n	800ff8a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf6:	789b      	ldrb	r3, [r3, #2]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcfc:	fb02 f303 	mul.w	r3, r2, r3
 800fd00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	895b      	ldrh	r3, [r3, #10]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d008      	beq.n	800fd28 <find_volume+0x228>
 800fd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd18:	895b      	ldrh	r3, [r3, #10]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	895b      	ldrh	r3, [r3, #10]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	4013      	ands	r3, r2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d001      	beq.n	800fd2c <find_volume+0x22c>
 800fd28:	230d      	movs	r3, #13
 800fd2a:	e12e      	b.n	800ff8a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	3334      	adds	r3, #52	; 0x34
 800fd30:	3311      	adds	r3, #17
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7fe f8f2 	bl	800df1c <ld_word>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	891b      	ldrh	r3, [r3, #8]
 800fd44:	f003 030f 	and.w	r3, r3, #15
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <find_volume+0x252>
 800fd4e:	230d      	movs	r3, #13
 800fd50:	e11b      	b.n	800ff8a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	3334      	adds	r3, #52	; 0x34
 800fd56:	3313      	adds	r3, #19
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fe f8df 	bl	800df1c <ld_word>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d106      	bne.n	800fd76 <find_volume+0x276>
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	3334      	adds	r3, #52	; 0x34
 800fd6c:	3320      	adds	r3, #32
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe f8ec 	bl	800df4c <ld_dword>
 800fd74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd78:	3334      	adds	r3, #52	; 0x34
 800fd7a:	330e      	adds	r3, #14
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe f8cd 	bl	800df1c <ld_word>
 800fd82:	4603      	mov	r3, r0
 800fd84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d101      	bne.n	800fd90 <find_volume+0x290>
 800fd8c:	230d      	movs	r3, #13
 800fd8e:	e0fc      	b.n	800ff8a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd94:	4413      	add	r3, r2
 800fd96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd98:	8912      	ldrh	r2, [r2, #8]
 800fd9a:	0912      	lsrs	r2, r2, #4
 800fd9c:	b292      	uxth	r2, r2
 800fd9e:	4413      	add	r3, r2
 800fda0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fda2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d201      	bcs.n	800fdae <find_volume+0x2ae>
 800fdaa:	230d      	movs	r3, #13
 800fdac:	e0ed      	b.n	800ff8a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdb6:	8952      	ldrh	r2, [r2, #10]
 800fdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d103      	bne.n	800fdcc <find_volume+0x2cc>
 800fdc4:	230d      	movs	r3, #13
 800fdc6:	e0e0      	b.n	800ff8a <find_volume+0x48a>
 800fdc8:	200002a4 	.word	0x200002a4
		fmt = FS_FAT32;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d802      	bhi.n	800fde2 <find_volume+0x2e2>
 800fddc:	2302      	movs	r3, #2
 800fdde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d802      	bhi.n	800fdf2 <find_volume+0x2f2>
 800fdec:	2301      	movs	r3, #1
 800fdee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	1c9a      	adds	r2, r3, #2
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdfe:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe04:	441a      	add	r2, r3
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fe0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	441a      	add	r2, r3
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fe14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe18:	2b03      	cmp	r3, #3
 800fe1a:	d11e      	bne.n	800fe5a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	3334      	adds	r3, #52	; 0x34
 800fe20:	332a      	adds	r3, #42	; 0x2a
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fe f87a 	bl	800df1c <ld_word>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <find_volume+0x332>
 800fe2e:	230d      	movs	r3, #13
 800fe30:	e0ab      	b.n	800ff8a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	891b      	ldrh	r3, [r3, #8]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <find_volume+0x33e>
 800fe3a:	230d      	movs	r3, #13
 800fe3c:	e0a5      	b.n	800ff8a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	3334      	adds	r3, #52	; 0x34
 800fe42:	332c      	adds	r3, #44	; 0x2c
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe f881 	bl	800df4c <ld_dword>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	647b      	str	r3, [r7, #68]	; 0x44
 800fe58:	e01f      	b.n	800fe9a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	891b      	ldrh	r3, [r3, #8]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <find_volume+0x366>
 800fe62:	230d      	movs	r3, #13
 800fe64:	e091      	b.n	800ff8a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe6c:	441a      	add	r2, r3
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d103      	bne.n	800fe82 <find_volume+0x382>
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	e00a      	b.n	800fe98 <find_volume+0x398>
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	699a      	ldr	r2, [r3, #24]
 800fe86:	4613      	mov	r3, r2
 800fe88:	005b      	lsls	r3, r3, #1
 800fe8a:	4413      	add	r3, r2
 800fe8c:	085a      	lsrs	r2, r3, #1
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	f003 0301 	and.w	r3, r3, #1
 800fe96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	69da      	ldr	r2, [r3, #28]
 800fe9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fea4:	0a5b      	lsrs	r3, r3, #9
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d201      	bcs.n	800feae <find_volume+0x3ae>
 800feaa:	230d      	movs	r3, #13
 800feac:	e06d      	b.n	800ff8a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feb4:	615a      	str	r2, [r3, #20]
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	695a      	ldr	r2, [r3, #20]
 800feba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800febe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec0:	2280      	movs	r2, #128	; 0x80
 800fec2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fec8:	2b03      	cmp	r3, #3
 800feca:	d149      	bne.n	800ff60 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	3334      	adds	r3, #52	; 0x34
 800fed0:	3330      	adds	r3, #48	; 0x30
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe f822 	bl	800df1c <ld_word>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d140      	bne.n	800ff60 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee0:	3301      	adds	r3, #1
 800fee2:	4619      	mov	r1, r3
 800fee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fee6:	f7fe fac9 	bl	800e47c <move_window>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d137      	bne.n	800ff60 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	2200      	movs	r2, #0
 800fef4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	3334      	adds	r3, #52	; 0x34
 800fefa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe f80c 	bl	800df1c <ld_word>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d127      	bne.n	800ff60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	3334      	adds	r3, #52	; 0x34
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fe f819 	bl	800df4c <ld_dword>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	4b1d      	ldr	r3, [pc, #116]	; (800ff94 <find_volume+0x494>)
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d11e      	bne.n	800ff60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	3334      	adds	r3, #52	; 0x34
 800ff26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fe f80e 	bl	800df4c <ld_dword>
 800ff30:	4602      	mov	r2, r0
 800ff32:	4b19      	ldr	r3, [pc, #100]	; (800ff98 <find_volume+0x498>)
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d113      	bne.n	800ff60 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	3334      	adds	r3, #52	; 0x34
 800ff3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fe f803 	bl	800df4c <ld_dword>
 800ff46:	4602      	mov	r2, r0
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	3334      	adds	r3, #52	; 0x34
 800ff50:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fd fff9 	bl	800df4c <ld_dword>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff66:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff68:	4b0c      	ldr	r3, [pc, #48]	; (800ff9c <find_volume+0x49c>)
 800ff6a:	881b      	ldrh	r3, [r3, #0]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	4b0a      	ldr	r3, [pc, #40]	; (800ff9c <find_volume+0x49c>)
 800ff72:	801a      	strh	r2, [r3, #0]
 800ff74:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <find_volume+0x49c>)
 800ff76:	881a      	ldrh	r2, [r3, #0]
 800ff78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ff7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7e:	4a08      	ldr	r2, [pc, #32]	; (800ffa0 <find_volume+0x4a0>)
 800ff80:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff84:	f7fe fa12 	bl	800e3ac <clear_lock>
#endif
	return FR_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3758      	adds	r7, #88	; 0x58
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	41615252 	.word	0x41615252
 800ff98:	61417272 	.word	0x61417272
 800ff9c:	200002a8 	.word	0x200002a8
 800ffa0:	200002dc 	.word	0x200002dc

0800ffa4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffae:	2309      	movs	r3, #9
 800ffb0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01c      	beq.n	800fff2 <validate+0x4e>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d018      	beq.n	800fff2 <validate+0x4e>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d013      	beq.n	800fff2 <validate+0x4e>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	889a      	ldrh	r2, [r3, #4]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	88db      	ldrh	r3, [r3, #6]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d10c      	bne.n	800fff2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	785b      	ldrb	r3, [r3, #1]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fd fefe 	bl	800dde0 <disk_status>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	f003 0301 	and.w	r3, r3, #1
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <validate+0x4e>
			res = FR_OK;
 800ffee:	2300      	movs	r3, #0
 800fff0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fff2:	7bfb      	ldrb	r3, [r7, #15]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d102      	bne.n	800fffe <validate+0x5a>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	e000      	b.n	8010000 <validate+0x5c>
 800fffe:	2300      	movs	r3, #0
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	6013      	str	r3, [r2, #0]
	return res;
 8010004:	7bfb      	ldrb	r3, [r7, #15]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
	...

08010010 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b088      	sub	sp, #32
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	4613      	mov	r3, r2
 801001c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010022:	f107 0310 	add.w	r3, r7, #16
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff fccf 	bl	800f9ca <get_ldnumber>
 801002c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	2b00      	cmp	r3, #0
 8010032:	da01      	bge.n	8010038 <f_mount+0x28>
 8010034:	230b      	movs	r3, #11
 8010036:	e02b      	b.n	8010090 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010038:	4a17      	ldr	r2, [pc, #92]	; (8010098 <f_mount+0x88>)
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010040:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d005      	beq.n	8010054 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010048:	69b8      	ldr	r0, [r7, #24]
 801004a:	f7fe f9af 	bl	800e3ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	2200      	movs	r2, #0
 8010052:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2200      	movs	r2, #0
 801005e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	490d      	ldr	r1, [pc, #52]	; (8010098 <f_mount+0x88>)
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <f_mount+0x66>
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b01      	cmp	r3, #1
 8010074:	d001      	beq.n	801007a <f_mount+0x6a>
 8010076:	2300      	movs	r3, #0
 8010078:	e00a      	b.n	8010090 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801007a:	f107 010c 	add.w	r1, r7, #12
 801007e:	f107 0308 	add.w	r3, r7, #8
 8010082:	2200      	movs	r2, #0
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff fd3b 	bl	800fb00 <find_volume>
 801008a:	4603      	mov	r3, r0
 801008c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801008e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3720      	adds	r7, #32
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	200002a4 	.word	0x200002a4

0801009c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b09a      	sub	sp, #104	; 0x68
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	4613      	mov	r3, r2
 80100a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d101      	bne.n	80100b4 <f_open+0x18>
 80100b0:	2309      	movs	r3, #9
 80100b2:	e1ad      	b.n	8010410 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100b4:	79fb      	ldrb	r3, [r7, #7]
 80100b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100bc:	79fa      	ldrb	r2, [r7, #7]
 80100be:	f107 0114 	add.w	r1, r7, #20
 80100c2:	f107 0308 	add.w	r3, r7, #8
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7ff fd1a 	bl	800fb00 <find_volume>
 80100cc:	4603      	mov	r3, r0
 80100ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80100d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f040 8191 	bne.w	80103fe <f_open+0x362>
		dj.obj.fs = fs;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	f107 0318 	add.w	r3, r7, #24
 80100e6:	4611      	mov	r1, r2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff fbfd 	bl	800f8e8 <follow_path>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d11a      	bne.n	8010132 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010100:	b25b      	sxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	da03      	bge.n	801010e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010106:	2306      	movs	r3, #6
 8010108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801010c:	e011      	b.n	8010132 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	f023 0301 	bic.w	r3, r3, #1
 8010114:	2b00      	cmp	r3, #0
 8010116:	bf14      	ite	ne
 8010118:	2301      	movne	r3, #1
 801011a:	2300      	moveq	r3, #0
 801011c:	b2db      	uxtb	r3, r3
 801011e:	461a      	mov	r2, r3
 8010120:	f107 0318 	add.w	r3, r7, #24
 8010124:	4611      	mov	r1, r2
 8010126:	4618      	mov	r0, r3
 8010128:	f7fd fff8 	bl	800e11c <chk_lock>
 801012c:	4603      	mov	r3, r0
 801012e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010132:	79fb      	ldrb	r3, [r7, #7]
 8010134:	f003 031c 	and.w	r3, r3, #28
 8010138:	2b00      	cmp	r3, #0
 801013a:	d07f      	beq.n	801023c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801013c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010140:	2b00      	cmp	r3, #0
 8010142:	d017      	beq.n	8010174 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010148:	2b04      	cmp	r3, #4
 801014a:	d10e      	bne.n	801016a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801014c:	f7fe f842 	bl	800e1d4 <enq_lock>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d006      	beq.n	8010164 <f_open+0xc8>
 8010156:	f107 0318 	add.w	r3, r7, #24
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff f914 	bl	800f388 <dir_register>
 8010160:	4603      	mov	r3, r0
 8010162:	e000      	b.n	8010166 <f_open+0xca>
 8010164:	2312      	movs	r3, #18
 8010166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801016a:	79fb      	ldrb	r3, [r7, #7]
 801016c:	f043 0308 	orr.w	r3, r3, #8
 8010170:	71fb      	strb	r3, [r7, #7]
 8010172:	e010      	b.n	8010196 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010174:	7fbb      	ldrb	r3, [r7, #30]
 8010176:	f003 0311 	and.w	r3, r3, #17
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <f_open+0xea>
					res = FR_DENIED;
 801017e:	2307      	movs	r3, #7
 8010180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010184:	e007      	b.n	8010196 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	f003 0304 	and.w	r3, r3, #4
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <f_open+0xfa>
 8010190:	2308      	movs	r3, #8
 8010192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801019a:	2b00      	cmp	r3, #0
 801019c:	d168      	bne.n	8010270 <f_open+0x1d4>
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	f003 0308 	and.w	r3, r3, #8
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d063      	beq.n	8010270 <f_open+0x1d4>
				dw = GET_FATTIME();
 80101a8:	f7fa fa24 	bl	800a5f4 <get_fattime>
 80101ac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	330e      	adds	r3, #14
 80101b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fd ff07 	bl	800dfc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	3316      	adds	r3, #22
 80101be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fd ff01 	bl	800dfc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	330b      	adds	r3, #11
 80101ca:	2220      	movs	r2, #32
 80101cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101d2:	4611      	mov	r1, r2
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fe fe50 	bl	800ee7a <ld_clust>
 80101da:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101e0:	2200      	movs	r2, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fe68 	bl	800eeb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	331c      	adds	r3, #28
 80101ec:	2100      	movs	r1, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fd feea 	bl	800dfc8 <st_dword>
					fs->wflag = 1;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2201      	movs	r2, #1
 80101f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d037      	beq.n	8010270 <f_open+0x1d4>
						dw = fs->winsect;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010204:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010206:	f107 0318 	add.w	r3, r7, #24
 801020a:	2200      	movs	r2, #0
 801020c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801020e:	4618      	mov	r0, r3
 8010210:	f7fe fb7b 	bl	800e90a <remove_chain>
 8010214:	4603      	mov	r3, r0
 8010216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801021a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801021e:	2b00      	cmp	r3, #0
 8010220:	d126      	bne.n	8010270 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010226:	4618      	mov	r0, r3
 8010228:	f7fe f928 	bl	800e47c <move_window>
 801022c:	4603      	mov	r3, r0
 801022e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010236:	3a01      	subs	r2, #1
 8010238:	611a      	str	r2, [r3, #16]
 801023a:	e019      	b.n	8010270 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801023c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010240:	2b00      	cmp	r3, #0
 8010242:	d115      	bne.n	8010270 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010244:	7fbb      	ldrb	r3, [r7, #30]
 8010246:	f003 0310 	and.w	r3, r3, #16
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <f_open+0x1ba>
					res = FR_NO_FILE;
 801024e:	2304      	movs	r3, #4
 8010250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010254:	e00c      	b.n	8010270 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	f003 0302 	and.w	r3, r3, #2
 801025c:	2b00      	cmp	r3, #0
 801025e:	d007      	beq.n	8010270 <f_open+0x1d4>
 8010260:	7fbb      	ldrb	r3, [r7, #30]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <f_open+0x1d4>
						res = FR_DENIED;
 801026a:	2307      	movs	r3, #7
 801026c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010270:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010274:	2b00      	cmp	r3, #0
 8010276:	d128      	bne.n	80102ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	f003 0308 	and.w	r3, r3, #8
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010288:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	f023 0301 	bic.w	r3, r3, #1
 801029e:	2b00      	cmp	r3, #0
 80102a0:	bf14      	ite	ne
 80102a2:	2301      	movne	r3, #1
 80102a4:	2300      	moveq	r3, #0
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	461a      	mov	r2, r3
 80102aa:	f107 0318 	add.w	r3, r7, #24
 80102ae:	4611      	mov	r1, r2
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fd ffb1 	bl	800e218 <inc_lock>
 80102b6:	4602      	mov	r2, r0
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <f_open+0x22e>
 80102c4:	2302      	movs	r3, #2
 80102c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f040 8095 	bne.w	80103fe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe fdcd 	bl	800ee7a <ld_clust>
 80102e0:	4602      	mov	r2, r0
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e8:	331c      	adds	r3, #28
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fd fe2e 	bl	800df4c <ld_dword>
 80102f0:	4602      	mov	r2, r0
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2200      	movs	r2, #0
 80102fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	88da      	ldrh	r2, [r3, #6]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	79fa      	ldrb	r2, [r7, #7]
 801030e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	3330      	adds	r3, #48	; 0x30
 8010326:	f44f 7200 	mov.w	r2, #512	; 0x200
 801032a:	2100      	movs	r1, #0
 801032c:	4618      	mov	r0, r3
 801032e:	f7fd fe98 	bl	800e062 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010332:	79fb      	ldrb	r3, [r7, #7]
 8010334:	f003 0320 	and.w	r3, r3, #32
 8010338:	2b00      	cmp	r3, #0
 801033a:	d060      	beq.n	80103fe <f_open+0x362>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d05c      	beq.n	80103fe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	68da      	ldr	r2, [r3, #12]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	895b      	ldrh	r3, [r3, #10]
 8010350:	025b      	lsls	r3, r3, #9
 8010352:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010360:	e016      	b.n	8010390 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe f943 	bl	800e5f2 <get_fat>
 801036c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801036e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010370:	2b01      	cmp	r3, #1
 8010372:	d802      	bhi.n	801037a <f_open+0x2de>
 8010374:	2302      	movs	r3, #2
 8010376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801037a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801037c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010380:	d102      	bne.n	8010388 <f_open+0x2ec>
 8010382:	2301      	movs	r3, #1
 8010384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801038a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010394:	2b00      	cmp	r3, #0
 8010396:	d103      	bne.n	80103a0 <f_open+0x304>
 8010398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801039a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801039c:	429a      	cmp	r2, r3
 801039e:	d8e0      	bhi.n	8010362 <f_open+0x2c6>
				}
				fp->clust = clst;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d127      	bne.n	80103fe <f_open+0x362>
 80103ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d022      	beq.n	80103fe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe f8f9 	bl	800e5b4 <clust2sect>
 80103c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80103c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d103      	bne.n	80103d2 <f_open+0x336>
						res = FR_INT_ERR;
 80103ca:	2302      	movs	r3, #2
 80103cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103d0:	e015      	b.n	80103fe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103d4:	0a5a      	lsrs	r2, r3, #9
 80103d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103d8:	441a      	add	r2, r3
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	7858      	ldrb	r0, [r3, #1]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6a1a      	ldr	r2, [r3, #32]
 80103ec:	2301      	movs	r3, #1
 80103ee:	f7fd fd37 	bl	800de60 <disk_read>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <f_open+0x362>
 80103f8:	2301      	movs	r3, #1
 80103fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010402:	2b00      	cmp	r3, #0
 8010404:	d002      	beq.n	801040c <f_open+0x370>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801040c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010410:	4618      	mov	r0, r3
 8010412:	3768      	adds	r7, #104	; 0x68
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08e      	sub	sp, #56	; 0x38
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2200      	movs	r2, #0
 801042e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f107 0214 	add.w	r2, r7, #20
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fdb3 	bl	800ffa4 <validate>
 801043e:	4603      	mov	r3, r0
 8010440:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010448:	2b00      	cmp	r3, #0
 801044a:	d107      	bne.n	801045c <f_read+0x44>
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	7d5b      	ldrb	r3, [r3, #21]
 8010450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <f_read+0x4a>
 801045c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010460:	e115      	b.n	801068e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	7d1b      	ldrb	r3, [r3, #20]
 8010466:	f003 0301 	and.w	r3, r3, #1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d101      	bne.n	8010472 <f_read+0x5a>
 801046e:	2307      	movs	r3, #7
 8010470:	e10d      	b.n	801068e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	68da      	ldr	r2, [r3, #12]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	699b      	ldr	r3, [r3, #24]
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	429a      	cmp	r2, r3
 8010484:	f240 80fe 	bls.w	8010684 <f_read+0x26c>
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801048c:	e0fa      	b.n	8010684 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010496:	2b00      	cmp	r3, #0
 8010498:	f040 80c6 	bne.w	8010628 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	0a5b      	lsrs	r3, r3, #9
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	8952      	ldrh	r2, [r2, #10]
 80104a6:	3a01      	subs	r2, #1
 80104a8:	4013      	ands	r3, r2
 80104aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d12f      	bne.n	8010512 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d103      	bne.n	80104c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	633b      	str	r3, [r7, #48]	; 0x30
 80104c0:	e013      	b.n	80104ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d007      	beq.n	80104da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	699b      	ldr	r3, [r3, #24]
 80104ce:	4619      	mov	r1, r3
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f7fe fb17 	bl	800eb04 <clmt_clust>
 80104d6:	6338      	str	r0, [r7, #48]	; 0x30
 80104d8:	e007      	b.n	80104ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	69db      	ldr	r3, [r3, #28]
 80104e0:	4619      	mov	r1, r3
 80104e2:	4610      	mov	r0, r2
 80104e4:	f7fe f885 	bl	800e5f2 <get_fat>
 80104e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d804      	bhi.n	80104fa <f_read+0xe2>
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2202      	movs	r2, #2
 80104f4:	755a      	strb	r2, [r3, #21]
 80104f6:	2302      	movs	r3, #2
 80104f8:	e0c9      	b.n	801068e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010500:	d104      	bne.n	801050c <f_read+0xf4>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2201      	movs	r2, #1
 8010506:	755a      	strb	r2, [r3, #21]
 8010508:	2301      	movs	r3, #1
 801050a:	e0c0      	b.n	801068e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010510:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	4619      	mov	r1, r3
 801051a:	4610      	mov	r0, r2
 801051c:	f7fe f84a 	bl	800e5b4 <clust2sect>
 8010520:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d104      	bne.n	8010532 <f_read+0x11a>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2202      	movs	r2, #2
 801052c:	755a      	strb	r2, [r3, #21]
 801052e:	2302      	movs	r3, #2
 8010530:	e0ad      	b.n	801068e <f_read+0x276>
			sect += csect;
 8010532:	69ba      	ldr	r2, [r7, #24]
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	4413      	add	r3, r2
 8010538:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	0a5b      	lsrs	r3, r3, #9
 801053e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	2b00      	cmp	r3, #0
 8010544:	d039      	beq.n	80105ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054a:	4413      	add	r3, r2
 801054c:	697a      	ldr	r2, [r7, #20]
 801054e:	8952      	ldrh	r2, [r2, #10]
 8010550:	4293      	cmp	r3, r2
 8010552:	d905      	bls.n	8010560 <f_read+0x148>
					cc = fs->csize - csect;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	895b      	ldrh	r3, [r3, #10]
 8010558:	461a      	mov	r2, r3
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	7858      	ldrb	r0, [r3, #1]
 8010564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010566:	69ba      	ldr	r2, [r7, #24]
 8010568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801056a:	f7fd fc79 	bl	800de60 <disk_read>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <f_read+0x166>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2201      	movs	r2, #1
 8010578:	755a      	strb	r2, [r3, #21]
 801057a:	2301      	movs	r3, #1
 801057c:	e087      	b.n	801068e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	7d1b      	ldrb	r3, [r3, #20]
 8010582:	b25b      	sxtb	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	da14      	bge.n	80105b2 <f_read+0x19a>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6a1a      	ldr	r2, [r3, #32]
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010592:	429a      	cmp	r2, r3
 8010594:	d90d      	bls.n	80105b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6a1a      	ldr	r2, [r3, #32]
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	025b      	lsls	r3, r3, #9
 80105a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105a2:	18d0      	adds	r0, r2, r3
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3330      	adds	r3, #48	; 0x30
 80105a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105ac:	4619      	mov	r1, r3
 80105ae:	f7fd fd37 	bl	800e020 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	025b      	lsls	r3, r3, #9
 80105b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105b8:	e050      	b.n	801065c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	6a1b      	ldr	r3, [r3, #32]
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d02e      	beq.n	8010622 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	7d1b      	ldrb	r3, [r3, #20]
 80105c8:	b25b      	sxtb	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	da18      	bge.n	8010600 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	7858      	ldrb	r0, [r3, #1]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6a1a      	ldr	r2, [r3, #32]
 80105dc:	2301      	movs	r3, #1
 80105de:	f7fd fc5f 	bl	800dea0 <disk_write>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d004      	beq.n	80105f2 <f_read+0x1da>
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2201      	movs	r2, #1
 80105ec:	755a      	strb	r2, [r3, #21]
 80105ee:	2301      	movs	r3, #1
 80105f0:	e04d      	b.n	801068e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	7858      	ldrb	r0, [r3, #1]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060a:	2301      	movs	r3, #1
 801060c:	69ba      	ldr	r2, [r7, #24]
 801060e:	f7fd fc27 	bl	800de60 <disk_read>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d004      	beq.n	8010622 <f_read+0x20a>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	755a      	strb	r2, [r3, #21]
 801061e:	2301      	movs	r3, #1
 8010620:	e035      	b.n	801068e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	69ba      	ldr	r2, [r7, #24]
 8010626:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	699b      	ldr	r3, [r3, #24]
 801062c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010630:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010634:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	429a      	cmp	r2, r3
 801063c:	d901      	bls.n	8010642 <f_read+0x22a>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010650:	4413      	add	r3, r2
 8010652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010654:	4619      	mov	r1, r3
 8010656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010658:	f7fd fce2 	bl	800e020 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801065c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010660:	4413      	add	r3, r2
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	699a      	ldr	r2, [r3, #24]
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	441a      	add	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	619a      	str	r2, [r3, #24]
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	441a      	add	r2, r3
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f47f af01 	bne.w	801048e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3738      	adds	r7, #56	; 0x38
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b08c      	sub	sp, #48	; 0x30
 801069a:	af00      	add	r7, sp, #0
 801069c:	60f8      	str	r0, [r7, #12]
 801069e:	60b9      	str	r1, [r7, #8]
 80106a0:	607a      	str	r2, [r7, #4]
 80106a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f107 0210 	add.w	r2, r7, #16
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fc74 	bl	800ffa4 <validate>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d107      	bne.n	80106da <f_write+0x44>
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	7d5b      	ldrb	r3, [r3, #21]
 80106ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d002      	beq.n	80106e0 <f_write+0x4a>
 80106da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106de:	e14b      	b.n	8010978 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	7d1b      	ldrb	r3, [r3, #20]
 80106e4:	f003 0302 	and.w	r3, r3, #2
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <f_write+0x5a>
 80106ec:	2307      	movs	r3, #7
 80106ee:	e143      	b.n	8010978 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	699a      	ldr	r2, [r3, #24]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	441a      	add	r2, r3
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	699b      	ldr	r3, [r3, #24]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	f080 812d 	bcs.w	801095c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	699b      	ldr	r3, [r3, #24]
 8010706:	43db      	mvns	r3, r3
 8010708:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801070a:	e127      	b.n	801095c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010714:	2b00      	cmp	r3, #0
 8010716:	f040 80e3 	bne.w	80108e0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	0a5b      	lsrs	r3, r3, #9
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	8952      	ldrh	r2, [r2, #10]
 8010724:	3a01      	subs	r2, #1
 8010726:	4013      	ands	r3, r2
 8010728:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d143      	bne.n	80107b8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	699b      	ldr	r3, [r3, #24]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10c      	bne.n	8010752 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010740:	2b00      	cmp	r3, #0
 8010742:	d11a      	bne.n	801077a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2100      	movs	r1, #0
 8010748:	4618      	mov	r0, r3
 801074a:	f7fe f943 	bl	800e9d4 <create_chain>
 801074e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010750:	e013      	b.n	801077a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010756:	2b00      	cmp	r3, #0
 8010758:	d007      	beq.n	801076a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	4619      	mov	r1, r3
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f7fe f9cf 	bl	800eb04 <clmt_clust>
 8010766:	62b8      	str	r0, [r7, #40]	; 0x28
 8010768:	e007      	b.n	801077a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	69db      	ldr	r3, [r3, #28]
 8010770:	4619      	mov	r1, r3
 8010772:	4610      	mov	r0, r2
 8010774:	f7fe f92e 	bl	800e9d4 <create_chain>
 8010778:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	2b00      	cmp	r3, #0
 801077e:	f000 80f2 	beq.w	8010966 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	2b01      	cmp	r3, #1
 8010786:	d104      	bne.n	8010792 <f_write+0xfc>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2202      	movs	r2, #2
 801078c:	755a      	strb	r2, [r3, #21]
 801078e:	2302      	movs	r3, #2
 8010790:	e0f2      	b.n	8010978 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010798:	d104      	bne.n	80107a4 <f_write+0x10e>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2201      	movs	r2, #1
 801079e:	755a      	strb	r2, [r3, #21]
 80107a0:	2301      	movs	r3, #1
 80107a2:	e0e9      	b.n	8010978 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	689b      	ldr	r3, [r3, #8]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d102      	bne.n	80107b8 <f_write+0x122>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	7d1b      	ldrb	r3, [r3, #20]
 80107bc:	b25b      	sxtb	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	da18      	bge.n	80107f4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	7858      	ldrb	r0, [r3, #1]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6a1a      	ldr	r2, [r3, #32]
 80107d0:	2301      	movs	r3, #1
 80107d2:	f7fd fb65 	bl	800dea0 <disk_write>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d004      	beq.n	80107e6 <f_write+0x150>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2201      	movs	r2, #1
 80107e0:	755a      	strb	r2, [r3, #21]
 80107e2:	2301      	movs	r3, #1
 80107e4:	e0c8      	b.n	8010978 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	7d1b      	ldrb	r3, [r3, #20]
 80107ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107f4:	693a      	ldr	r2, [r7, #16]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	69db      	ldr	r3, [r3, #28]
 80107fa:	4619      	mov	r1, r3
 80107fc:	4610      	mov	r0, r2
 80107fe:	f7fd fed9 	bl	800e5b4 <clust2sect>
 8010802:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d104      	bne.n	8010814 <f_write+0x17e>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2202      	movs	r2, #2
 801080e:	755a      	strb	r2, [r3, #21]
 8010810:	2302      	movs	r3, #2
 8010812:	e0b1      	b.n	8010978 <f_write+0x2e2>
			sect += csect;
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	4413      	add	r3, r2
 801081a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	0a5b      	lsrs	r3, r3, #9
 8010820:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d03c      	beq.n	80108a2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010828:	69ba      	ldr	r2, [r7, #24]
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	4413      	add	r3, r2
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	8952      	ldrh	r2, [r2, #10]
 8010832:	4293      	cmp	r3, r2
 8010834:	d905      	bls.n	8010842 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	895b      	ldrh	r3, [r3, #10]
 801083a:	461a      	mov	r2, r3
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	7858      	ldrb	r0, [r3, #1]
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	697a      	ldr	r2, [r7, #20]
 801084a:	69f9      	ldr	r1, [r7, #28]
 801084c:	f7fd fb28 	bl	800dea0 <disk_write>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <f_write+0x1ca>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2201      	movs	r2, #1
 801085a:	755a      	strb	r2, [r3, #21]
 801085c:	2301      	movs	r3, #1
 801085e:	e08b      	b.n	8010978 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6a1a      	ldr	r2, [r3, #32]
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	6a3a      	ldr	r2, [r7, #32]
 801086a:	429a      	cmp	r2, r3
 801086c:	d915      	bls.n	801089a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a1a      	ldr	r2, [r3, #32]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	025b      	lsls	r3, r3, #9
 801087e:	69fa      	ldr	r2, [r7, #28]
 8010880:	4413      	add	r3, r2
 8010882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010886:	4619      	mov	r1, r3
 8010888:	f7fd fbca 	bl	800e020 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	7d1b      	ldrb	r3, [r3, #20]
 8010890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010894:	b2da      	uxtb	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	025b      	lsls	r3, r3, #9
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80108a0:	e03f      	b.n	8010922 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6a1b      	ldr	r3, [r3, #32]
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d016      	beq.n	80108da <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	699a      	ldr	r2, [r3, #24]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d210      	bcs.n	80108da <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	7858      	ldrb	r0, [r3, #1]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108c2:	2301      	movs	r3, #1
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	f7fd facb 	bl	800de60 <disk_read>
 80108ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d004      	beq.n	80108da <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2201      	movs	r2, #1
 80108d4:	755a      	strb	r2, [r3, #21]
 80108d6:	2301      	movs	r3, #1
 80108d8:	e04e      	b.n	8010978 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80108ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80108ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d901      	bls.n	80108fa <f_write+0x264>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	699b      	ldr	r3, [r3, #24]
 8010904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010908:	4413      	add	r3, r2
 801090a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090c:	69f9      	ldr	r1, [r7, #28]
 801090e:	4618      	mov	r0, r3
 8010910:	f7fd fb86 	bl	800e020 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	7d1b      	ldrb	r3, [r3, #20]
 8010918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801091c:	b2da      	uxtb	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010922:	69fa      	ldr	r2, [r7, #28]
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	4413      	add	r3, r2
 8010928:	61fb      	str	r3, [r7, #28]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	699a      	ldr	r2, [r3, #24]
 801092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010930:	441a      	add	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	619a      	str	r2, [r3, #24]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	68da      	ldr	r2, [r3, #12]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	429a      	cmp	r2, r3
 8010940:	bf38      	it	cc
 8010942:	461a      	movcc	r2, r3
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	441a      	add	r2, r3
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	f47f aed4 	bne.w	801070c <f_write+0x76>
 8010964:	e000      	b.n	8010968 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010966:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	7d1b      	ldrb	r3, [r3, #20]
 801096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010970:	b2da      	uxtb	r2, r3
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010976:	2300      	movs	r3, #0
}
 8010978:	4618      	mov	r0, r3
 801097a:	3730      	adds	r7, #48	; 0x30
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f107 0208 	add.w	r2, r7, #8
 801098e:	4611      	mov	r1, r2
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff fb07 	bl	800ffa4 <validate>
 8010996:	4603      	mov	r3, r0
 8010998:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801099a:	7dfb      	ldrb	r3, [r7, #23]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d168      	bne.n	8010a72 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	7d1b      	ldrb	r3, [r3, #20]
 80109a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d062      	beq.n	8010a72 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	7d1b      	ldrb	r3, [r3, #20]
 80109b0:	b25b      	sxtb	r3, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	da15      	bge.n	80109e2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	7858      	ldrb	r0, [r3, #1]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6a1a      	ldr	r2, [r3, #32]
 80109c4:	2301      	movs	r3, #1
 80109c6:	f7fd fa6b 	bl	800dea0 <disk_write>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <f_sync+0x54>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e04f      	b.n	8010a74 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	7d1b      	ldrb	r3, [r3, #20]
 80109d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109e2:	f7f9 fe07 	bl	800a5f4 <get_fattime>
 80109e6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80109e8:	68ba      	ldr	r2, [r7, #8]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ee:	4619      	mov	r1, r3
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7fd fd43 	bl	800e47c <move_window>
 80109f6:	4603      	mov	r3, r0
 80109f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d138      	bne.n	8010a72 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	330b      	adds	r3, #11
 8010a0a:	781a      	ldrb	r2, [r3, #0]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	330b      	adds	r3, #11
 8010a10:	f042 0220 	orr.w	r2, r2, #32
 8010a14:	b2d2      	uxtb	r2, r2
 8010a16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6818      	ldr	r0, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	461a      	mov	r2, r3
 8010a22:	68f9      	ldr	r1, [r7, #12]
 8010a24:	f7fe fa48 	bl	800eeb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f103 021c 	add.w	r2, r3, #28
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	4619      	mov	r1, r3
 8010a34:	4610      	mov	r0, r2
 8010a36:	f7fd fac7 	bl	800dfc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	3316      	adds	r3, #22
 8010a3e:	6939      	ldr	r1, [r7, #16]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fd fac1 	bl	800dfc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3312      	adds	r3, #18
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fd faa0 	bl	800df92 <st_word>
					fs->wflag = 1;
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2201      	movs	r2, #1
 8010a56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fd fd3c 	bl	800e4d8 <sync_fs>
 8010a60:	4603      	mov	r3, r0
 8010a62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	7d1b      	ldrb	r3, [r3, #20]
 8010a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff ff7b 	bl	8010980 <f_sync>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d118      	bne.n	8010ac6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f107 0208 	add.w	r2, r7, #8
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff fa81 	bl	800ffa4 <validate>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10c      	bne.n	8010ac6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fd fc3f 	bl	800e334 <dec_lock>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010aba:	7bfb      	ldrb	r3, [r7, #15]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	4613      	mov	r3, r2
 8010adc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010ae6:	4b1f      	ldr	r3, [pc, #124]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010ae8:	7a5b      	ldrb	r3, [r3, #9]
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d131      	bne.n	8010b54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010af0:	4b1c      	ldr	r3, [pc, #112]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010af2:	7a5b      	ldrb	r3, [r3, #9]
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b1a      	ldr	r3, [pc, #104]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010afa:	2100      	movs	r1, #0
 8010afc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010afe:	4b19      	ldr	r3, [pc, #100]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b00:	7a5b      	ldrb	r3, [r3, #9]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	4a17      	ldr	r2, [pc, #92]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4413      	add	r3, r2
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b0e:	4b15      	ldr	r3, [pc, #84]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b10:	7a5b      	ldrb	r3, [r3, #9]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	461a      	mov	r2, r3
 8010b16:	4b13      	ldr	r3, [pc, #76]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b18:	4413      	add	r3, r2
 8010b1a:	79fa      	ldrb	r2, [r7, #7]
 8010b1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b1e:	4b11      	ldr	r3, [pc, #68]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b20:	7a5b      	ldrb	r3, [r3, #9]
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	1c5a      	adds	r2, r3, #1
 8010b26:	b2d1      	uxtb	r1, r2
 8010b28:	4a0e      	ldr	r2, [pc, #56]	; (8010b64 <FATFS_LinkDriverEx+0x94>)
 8010b2a:	7251      	strb	r1, [r2, #9]
 8010b2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b2e:	7dbb      	ldrb	r3, [r7, #22]
 8010b30:	3330      	adds	r3, #48	; 0x30
 8010b32:	b2da      	uxtb	r2, r3
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	223a      	movs	r2, #58	; 0x3a
 8010b3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	3302      	adds	r3, #2
 8010b44:	222f      	movs	r2, #47	; 0x2f
 8010b46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	3303      	adds	r3, #3
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b50:	2300      	movs	r3, #0
 8010b52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	371c      	adds	r7, #28
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	200004dc 	.word	0x200004dc

08010b68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b72:	2200      	movs	r2, #0
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7ff ffaa 	bl	8010ad0 <FATFS_LinkDriverEx>
 8010b7c:	4603      	mov	r3, r0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
	...

08010b88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	6039      	str	r1, [r7, #0]
 8010b92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b94:	88fb      	ldrh	r3, [r7, #6]
 8010b96:	2b7f      	cmp	r3, #127	; 0x7f
 8010b98:	d802      	bhi.n	8010ba0 <ff_convert+0x18>
		c = chr;
 8010b9a:	88fb      	ldrh	r3, [r7, #6]
 8010b9c:	81fb      	strh	r3, [r7, #14]
 8010b9e:	e025      	b.n	8010bec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00b      	beq.n	8010bbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010ba6:	88fb      	ldrh	r3, [r7, #6]
 8010ba8:	2bff      	cmp	r3, #255	; 0xff
 8010baa:	d805      	bhi.n	8010bb8 <ff_convert+0x30>
 8010bac:	88fb      	ldrh	r3, [r7, #6]
 8010bae:	3b80      	subs	r3, #128	; 0x80
 8010bb0:	4a12      	ldr	r2, [pc, #72]	; (8010bfc <ff_convert+0x74>)
 8010bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bb6:	e000      	b.n	8010bba <ff_convert+0x32>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	81fb      	strh	r3, [r7, #14]
 8010bbc:	e016      	b.n	8010bec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	81fb      	strh	r3, [r7, #14]
 8010bc2:	e009      	b.n	8010bd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010bc4:	89fb      	ldrh	r3, [r7, #14]
 8010bc6:	4a0d      	ldr	r2, [pc, #52]	; (8010bfc <ff_convert+0x74>)
 8010bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bcc:	88fa      	ldrh	r2, [r7, #6]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d006      	beq.n	8010be0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010bd2:	89fb      	ldrh	r3, [r7, #14]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	81fb      	strh	r3, [r7, #14]
 8010bd8:	89fb      	ldrh	r3, [r7, #14]
 8010bda:	2b7f      	cmp	r3, #127	; 0x7f
 8010bdc:	d9f2      	bls.n	8010bc4 <ff_convert+0x3c>
 8010bde:	e000      	b.n	8010be2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010be0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010be2:	89fb      	ldrh	r3, [r7, #14]
 8010be4:	3380      	adds	r3, #128	; 0x80
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010bec:	89fb      	ldrh	r3, [r7, #14]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3714      	adds	r7, #20
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	080142e0 	.word	0x080142e0

08010c00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010c0a:	88fb      	ldrh	r3, [r7, #6]
 8010c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c10:	d201      	bcs.n	8010c16 <ff_wtoupper+0x16>
 8010c12:	4b3e      	ldr	r3, [pc, #248]	; (8010d0c <ff_wtoupper+0x10c>)
 8010c14:	e000      	b.n	8010c18 <ff_wtoupper+0x18>
 8010c16:	4b3e      	ldr	r3, [pc, #248]	; (8010d10 <ff_wtoupper+0x110>)
 8010c18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	1c9a      	adds	r2, r3, #2
 8010c1e:	617a      	str	r2, [r7, #20]
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010c24:	8a7b      	ldrh	r3, [r7, #18]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d068      	beq.n	8010cfc <ff_wtoupper+0xfc>
 8010c2a:	88fa      	ldrh	r2, [r7, #6]
 8010c2c:	8a7b      	ldrh	r3, [r7, #18]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d364      	bcc.n	8010cfc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	1c9a      	adds	r2, r3, #2
 8010c36:	617a      	str	r2, [r7, #20]
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	823b      	strh	r3, [r7, #16]
 8010c3c:	8a3b      	ldrh	r3, [r7, #16]
 8010c3e:	0a1b      	lsrs	r3, r3, #8
 8010c40:	81fb      	strh	r3, [r7, #14]
 8010c42:	8a3b      	ldrh	r3, [r7, #16]
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010c48:	88fa      	ldrh	r2, [r7, #6]
 8010c4a:	8a79      	ldrh	r1, [r7, #18]
 8010c4c:	8a3b      	ldrh	r3, [r7, #16]
 8010c4e:	440b      	add	r3, r1
 8010c50:	429a      	cmp	r2, r3
 8010c52:	da49      	bge.n	8010ce8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c54:	89fb      	ldrh	r3, [r7, #14]
 8010c56:	2b08      	cmp	r3, #8
 8010c58:	d84f      	bhi.n	8010cfa <ff_wtoupper+0xfa>
 8010c5a:	a201      	add	r2, pc, #4	; (adr r2, 8010c60 <ff_wtoupper+0x60>)
 8010c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c60:	08010c85 	.word	0x08010c85
 8010c64:	08010c97 	.word	0x08010c97
 8010c68:	08010cad 	.word	0x08010cad
 8010c6c:	08010cb5 	.word	0x08010cb5
 8010c70:	08010cbd 	.word	0x08010cbd
 8010c74:	08010cc5 	.word	0x08010cc5
 8010c78:	08010ccd 	.word	0x08010ccd
 8010c7c:	08010cd5 	.word	0x08010cd5
 8010c80:	08010cdd 	.word	0x08010cdd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c84:	88fa      	ldrh	r2, [r7, #6]
 8010c86:	8a7b      	ldrh	r3, [r7, #18]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	005b      	lsls	r3, r3, #1
 8010c8c:	697a      	ldr	r2, [r7, #20]
 8010c8e:	4413      	add	r3, r2
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	80fb      	strh	r3, [r7, #6]
 8010c94:	e027      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c96:	88fa      	ldrh	r2, [r7, #6]
 8010c98:	8a7b      	ldrh	r3, [r7, #18]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	f003 0301 	and.w	r3, r3, #1
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	88fa      	ldrh	r2, [r7, #6]
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	80fb      	strh	r3, [r7, #6]
 8010caa:	e01c      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010cac:	88fb      	ldrh	r3, [r7, #6]
 8010cae:	3b10      	subs	r3, #16
 8010cb0:	80fb      	strh	r3, [r7, #6]
 8010cb2:	e018      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010cb4:	88fb      	ldrh	r3, [r7, #6]
 8010cb6:	3b20      	subs	r3, #32
 8010cb8:	80fb      	strh	r3, [r7, #6]
 8010cba:	e014      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010cbc:	88fb      	ldrh	r3, [r7, #6]
 8010cbe:	3b30      	subs	r3, #48	; 0x30
 8010cc0:	80fb      	strh	r3, [r7, #6]
 8010cc2:	e010      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010cc4:	88fb      	ldrh	r3, [r7, #6]
 8010cc6:	3b1a      	subs	r3, #26
 8010cc8:	80fb      	strh	r3, [r7, #6]
 8010cca:	e00c      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010ccc:	88fb      	ldrh	r3, [r7, #6]
 8010cce:	3308      	adds	r3, #8
 8010cd0:	80fb      	strh	r3, [r7, #6]
 8010cd2:	e008      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010cd4:	88fb      	ldrh	r3, [r7, #6]
 8010cd6:	3b50      	subs	r3, #80	; 0x50
 8010cd8:	80fb      	strh	r3, [r7, #6]
 8010cda:	e004      	b.n	8010ce6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010cdc:	88fb      	ldrh	r3, [r7, #6]
 8010cde:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010ce2:	80fb      	strh	r3, [r7, #6]
 8010ce4:	bf00      	nop
			}
			break;
 8010ce6:	e008      	b.n	8010cfa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010ce8:	89fb      	ldrh	r3, [r7, #14]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d195      	bne.n	8010c1a <ff_wtoupper+0x1a>
 8010cee:	8a3b      	ldrh	r3, [r7, #16]
 8010cf0:	005b      	lsls	r3, r3, #1
 8010cf2:	697a      	ldr	r2, [r7, #20]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010cf8:	e78f      	b.n	8010c1a <ff_wtoupper+0x1a>
			break;
 8010cfa:	bf00      	nop
	}

	return chr;
 8010cfc:	88fb      	ldrh	r3, [r7, #6]
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	371c      	adds	r7, #28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	080143e0 	.word	0x080143e0
 8010d10:	080145d4 	.word	0x080145d4

08010d14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010d18:	2201      	movs	r2, #1
 8010d1a:	490e      	ldr	r1, [pc, #56]	; (8010d54 <MX_USB_HOST_Init+0x40>)
 8010d1c:	480e      	ldr	r0, [pc, #56]	; (8010d58 <MX_USB_HOST_Init+0x44>)
 8010d1e:	f7fb fd05 	bl	800c72c <USBH_Init>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010d28:	f7f1 fbb2 	bl	8002490 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010d2c:	490b      	ldr	r1, [pc, #44]	; (8010d5c <MX_USB_HOST_Init+0x48>)
 8010d2e:	480a      	ldr	r0, [pc, #40]	; (8010d58 <MX_USB_HOST_Init+0x44>)
 8010d30:	f7fb fd8a 	bl	800c848 <USBH_RegisterClass>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010d3a:	f7f1 fba9 	bl	8002490 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010d3e:	4806      	ldr	r0, [pc, #24]	; (8010d58 <MX_USB_HOST_Init+0x44>)
 8010d40:	f7fb fe0e 	bl	800c960 <USBH_Start>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010d4a:	f7f1 fba1 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010d4e:	bf00      	nop
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	08010d75 	.word	0x08010d75
 8010d58:	20003628 	.word	0x20003628
 8010d5c:	20000070 	.word	0x20000070

08010d60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d64:	4802      	ldr	r0, [pc, #8]	; (8010d70 <MX_USB_HOST_Process+0x10>)
 8010d66:	f7fb fe0b 	bl	800c980 <USBH_Process>
}
 8010d6a:	bf00      	nop
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20003628 	.word	0x20003628

08010d74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d80:	78fb      	ldrb	r3, [r7, #3]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	d819      	bhi.n	8010dbc <USBH_UserProcess+0x48>
 8010d88:	a201      	add	r2, pc, #4	; (adr r2, 8010d90 <USBH_UserProcess+0x1c>)
 8010d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8e:	bf00      	nop
 8010d90:	08010dbd 	.word	0x08010dbd
 8010d94:	08010dad 	.word	0x08010dad
 8010d98:	08010dbd 	.word	0x08010dbd
 8010d9c:	08010db5 	.word	0x08010db5
 8010da0:	08010da5 	.word	0x08010da5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010da4:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <USBH_UserProcess+0x58>)
 8010da6:	2203      	movs	r2, #3
 8010da8:	701a      	strb	r2, [r3, #0]
  break;
 8010daa:	e008      	b.n	8010dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010dac:	4b07      	ldr	r3, [pc, #28]	; (8010dcc <USBH_UserProcess+0x58>)
 8010dae:	2202      	movs	r2, #2
 8010db0:	701a      	strb	r2, [r3, #0]
  break;
 8010db2:	e004      	b.n	8010dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <USBH_UserProcess+0x58>)
 8010db6:	2201      	movs	r2, #1
 8010db8:	701a      	strb	r2, [r3, #0]
  break;
 8010dba:	e000      	b.n	8010dbe <USBH_UserProcess+0x4a>

  default:
  break;
 8010dbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010dbe:	bf00      	nop
 8010dc0:	370c      	adds	r7, #12
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	200004e8 	.word	0x200004e8

08010dd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	; 0x28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dd8:	f107 0314 	add.w	r3, r7, #20
 8010ddc:	2200      	movs	r2, #0
 8010dde:	601a      	str	r2, [r3, #0]
 8010de0:	605a      	str	r2, [r3, #4]
 8010de2:	609a      	str	r2, [r3, #8]
 8010de4:	60da      	str	r2, [r3, #12]
 8010de6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010df0:	d147      	bne.n	8010e82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010df2:	2300      	movs	r3, #0
 8010df4:	613b      	str	r3, [r7, #16]
 8010df6:	4b25      	ldr	r3, [pc, #148]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dfa:	4a24      	ldr	r2, [pc, #144]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010dfc:	f043 0301 	orr.w	r3, r3, #1
 8010e00:	6313      	str	r3, [r2, #48]	; 0x30
 8010e02:	4b22      	ldr	r3, [pc, #136]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e06:	f003 0301 	and.w	r3, r3, #1
 8010e0a:	613b      	str	r3, [r7, #16]
 8010e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010e14:	2300      	movs	r3, #0
 8010e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010e1c:	f107 0314 	add.w	r3, r7, #20
 8010e20:	4619      	mov	r1, r3
 8010e22:	481b      	ldr	r0, [pc, #108]	; (8010e90 <HAL_HCD_MspInit+0xc0>)
 8010e24:	f7f3 fac2 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010e28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e2e:	2302      	movs	r3, #2
 8010e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e32:	2300      	movs	r3, #0
 8010e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e36:	2300      	movs	r3, #0
 8010e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e3a:	230a      	movs	r3, #10
 8010e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e3e:	f107 0314 	add.w	r3, r7, #20
 8010e42:	4619      	mov	r1, r3
 8010e44:	4812      	ldr	r0, [pc, #72]	; (8010e90 <HAL_HCD_MspInit+0xc0>)
 8010e46:	f7f3 fab1 	bl	80043ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e4a:	4b10      	ldr	r3, [pc, #64]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	4a0f      	ldr	r2, [pc, #60]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e54:	6353      	str	r3, [r2, #52]	; 0x34
 8010e56:	2300      	movs	r3, #0
 8010e58:	60fb      	str	r3, [r7, #12]
 8010e5a:	4b0c      	ldr	r3, [pc, #48]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5e:	4a0b      	ldr	r2, [pc, #44]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e64:	6453      	str	r3, [r2, #68]	; 0x44
 8010e66:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <HAL_HCD_MspInit+0xbc>)
 8010e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e72:	2200      	movs	r2, #0
 8010e74:	2100      	movs	r1, #0
 8010e76:	2043      	movs	r0, #67	; 0x43
 8010e78:	f7f2 fd5e 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e7c:	2043      	movs	r0, #67	; 0x43
 8010e7e:	f7f2 fd87 	bl	8003990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e82:	bf00      	nop
 8010e84:	3728      	adds	r7, #40	; 0x28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	40023800 	.word	0x40023800
 8010e90:	40020000 	.word	0x40020000

08010e94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fc f93f 	bl	800d126 <USBH_LL_IncTimer>
}
 8010ea8:	bf00      	nop
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fc f977 	bl	800d1b2 <USBH_LL_Connect>
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fc f980 	bl	800d1e0 <USBH_LL_Disconnect>
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	70fb      	strb	r3, [r7, #3]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010ef8:	bf00      	nop
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fc f931 	bl	800d17a <USBH_LL_PortEnabled>
}
 8010f18:	bf00      	nop
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fc f931 	bl	800d196 <USBH_LL_PortDisabled>
}
 8010f34:	bf00      	nop
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d12a      	bne.n	8010fa4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010f4e:	4a18      	ldr	r2, [pc, #96]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a15      	ldr	r2, [pc, #84]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f5e:	4b14      	ldr	r3, [pc, #80]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f66:	4b12      	ldr	r3, [pc, #72]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f68:	2208      	movs	r2, #8
 8010f6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f6c:	4b10      	ldr	r3, [pc, #64]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f6e:	2201      	movs	r2, #1
 8010f70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f72:	4b0f      	ldr	r3, [pc, #60]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f78:	4b0d      	ldr	r3, [pc, #52]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f7a:	2202      	movs	r2, #2
 8010f7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f7e:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f84:	480a      	ldr	r0, [pc, #40]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f86:	f7f3 fd6f 	bl	8004a68 <HAL_HCD_Init>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d001      	beq.n	8010f94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f90:	f7f1 fa7e 	bl	8002490 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f94:	4806      	ldr	r0, [pc, #24]	; (8010fb0 <USBH_LL_Init+0x74>)
 8010f96:	f7f4 f985 	bl	80052a4 <HAL_HCD_GetCurrentFrame>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7fc f8b2 	bl	800d108 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3708      	adds	r7, #8
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	20003a00 	.word	0x20003a00

08010fb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7f4 f8f2 	bl	80051b4 <HAL_HCD_Start>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fd4:	7bfb      	ldrb	r3, [r7, #15]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 f990 	bl	80112fc <USBH_Get_USB_Status>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011000:	4618      	mov	r0, r3
 8011002:	f7f4 f8fa 	bl	80051fa <HAL_HCD_Stop>
 8011006:	4603      	mov	r3, r0
 8011008:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801100a:	7bfb      	ldrb	r3, [r7, #15]
 801100c:	4618      	mov	r0, r3
 801100e:	f000 f975 	bl	80112fc <USBH_Get_USB_Status>
 8011012:	4603      	mov	r3, r0
 8011014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011016:	7bbb      	ldrb	r3, [r7, #14]
}
 8011018:	4618      	mov	r0, r3
 801101a:	3710      	adds	r7, #16
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011028:	2301      	movs	r3, #1
 801102a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011032:	4618      	mov	r0, r3
 8011034:	f7f4 f944 	bl	80052c0 <HAL_HCD_GetCurrentSpeed>
 8011038:	4603      	mov	r3, r0
 801103a:	2b01      	cmp	r3, #1
 801103c:	d007      	beq.n	801104e <USBH_LL_GetSpeed+0x2e>
 801103e:	2b01      	cmp	r3, #1
 8011040:	d302      	bcc.n	8011048 <USBH_LL_GetSpeed+0x28>
 8011042:	2b02      	cmp	r3, #2
 8011044:	d006      	beq.n	8011054 <USBH_LL_GetSpeed+0x34>
 8011046:	e008      	b.n	801105a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]
    break;
 801104c:	e008      	b.n	8011060 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801104e:	2301      	movs	r3, #1
 8011050:	73fb      	strb	r3, [r7, #15]
    break;
 8011052:	e005      	b.n	8011060 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011054:	2302      	movs	r3, #2
 8011056:	73fb      	strb	r3, [r7, #15]
    break;
 8011058:	e002      	b.n	8011060 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801105a:	2301      	movs	r3, #1
 801105c:	73fb      	strb	r3, [r7, #15]
    break;
 801105e:	bf00      	nop
  }
  return  speed;
 8011060:	7bfb      	ldrb	r3, [r7, #15]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b084      	sub	sp, #16
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011072:	2300      	movs	r3, #0
 8011074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011076:	2300      	movs	r3, #0
 8011078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011080:	4618      	mov	r0, r3
 8011082:	f7f4 f8d7 	bl	8005234 <HAL_HCD_ResetPort>
 8011086:	4603      	mov	r3, r0
 8011088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801108a:	7bfb      	ldrb	r3, [r7, #15]
 801108c:	4618      	mov	r0, r3
 801108e:	f000 f935 	bl	80112fc <USBH_Get_USB_Status>
 8011092:	4603      	mov	r3, r0
 8011094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011096:	7bbb      	ldrb	r3, [r7, #14]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80110b2:	78fa      	ldrb	r2, [r7, #3]
 80110b4:	4611      	mov	r1, r2
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7f4 f8df 	bl	800527a <HAL_HCD_HC_GetXferCount>
 80110bc:	4603      	mov	r3, r0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80110c6:	b590      	push	{r4, r7, lr}
 80110c8:	b089      	sub	sp, #36	; 0x24
 80110ca:	af04      	add	r7, sp, #16
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	4608      	mov	r0, r1
 80110d0:	4611      	mov	r1, r2
 80110d2:	461a      	mov	r2, r3
 80110d4:	4603      	mov	r3, r0
 80110d6:	70fb      	strb	r3, [r7, #3]
 80110d8:	460b      	mov	r3, r1
 80110da:	70bb      	strb	r3, [r7, #2]
 80110dc:	4613      	mov	r3, r2
 80110de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110e4:	2300      	movs	r3, #0
 80110e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80110ee:	787c      	ldrb	r4, [r7, #1]
 80110f0:	78ba      	ldrb	r2, [r7, #2]
 80110f2:	78f9      	ldrb	r1, [r7, #3]
 80110f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110f6:	9302      	str	r3, [sp, #8]
 80110f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	4623      	mov	r3, r4
 8011106:	f7f3 fd23 	bl	8004b50 <HAL_HCD_HC_Init>
 801110a:	4603      	mov	r3, r0
 801110c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	4618      	mov	r0, r3
 8011112:	f000 f8f3 	bl	80112fc <USBH_Get_USB_Status>
 8011116:	4603      	mov	r3, r0
 8011118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801111a:	7bbb      	ldrb	r3, [r7, #14]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011130:	2300      	movs	r3, #0
 8011132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801113e:	78fa      	ldrb	r2, [r7, #3]
 8011140:	4611      	mov	r1, r2
 8011142:	4618      	mov	r0, r3
 8011144:	f7f3 fd9c 	bl	8004c80 <HAL_HCD_HC_Halt>
 8011148:	4603      	mov	r3, r0
 801114a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801114c:	7bfb      	ldrb	r3, [r7, #15]
 801114e:	4618      	mov	r0, r3
 8011150:	f000 f8d4 	bl	80112fc <USBH_Get_USB_Status>
 8011154:	4603      	mov	r3, r0
 8011156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011158:	7bbb      	ldrb	r3, [r7, #14]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011162:	b590      	push	{r4, r7, lr}
 8011164:	b089      	sub	sp, #36	; 0x24
 8011166:	af04      	add	r7, sp, #16
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	4608      	mov	r0, r1
 801116c:	4611      	mov	r1, r2
 801116e:	461a      	mov	r2, r3
 8011170:	4603      	mov	r3, r0
 8011172:	70fb      	strb	r3, [r7, #3]
 8011174:	460b      	mov	r3, r1
 8011176:	70bb      	strb	r3, [r7, #2]
 8011178:	4613      	mov	r3, r2
 801117a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801117c:	2300      	movs	r3, #0
 801117e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801118a:	787c      	ldrb	r4, [r7, #1]
 801118c:	78ba      	ldrb	r2, [r7, #2]
 801118e:	78f9      	ldrb	r1, [r7, #3]
 8011190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011194:	9303      	str	r3, [sp, #12]
 8011196:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011198:	9302      	str	r3, [sp, #8]
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4623      	mov	r3, r4
 80111a6:	f7f3 fd8f 	bl	8004cc8 <HAL_HCD_HC_SubmitRequest>
 80111aa:	4603      	mov	r3, r0
 80111ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f000 f8a3 	bl	80112fc <USBH_Get_USB_Status>
 80111b6:	4603      	mov	r3, r0
 80111b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd90      	pop	{r4, r7, pc}

080111c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	460b      	mov	r3, r1
 80111ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111d6:	78fa      	ldrb	r2, [r7, #3]
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f4 f838 	bl	8005250 <HAL_HCD_HC_GetURBState>
 80111e0:	4603      	mov	r3, r0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b082      	sub	sp, #8
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d103      	bne.n	8011208 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	4618      	mov	r0, r3
 8011204:	f000 f8a6 	bl	8011354 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011208:	20c8      	movs	r0, #200	; 0xc8
 801120a:	f7f1 fd09 	bl	8002c20 <HAL_Delay>
  return USBH_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	460b      	mov	r3, r1
 8011222:	70fb      	strb	r3, [r7, #3]
 8011224:	4613      	mov	r3, r2
 8011226:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801122e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011230:	78fa      	ldrb	r2, [r7, #3]
 8011232:	68f9      	ldr	r1, [r7, #12]
 8011234:	4613      	mov	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	440b      	add	r3, r1
 801123e:	333b      	adds	r3, #59	; 0x3b
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	68f9      	ldr	r1, [r7, #12]
 801124a:	4613      	mov	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	4413      	add	r3, r2
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	440b      	add	r3, r1
 8011254:	3350      	adds	r3, #80	; 0x50
 8011256:	78ba      	ldrb	r2, [r7, #2]
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	e009      	b.n	8011270 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801125c:	78fa      	ldrb	r2, [r7, #3]
 801125e:	68f9      	ldr	r1, [r7, #12]
 8011260:	4613      	mov	r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	4413      	add	r3, r2
 8011266:	00db      	lsls	r3, r3, #3
 8011268:	440b      	add	r3, r1
 801126a:	3351      	adds	r3, #81	; 0x51
 801126c:	78ba      	ldrb	r2, [r7, #2]
 801126e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801127e:	b480      	push	{r7}
 8011280:	b085      	sub	sp, #20
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	460b      	mov	r3, r1
 8011288:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801128a:	2300      	movs	r3, #0
 801128c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011294:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011296:	78fa      	ldrb	r2, [r7, #3]
 8011298:	68b9      	ldr	r1, [r7, #8]
 801129a:	4613      	mov	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	00db      	lsls	r3, r3, #3
 80112a2:	440b      	add	r3, r1
 80112a4:	333b      	adds	r3, #59	; 0x3b
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00a      	beq.n	80112c2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80112ac:	78fa      	ldrb	r2, [r7, #3]
 80112ae:	68b9      	ldr	r1, [r7, #8]
 80112b0:	4613      	mov	r3, r2
 80112b2:	009b      	lsls	r3, r3, #2
 80112b4:	4413      	add	r3, r2
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	440b      	add	r3, r1
 80112ba:	3350      	adds	r3, #80	; 0x50
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	73fb      	strb	r3, [r7, #15]
 80112c0:	e009      	b.n	80112d6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80112c2:	78fa      	ldrb	r2, [r7, #3]
 80112c4:	68b9      	ldr	r1, [r7, #8]
 80112c6:	4613      	mov	r3, r2
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	00db      	lsls	r3, r3, #3
 80112ce:	440b      	add	r3, r1
 80112d0:	3351      	adds	r3, #81	; 0x51
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3714      	adds	r7, #20
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7f1 fc97 	bl	8002c20 <HAL_Delay>
}
 80112f2:	bf00      	nop
 80112f4:	3708      	adds	r7, #8
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	4603      	mov	r3, r0
 8011304:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011306:	2300      	movs	r3, #0
 8011308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801130a:	79fb      	ldrb	r3, [r7, #7]
 801130c:	2b03      	cmp	r3, #3
 801130e:	d817      	bhi.n	8011340 <USBH_Get_USB_Status+0x44>
 8011310:	a201      	add	r2, pc, #4	; (adr r2, 8011318 <USBH_Get_USB_Status+0x1c>)
 8011312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011316:	bf00      	nop
 8011318:	08011329 	.word	0x08011329
 801131c:	0801132f 	.word	0x0801132f
 8011320:	08011335 	.word	0x08011335
 8011324:	0801133b 	.word	0x0801133b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011328:	2300      	movs	r3, #0
 801132a:	73fb      	strb	r3, [r7, #15]
    break;
 801132c:	e00b      	b.n	8011346 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801132e:	2302      	movs	r3, #2
 8011330:	73fb      	strb	r3, [r7, #15]
    break;
 8011332:	e008      	b.n	8011346 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011334:	2301      	movs	r3, #1
 8011336:	73fb      	strb	r3, [r7, #15]
    break;
 8011338:	e005      	b.n	8011346 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801133a:	2302      	movs	r3, #2
 801133c:	73fb      	strb	r3, [r7, #15]
    break;
 801133e:	e002      	b.n	8011346 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011340:	2302      	movs	r3, #2
 8011342:	73fb      	strb	r3, [r7, #15]
    break;
 8011344:	bf00      	nop
  }
  return usb_status;
 8011346:	7bfb      	ldrb	r3, [r7, #15]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801135e:	79fb      	ldrb	r3, [r7, #7]
 8011360:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011362:	79fb      	ldrb	r3, [r7, #7]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d102      	bne.n	801136e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011368:	2301      	movs	r3, #1
 801136a:	73fb      	strb	r3, [r7, #15]
 801136c:	e001      	b.n	8011372 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011372:	7bfb      	ldrb	r3, [r7, #15]
 8011374:	461a      	mov	r2, r3
 8011376:	2101      	movs	r1, #1
 8011378:	4803      	ldr	r0, [pc, #12]	; (8011388 <MX_DriverVbusFS+0x34>)
 801137a:	f7f3 fb03 	bl	8004984 <HAL_GPIO_WritePin>
}
 801137e:	bf00      	nop
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	40020800 	.word	0x40020800

0801138c <arm_max_f32>:
 801138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011390:	1e4f      	subs	r7, r1, #1
 8011392:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8011396:	f100 0e04 	add.w	lr, r0, #4
 801139a:	edd0 7a00 	vldr	s15, [r0]
 801139e:	d058      	beq.n	8011452 <arm_max_f32+0xc6>
 80113a0:	3014      	adds	r0, #20
 80113a2:	46c4      	mov	ip, r8
 80113a4:	2604      	movs	r6, #4
 80113a6:	2400      	movs	r4, #0
 80113a8:	ed10 6a04 	vldr	s12, [r0, #-16]
 80113ac:	ed50 6a03 	vldr	s13, [r0, #-12]
 80113b0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80113b4:	ed50 5a01 	vldr	s11, [r0, #-4]
 80113b8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80113bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c0:	bfc8      	it	gt
 80113c2:	eef0 7a46 	vmovgt.f32	s15, s12
 80113c6:	f1a6 0503 	sub.w	r5, r6, #3
 80113ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113ce:	bfc8      	it	gt
 80113d0:	462c      	movgt	r4, r5
 80113d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d6:	bf48      	it	mi
 80113d8:	eef0 7a66 	vmovmi.f32	s15, s13
 80113dc:	f1a6 0502 	sub.w	r5, r6, #2
 80113e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113e4:	bf48      	it	mi
 80113e6:	462c      	movmi	r4, r5
 80113e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ec:	bf48      	it	mi
 80113ee:	eef0 7a47 	vmovmi.f32	s15, s14
 80113f2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80113f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80113fa:	bf48      	it	mi
 80113fc:	462c      	movmi	r4, r5
 80113fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011402:	bf48      	it	mi
 8011404:	4634      	movmi	r4, r6
 8011406:	bf48      	it	mi
 8011408:	eef0 7a65 	vmovmi.f32	s15, s11
 801140c:	f1bc 0c01 	subs.w	ip, ip, #1
 8011410:	f106 0604 	add.w	r6, r6, #4
 8011414:	f100 0010 	add.w	r0, r0, #16
 8011418:	d1c6      	bne.n	80113a8 <arm_max_f32+0x1c>
 801141a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801141e:	f017 0003 	ands.w	r0, r7, #3
 8011422:	d018      	beq.n	8011456 <arm_max_f32+0xca>
 8011424:	1a08      	subs	r0, r1, r0
 8011426:	ecbe 7a01 	vldmia	lr!, {s14}
 801142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011432:	bfc8      	it	gt
 8011434:	4604      	movgt	r4, r0
 8011436:	f100 0001 	add.w	r0, r0, #1
 801143a:	bfd8      	it	le
 801143c:	eeb0 7a67 	vmovle.f32	s14, s15
 8011440:	4288      	cmp	r0, r1
 8011442:	eef0 7a47 	vmov.f32	s15, s14
 8011446:	d1ee      	bne.n	8011426 <arm_max_f32+0x9a>
 8011448:	ed82 7a00 	vstr	s14, [r2]
 801144c:	601c      	str	r4, [r3, #0]
 801144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011452:	4644      	mov	r4, r8
 8011454:	e7e3      	b.n	801141e <arm_max_f32+0x92>
 8011456:	eeb0 7a67 	vmov.f32	s14, s15
 801145a:	e7f5      	b.n	8011448 <arm_max_f32+0xbc>

0801145c <arm_cfft_radix8by2_f32>:
 801145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011460:	ed2d 8b08 	vpush	{d8-d11}
 8011464:	f8b0 e000 	ldrh.w	lr, [r0]
 8011468:	6842      	ldr	r2, [r0, #4]
 801146a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801146e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8011472:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011476:	4607      	mov	r7, r0
 8011478:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801147c:	f000 80af 	beq.w	80115de <arm_cfft_radix8by2_f32+0x182>
 8011480:	3310      	adds	r3, #16
 8011482:	18ce      	adds	r6, r1, r3
 8011484:	3210      	adds	r2, #16
 8011486:	4443      	add	r3, r8
 8011488:	f101 0510 	add.w	r5, r1, #16
 801148c:	f108 0410 	add.w	r4, r8, #16
 8011490:	ed54 1a04 	vldr	s3, [r4, #-16]
 8011494:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011498:	ed53 3a03 	vldr	s7, [r3, #-12]
 801149c:	ed53 5a02 	vldr	s11, [r3, #-8]
 80114a0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80114a4:	ed54 6a03 	vldr	s13, [r4, #-12]
 80114a8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80114ac:	ed16 2a04 	vldr	s4, [r6, #-16]
 80114b0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80114b4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80114b8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80114bc:	ed15 3a04 	vldr	s6, [r5, #-16]
 80114c0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80114c4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80114c8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80114cc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80114d0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80114d4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80114d8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80114dc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80114e0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80114e4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80114e8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80114ec:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80114f0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80114f4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80114f8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80114fc:	ed05 aa01 	vstr	s20, [r5, #-4]
 8011500:	ed06 8a01 	vstr	s16, [r6, #-4]
 8011504:	ed46 9a04 	vstr	s19, [r6, #-16]
 8011508:	ed06 9a03 	vstr	s18, [r6, #-12]
 801150c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8011510:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011514:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011518:	ed12 6a03 	vldr	s12, [r2, #-12]
 801151c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8011520:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011524:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011528:	ee26 8a86 	vmul.f32	s16, s13, s12
 801152c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8011530:	ee63 1a22 	vmul.f32	s3, s6, s5
 8011534:	ee24 4a22 	vmul.f32	s8, s8, s5
 8011538:	ee23 3a06 	vmul.f32	s6, s6, s12
 801153c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8011540:	ee23 6a86 	vmul.f32	s12, s7, s12
 8011544:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011548:	ee36 6a04 	vadd.f32	s12, s12, s8
 801154c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011550:	ee72 3a63 	vsub.f32	s7, s4, s7
 8011554:	ee71 2a88 	vadd.f32	s5, s3, s16
 8011558:	ed44 6a03 	vstr	s13, [r4, #-12]
 801155c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8011560:	ed43 3a04 	vstr	s7, [r3, #-16]
 8011564:	ed03 6a03 	vstr	s12, [r3, #-12]
 8011568:	ee77 7a67 	vsub.f32	s15, s14, s15
 801156c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8011570:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011574:	ed52 5a02 	vldr	s11, [r2, #-8]
 8011578:	ee35 6a41 	vsub.f32	s12, s10, s2
 801157c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8011580:	ee67 3a87 	vmul.f32	s7, s15, s14
 8011584:	ee26 5a87 	vmul.f32	s10, s13, s14
 8011588:	ee24 4aa5 	vmul.f32	s8, s9, s11
 801158c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011590:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011594:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011598:	ee26 7a07 	vmul.f32	s14, s12, s14
 801159c:	ee26 6a25 	vmul.f32	s12, s12, s11
 80115a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80115a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80115a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80115ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80115b0:	f1be 0e01 	subs.w	lr, lr, #1
 80115b4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80115b8:	f105 0510 	add.w	r5, r5, #16
 80115bc:	ed44 7a01 	vstr	s15, [r4, #-4]
 80115c0:	f106 0610 	add.w	r6, r6, #16
 80115c4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80115c8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80115cc:	f102 0210 	add.w	r2, r2, #16
 80115d0:	f104 0410 	add.w	r4, r4, #16
 80115d4:	f103 0310 	add.w	r3, r3, #16
 80115d8:	f47f af5a 	bne.w	8011490 <arm_cfft_radix8by2_f32+0x34>
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	fa1f f48c 	uxth.w	r4, ip
 80115e2:	4608      	mov	r0, r1
 80115e4:	2302      	movs	r3, #2
 80115e6:	4621      	mov	r1, r4
 80115e8:	f000 fe40 	bl	801226c <arm_radix8_butterfly_f32>
 80115ec:	ecbd 8b08 	vpop	{d8-d11}
 80115f0:	4640      	mov	r0, r8
 80115f2:	4621      	mov	r1, r4
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	2302      	movs	r3, #2
 80115f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115fc:	f000 be36 	b.w	801226c <arm_radix8_butterfly_f32>

08011600 <arm_cfft_radix8by4_f32>:
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	ed2d 8b0a 	vpush	{d8-d12}
 8011608:	8802      	ldrh	r2, [r0, #0]
 801160a:	ed91 6a00 	vldr	s12, [r1]
 801160e:	b08f      	sub	sp, #60	; 0x3c
 8011610:	460f      	mov	r7, r1
 8011612:	0852      	lsrs	r2, r2, #1
 8011614:	0093      	lsls	r3, r2, #2
 8011616:	900c      	str	r0, [sp, #48]	; 0x30
 8011618:	9103      	str	r1, [sp, #12]
 801161a:	6841      	ldr	r1, [r0, #4]
 801161c:	ed97 7a01 	vldr	s14, [r7, #4]
 8011620:	4638      	mov	r0, r7
 8011622:	4418      	add	r0, r3
 8011624:	4606      	mov	r6, r0
 8011626:	9009      	str	r0, [sp, #36]	; 0x24
 8011628:	4418      	add	r0, r3
 801162a:	edd0 6a00 	vldr	s13, [r0]
 801162e:	edd6 3a00 	vldr	s7, [r6]
 8011632:	edd6 2a01 	vldr	s5, [r6, #4]
 8011636:	edd0 7a01 	vldr	s15, [r0, #4]
 801163a:	900a      	str	r0, [sp, #40]	; 0x28
 801163c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8011640:	4604      	mov	r4, r0
 8011642:	4625      	mov	r5, r4
 8011644:	441c      	add	r4, r3
 8011646:	ed94 4a00 	vldr	s8, [r4]
 801164a:	ed94 5a01 	vldr	s10, [r4, #4]
 801164e:	9401      	str	r4, [sp, #4]
 8011650:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8011654:	4630      	mov	r0, r6
 8011656:	ee74 4a24 	vadd.f32	s9, s8, s9
 801165a:	463e      	mov	r6, r7
 801165c:	ee14 ea90 	vmov	lr, s9
 8011660:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011664:	f846 eb08 	str.w	lr, [r6], #8
 8011668:	ee37 6a27 	vadd.f32	s12, s14, s15
 801166c:	edd0 4a01 	vldr	s9, [r0, #4]
 8011670:	9604      	str	r6, [sp, #16]
 8011672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011676:	9e01      	ldr	r6, [sp, #4]
 8011678:	ee32 3aa6 	vadd.f32	s6, s5, s13
 801167c:	ed96 2a01 	vldr	s4, [r6, #4]
 8011680:	ee36 7a24 	vadd.f32	s14, s12, s9
 8011684:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8011688:	ee77 4ae3 	vsub.f32	s9, s15, s7
 801168c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8011690:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011694:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8011698:	ee73 3a45 	vsub.f32	s7, s6, s10
 801169c:	4604      	mov	r4, r0
 801169e:	ee36 6a45 	vsub.f32	s12, s12, s10
 80116a2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80116a6:	46a3      	mov	fp, r4
 80116a8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80116ac:	ee34 5a84 	vadd.f32	s10, s9, s8
 80116b0:	ee13 8a90 	vmov	r8, s7
 80116b4:	46a4      	mov	ip, r4
 80116b6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80116ba:	ed87 7a01 	vstr	s14, [r7, #4]
 80116be:	f84b 8b08 	str.w	r8, [fp], #8
 80116c2:	f1ac 0704 	sub.w	r7, ip, #4
 80116c6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80116ca:	f101 0c08 	add.w	ip, r1, #8
 80116ce:	462c      	mov	r4, r5
 80116d0:	f8cd c014 	str.w	ip, [sp, #20]
 80116d4:	ee15 ca90 	vmov	ip, s11
 80116d8:	f844 cb08 	str.w	ip, [r4], #8
 80116dc:	9407      	str	r4, [sp, #28]
 80116de:	f101 0410 	add.w	r4, r1, #16
 80116e2:	ed85 6a01 	vstr	s12, [r5, #4]
 80116e6:	0852      	lsrs	r2, r2, #1
 80116e8:	9402      	str	r4, [sp, #8]
 80116ea:	462c      	mov	r4, r5
 80116ec:	f101 0518 	add.w	r5, r1, #24
 80116f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80116f2:	46b2      	mov	sl, r6
 80116f4:	9506      	str	r5, [sp, #24]
 80116f6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80116fa:	3a02      	subs	r2, #2
 80116fc:	ee16 5a90 	vmov	r5, s13
 8011700:	46b6      	mov	lr, r6
 8011702:	4630      	mov	r0, r6
 8011704:	0852      	lsrs	r2, r2, #1
 8011706:	f84a 5b08 	str.w	r5, [sl], #8
 801170a:	f1a0 0604 	sub.w	r6, r0, #4
 801170e:	edce 7a01 	vstr	s15, [lr, #4]
 8011712:	9208      	str	r2, [sp, #32]
 8011714:	f000 8130 	beq.w	8011978 <arm_cfft_radix8by4_f32+0x378>
 8011718:	4691      	mov	r9, r2
 801171a:	9a03      	ldr	r2, [sp, #12]
 801171c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011724:	3b08      	subs	r3, #8
 8011726:	f102 0510 	add.w	r5, r2, #16
 801172a:	f101 0c20 	add.w	ip, r1, #32
 801172e:	f1a4 020c 	sub.w	r2, r4, #12
 8011732:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8011736:	4433      	add	r3, r6
 8011738:	3410      	adds	r4, #16
 801173a:	4650      	mov	r0, sl
 801173c:	4659      	mov	r1, fp
 801173e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8011742:	ed14 5a02 	vldr	s10, [r4, #-8]
 8011746:	ed91 7a00 	vldr	s14, [r1]
 801174a:	edd0 7a00 	vldr	s15, [r0]
 801174e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8011752:	ed54 5a01 	vldr	s11, [r4, #-4]
 8011756:	edd0 6a01 	vldr	s13, [r0, #4]
 801175a:	ed91 6a01 	vldr	s12, [r1, #4]
 801175e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8011762:	ee34 0a25 	vadd.f32	s0, s8, s11
 8011766:	ee78 4a07 	vadd.f32	s9, s16, s14
 801176a:	ee74 5a65 	vsub.f32	s11, s8, s11
 801176e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8011772:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011776:	ed45 4a02 	vstr	s9, [r5, #-8]
 801177a:	edd1 4a01 	vldr	s9, [r1, #4]
 801177e:	ed90 4a01 	vldr	s8, [r0, #4]
 8011782:	ee70 4a24 	vadd.f32	s9, s0, s9
 8011786:	ee76 aa05 	vadd.f32	s21, s12, s10
 801178a:	ee74 4a84 	vadd.f32	s9, s9, s8
 801178e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8011792:	ed45 4a01 	vstr	s9, [r5, #-4]
 8011796:	edd6 1a00 	vldr	s3, [r6]
 801179a:	edd7 0a00 	vldr	s1, [r7]
 801179e:	ed92 4a02 	vldr	s8, [r2, #8]
 80117a2:	edd3 3a02 	vldr	s7, [r3, #8]
 80117a6:	ed93 2a01 	vldr	s4, [r3, #4]
 80117aa:	ed16 1a01 	vldr	s2, [r6, #-4]
 80117ae:	edd2 2a01 	vldr	s5, [r2, #4]
 80117b2:	ed57 9a01 	vldr	s19, [r7, #-4]
 80117b6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80117ba:	ee39 3a81 	vadd.f32	s6, s19, s2
 80117be:	ee74 8a84 	vadd.f32	s17, s9, s8
 80117c2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80117c6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80117ca:	ee7a aae6 	vsub.f32	s21, s21, s13
 80117ce:	ee18 aa90 	vmov	sl, s17
 80117d2:	f847 a908 	str.w	sl, [r7], #-8
 80117d6:	edd2 8a01 	vldr	s17, [r2, #4]
 80117da:	ed93 9a01 	vldr	s18, [r3, #4]
 80117de:	ee73 8a28 	vadd.f32	s17, s6, s17
 80117e2:	ee3a aa27 	vadd.f32	s20, s20, s15
 80117e6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80117ea:	ee74 0a63 	vsub.f32	s1, s8, s7
 80117ee:	edc7 8a01 	vstr	s17, [r7, #4]
 80117f2:	ed18 ba02 	vldr	s22, [r8, #-8]
 80117f6:	ed58 8a01 	vldr	s17, [r8, #-4]
 80117fa:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80117fe:	ee6a ba28 	vmul.f32	s23, s20, s17
 8011802:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8011806:	ee71 9ae2 	vsub.f32	s19, s3, s5
 801180a:	ee30 9a81 	vadd.f32	s18, s1, s2
 801180e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8011812:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8011816:	ee6a aaa8 	vmul.f32	s21, s21, s17
 801181a:	ee69 baa8 	vmul.f32	s23, s19, s17
 801181e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8011822:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8011826:	ee69 8a28 	vmul.f32	s17, s18, s17
 801182a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801182e:	ee1c aa10 	vmov	sl, s24
 8011832:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8011836:	f841 ab08 	str.w	sl, [r1], #8
 801183a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801183e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8011842:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8011846:	ee33 3a62 	vsub.f32	s6, s6, s5
 801184a:	ed01 aa01 	vstr	s20, [r1, #-4]
 801184e:	edc2 8a01 	vstr	s17, [r2, #4]
 8011852:	ed82 ba02 	vstr	s22, [r2, #8]
 8011856:	ed5c 4a04 	vldr	s9, [ip, #-16]
 801185a:	ee74 3a63 	vsub.f32	s7, s8, s7
 801185e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011862:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8011866:	ee30 0a46 	vsub.f32	s0, s0, s12
 801186a:	ee33 3a42 	vsub.f32	s6, s6, s4
 801186e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011872:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011876:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 801187a:	ee63 8a04 	vmul.f32	s17, s6, s8
 801187e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8011882:	ee60 9a04 	vmul.f32	s19, s0, s8
 8011886:	ee28 8a04 	vmul.f32	s16, s16, s8
 801188a:	ee20 0a24 	vmul.f32	s0, s0, s9
 801188e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8011892:	ee39 4a68 	vsub.f32	s8, s18, s17
 8011896:	ee7a 9a29 	vadd.f32	s19, s20, s19
 801189a:	ee14 aa10 	vmov	sl, s8
 801189e:	ee30 0a48 	vsub.f32	s0, s0, s16
 80118a2:	ee63 4a24 	vmul.f32	s9, s6, s9
 80118a6:	ed44 9a02 	vstr	s19, [r4, #-8]
 80118aa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80118ae:	ed04 0a01 	vstr	s0, [r4, #-4]
 80118b2:	f846 a908 	str.w	sl, [r6], #-8
 80118b6:	ee35 6a46 	vsub.f32	s12, s10, s12
 80118ba:	ee35 7a87 	vadd.f32	s14, s11, s14
 80118be:	edc6 3a01 	vstr	s7, [r6, #4]
 80118c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80118c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118ca:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80118ce:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80118d2:	ee67 5a86 	vmul.f32	s11, s15, s12
 80118d6:	ee26 5a87 	vmul.f32	s10, s13, s14
 80118da:	ee72 2a62 	vsub.f32	s5, s4, s5
 80118de:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80118e2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80118e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80118ea:	ee62 0a86 	vmul.f32	s1, s5, s12
 80118ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 80118f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118f6:	ee21 6a06 	vmul.f32	s12, s2, s12
 80118fa:	ee62 2a87 	vmul.f32	s5, s5, s14
 80118fe:	ee21 1a07 	vmul.f32	s2, s2, s14
 8011902:	ee15 aa90 	vmov	sl, s11
 8011906:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801190a:	f840 ab08 	str.w	sl, [r0], #8
 801190e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8011912:	ee76 2a22 	vadd.f32	s5, s12, s5
 8011916:	f1b9 0901 	subs.w	r9, r9, #1
 801191a:	ed40 7a01 	vstr	s15, [r0, #-4]
 801191e:	f105 0508 	add.w	r5, r5, #8
 8011922:	ed83 1a02 	vstr	s2, [r3, #8]
 8011926:	edc3 2a01 	vstr	s5, [r3, #4]
 801192a:	f108 0808 	add.w	r8, r8, #8
 801192e:	f1a2 0208 	sub.w	r2, r2, #8
 8011932:	f10c 0c10 	add.w	ip, ip, #16
 8011936:	f104 0408 	add.w	r4, r4, #8
 801193a:	f10e 0e18 	add.w	lr, lr, #24
 801193e:	f1a3 0308 	sub.w	r3, r3, #8
 8011942:	f47f aefc 	bne.w	801173e <arm_cfft_radix8by4_f32+0x13e>
 8011946:	9908      	ldr	r1, [sp, #32]
 8011948:	9802      	ldr	r0, [sp, #8]
 801194a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801194e:	00cb      	lsls	r3, r1, #3
 8011950:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011954:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8011958:	9102      	str	r1, [sp, #8]
 801195a:	9904      	ldr	r1, [sp, #16]
 801195c:	4419      	add	r1, r3
 801195e:	9104      	str	r1, [sp, #16]
 8011960:	9905      	ldr	r1, [sp, #20]
 8011962:	4419      	add	r1, r3
 8011964:	9105      	str	r1, [sp, #20]
 8011966:	9907      	ldr	r1, [sp, #28]
 8011968:	449b      	add	fp, r3
 801196a:	4419      	add	r1, r3
 801196c:	449a      	add	sl, r3
 801196e:	9b06      	ldr	r3, [sp, #24]
 8011970:	9107      	str	r1, [sp, #28]
 8011972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011976:	9306      	str	r3, [sp, #24]
 8011978:	9a04      	ldr	r2, [sp, #16]
 801197a:	9807      	ldr	r0, [sp, #28]
 801197c:	edd2 3a00 	vldr	s7, [r2]
 8011980:	ed90 4a00 	vldr	s8, [r0]
 8011984:	eddb 7a00 	vldr	s15, [fp]
 8011988:	ed9a 3a00 	vldr	s6, [sl]
 801198c:	edd2 4a01 	vldr	s9, [r2, #4]
 8011990:	ed90 7a01 	vldr	s14, [r0, #4]
 8011994:	ed9b 2a01 	vldr	s4, [fp, #4]
 8011998:	edda 5a01 	vldr	s11, [sl, #4]
 801199c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80119a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80119a2:	ee73 6a84 	vadd.f32	s13, s7, s8
 80119a6:	ee34 6a87 	vadd.f32	s12, s9, s14
 80119aa:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80119ae:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80119b2:	ee33 5a05 	vadd.f32	s10, s6, s10
 80119b6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80119ba:	ed82 5a00 	vstr	s10, [r2]
 80119be:	ed9b 5a01 	vldr	s10, [fp, #4]
 80119c2:	edda 4a01 	vldr	s9, [sl, #4]
 80119c6:	ee36 5a05 	vadd.f32	s10, s12, s10
 80119ca:	ee72 3a04 	vadd.f32	s7, s4, s8
 80119ce:	ee35 5a24 	vadd.f32	s10, s10, s9
 80119d2:	ee77 4a67 	vsub.f32	s9, s14, s15
 80119d6:	ed82 5a01 	vstr	s10, [r2, #4]
 80119da:	9a05      	ldr	r2, [sp, #20]
 80119dc:	ee34 5a83 	vadd.f32	s10, s9, s6
 80119e0:	edd2 1a00 	vldr	s3, [r2]
 80119e4:	edd2 2a01 	vldr	s5, [r2, #4]
 80119e8:	9a02      	ldr	r2, [sp, #8]
 80119ea:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80119ee:	ee36 6a42 	vsub.f32	s12, s12, s4
 80119f2:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80119f6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80119fa:	ee65 2a22 	vmul.f32	s5, s10, s5
 80119fe:	ee25 5a21 	vmul.f32	s10, s10, s3
 8011a02:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8011a06:	ee35 5a63 	vsub.f32	s10, s10, s7
 8011a0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011a0e:	edcb 2a00 	vstr	s5, [fp]
 8011a12:	ed8b 5a01 	vstr	s10, [fp, #4]
 8011a16:	edd2 3a01 	vldr	s7, [r2, #4]
 8011a1a:	ed92 5a00 	vldr	s10, [r2]
 8011a1e:	9a06      	ldr	r2, [sp, #24]
 8011a20:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011a24:	ee36 6a65 	vsub.f32	s12, s12, s11
 8011a28:	ee66 4a85 	vmul.f32	s9, s13, s10
 8011a2c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8011a30:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011a34:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011a38:	ee75 6a66 	vsub.f32	s13, s10, s13
 8011a3c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8011a40:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a48:	edc0 6a01 	vstr	s13, [r0, #4]
 8011a4c:	ed80 6a00 	vstr	s12, [r0]
 8011a50:	ed92 6a01 	vldr	s12, [r2, #4]
 8011a54:	9803      	ldr	r0, [sp, #12]
 8011a56:	ee77 7a43 	vsub.f32	s15, s14, s6
 8011a5a:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011a5e:	ed92 7a00 	vldr	s14, [r2]
 8011a62:	ee65 6a87 	vmul.f32	s13, s11, s14
 8011a66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011a6a:	ee65 5a86 	vmul.f32	s11, s11, s12
 8011a6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011a72:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a7a:	edca 5a01 	vstr	s11, [sl, #4]
 8011a7e:	edca 7a00 	vstr	s15, [sl]
 8011a82:	6872      	ldr	r2, [r6, #4]
 8011a84:	4621      	mov	r1, r4
 8011a86:	2304      	movs	r3, #4
 8011a88:	f000 fbf0 	bl	801226c <arm_radix8_butterfly_f32>
 8011a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a8e:	6872      	ldr	r2, [r6, #4]
 8011a90:	4621      	mov	r1, r4
 8011a92:	2304      	movs	r3, #4
 8011a94:	f000 fbea 	bl	801226c <arm_radix8_butterfly_f32>
 8011a98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a9a:	6872      	ldr	r2, [r6, #4]
 8011a9c:	4621      	mov	r1, r4
 8011a9e:	2304      	movs	r3, #4
 8011aa0:	f000 fbe4 	bl	801226c <arm_radix8_butterfly_f32>
 8011aa4:	9801      	ldr	r0, [sp, #4]
 8011aa6:	6872      	ldr	r2, [r6, #4]
 8011aa8:	4621      	mov	r1, r4
 8011aaa:	2304      	movs	r3, #4
 8011aac:	b00f      	add	sp, #60	; 0x3c
 8011aae:	ecbd 8b0a 	vpop	{d8-d12}
 8011ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab6:	f000 bbd9 	b.w	801226c <arm_radix8_butterfly_f32>
 8011aba:	bf00      	nop

08011abc <arm_cfft_f32>:
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	2a01      	cmp	r2, #1
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	4617      	mov	r7, r2
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	4698      	mov	r8, r3
 8011aca:	8805      	ldrh	r5, [r0, #0]
 8011acc:	d054      	beq.n	8011b78 <arm_cfft_f32+0xbc>
 8011ace:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011ad2:	d04c      	beq.n	8011b6e <arm_cfft_f32+0xb2>
 8011ad4:	d916      	bls.n	8011b04 <arm_cfft_f32+0x48>
 8011ad6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8011ada:	d01a      	beq.n	8011b12 <arm_cfft_f32+0x56>
 8011adc:	d95c      	bls.n	8011b98 <arm_cfft_f32+0xdc>
 8011ade:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8011ae2:	d044      	beq.n	8011b6e <arm_cfft_f32+0xb2>
 8011ae4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8011ae8:	d105      	bne.n	8011af6 <arm_cfft_f32+0x3a>
 8011aea:	4620      	mov	r0, r4
 8011aec:	4629      	mov	r1, r5
 8011aee:	6872      	ldr	r2, [r6, #4]
 8011af0:	2301      	movs	r3, #1
 8011af2:	f000 fbbb 	bl	801226c <arm_radix8_butterfly_f32>
 8011af6:	f1b8 0f00 	cmp.w	r8, #0
 8011afa:	d111      	bne.n	8011b20 <arm_cfft_f32+0x64>
 8011afc:	2f01      	cmp	r7, #1
 8011afe:	d016      	beq.n	8011b2e <arm_cfft_f32+0x72>
 8011b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b04:	2d20      	cmp	r5, #32
 8011b06:	d032      	beq.n	8011b6e <arm_cfft_f32+0xb2>
 8011b08:	d94a      	bls.n	8011ba0 <arm_cfft_f32+0xe4>
 8011b0a:	2d40      	cmp	r5, #64	; 0x40
 8011b0c:	d0ed      	beq.n	8011aea <arm_cfft_f32+0x2e>
 8011b0e:	2d80      	cmp	r5, #128	; 0x80
 8011b10:	d1f1      	bne.n	8011af6 <arm_cfft_f32+0x3a>
 8011b12:	4630      	mov	r0, r6
 8011b14:	4621      	mov	r1, r4
 8011b16:	f7ff fca1 	bl	801145c <arm_cfft_radix8by2_f32>
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	d0ed      	beq.n	8011afc <arm_cfft_f32+0x40>
 8011b20:	4620      	mov	r0, r4
 8011b22:	89b1      	ldrh	r1, [r6, #12]
 8011b24:	68b2      	ldr	r2, [r6, #8]
 8011b26:	f7ee fb53 	bl	80001d0 <arm_bitreversal_32>
 8011b2a:	2f01      	cmp	r7, #1
 8011b2c:	d1e8      	bne.n	8011b00 <arm_cfft_f32+0x44>
 8011b2e:	ee07 5a90 	vmov	s15, r5
 8011b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b3a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8011b3e:	2d00      	cmp	r5, #0
 8011b40:	d0de      	beq.n	8011b00 <arm_cfft_f32+0x44>
 8011b42:	f104 0108 	add.w	r1, r4, #8
 8011b46:	2300      	movs	r3, #0
 8011b48:	3301      	adds	r3, #1
 8011b4a:	429d      	cmp	r5, r3
 8011b4c:	f101 0108 	add.w	r1, r1, #8
 8011b50:	ed11 7a04 	vldr	s14, [r1, #-16]
 8011b54:	ed51 7a03 	vldr	s15, [r1, #-12]
 8011b58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b5c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011b60:	ed01 7a04 	vstr	s14, [r1, #-16]
 8011b64:	ed41 7a03 	vstr	s15, [r1, #-12]
 8011b68:	d1ee      	bne.n	8011b48 <arm_cfft_f32+0x8c>
 8011b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6e:	4630      	mov	r0, r6
 8011b70:	4621      	mov	r1, r4
 8011b72:	f7ff fd45 	bl	8011600 <arm_cfft_radix8by4_f32>
 8011b76:	e7be      	b.n	8011af6 <arm_cfft_f32+0x3a>
 8011b78:	b1ad      	cbz	r5, 8011ba6 <arm_cfft_f32+0xea>
 8011b7a:	f101 030c 	add.w	r3, r1, #12
 8011b7e:	2200      	movs	r2, #0
 8011b80:	ed53 7a02 	vldr	s15, [r3, #-8]
 8011b84:	3201      	adds	r2, #1
 8011b86:	eef1 7a67 	vneg.f32	s15, s15
 8011b8a:	4295      	cmp	r5, r2
 8011b8c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8011b90:	f103 0308 	add.w	r3, r3, #8
 8011b94:	d1f4      	bne.n	8011b80 <arm_cfft_f32+0xc4>
 8011b96:	e79a      	b.n	8011ace <arm_cfft_f32+0x12>
 8011b98:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8011b9c:	d0a5      	beq.n	8011aea <arm_cfft_f32+0x2e>
 8011b9e:	e7aa      	b.n	8011af6 <arm_cfft_f32+0x3a>
 8011ba0:	2d10      	cmp	r5, #16
 8011ba2:	d0b6      	beq.n	8011b12 <arm_cfft_f32+0x56>
 8011ba4:	e7a7      	b.n	8011af6 <arm_cfft_f32+0x3a>
 8011ba6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011baa:	d894      	bhi.n	8011ad6 <arm_cfft_f32+0x1a>
 8011bac:	e7aa      	b.n	8011b04 <arm_cfft_f32+0x48>
 8011bae:	bf00      	nop

08011bb0 <arm_fir_init_f32>:
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	9c04      	ldr	r4, [sp, #16]
 8011bb4:	6082      	str	r2, [r0, #8]
 8011bb6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8011bba:	3c01      	subs	r4, #1
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	440c      	add	r4, r1
 8011bc0:	8001      	strh	r1, [r0, #0]
 8011bc2:	461e      	mov	r6, r3
 8011bc4:	00a2      	lsls	r2, r4, #2
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	2100      	movs	r1, #0
 8011bca:	f000 fe96 	bl	80128fa <memset>
 8011bce:	606e      	str	r6, [r5, #4]
 8011bd0:	bd70      	pop	{r4, r5, r6, pc}
 8011bd2:	bf00      	nop

08011bd4 <arm_fir_f32>:
 8011bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd8:	ed2d 8b10 	vpush	{d8-d15}
 8011bdc:	b089      	sub	sp, #36	; 0x24
 8011bde:	4605      	mov	r5, r0
 8011be0:	9003      	str	r0, [sp, #12]
 8011be2:	8800      	ldrh	r0, [r0, #0]
 8011be4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011be8:	9304      	str	r3, [sp, #16]
 8011bea:	461e      	mov	r6, r3
 8011bec:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8011bf6:	08f3      	lsrs	r3, r6, #3
 8011bf8:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011bfc:	9001      	str	r0, [sp, #4]
 8011bfe:	4625      	mov	r5, r4
 8011c00:	9400      	str	r4, [sp, #0]
 8011c02:	9302      	str	r3, [sp, #8]
 8011c04:	f000 81ee 	beq.w	8011fe4 <arm_fir_f32+0x410>
 8011c08:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8011c0c:	469e      	mov	lr, r3
 8011c0e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8011c12:	1f1e      	subs	r6, r3, #4
 8011c14:	4604      	mov	r4, r0
 8011c16:	9605      	str	r6, [sp, #20]
 8011c18:	eb08 0003 	add.w	r0, r8, r3
 8011c1c:	f004 0a07 	and.w	sl, r4, #7
 8011c20:	4613      	mov	r3, r2
 8011c22:	f10c 0420 	add.w	r4, ip, #32
 8011c26:	f8cd c018 	str.w	ip, [sp, #24]
 8011c2a:	4684      	mov	ip, r0
 8011c2c:	4648      	mov	r0, r9
 8011c2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011c32:	9107      	str	r1, [sp, #28]
 8011c34:	f105 0720 	add.w	r7, r5, #32
 8011c38:	f101 0620 	add.w	r6, r1, #32
 8011c3c:	f102 0520 	add.w	r5, r2, #32
 8011c40:	4652      	mov	r2, sl
 8011c42:	469a      	mov	sl, r3
 8011c44:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8011c48:	f847 3c20 	str.w	r3, [r7, #-32]
 8011c4c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8011c50:	f847 3c1c 	str.w	r3, [r7, #-28]
 8011c54:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8011c58:	f847 3c18 	str.w	r3, [r7, #-24]
 8011c5c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8011c60:	f847 3c14 	str.w	r3, [r7, #-20]
 8011c64:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8011c68:	f847 3c10 	str.w	r3, [r7, #-16]
 8011c6c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8011c70:	f847 3c0c 	str.w	r3, [r7, #-12]
 8011c74:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8011c78:	f847 3c08 	str.w	r3, [r7, #-8]
 8011c7c:	eddf 3af1 	vldr	s7, [pc, #964]	; 8012044 <arm_fir_f32+0x470>
 8011c80:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c84:	f847 3c04 	str.w	r3, [r7, #-4]
 8011c88:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8011c8c:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8011c90:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8011c94:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8011c98:	ed14 1a04 	vldr	s2, [r4, #-16]
 8011c9c:	ed54 0a03 	vldr	s1, [r4, #-12]
 8011ca0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011ca4:	1f21      	subs	r1, r4, #4
 8011ca6:	eef0 8a63 	vmov.f32	s17, s7
 8011caa:	eef0 9a63 	vmov.f32	s19, s7
 8011cae:	eef0 aa63 	vmov.f32	s21, s7
 8011cb2:	eef0 ba63 	vmov.f32	s23, s7
 8011cb6:	eeb0 ca63 	vmov.f32	s24, s7
 8011cba:	eef0 ca63 	vmov.f32	s25, s7
 8011cbe:	eeb0 da63 	vmov.f32	s26, s7
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	f000 81e8 	beq.w	8012098 <arm_fir_f32+0x4c4>
 8011cc8:	f108 0120 	add.w	r1, r8, #32
 8011ccc:	f104 031c 	add.w	r3, r4, #28
 8011cd0:	4683      	mov	fp, r0
 8011cd2:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8011cd6:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8011cda:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8011cde:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8011ce2:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8011ce6:	ed11 6a04 	vldr	s12, [r1, #-16]
 8011cea:	ed51 6a03 	vldr	s13, [r1, #-12]
 8011cee:	ed11 7a02 	vldr	s14, [r1, #-8]
 8011cf2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8011cf6:	ee23 fa04 	vmul.f32	s30, s6, s8
 8011cfa:	ee62 ea84 	vmul.f32	s29, s5, s8
 8011cfe:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8011d02:	ee22 ea04 	vmul.f32	s28, s4, s8
 8011d06:	ee61 da84 	vmul.f32	s27, s3, s8
 8011d0a:	ee21 ba04 	vmul.f32	s22, s2, s8
 8011d0e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8011d12:	ee20 9a04 	vmul.f32	s18, s0, s8
 8011d16:	ee28 4a04 	vmul.f32	s8, s16, s8
 8011d1a:	ee62 fa24 	vmul.f32	s31, s4, s9
 8011d1e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8011d22:	ee7b baad 	vadd.f32	s23, s23, s27
 8011d26:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8011d2a:	ee61 da24 	vmul.f32	s27, s2, s9
 8011d2e:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8011d32:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8011d36:	ee20 baa4 	vmul.f32	s22, s1, s9
 8011d3a:	ee20 aa24 	vmul.f32	s20, s0, s9
 8011d3e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011d42:	ee7c caae 	vadd.f32	s25, s25, s29
 8011d46:	ee22 faa4 	vmul.f32	s30, s5, s9
 8011d4a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011d4e:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8011d52:	ee28 9a24 	vmul.f32	s18, s16, s9
 8011d56:	ee73 3a84 	vadd.f32	s7, s7, s8
 8011d5a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8011d5e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8011d62:	ee61 ea05 	vmul.f32	s29, s2, s10
 8011d66:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8011d6a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011d6e:	ee7c caaf 	vadd.f32	s25, s25, s31
 8011d72:	ee20 fa85 	vmul.f32	s30, s1, s10
 8011d76:	ee61 fa85 	vmul.f32	s31, s3, s10
 8011d7a:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8011d7e:	ee7b daad 	vadd.f32	s27, s23, s27
 8011d82:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8011d86:	ee60 ba05 	vmul.f32	s23, s0, s10
 8011d8a:	ee68 aa05 	vmul.f32	s21, s16, s10
 8011d8e:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8011d92:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011d96:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8011d9a:	ee63 4a05 	vmul.f32	s9, s6, s10
 8011d9e:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011da2:	ee21 9a25 	vmul.f32	s18, s2, s11
 8011da6:	ee20 ca25 	vmul.f32	s24, s0, s11
 8011daa:	ee3d da04 	vadd.f32	s26, s26, s8
 8011dae:	ee7c caaf 	vadd.f32	s25, s25, s31
 8011db2:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8011db6:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8011dba:	ed53 1a04 	vldr	s3, [r3, #-16]
 8011dbe:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8011dc2:	ee7d da8f 	vadd.f32	s27, s27, s30
 8011dc6:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8011dca:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8011dce:	ee68 ba25 	vmul.f32	s23, s16, s11
 8011dd2:	ee63 aa25 	vmul.f32	s21, s6, s11
 8011dd6:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8011dda:	ee73 3a85 	vadd.f32	s7, s7, s10
 8011dde:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8011de2:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011de6:	ee61 4a06 	vmul.f32	s9, s2, s12
 8011dea:	ee60 9a86 	vmul.f32	s19, s1, s12
 8011dee:	ee60 fa06 	vmul.f32	s31, s0, s12
 8011df2:	ed13 1a03 	vldr	s2, [r3, #-12]
 8011df6:	ee23 fa06 	vmul.f32	s30, s6, s12
 8011dfa:	ee3d da04 	vadd.f32	s26, s26, s8
 8011dfe:	ee7c ca89 	vadd.f32	s25, s25, s18
 8011e02:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8011e06:	ee28 9a06 	vmul.f32	s18, s16, s12
 8011e0a:	ee7d da8c 	vadd.f32	s27, s27, s24
 8011e0e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8011e12:	ee22 ca86 	vmul.f32	s24, s5, s12
 8011e16:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8011e1a:	ee78 8a85 	vadd.f32	s17, s17, s10
 8011e1e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011e22:	ee62 5a06 	vmul.f32	s11, s4, s12
 8011e26:	ee21 6a86 	vmul.f32	s12, s3, s12
 8011e2a:	ee20 4a26 	vmul.f32	s8, s0, s13
 8011e2e:	ee63 ea26 	vmul.f32	s29, s6, s13
 8011e32:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8011e36:	ee22 5a26 	vmul.f32	s10, s4, s13
 8011e3a:	ee3d da24 	vadd.f32	s26, s26, s9
 8011e3e:	ee7c caa9 	vadd.f32	s25, s25, s19
 8011e42:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8011e46:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011e4a:	ed53 0a02 	vldr	s1, [r3, #-8]
 8011e4e:	ee68 fa26 	vmul.f32	s31, s16, s13
 8011e52:	ee7d da89 	vadd.f32	s27, s27, s18
 8011e56:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011e5a:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8011e5e:	ee22 faa6 	vmul.f32	s30, s5, s13
 8011e62:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011e66:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8011e6a:	ee61 6a26 	vmul.f32	s13, s2, s13
 8011e6e:	ee60 aa07 	vmul.f32	s21, s0, s14
 8011e72:	ee28 ca07 	vmul.f32	s24, s16, s14
 8011e76:	ee63 ba07 	vmul.f32	s23, s6, s14
 8011e7a:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8011e7e:	ee78 8a86 	vadd.f32	s17, s17, s12
 8011e82:	ee3d da24 	vadd.f32	s26, s26, s9
 8011e86:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011e8a:	ee7d daae 	vadd.f32	s27, s27, s29
 8011e8e:	ee22 9a07 	vmul.f32	s18, s4, s14
 8011e92:	ee62 ea87 	vmul.f32	s29, s5, s14
 8011e96:	ee61 5a87 	vmul.f32	s11, s3, s14
 8011e9a:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8011e9e:	ed13 0a01 	vldr	s0, [r3, #-4]
 8011ea2:	ee61 6a07 	vmul.f32	s13, s2, s14
 8011ea6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011eaa:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011eae:	ee20 7a87 	vmul.f32	s14, s1, s14
 8011eb2:	ee68 4a27 	vmul.f32	s9, s16, s15
 8011eb6:	ee3d da2a 	vadd.f32	s26, s26, s21
 8011eba:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8011ebe:	ee23 8a27 	vmul.f32	s16, s6, s15
 8011ec2:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8011ec6:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8011eca:	ee22 aa27 	vmul.f32	s20, s4, s15
 8011ece:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8011ed2:	ee21 6a27 	vmul.f32	s12, s2, s15
 8011ed6:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8011eda:	ee7d daae 	vadd.f32	s27, s27, s29
 8011ede:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8011ee2:	ee3b ba09 	vadd.f32	s22, s22, s18
 8011ee6:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8011eea:	ee73 3a87 	vadd.f32	s7, s7, s14
 8011eee:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011ef2:	f1bb 0b01 	subs.w	fp, fp, #1
 8011ef6:	f101 0120 	add.w	r1, r1, #32
 8011efa:	ee3d da24 	vadd.f32	s26, s26, s9
 8011efe:	ee7c ca88 	vadd.f32	s25, s25, s16
 8011f02:	ee3e ca04 	vadd.f32	s24, s28, s8
 8011f06:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8011f0a:	ee7b aa05 	vadd.f32	s21, s22, s10
 8011f0e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8011f12:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8011f16:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8011f1a:	f103 0320 	add.w	r3, r3, #32
 8011f1e:	f47f aed8 	bne.w	8011cd2 <arm_fir_f32+0xfe>
 8011f22:	eb09 0104 	add.w	r1, r9, r4
 8011f26:	46e3      	mov	fp, ip
 8011f28:	b3a2      	cbz	r2, 8011f94 <arm_fir_f32+0x3c0>
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	ecbb 6a01 	vldmia	fp!, {s12}
 8011f30:	ecf1 7a01 	vldmia	r1!, {s15}
 8011f34:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011f38:	ee22 4a86 	vmul.f32	s8, s5, s12
 8011f3c:	ee62 4a06 	vmul.f32	s9, s4, s12
 8011f40:	ee21 5a86 	vmul.f32	s10, s3, s12
 8011f44:	ee61 5a06 	vmul.f32	s11, s2, s12
 8011f48:	ee60 6a86 	vmul.f32	s13, s1, s12
 8011f4c:	ee20 7a06 	vmul.f32	s14, s0, s12
 8011f50:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011f54:	3b01      	subs	r3, #1
 8011f56:	ee3d da03 	vadd.f32	s26, s26, s6
 8011f5a:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011f5e:	eeb0 3a62 	vmov.f32	s6, s5
 8011f62:	ee3c ca24 	vadd.f32	s24, s24, s9
 8011f66:	eef0 2a42 	vmov.f32	s5, s4
 8011f6a:	ee7b ba85 	vadd.f32	s23, s23, s10
 8011f6e:	eeb0 2a61 	vmov.f32	s4, s3
 8011f72:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8011f76:	eef0 1a41 	vmov.f32	s3, s2
 8011f7a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8011f7e:	eeb0 1a60 	vmov.f32	s2, s1
 8011f82:	ee78 8a87 	vadd.f32	s17, s17, s14
 8011f86:	eef0 0a40 	vmov.f32	s1, s0
 8011f8a:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8011f92:	d1cb      	bne.n	8011f2c <arm_fir_f32+0x358>
 8011f94:	f1be 0e01 	subs.w	lr, lr, #1
 8011f98:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8011f9c:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8011fa0:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8011fa4:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8011fa8:	ed45 aa04 	vstr	s21, [r5, #-16]
 8011fac:	ed45 9a03 	vstr	s19, [r5, #-12]
 8011fb0:	ed45 8a02 	vstr	s17, [r5, #-8]
 8011fb4:	ed45 3a01 	vstr	s7, [r5, #-4]
 8011fb8:	f107 0720 	add.w	r7, r7, #32
 8011fbc:	f106 0620 	add.w	r6, r6, #32
 8011fc0:	f104 0420 	add.w	r4, r4, #32
 8011fc4:	f105 0520 	add.w	r5, r5, #32
 8011fc8:	f47f ae3c 	bne.w	8011c44 <arm_fir_f32+0x70>
 8011fcc:	9b02      	ldr	r3, [sp, #8]
 8011fce:	9800      	ldr	r0, [sp, #0]
 8011fd0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011fd4:	9907      	ldr	r1, [sp, #28]
 8011fd6:	015b      	lsls	r3, r3, #5
 8011fd8:	4652      	mov	r2, sl
 8011fda:	4418      	add	r0, r3
 8011fdc:	9000      	str	r0, [sp, #0]
 8011fde:	4419      	add	r1, r3
 8011fe0:	449c      	add	ip, r3
 8011fe2:	441a      	add	r2, r3
 8011fe4:	9b04      	ldr	r3, [sp, #16]
 8011fe6:	f013 0e07 	ands.w	lr, r3, #7
 8011fea:	d01f      	beq.n	801202c <arm_fir_f32+0x458>
 8011fec:	9f00      	ldr	r7, [sp, #0]
 8011fee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011ff2:	4676      	mov	r6, lr
 8011ff4:	4665      	mov	r5, ip
 8011ff6:	f851 3b04 	ldr.w	r3, [r1], #4
 8011ffa:	eddf 6a12 	vldr	s13, [pc, #72]	; 8012044 <arm_fir_f32+0x470>
 8011ffe:	f847 3b04 	str.w	r3, [r7], #4
 8012002:	4644      	mov	r4, r8
 8012004:	464b      	mov	r3, r9
 8012006:	4628      	mov	r0, r5
 8012008:	ecb0 7a01 	vldmia	r0!, {s14}
 801200c:	ecf4 7a01 	vldmia	r4!, {s15}
 8012010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012014:	3b01      	subs	r3, #1
 8012016:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801201a:	d1f5      	bne.n	8012008 <arm_fir_f32+0x434>
 801201c:	3e01      	subs	r6, #1
 801201e:	ece2 6a01 	vstmia	r2!, {s13}
 8012022:	f105 0504 	add.w	r5, r5, #4
 8012026:	d1e6      	bne.n	8011ff6 <arm_fir_f32+0x422>
 8012028:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801202c:	9b01      	ldr	r3, [sp, #4]
 801202e:	1e59      	subs	r1, r3, #1
 8012030:	9b03      	ldr	r3, [sp, #12]
 8012032:	088e      	lsrs	r6, r1, #2
 8012034:	685c      	ldr	r4, [r3, #4]
 8012036:	d020      	beq.n	801207a <arm_fir_f32+0x4a6>
 8012038:	f104 0210 	add.w	r2, r4, #16
 801203c:	f10c 0310 	add.w	r3, ip, #16
 8012040:	4630      	mov	r0, r6
 8012042:	e001      	b.n	8012048 <arm_fir_f32+0x474>
 8012044:	00000000 	.word	0x00000000
 8012048:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801204c:	f842 5c10 	str.w	r5, [r2, #-16]
 8012050:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8012054:	f842 5c0c 	str.w	r5, [r2, #-12]
 8012058:	f853 5c08 	ldr.w	r5, [r3, #-8]
 801205c:	f842 5c08 	str.w	r5, [r2, #-8]
 8012060:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012064:	f842 5c04 	str.w	r5, [r2, #-4]
 8012068:	3801      	subs	r0, #1
 801206a:	f103 0310 	add.w	r3, r3, #16
 801206e:	f102 0210 	add.w	r2, r2, #16
 8012072:	d1e9      	bne.n	8012048 <arm_fir_f32+0x474>
 8012074:	0133      	lsls	r3, r6, #4
 8012076:	441c      	add	r4, r3
 8012078:	449c      	add	ip, r3
 801207a:	f011 0303 	ands.w	r3, r1, #3
 801207e:	d006      	beq.n	801208e <arm_fir_f32+0x4ba>
 8012080:	4622      	mov	r2, r4
 8012082:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012086:	f842 1b04 	str.w	r1, [r2], #4
 801208a:	3b01      	subs	r3, #1
 801208c:	d1f9      	bne.n	8012082 <arm_fir_f32+0x4ae>
 801208e:	b009      	add	sp, #36	; 0x24
 8012090:	ecbd 8b10 	vpop	{d8-d15}
 8012094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012098:	46c3      	mov	fp, r8
 801209a:	e745      	b.n	8011f28 <arm_fir_f32+0x354>

0801209c <arm_cmplx_mag_f32>:
 801209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80120a4:	b084      	sub	sp, #16
 80120a6:	d07f      	beq.n	80121a8 <arm_cmplx_mag_f32+0x10c>
 80120a8:	2700      	movs	r7, #0
 80120aa:	f100 0420 	add.w	r4, r0, #32
 80120ae:	f101 0510 	add.w	r5, r1, #16
 80120b2:	4646      	mov	r6, r8
 80120b4:	e05a      	b.n	801216c <arm_cmplx_mag_f32+0xd0>
 80120b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80120ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80120be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c2:	f040 80a4 	bne.w	801220e <arm_cmplx_mag_f32+0x172>
 80120c6:	ed05 0a04 	vstr	s0, [r5, #-16]
 80120ca:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80120ce:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80120d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80120de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80120e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e6:	f2c0 808f 	blt.w	8012208 <arm_cmplx_mag_f32+0x16c>
 80120ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80120ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	f040 80af 	bne.w	8012258 <arm_cmplx_mag_f32+0x1bc>
 80120fa:	ed05 0a03 	vstr	s0, [r5, #-12]
 80120fe:	ed54 7a04 	vldr	s15, [r4, #-16]
 8012102:	ed14 0a03 	vldr	s0, [r4, #-12]
 8012106:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801210a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801210e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801211a:	db72      	blt.n	8012202 <arm_cmplx_mag_f32+0x166>
 801211c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012120:	eeb4 0a40 	vcmp.f32	s0, s0
 8012124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012128:	f040 808c 	bne.w	8012244 <arm_cmplx_mag_f32+0x1a8>
 801212c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8012130:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012134:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012138:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801213c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012140:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214c:	db20      	blt.n	8012190 <arm_cmplx_mag_f32+0xf4>
 801214e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012152:	eeb4 0a40 	vcmp.f32	s0, s0
 8012156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215a:	d169      	bne.n	8012230 <arm_cmplx_mag_f32+0x194>
 801215c:	3e01      	subs	r6, #1
 801215e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8012162:	f104 0420 	add.w	r4, r4, #32
 8012166:	f105 0510 	add.w	r5, r5, #16
 801216a:	d019      	beq.n	80121a0 <arm_cmplx_mag_f32+0x104>
 801216c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8012170:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8012174:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012178:	ee20 0a00 	vmul.f32	s0, s0, s0
 801217c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012188:	da95      	bge.n	80120b6 <arm_cmplx_mag_f32+0x1a>
 801218a:	f845 7c10 	str.w	r7, [r5, #-16]
 801218e:	e79c      	b.n	80120ca <arm_cmplx_mag_f32+0x2e>
 8012190:	3e01      	subs	r6, #1
 8012192:	f845 7c04 	str.w	r7, [r5, #-4]
 8012196:	f104 0420 	add.w	r4, r4, #32
 801219a:	f105 0510 	add.w	r5, r5, #16
 801219e:	d1e5      	bne.n	801216c <arm_cmplx_mag_f32+0xd0>
 80121a0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80121a4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80121a8:	f012 0503 	ands.w	r5, r2, #3
 80121ac:	d026      	beq.n	80121fc <arm_cmplx_mag_f32+0x160>
 80121ae:	2600      	movs	r6, #0
 80121b0:	f100 0408 	add.w	r4, r0, #8
 80121b4:	e00c      	b.n	80121d0 <arm_cmplx_mag_f32+0x134>
 80121b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80121ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80121be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c2:	d12e      	bne.n	8012222 <arm_cmplx_mag_f32+0x186>
 80121c4:	3d01      	subs	r5, #1
 80121c6:	ed01 0a01 	vstr	s0, [r1, #-4]
 80121ca:	f104 0408 	add.w	r4, r4, #8
 80121ce:	d015      	beq.n	80121fc <arm_cmplx_mag_f32+0x160>
 80121d0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80121d4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80121d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80121dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80121e0:	3104      	adds	r1, #4
 80121e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80121e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ee:	dae2      	bge.n	80121b6 <arm_cmplx_mag_f32+0x11a>
 80121f0:	3d01      	subs	r5, #1
 80121f2:	f841 6c04 	str.w	r6, [r1, #-4]
 80121f6:	f104 0408 	add.w	r4, r4, #8
 80121fa:	d1e9      	bne.n	80121d0 <arm_cmplx_mag_f32+0x134>
 80121fc:	b004      	add	sp, #16
 80121fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012202:	f845 7c08 	str.w	r7, [r5, #-8]
 8012206:	e793      	b.n	8012130 <arm_cmplx_mag_f32+0x94>
 8012208:	f845 7c0c 	str.w	r7, [r5, #-12]
 801220c:	e777      	b.n	80120fe <arm_cmplx_mag_f32+0x62>
 801220e:	eeb0 0a67 	vmov.f32	s0, s15
 8012212:	9203      	str	r2, [sp, #12]
 8012214:	9102      	str	r1, [sp, #8]
 8012216:	9001      	str	r0, [sp, #4]
 8012218:	f001 f850 	bl	80132bc <sqrtf>
 801221c:	a801      	add	r0, sp, #4
 801221e:	c807      	ldmia	r0, {r0, r1, r2}
 8012220:	e751      	b.n	80120c6 <arm_cmplx_mag_f32+0x2a>
 8012222:	eeb0 0a67 	vmov.f32	s0, s15
 8012226:	9101      	str	r1, [sp, #4]
 8012228:	f001 f848 	bl	80132bc <sqrtf>
 801222c:	9901      	ldr	r1, [sp, #4]
 801222e:	e7c9      	b.n	80121c4 <arm_cmplx_mag_f32+0x128>
 8012230:	eeb0 0a67 	vmov.f32	s0, s15
 8012234:	9203      	str	r2, [sp, #12]
 8012236:	9102      	str	r1, [sp, #8]
 8012238:	9001      	str	r0, [sp, #4]
 801223a:	f001 f83f 	bl	80132bc <sqrtf>
 801223e:	a801      	add	r0, sp, #4
 8012240:	c807      	ldmia	r0, {r0, r1, r2}
 8012242:	e78b      	b.n	801215c <arm_cmplx_mag_f32+0xc0>
 8012244:	eeb0 0a67 	vmov.f32	s0, s15
 8012248:	9203      	str	r2, [sp, #12]
 801224a:	9102      	str	r1, [sp, #8]
 801224c:	9001      	str	r0, [sp, #4]
 801224e:	f001 f835 	bl	80132bc <sqrtf>
 8012252:	a801      	add	r0, sp, #4
 8012254:	c807      	ldmia	r0, {r0, r1, r2}
 8012256:	e769      	b.n	801212c <arm_cmplx_mag_f32+0x90>
 8012258:	eeb0 0a67 	vmov.f32	s0, s15
 801225c:	9203      	str	r2, [sp, #12]
 801225e:	9102      	str	r1, [sp, #8]
 8012260:	9001      	str	r0, [sp, #4]
 8012262:	f001 f82b 	bl	80132bc <sqrtf>
 8012266:	a801      	add	r0, sp, #4
 8012268:	c807      	ldmia	r0, {r0, r1, r2}
 801226a:	e746      	b.n	80120fa <arm_cmplx_mag_f32+0x5e>

0801226c <arm_radix8_butterfly_f32>:
 801226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012270:	ed2d 8b10 	vpush	{d8-d15}
 8012274:	b09d      	sub	sp, #116	; 0x74
 8012276:	461c      	mov	r4, r3
 8012278:	ed9f bac8 	vldr	s22, [pc, #800]	; 801259c <arm_radix8_butterfly_f32+0x330>
 801227c:	921a      	str	r2, [sp, #104]	; 0x68
 801227e:	1d03      	adds	r3, r0, #4
 8012280:	4682      	mov	sl, r0
 8012282:	4689      	mov	r9, r1
 8012284:	468b      	mov	fp, r1
 8012286:	931b      	str	r3, [sp, #108]	; 0x6c
 8012288:	9400      	str	r4, [sp, #0]
 801228a:	469e      	mov	lr, r3
 801228c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8012290:	005a      	lsls	r2, r3, #1
 8012292:	18d6      	adds	r6, r2, r3
 8012294:	18f5      	adds	r5, r6, r3
 8012296:	9203      	str	r2, [sp, #12]
 8012298:	195a      	adds	r2, r3, r5
 801229a:	18d0      	adds	r0, r2, r3
 801229c:	00df      	lsls	r7, r3, #3
 801229e:	1819      	adds	r1, r3, r0
 80122a0:	463c      	mov	r4, r7
 80122a2:	9701      	str	r7, [sp, #4]
 80122a4:	4457      	add	r7, sl
 80122a6:	930c      	str	r3, [sp, #48]	; 0x30
 80122a8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80122ac:	011b      	lsls	r3, r3, #4
 80122ae:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 80122b2:	eb07 0c04 	add.w	ip, r7, r4
 80122b6:	9c00      	ldr	r4, [sp, #0]
 80122b8:	9302      	str	r3, [sp, #8]
 80122ba:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80122be:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80122c2:	3204      	adds	r2, #4
 80122c4:	3104      	adds	r1, #4
 80122c6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80122ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80122ce:	f04f 0800 	mov.w	r8, #0
 80122d2:	eddc 7a00 	vldr	s15, [ip]
 80122d6:	edd7 6a00 	vldr	s13, [r7]
 80122da:	edd6 3a00 	vldr	s7, [r6]
 80122de:	ed5e aa01 	vldr	s21, [lr, #-4]
 80122e2:	edd5 4a00 	vldr	s9, [r5]
 80122e6:	ed90 2a00 	vldr	s4, [r0]
 80122ea:	ed12 7a01 	vldr	s14, [r2, #-4]
 80122ee:	ed51 0a01 	vldr	s1, [r1, #-4]
 80122f2:	ee77 8a82 	vadd.f32	s17, s15, s4
 80122f6:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80122fa:	ee76 1a87 	vadd.f32	s3, s13, s14
 80122fe:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8012302:	ee31 6a84 	vadd.f32	s12, s3, s8
 8012306:	ee33 5a28 	vadd.f32	s10, s6, s17
 801230a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801230e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8012312:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012316:	ed4e 6a01 	vstr	s13, [lr, #-4]
 801231a:	ed85 5a00 	vstr	s10, [r5]
 801231e:	ed96 1a01 	vldr	s2, [r6, #4]
 8012322:	edd7 5a01 	vldr	s11, [r7, #4]
 8012326:	ed92 aa00 	vldr	s20, [r2]
 801232a:	ed91 6a00 	vldr	s12, [r1]
 801232e:	ed9e 9a00 	vldr	s18, [lr]
 8012332:	ed95 5a01 	vldr	s10, [r5, #4]
 8012336:	eddc 6a01 	vldr	s13, [ip, #4]
 801233a:	edd0 9a01 	vldr	s19, [r0, #4]
 801233e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8012342:	ee71 2a46 	vsub.f32	s5, s2, s12
 8012346:	ee75 3aca 	vsub.f32	s7, s11, s20
 801234a:	ee37 0a60 	vsub.f32	s0, s14, s1
 801234e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8012352:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012356:	ee73 2ae2 	vsub.f32	s5, s7, s5
 801235a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801235e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8012362:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8012366:	ee39 5a45 	vsub.f32	s10, s18, s10
 801236a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 801236e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8012372:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8012376:	ee31 6a06 	vadd.f32	s12, s2, s12
 801237a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801237e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8012382:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8012386:	ee67 7a0b 	vmul.f32	s15, s14, s22
 801238a:	ee33 3a68 	vsub.f32	s6, s6, s17
 801238e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8012392:	ee75 8a86 	vadd.f32	s17, s11, s12
 8012396:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801239a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801239e:	ee75 6a62 	vsub.f32	s13, s10, s5
 80123a2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80123a6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80123aa:	ee33 1a89 	vadd.f32	s2, s7, s18
 80123ae:	ee74 5ae0 	vsub.f32	s11, s9, s1
 80123b2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80123b6:	ee75 4a22 	vadd.f32	s9, s10, s5
 80123ba:	ee32 5a27 	vadd.f32	s10, s4, s15
 80123be:	ee72 7a67 	vsub.f32	s15, s4, s15
 80123c2:	ee33 8a06 	vadd.f32	s16, s6, s12
 80123c6:	ee75 2a87 	vadd.f32	s5, s11, s14
 80123ca:	ee31 9a28 	vadd.f32	s18, s2, s17
 80123ce:	ee33 6a46 	vsub.f32	s12, s6, s12
 80123d2:	ee74 0a61 	vsub.f32	s1, s8, s3
 80123d6:	ee33 2a80 	vadd.f32	s4, s7, s0
 80123da:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80123de:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80123e2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80123e6:	ee31 1a68 	vsub.f32	s2, s2, s17
 80123ea:	ee34 4a21 	vadd.f32	s8, s8, s3
 80123ee:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80123f2:	ee74 4a85 	vadd.f32	s9, s9, s10
 80123f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80123fa:	44d8      	add	r8, fp
 80123fc:	45c1      	cmp	r9, r8
 80123fe:	ed8e 9a00 	vstr	s18, [lr]
 8012402:	ed85 1a01 	vstr	s2, [r5, #4]
 8012406:	449e      	add	lr, r3
 8012408:	ed8c 8a00 	vstr	s16, [ip]
 801240c:	441d      	add	r5, r3
 801240e:	ed80 6a00 	vstr	s12, [r0]
 8012412:	edcc 0a01 	vstr	s1, [ip, #4]
 8012416:	ed80 4a01 	vstr	s8, [r0, #4]
 801241a:	449c      	add	ip, r3
 801241c:	ed87 2a00 	vstr	s4, [r7]
 8012420:	4418      	add	r0, r3
 8012422:	ed41 3a01 	vstr	s7, [r1, #-4]
 8012426:	ed42 2a01 	vstr	s5, [r2, #-4]
 801242a:	ed86 7a00 	vstr	s14, [r6]
 801242e:	ed87 3a01 	vstr	s6, [r7, #4]
 8012432:	edc1 4a00 	vstr	s9, [r1]
 8012436:	441f      	add	r7, r3
 8012438:	edc2 5a00 	vstr	s11, [r2]
 801243c:	4419      	add	r1, r3
 801243e:	edc6 6a01 	vstr	s13, [r6, #4]
 8012442:	441a      	add	r2, r3
 8012444:	441e      	add	r6, r3
 8012446:	f63f af44 	bhi.w	80122d2 <arm_radix8_butterfly_f32+0x66>
 801244a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801244c:	2907      	cmp	r1, #7
 801244e:	4620      	mov	r0, r4
 8012450:	f240 81e9 	bls.w	8012826 <arm_radix8_butterfly_f32+0x5ba>
 8012454:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8012458:	193e      	adds	r6, r7, r4
 801245a:	1935      	adds	r5, r6, r4
 801245c:	9c03      	ldr	r4, [sp, #12]
 801245e:	9000      	str	r0, [sp, #0]
 8012460:	4622      	mov	r2, r4
 8012462:	3201      	adds	r2, #1
 8012464:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012468:	9900      	ldr	r1, [sp, #0]
 801246a:	1828      	adds	r0, r5, r0
 801246c:	eb00 0e01 	add.w	lr, r0, r1
 8012470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012472:	440a      	add	r2, r1
 8012474:	eb04 0c01 	add.w	ip, r4, r1
 8012478:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 801247c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8012480:	9a00      	ldr	r2, [sp, #0]
 8012482:	940f      	str	r4, [sp, #60]	; 0x3c
 8012484:	00ed      	lsls	r5, r5, #3
 8012486:	9511      	str	r5, [sp, #68]	; 0x44
 8012488:	00d5      	lsls	r5, r2, #3
 801248a:	950d      	str	r5, [sp, #52]	; 0x34
 801248c:	9d01      	ldr	r5, [sp, #4]
 801248e:	3508      	adds	r5, #8
 8012490:	9516      	str	r5, [sp, #88]	; 0x58
 8012492:	9d02      	ldr	r5, [sp, #8]
 8012494:	3508      	adds	r5, #8
 8012496:	0114      	lsls	r4, r2, #4
 8012498:	9517      	str	r5, [sp, #92]	; 0x5c
 801249a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801249c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801249e:	940e      	str	r4, [sp, #56]	; 0x38
 80124a0:	00c0      	lsls	r0, r0, #3
 80124a2:	9010      	str	r0, [sp, #64]	; 0x40
 80124a4:	18aa      	adds	r2, r5, r2
 80124a6:	9207      	str	r2, [sp, #28]
 80124a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80124ac:	18aa      	adds	r2, r5, r2
 80124ae:	9208      	str	r2, [sp, #32]
 80124b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124b2:	18aa      	adds	r2, r5, r2
 80124b4:	9209      	str	r2, [sp, #36]	; 0x24
 80124b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80124ba:	f10e 0204 	add.w	r2, lr, #4
 80124be:	920a      	str	r2, [sp, #40]	; 0x28
 80124c0:	00c9      	lsls	r1, r1, #3
 80124c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124c4:	310c      	adds	r1, #12
 80124c6:	00f6      	lsls	r6, r6, #3
 80124c8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80124cc:	9114      	str	r1, [sp, #80]	; 0x50
 80124ce:	18a9      	adds	r1, r5, r2
 80124d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124d2:	9612      	str	r6, [sp, #72]	; 0x48
 80124d4:	00ff      	lsls	r7, r7, #3
 80124d6:	19ae      	adds	r6, r5, r6
 80124d8:	3008      	adds	r0, #8
 80124da:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80124de:	9606      	str	r6, [sp, #24]
 80124e0:	9019      	str	r0, [sp, #100]	; 0x64
 80124e2:	18aa      	adds	r2, r5, r2
 80124e4:	0164      	lsls	r4, r4, #5
 80124e6:	19ee      	adds	r6, r5, r7
 80124e8:	f10c 000c 	add.w	r0, ip, #12
 80124ec:	9713      	str	r7, [sp, #76]	; 0x4c
 80124ee:	9604      	str	r6, [sp, #16]
 80124f0:	9015      	str	r0, [sp, #84]	; 0x54
 80124f2:	9103      	str	r1, [sp, #12]
 80124f4:	9205      	str	r2, [sp, #20]
 80124f6:	f104 0208 	add.w	r2, r4, #8
 80124fa:	9218      	str	r2, [sp, #96]	; 0x60
 80124fc:	f04f 0801 	mov.w	r8, #1
 8012500:	2200      	movs	r2, #0
 8012502:	f102 0108 	add.w	r1, r2, #8
 8012506:	460f      	mov	r7, r1
 8012508:	910b      	str	r1, [sp, #44]	; 0x2c
 801250a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801250c:	188e      	adds	r6, r1, r2
 801250e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012510:	188d      	adds	r5, r1, r2
 8012512:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012514:	188c      	adds	r4, r1, r2
 8012516:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012518:	1888      	adds	r0, r1, r2
 801251a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801251c:	eb01 0c02 	add.w	ip, r1, r2
 8012520:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012522:	440a      	add	r2, r1
 8012524:	9903      	ldr	r1, [sp, #12]
 8012526:	edd1 fa00 	vldr	s31, [r1]
 801252a:	9905      	ldr	r1, [sp, #20]
 801252c:	ed91 fa00 	vldr	s30, [r1]
 8012530:	9904      	ldr	r1, [sp, #16]
 8012532:	edd1 ea00 	vldr	s29, [r1]
 8012536:	9906      	ldr	r1, [sp, #24]
 8012538:	ed91 ea00 	vldr	s28, [r1]
 801253c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801253e:	edd1 da00 	vldr	s27, [r1]
 8012542:	9908      	ldr	r1, [sp, #32]
 8012544:	ed91 da00 	vldr	s26, [r1]
 8012548:	9907      	ldr	r1, [sp, #28]
 801254a:	edd1 ca00 	vldr	s25, [r1]
 801254e:	9903      	ldr	r1, [sp, #12]
 8012550:	ed91 ca01 	vldr	s24, [r1, #4]
 8012554:	9905      	ldr	r1, [sp, #20]
 8012556:	edd1 ba01 	vldr	s23, [r1, #4]
 801255a:	9904      	ldr	r1, [sp, #16]
 801255c:	edd1 aa01 	vldr	s21, [r1, #4]
 8012560:	9906      	ldr	r1, [sp, #24]
 8012562:	ed91 aa01 	vldr	s20, [r1, #4]
 8012566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012568:	edd1 7a01 	vldr	s15, [r1, #4]
 801256c:	9908      	ldr	r1, [sp, #32]
 801256e:	edcd 7a00 	vstr	s15, [sp]
 8012572:	edd1 7a01 	vldr	s15, [r1, #4]
 8012576:	9907      	ldr	r1, [sp, #28]
 8012578:	edcd 7a01 	vstr	s15, [sp, #4]
 801257c:	edd1 7a01 	vldr	s15, [r1, #4]
 8012580:	eb0a 0e07 	add.w	lr, sl, r7
 8012584:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012586:	edcd 7a02 	vstr	s15, [sp, #8]
 801258a:	eb0c 010a 	add.w	r1, ip, sl
 801258e:	4456      	add	r6, sl
 8012590:	4455      	add	r5, sl
 8012592:	4454      	add	r4, sl
 8012594:	4450      	add	r0, sl
 8012596:	4452      	add	r2, sl
 8012598:	46c4      	mov	ip, r8
 801259a:	e001      	b.n	80125a0 <arm_radix8_butterfly_f32+0x334>
 801259c:	3f3504f3 	.word	0x3f3504f3
 80125a0:	ed96 5a00 	vldr	s10, [r6]
 80125a4:	ed52 9a01 	vldr	s19, [r2, #-4]
 80125a8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80125ac:	edd0 7a00 	vldr	s15, [r0]
 80125b0:	ed17 7a01 	vldr	s14, [r7, #-4]
 80125b4:	edde 3a00 	vldr	s7, [lr]
 80125b8:	ed94 3a00 	vldr	s6, [r4]
 80125bc:	ed95 2a00 	vldr	s4, [r5]
 80125c0:	ed9e 0a01 	vldr	s0, [lr, #4]
 80125c4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80125c8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80125cc:	ee33 4a29 	vadd.f32	s8, s6, s19
 80125d0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80125d4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80125d8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80125dc:	ee32 2a46 	vsub.f32	s4, s4, s12
 80125e0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80125e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125e8:	ed8e 6a00 	vstr	s12, [lr]
 80125ec:	edd0 8a01 	vldr	s17, [r0, #4]
 80125f0:	ed95 9a01 	vldr	s18, [r5, #4]
 80125f4:	edd1 2a00 	vldr	s5, [r1]
 80125f8:	ed97 7a00 	vldr	s14, [r7]
 80125fc:	edd4 0a01 	vldr	s1, [r4, #4]
 8012600:	ed96 6a01 	vldr	s12, [r6, #4]
 8012604:	edd2 5a00 	vldr	s11, [r2]
 8012608:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801260c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8012610:	ee39 5a62 	vsub.f32	s10, s18, s5
 8012614:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8012618:	ee38 4a44 	vsub.f32	s8, s16, s8
 801261c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8012620:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8012624:	ee79 2a22 	vadd.f32	s5, s18, s5
 8012628:	ee75 8a69 	vsub.f32	s17, s10, s19
 801262c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8012630:	ee35 5a29 	vadd.f32	s10, s10, s19
 8012634:	ee72 7a67 	vsub.f32	s15, s4, s15
 8012638:	ee30 2a06 	vadd.f32	s4, s0, s12
 801263c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8012640:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8012644:	ee32 9a08 	vadd.f32	s18, s4, s16
 8012648:	ee68 8a8b 	vmul.f32	s17, s17, s22
 801264c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8012650:	ee71 4a64 	vsub.f32	s9, s2, s9
 8012654:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8012658:	ee32 1a87 	vadd.f32	s2, s5, s14
 801265c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8012660:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8012664:	ee30 6a46 	vsub.f32	s12, s0, s12
 8012668:	ee73 0a29 	vadd.f32	s1, s6, s19
 801266c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8012670:	ee33 3a69 	vsub.f32	s6, s6, s19
 8012674:	ee32 7a64 	vsub.f32	s14, s4, s9
 8012678:	ee73 9aa7 	vadd.f32	s19, s7, s15
 801267c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8012680:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8012684:	ee75 8a85 	vadd.f32	s17, s11, s10
 8012688:	ee74 3a22 	vadd.f32	s7, s8, s5
 801268c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8012690:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8012694:	ee79 1a41 	vsub.f32	s3, s18, s2
 8012698:	ee39 8aa8 	vadd.f32	s16, s19, s17
 801269c:	ee76 5a43 	vsub.f32	s11, s12, s6
 80126a0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80126a4:	ee72 4a24 	vadd.f32	s9, s4, s9
 80126a8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80126ac:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80126b0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80126b4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80126b8:	ee36 6a03 	vadd.f32	s12, s12, s6
 80126bc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80126c0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80126c4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80126c8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80126cc:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80126d0:	ee39 1a01 	vadd.f32	s2, s18, s2
 80126d4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80126d8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80126dc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80126e0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80126e4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80126e8:	ee35 3a03 	vadd.f32	s6, s10, s6
 80126ec:	ee72 6a66 	vsub.f32	s13, s4, s13
 80126f0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80126f4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80126f8:	ed9d 4a02 	vldr	s8, [sp, #8]
 80126fc:	ed8e 1a01 	vstr	s2, [lr, #4]
 8012700:	ee77 3a63 	vsub.f32	s7, s14, s7
 8012704:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8012708:	ed9d 7a01 	vldr	s14, [sp, #4]
 801270c:	ed86 3a00 	vstr	s6, [r6]
 8012710:	ee30 9a89 	vadd.f32	s18, s1, s18
 8012714:	ee32 2a05 	vadd.f32	s4, s4, s10
 8012718:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801271c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8012720:	ee67 2a22 	vmul.f32	s5, s14, s5
 8012724:	ee64 1a00 	vmul.f32	s3, s8, s0
 8012728:	ee27 7a24 	vmul.f32	s14, s14, s9
 801272c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8012730:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8012734:	ee64 8a28 	vmul.f32	s17, s8, s17
 8012738:	ed9d 4a00 	vldr	s8, [sp]
 801273c:	edc6 6a01 	vstr	s13, [r6, #4]
 8012740:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8012744:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8012748:	ee64 9a29 	vmul.f32	s19, s8, s19
 801274c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8012750:	ee30 7a87 	vadd.f32	s14, s1, s14
 8012754:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012758:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 801275c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8012760:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8012764:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8012768:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 801276c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8012770:	ee75 1a21 	vadd.f32	s3, s10, s3
 8012774:	ee30 0a68 	vsub.f32	s0, s0, s17
 8012778:	ee75 9ae9 	vsub.f32	s19, s11, s19
 801277c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8012780:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012784:	44dc      	add	ip, fp
 8012786:	45e1      	cmp	r9, ip
 8012788:	ed84 9a00 	vstr	s18, [r4]
 801278c:	edc4 3a01 	vstr	s7, [r4, #4]
 8012790:	449e      	add	lr, r3
 8012792:	ed02 7a01 	vstr	s14, [r2, #-4]
 8012796:	edc2 2a00 	vstr	s5, [r2]
 801279a:	441e      	add	r6, r3
 801279c:	ed85 2a00 	vstr	s4, [r5]
 80127a0:	ed85 8a01 	vstr	s16, [r5, #4]
 80127a4:	441c      	add	r4, r3
 80127a6:	ed47 1a01 	vstr	s3, [r7, #-4]
 80127aa:	ed87 0a00 	vstr	s0, [r7]
 80127ae:	441a      	add	r2, r3
 80127b0:	ed41 4a01 	vstr	s9, [r1, #-4]
 80127b4:	edc1 9a00 	vstr	s19, [r1]
 80127b8:	441d      	add	r5, r3
 80127ba:	edc0 0a00 	vstr	s1, [r0]
 80127be:	441f      	add	r7, r3
 80127c0:	ed80 6a01 	vstr	s12, [r0, #4]
 80127c4:	4419      	add	r1, r3
 80127c6:	4418      	add	r0, r3
 80127c8:	f63f aeea 	bhi.w	80125a0 <arm_radix8_butterfly_f32+0x334>
 80127cc:	9a03      	ldr	r2, [sp, #12]
 80127ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127d0:	440a      	add	r2, r1
 80127d2:	9203      	str	r2, [sp, #12]
 80127d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80127d6:	9a05      	ldr	r2, [sp, #20]
 80127d8:	440a      	add	r2, r1
 80127da:	9205      	str	r2, [sp, #20]
 80127dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80127de:	9a04      	ldr	r2, [sp, #16]
 80127e0:	440a      	add	r2, r1
 80127e2:	9204      	str	r2, [sp, #16]
 80127e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80127e6:	9a06      	ldr	r2, [sp, #24]
 80127e8:	440a      	add	r2, r1
 80127ea:	9206      	str	r2, [sp, #24]
 80127ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127f0:	440a      	add	r2, r1
 80127f2:	9209      	str	r2, [sp, #36]	; 0x24
 80127f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80127f6:	9a08      	ldr	r2, [sp, #32]
 80127f8:	440a      	add	r2, r1
 80127fa:	9208      	str	r2, [sp, #32]
 80127fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80127fe:	9a07      	ldr	r2, [sp, #28]
 8012800:	440a      	add	r2, r1
 8012802:	9207      	str	r2, [sp, #28]
 8012804:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012808:	f108 0801 	add.w	r8, r8, #1
 801280c:	3208      	adds	r2, #8
 801280e:	4588      	cmp	r8, r1
 8012810:	920a      	str	r2, [sp, #40]	; 0x28
 8012812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012814:	f47f ae75 	bne.w	8012502 <arm_radix8_butterfly_f32+0x296>
 8012818:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	46c3      	mov	fp, r8
 8012820:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8012824:	e532      	b.n	801228c <arm_radix8_butterfly_f32+0x20>
 8012826:	b01d      	add	sp, #116	; 0x74
 8012828:	ecbd 8b10 	vpop	{d8-d15}
 801282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012830 <__errno>:
 8012830:	4b01      	ldr	r3, [pc, #4]	; (8012838 <__errno+0x8>)
 8012832:	6818      	ldr	r0, [r3, #0]
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	20000090 	.word	0x20000090

0801283c <__libc_init_array>:
 801283c:	b570      	push	{r4, r5, r6, lr}
 801283e:	4e0d      	ldr	r6, [pc, #52]	; (8012874 <__libc_init_array+0x38>)
 8012840:	4c0d      	ldr	r4, [pc, #52]	; (8012878 <__libc_init_array+0x3c>)
 8012842:	1ba4      	subs	r4, r4, r6
 8012844:	10a4      	asrs	r4, r4, #2
 8012846:	2500      	movs	r5, #0
 8012848:	42a5      	cmp	r5, r4
 801284a:	d109      	bne.n	8012860 <__libc_init_array+0x24>
 801284c:	4e0b      	ldr	r6, [pc, #44]	; (801287c <__libc_init_array+0x40>)
 801284e:	4c0c      	ldr	r4, [pc, #48]	; (8012880 <__libc_init_array+0x44>)
 8012850:	f000 ffd0 	bl	80137f4 <_init>
 8012854:	1ba4      	subs	r4, r4, r6
 8012856:	10a4      	asrs	r4, r4, #2
 8012858:	2500      	movs	r5, #0
 801285a:	42a5      	cmp	r5, r4
 801285c:	d105      	bne.n	801286a <__libc_init_array+0x2e>
 801285e:	bd70      	pop	{r4, r5, r6, pc}
 8012860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012864:	4798      	blx	r3
 8012866:	3501      	adds	r5, #1
 8012868:	e7ee      	b.n	8012848 <__libc_init_array+0xc>
 801286a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801286e:	4798      	blx	r3
 8012870:	3501      	adds	r5, #1
 8012872:	e7f2      	b.n	801285a <__libc_init_array+0x1e>
 8012874:	08015b74 	.word	0x08015b74
 8012878:	08015b74 	.word	0x08015b74
 801287c:	08015b74 	.word	0x08015b74
 8012880:	08015b78 	.word	0x08015b78

08012884 <__locale_ctype_ptr>:
 8012884:	4b04      	ldr	r3, [pc, #16]	; (8012898 <__locale_ctype_ptr+0x14>)
 8012886:	4a05      	ldr	r2, [pc, #20]	; (801289c <__locale_ctype_ptr+0x18>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	2b00      	cmp	r3, #0
 801288e:	bf08      	it	eq
 8012890:	4613      	moveq	r3, r2
 8012892:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012896:	4770      	bx	lr
 8012898:	20000090 	.word	0x20000090
 801289c:	200000f4 	.word	0x200000f4

080128a0 <malloc>:
 80128a0:	4b02      	ldr	r3, [pc, #8]	; (80128ac <malloc+0xc>)
 80128a2:	4601      	mov	r1, r0
 80128a4:	6818      	ldr	r0, [r3, #0]
 80128a6:	f000 b87f 	b.w	80129a8 <_malloc_r>
 80128aa:	bf00      	nop
 80128ac:	20000090 	.word	0x20000090

080128b0 <free>:
 80128b0:	4b02      	ldr	r3, [pc, #8]	; (80128bc <free+0xc>)
 80128b2:	4601      	mov	r1, r0
 80128b4:	6818      	ldr	r0, [r3, #0]
 80128b6:	f000 b829 	b.w	801290c <_free_r>
 80128ba:	bf00      	nop
 80128bc:	20000090 	.word	0x20000090

080128c0 <__ascii_mbtowc>:
 80128c0:	b082      	sub	sp, #8
 80128c2:	b901      	cbnz	r1, 80128c6 <__ascii_mbtowc+0x6>
 80128c4:	a901      	add	r1, sp, #4
 80128c6:	b142      	cbz	r2, 80128da <__ascii_mbtowc+0x1a>
 80128c8:	b14b      	cbz	r3, 80128de <__ascii_mbtowc+0x1e>
 80128ca:	7813      	ldrb	r3, [r2, #0]
 80128cc:	600b      	str	r3, [r1, #0]
 80128ce:	7812      	ldrb	r2, [r2, #0]
 80128d0:	1c10      	adds	r0, r2, #0
 80128d2:	bf18      	it	ne
 80128d4:	2001      	movne	r0, #1
 80128d6:	b002      	add	sp, #8
 80128d8:	4770      	bx	lr
 80128da:	4610      	mov	r0, r2
 80128dc:	e7fb      	b.n	80128d6 <__ascii_mbtowc+0x16>
 80128de:	f06f 0001 	mvn.w	r0, #1
 80128e2:	e7f8      	b.n	80128d6 <__ascii_mbtowc+0x16>

080128e4 <memcpy>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	1e43      	subs	r3, r0, #1
 80128e8:	440a      	add	r2, r1
 80128ea:	4291      	cmp	r1, r2
 80128ec:	d100      	bne.n	80128f0 <memcpy+0xc>
 80128ee:	bd10      	pop	{r4, pc}
 80128f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128f8:	e7f7      	b.n	80128ea <memcpy+0x6>

080128fa <memset>:
 80128fa:	4402      	add	r2, r0
 80128fc:	4603      	mov	r3, r0
 80128fe:	4293      	cmp	r3, r2
 8012900:	d100      	bne.n	8012904 <memset+0xa>
 8012902:	4770      	bx	lr
 8012904:	f803 1b01 	strb.w	r1, [r3], #1
 8012908:	e7f9      	b.n	80128fe <memset+0x4>
	...

0801290c <_free_r>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	4605      	mov	r5, r0
 8012910:	2900      	cmp	r1, #0
 8012912:	d045      	beq.n	80129a0 <_free_r+0x94>
 8012914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012918:	1f0c      	subs	r4, r1, #4
 801291a:	2b00      	cmp	r3, #0
 801291c:	bfb8      	it	lt
 801291e:	18e4      	addlt	r4, r4, r3
 8012920:	f000 f927 	bl	8012b72 <__malloc_lock>
 8012924:	4a1f      	ldr	r2, [pc, #124]	; (80129a4 <_free_r+0x98>)
 8012926:	6813      	ldr	r3, [r2, #0]
 8012928:	4610      	mov	r0, r2
 801292a:	b933      	cbnz	r3, 801293a <_free_r+0x2e>
 801292c:	6063      	str	r3, [r4, #4]
 801292e:	6014      	str	r4, [r2, #0]
 8012930:	4628      	mov	r0, r5
 8012932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012936:	f000 b91d 	b.w	8012b74 <__malloc_unlock>
 801293a:	42a3      	cmp	r3, r4
 801293c:	d90c      	bls.n	8012958 <_free_r+0x4c>
 801293e:	6821      	ldr	r1, [r4, #0]
 8012940:	1862      	adds	r2, r4, r1
 8012942:	4293      	cmp	r3, r2
 8012944:	bf04      	itt	eq
 8012946:	681a      	ldreq	r2, [r3, #0]
 8012948:	685b      	ldreq	r3, [r3, #4]
 801294a:	6063      	str	r3, [r4, #4]
 801294c:	bf04      	itt	eq
 801294e:	1852      	addeq	r2, r2, r1
 8012950:	6022      	streq	r2, [r4, #0]
 8012952:	6004      	str	r4, [r0, #0]
 8012954:	e7ec      	b.n	8012930 <_free_r+0x24>
 8012956:	4613      	mov	r3, r2
 8012958:	685a      	ldr	r2, [r3, #4]
 801295a:	b10a      	cbz	r2, 8012960 <_free_r+0x54>
 801295c:	42a2      	cmp	r2, r4
 801295e:	d9fa      	bls.n	8012956 <_free_r+0x4a>
 8012960:	6819      	ldr	r1, [r3, #0]
 8012962:	1858      	adds	r0, r3, r1
 8012964:	42a0      	cmp	r0, r4
 8012966:	d10b      	bne.n	8012980 <_free_r+0x74>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	4401      	add	r1, r0
 801296c:	1858      	adds	r0, r3, r1
 801296e:	4282      	cmp	r2, r0
 8012970:	6019      	str	r1, [r3, #0]
 8012972:	d1dd      	bne.n	8012930 <_free_r+0x24>
 8012974:	6810      	ldr	r0, [r2, #0]
 8012976:	6852      	ldr	r2, [r2, #4]
 8012978:	605a      	str	r2, [r3, #4]
 801297a:	4401      	add	r1, r0
 801297c:	6019      	str	r1, [r3, #0]
 801297e:	e7d7      	b.n	8012930 <_free_r+0x24>
 8012980:	d902      	bls.n	8012988 <_free_r+0x7c>
 8012982:	230c      	movs	r3, #12
 8012984:	602b      	str	r3, [r5, #0]
 8012986:	e7d3      	b.n	8012930 <_free_r+0x24>
 8012988:	6820      	ldr	r0, [r4, #0]
 801298a:	1821      	adds	r1, r4, r0
 801298c:	428a      	cmp	r2, r1
 801298e:	bf04      	itt	eq
 8012990:	6811      	ldreq	r1, [r2, #0]
 8012992:	6852      	ldreq	r2, [r2, #4]
 8012994:	6062      	str	r2, [r4, #4]
 8012996:	bf04      	itt	eq
 8012998:	1809      	addeq	r1, r1, r0
 801299a:	6021      	streq	r1, [r4, #0]
 801299c:	605c      	str	r4, [r3, #4]
 801299e:	e7c7      	b.n	8012930 <_free_r+0x24>
 80129a0:	bd38      	pop	{r3, r4, r5, pc}
 80129a2:	bf00      	nop
 80129a4:	200004ec 	.word	0x200004ec

080129a8 <_malloc_r>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	1ccd      	adds	r5, r1, #3
 80129ac:	f025 0503 	bic.w	r5, r5, #3
 80129b0:	3508      	adds	r5, #8
 80129b2:	2d0c      	cmp	r5, #12
 80129b4:	bf38      	it	cc
 80129b6:	250c      	movcc	r5, #12
 80129b8:	2d00      	cmp	r5, #0
 80129ba:	4606      	mov	r6, r0
 80129bc:	db01      	blt.n	80129c2 <_malloc_r+0x1a>
 80129be:	42a9      	cmp	r1, r5
 80129c0:	d903      	bls.n	80129ca <_malloc_r+0x22>
 80129c2:	230c      	movs	r3, #12
 80129c4:	6033      	str	r3, [r6, #0]
 80129c6:	2000      	movs	r0, #0
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	f000 f8d2 	bl	8012b72 <__malloc_lock>
 80129ce:	4a21      	ldr	r2, [pc, #132]	; (8012a54 <_malloc_r+0xac>)
 80129d0:	6814      	ldr	r4, [r2, #0]
 80129d2:	4621      	mov	r1, r4
 80129d4:	b991      	cbnz	r1, 80129fc <_malloc_r+0x54>
 80129d6:	4c20      	ldr	r4, [pc, #128]	; (8012a58 <_malloc_r+0xb0>)
 80129d8:	6823      	ldr	r3, [r4, #0]
 80129da:	b91b      	cbnz	r3, 80129e4 <_malloc_r+0x3c>
 80129dc:	4630      	mov	r0, r6
 80129de:	f000 f83d 	bl	8012a5c <_sbrk_r>
 80129e2:	6020      	str	r0, [r4, #0]
 80129e4:	4629      	mov	r1, r5
 80129e6:	4630      	mov	r0, r6
 80129e8:	f000 f838 	bl	8012a5c <_sbrk_r>
 80129ec:	1c43      	adds	r3, r0, #1
 80129ee:	d124      	bne.n	8012a3a <_malloc_r+0x92>
 80129f0:	230c      	movs	r3, #12
 80129f2:	6033      	str	r3, [r6, #0]
 80129f4:	4630      	mov	r0, r6
 80129f6:	f000 f8bd 	bl	8012b74 <__malloc_unlock>
 80129fa:	e7e4      	b.n	80129c6 <_malloc_r+0x1e>
 80129fc:	680b      	ldr	r3, [r1, #0]
 80129fe:	1b5b      	subs	r3, r3, r5
 8012a00:	d418      	bmi.n	8012a34 <_malloc_r+0x8c>
 8012a02:	2b0b      	cmp	r3, #11
 8012a04:	d90f      	bls.n	8012a26 <_malloc_r+0x7e>
 8012a06:	600b      	str	r3, [r1, #0]
 8012a08:	50cd      	str	r5, [r1, r3]
 8012a0a:	18cc      	adds	r4, r1, r3
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	f000 f8b1 	bl	8012b74 <__malloc_unlock>
 8012a12:	f104 000b 	add.w	r0, r4, #11
 8012a16:	1d23      	adds	r3, r4, #4
 8012a18:	f020 0007 	bic.w	r0, r0, #7
 8012a1c:	1ac3      	subs	r3, r0, r3
 8012a1e:	d0d3      	beq.n	80129c8 <_malloc_r+0x20>
 8012a20:	425a      	negs	r2, r3
 8012a22:	50e2      	str	r2, [r4, r3]
 8012a24:	e7d0      	b.n	80129c8 <_malloc_r+0x20>
 8012a26:	428c      	cmp	r4, r1
 8012a28:	684b      	ldr	r3, [r1, #4]
 8012a2a:	bf16      	itet	ne
 8012a2c:	6063      	strne	r3, [r4, #4]
 8012a2e:	6013      	streq	r3, [r2, #0]
 8012a30:	460c      	movne	r4, r1
 8012a32:	e7eb      	b.n	8012a0c <_malloc_r+0x64>
 8012a34:	460c      	mov	r4, r1
 8012a36:	6849      	ldr	r1, [r1, #4]
 8012a38:	e7cc      	b.n	80129d4 <_malloc_r+0x2c>
 8012a3a:	1cc4      	adds	r4, r0, #3
 8012a3c:	f024 0403 	bic.w	r4, r4, #3
 8012a40:	42a0      	cmp	r0, r4
 8012a42:	d005      	beq.n	8012a50 <_malloc_r+0xa8>
 8012a44:	1a21      	subs	r1, r4, r0
 8012a46:	4630      	mov	r0, r6
 8012a48:	f000 f808 	bl	8012a5c <_sbrk_r>
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	d0cf      	beq.n	80129f0 <_malloc_r+0x48>
 8012a50:	6025      	str	r5, [r4, #0]
 8012a52:	e7db      	b.n	8012a0c <_malloc_r+0x64>
 8012a54:	200004ec 	.word	0x200004ec
 8012a58:	200004f0 	.word	0x200004f0

08012a5c <_sbrk_r>:
 8012a5c:	b538      	push	{r3, r4, r5, lr}
 8012a5e:	4c06      	ldr	r4, [pc, #24]	; (8012a78 <_sbrk_r+0x1c>)
 8012a60:	2300      	movs	r3, #0
 8012a62:	4605      	mov	r5, r0
 8012a64:	4608      	mov	r0, r1
 8012a66:	6023      	str	r3, [r4, #0]
 8012a68:	f7ef ff7c 	bl	8002964 <_sbrk>
 8012a6c:	1c43      	adds	r3, r0, #1
 8012a6e:	d102      	bne.n	8012a76 <_sbrk_r+0x1a>
 8012a70:	6823      	ldr	r3, [r4, #0]
 8012a72:	b103      	cbz	r3, 8012a76 <_sbrk_r+0x1a>
 8012a74:	602b      	str	r3, [r5, #0]
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	20003cc4 	.word	0x20003cc4

08012a7c <sniprintf>:
 8012a7c:	b40c      	push	{r2, r3}
 8012a7e:	b530      	push	{r4, r5, lr}
 8012a80:	4b17      	ldr	r3, [pc, #92]	; (8012ae0 <sniprintf+0x64>)
 8012a82:	1e0c      	subs	r4, r1, #0
 8012a84:	b09d      	sub	sp, #116	; 0x74
 8012a86:	681d      	ldr	r5, [r3, #0]
 8012a88:	da08      	bge.n	8012a9c <sniprintf+0x20>
 8012a8a:	238b      	movs	r3, #139	; 0x8b
 8012a8c:	602b      	str	r3, [r5, #0]
 8012a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a92:	b01d      	add	sp, #116	; 0x74
 8012a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a98:	b002      	add	sp, #8
 8012a9a:	4770      	bx	lr
 8012a9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012aa4:	bf14      	ite	ne
 8012aa6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012aaa:	4623      	moveq	r3, r4
 8012aac:	9304      	str	r3, [sp, #16]
 8012aae:	9307      	str	r3, [sp, #28]
 8012ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ab4:	9002      	str	r0, [sp, #8]
 8012ab6:	9006      	str	r0, [sp, #24]
 8012ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012abe:	ab21      	add	r3, sp, #132	; 0x84
 8012ac0:	a902      	add	r1, sp, #8
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	9301      	str	r3, [sp, #4]
 8012ac6:	f000 f8b1 	bl	8012c2c <_svfiprintf_r>
 8012aca:	1c43      	adds	r3, r0, #1
 8012acc:	bfbc      	itt	lt
 8012ace:	238b      	movlt	r3, #139	; 0x8b
 8012ad0:	602b      	strlt	r3, [r5, #0]
 8012ad2:	2c00      	cmp	r4, #0
 8012ad4:	d0dd      	beq.n	8012a92 <sniprintf+0x16>
 8012ad6:	9b02      	ldr	r3, [sp, #8]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
 8012adc:	e7d9      	b.n	8012a92 <sniprintf+0x16>
 8012ade:	bf00      	nop
 8012ae0:	20000090 	.word	0x20000090

08012ae4 <_vsniprintf_r>:
 8012ae4:	b530      	push	{r4, r5, lr}
 8012ae6:	1e14      	subs	r4, r2, #0
 8012ae8:	4605      	mov	r5, r0
 8012aea:	b09b      	sub	sp, #108	; 0x6c
 8012aec:	4618      	mov	r0, r3
 8012aee:	da05      	bge.n	8012afc <_vsniprintf_r+0x18>
 8012af0:	238b      	movs	r3, #139	; 0x8b
 8012af2:	602b      	str	r3, [r5, #0]
 8012af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012af8:	b01b      	add	sp, #108	; 0x6c
 8012afa:	bd30      	pop	{r4, r5, pc}
 8012afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012b00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012b04:	bf14      	ite	ne
 8012b06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012b0a:	4623      	moveq	r3, r4
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b14:	9100      	str	r1, [sp, #0]
 8012b16:	9104      	str	r1, [sp, #16]
 8012b18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b20:	4669      	mov	r1, sp
 8012b22:	4628      	mov	r0, r5
 8012b24:	f000 f882 	bl	8012c2c <_svfiprintf_r>
 8012b28:	1c43      	adds	r3, r0, #1
 8012b2a:	bfbc      	itt	lt
 8012b2c:	238b      	movlt	r3, #139	; 0x8b
 8012b2e:	602b      	strlt	r3, [r5, #0]
 8012b30:	2c00      	cmp	r4, #0
 8012b32:	d0e1      	beq.n	8012af8 <_vsniprintf_r+0x14>
 8012b34:	9b00      	ldr	r3, [sp, #0]
 8012b36:	2200      	movs	r2, #0
 8012b38:	701a      	strb	r2, [r3, #0]
 8012b3a:	e7dd      	b.n	8012af8 <_vsniprintf_r+0x14>

08012b3c <vsniprintf>:
 8012b3c:	b507      	push	{r0, r1, r2, lr}
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	4613      	mov	r3, r2
 8012b42:	460a      	mov	r2, r1
 8012b44:	4601      	mov	r1, r0
 8012b46:	4803      	ldr	r0, [pc, #12]	; (8012b54 <vsniprintf+0x18>)
 8012b48:	6800      	ldr	r0, [r0, #0]
 8012b4a:	f7ff ffcb 	bl	8012ae4 <_vsniprintf_r>
 8012b4e:	b003      	add	sp, #12
 8012b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b54:	20000090 	.word	0x20000090

08012b58 <__ascii_wctomb>:
 8012b58:	b149      	cbz	r1, 8012b6e <__ascii_wctomb+0x16>
 8012b5a:	2aff      	cmp	r2, #255	; 0xff
 8012b5c:	bf85      	ittet	hi
 8012b5e:	238a      	movhi	r3, #138	; 0x8a
 8012b60:	6003      	strhi	r3, [r0, #0]
 8012b62:	700a      	strbls	r2, [r1, #0]
 8012b64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b68:	bf98      	it	ls
 8012b6a:	2001      	movls	r0, #1
 8012b6c:	4770      	bx	lr
 8012b6e:	4608      	mov	r0, r1
 8012b70:	4770      	bx	lr

08012b72 <__malloc_lock>:
 8012b72:	4770      	bx	lr

08012b74 <__malloc_unlock>:
 8012b74:	4770      	bx	lr

08012b76 <__ssputs_r>:
 8012b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b7a:	688e      	ldr	r6, [r1, #8]
 8012b7c:	429e      	cmp	r6, r3
 8012b7e:	4682      	mov	sl, r0
 8012b80:	460c      	mov	r4, r1
 8012b82:	4690      	mov	r8, r2
 8012b84:	4699      	mov	r9, r3
 8012b86:	d837      	bhi.n	8012bf8 <__ssputs_r+0x82>
 8012b88:	898a      	ldrh	r2, [r1, #12]
 8012b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b8e:	d031      	beq.n	8012bf4 <__ssputs_r+0x7e>
 8012b90:	6825      	ldr	r5, [r4, #0]
 8012b92:	6909      	ldr	r1, [r1, #16]
 8012b94:	1a6f      	subs	r7, r5, r1
 8012b96:	6965      	ldr	r5, [r4, #20]
 8012b98:	2302      	movs	r3, #2
 8012b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8012ba2:	f109 0301 	add.w	r3, r9, #1
 8012ba6:	443b      	add	r3, r7
 8012ba8:	429d      	cmp	r5, r3
 8012baa:	bf38      	it	cc
 8012bac:	461d      	movcc	r5, r3
 8012bae:	0553      	lsls	r3, r2, #21
 8012bb0:	d530      	bpl.n	8012c14 <__ssputs_r+0x9e>
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	f7ff fef8 	bl	80129a8 <_malloc_r>
 8012bb8:	4606      	mov	r6, r0
 8012bba:	b950      	cbnz	r0, 8012bd2 <__ssputs_r+0x5c>
 8012bbc:	230c      	movs	r3, #12
 8012bbe:	f8ca 3000 	str.w	r3, [sl]
 8012bc2:	89a3      	ldrh	r3, [r4, #12]
 8012bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bc8:	81a3      	strh	r3, [r4, #12]
 8012bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd2:	463a      	mov	r2, r7
 8012bd4:	6921      	ldr	r1, [r4, #16]
 8012bd6:	f7ff fe85 	bl	80128e4 <memcpy>
 8012bda:	89a3      	ldrh	r3, [r4, #12]
 8012bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012be4:	81a3      	strh	r3, [r4, #12]
 8012be6:	6126      	str	r6, [r4, #16]
 8012be8:	6165      	str	r5, [r4, #20]
 8012bea:	443e      	add	r6, r7
 8012bec:	1bed      	subs	r5, r5, r7
 8012bee:	6026      	str	r6, [r4, #0]
 8012bf0:	60a5      	str	r5, [r4, #8]
 8012bf2:	464e      	mov	r6, r9
 8012bf4:	454e      	cmp	r6, r9
 8012bf6:	d900      	bls.n	8012bfa <__ssputs_r+0x84>
 8012bf8:	464e      	mov	r6, r9
 8012bfa:	4632      	mov	r2, r6
 8012bfc:	4641      	mov	r1, r8
 8012bfe:	6820      	ldr	r0, [r4, #0]
 8012c00:	f000 fa94 	bl	801312c <memmove>
 8012c04:	68a3      	ldr	r3, [r4, #8]
 8012c06:	1b9b      	subs	r3, r3, r6
 8012c08:	60a3      	str	r3, [r4, #8]
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	441e      	add	r6, r3
 8012c0e:	6026      	str	r6, [r4, #0]
 8012c10:	2000      	movs	r0, #0
 8012c12:	e7dc      	b.n	8012bce <__ssputs_r+0x58>
 8012c14:	462a      	mov	r2, r5
 8012c16:	f000 faa2 	bl	801315e <_realloc_r>
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d1e2      	bne.n	8012be6 <__ssputs_r+0x70>
 8012c20:	6921      	ldr	r1, [r4, #16]
 8012c22:	4650      	mov	r0, sl
 8012c24:	f7ff fe72 	bl	801290c <_free_r>
 8012c28:	e7c8      	b.n	8012bbc <__ssputs_r+0x46>
	...

08012c2c <_svfiprintf_r>:
 8012c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c30:	461d      	mov	r5, r3
 8012c32:	898b      	ldrh	r3, [r1, #12]
 8012c34:	061f      	lsls	r7, r3, #24
 8012c36:	b09d      	sub	sp, #116	; 0x74
 8012c38:	4680      	mov	r8, r0
 8012c3a:	460c      	mov	r4, r1
 8012c3c:	4616      	mov	r6, r2
 8012c3e:	d50f      	bpl.n	8012c60 <_svfiprintf_r+0x34>
 8012c40:	690b      	ldr	r3, [r1, #16]
 8012c42:	b96b      	cbnz	r3, 8012c60 <_svfiprintf_r+0x34>
 8012c44:	2140      	movs	r1, #64	; 0x40
 8012c46:	f7ff feaf 	bl	80129a8 <_malloc_r>
 8012c4a:	6020      	str	r0, [r4, #0]
 8012c4c:	6120      	str	r0, [r4, #16]
 8012c4e:	b928      	cbnz	r0, 8012c5c <_svfiprintf_r+0x30>
 8012c50:	230c      	movs	r3, #12
 8012c52:	f8c8 3000 	str.w	r3, [r8]
 8012c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c5a:	e0c8      	b.n	8012dee <_svfiprintf_r+0x1c2>
 8012c5c:	2340      	movs	r3, #64	; 0x40
 8012c5e:	6163      	str	r3, [r4, #20]
 8012c60:	2300      	movs	r3, #0
 8012c62:	9309      	str	r3, [sp, #36]	; 0x24
 8012c64:	2320      	movs	r3, #32
 8012c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c6a:	2330      	movs	r3, #48	; 0x30
 8012c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c70:	9503      	str	r5, [sp, #12]
 8012c72:	f04f 0b01 	mov.w	fp, #1
 8012c76:	4637      	mov	r7, r6
 8012c78:	463d      	mov	r5, r7
 8012c7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c7e:	b10b      	cbz	r3, 8012c84 <_svfiprintf_r+0x58>
 8012c80:	2b25      	cmp	r3, #37	; 0x25
 8012c82:	d13e      	bne.n	8012d02 <_svfiprintf_r+0xd6>
 8012c84:	ebb7 0a06 	subs.w	sl, r7, r6
 8012c88:	d00b      	beq.n	8012ca2 <_svfiprintf_r+0x76>
 8012c8a:	4653      	mov	r3, sl
 8012c8c:	4632      	mov	r2, r6
 8012c8e:	4621      	mov	r1, r4
 8012c90:	4640      	mov	r0, r8
 8012c92:	f7ff ff70 	bl	8012b76 <__ssputs_r>
 8012c96:	3001      	adds	r0, #1
 8012c98:	f000 80a4 	beq.w	8012de4 <_svfiprintf_r+0x1b8>
 8012c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c9e:	4453      	add	r3, sl
 8012ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ca2:	783b      	ldrb	r3, [r7, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 809d 	beq.w	8012de4 <_svfiprintf_r+0x1b8>
 8012caa:	2300      	movs	r3, #0
 8012cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cb4:	9304      	str	r3, [sp, #16]
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8012cbe:	462f      	mov	r7, r5
 8012cc0:	2205      	movs	r2, #5
 8012cc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012cc6:	4850      	ldr	r0, [pc, #320]	; (8012e08 <_svfiprintf_r+0x1dc>)
 8012cc8:	f7ed fae2 	bl	8000290 <memchr>
 8012ccc:	9b04      	ldr	r3, [sp, #16]
 8012cce:	b9d0      	cbnz	r0, 8012d06 <_svfiprintf_r+0xda>
 8012cd0:	06d9      	lsls	r1, r3, #27
 8012cd2:	bf44      	itt	mi
 8012cd4:	2220      	movmi	r2, #32
 8012cd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cda:	071a      	lsls	r2, r3, #28
 8012cdc:	bf44      	itt	mi
 8012cde:	222b      	movmi	r2, #43	; 0x2b
 8012ce0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ce4:	782a      	ldrb	r2, [r5, #0]
 8012ce6:	2a2a      	cmp	r2, #42	; 0x2a
 8012ce8:	d015      	beq.n	8012d16 <_svfiprintf_r+0xea>
 8012cea:	9a07      	ldr	r2, [sp, #28]
 8012cec:	462f      	mov	r7, r5
 8012cee:	2000      	movs	r0, #0
 8012cf0:	250a      	movs	r5, #10
 8012cf2:	4639      	mov	r1, r7
 8012cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cf8:	3b30      	subs	r3, #48	; 0x30
 8012cfa:	2b09      	cmp	r3, #9
 8012cfc:	d94d      	bls.n	8012d9a <_svfiprintf_r+0x16e>
 8012cfe:	b1b8      	cbz	r0, 8012d30 <_svfiprintf_r+0x104>
 8012d00:	e00f      	b.n	8012d22 <_svfiprintf_r+0xf6>
 8012d02:	462f      	mov	r7, r5
 8012d04:	e7b8      	b.n	8012c78 <_svfiprintf_r+0x4c>
 8012d06:	4a40      	ldr	r2, [pc, #256]	; (8012e08 <_svfiprintf_r+0x1dc>)
 8012d08:	1a80      	subs	r0, r0, r2
 8012d0a:	fa0b f000 	lsl.w	r0, fp, r0
 8012d0e:	4318      	orrs	r0, r3
 8012d10:	9004      	str	r0, [sp, #16]
 8012d12:	463d      	mov	r5, r7
 8012d14:	e7d3      	b.n	8012cbe <_svfiprintf_r+0x92>
 8012d16:	9a03      	ldr	r2, [sp, #12]
 8012d18:	1d11      	adds	r1, r2, #4
 8012d1a:	6812      	ldr	r2, [r2, #0]
 8012d1c:	9103      	str	r1, [sp, #12]
 8012d1e:	2a00      	cmp	r2, #0
 8012d20:	db01      	blt.n	8012d26 <_svfiprintf_r+0xfa>
 8012d22:	9207      	str	r2, [sp, #28]
 8012d24:	e004      	b.n	8012d30 <_svfiprintf_r+0x104>
 8012d26:	4252      	negs	r2, r2
 8012d28:	f043 0302 	orr.w	r3, r3, #2
 8012d2c:	9207      	str	r2, [sp, #28]
 8012d2e:	9304      	str	r3, [sp, #16]
 8012d30:	783b      	ldrb	r3, [r7, #0]
 8012d32:	2b2e      	cmp	r3, #46	; 0x2e
 8012d34:	d10c      	bne.n	8012d50 <_svfiprintf_r+0x124>
 8012d36:	787b      	ldrb	r3, [r7, #1]
 8012d38:	2b2a      	cmp	r3, #42	; 0x2a
 8012d3a:	d133      	bne.n	8012da4 <_svfiprintf_r+0x178>
 8012d3c:	9b03      	ldr	r3, [sp, #12]
 8012d3e:	1d1a      	adds	r2, r3, #4
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	9203      	str	r2, [sp, #12]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bfb8      	it	lt
 8012d48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d4c:	3702      	adds	r7, #2
 8012d4e:	9305      	str	r3, [sp, #20]
 8012d50:	4d2e      	ldr	r5, [pc, #184]	; (8012e0c <_svfiprintf_r+0x1e0>)
 8012d52:	7839      	ldrb	r1, [r7, #0]
 8012d54:	2203      	movs	r2, #3
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7ed fa9a 	bl	8000290 <memchr>
 8012d5c:	b138      	cbz	r0, 8012d6e <_svfiprintf_r+0x142>
 8012d5e:	2340      	movs	r3, #64	; 0x40
 8012d60:	1b40      	subs	r0, r0, r5
 8012d62:	fa03 f000 	lsl.w	r0, r3, r0
 8012d66:	9b04      	ldr	r3, [sp, #16]
 8012d68:	4303      	orrs	r3, r0
 8012d6a:	3701      	adds	r7, #1
 8012d6c:	9304      	str	r3, [sp, #16]
 8012d6e:	7839      	ldrb	r1, [r7, #0]
 8012d70:	4827      	ldr	r0, [pc, #156]	; (8012e10 <_svfiprintf_r+0x1e4>)
 8012d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d76:	2206      	movs	r2, #6
 8012d78:	1c7e      	adds	r6, r7, #1
 8012d7a:	f7ed fa89 	bl	8000290 <memchr>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d038      	beq.n	8012df4 <_svfiprintf_r+0x1c8>
 8012d82:	4b24      	ldr	r3, [pc, #144]	; (8012e14 <_svfiprintf_r+0x1e8>)
 8012d84:	bb13      	cbnz	r3, 8012dcc <_svfiprintf_r+0x1a0>
 8012d86:	9b03      	ldr	r3, [sp, #12]
 8012d88:	3307      	adds	r3, #7
 8012d8a:	f023 0307 	bic.w	r3, r3, #7
 8012d8e:	3308      	adds	r3, #8
 8012d90:	9303      	str	r3, [sp, #12]
 8012d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d94:	444b      	add	r3, r9
 8012d96:	9309      	str	r3, [sp, #36]	; 0x24
 8012d98:	e76d      	b.n	8012c76 <_svfiprintf_r+0x4a>
 8012d9a:	fb05 3202 	mla	r2, r5, r2, r3
 8012d9e:	2001      	movs	r0, #1
 8012da0:	460f      	mov	r7, r1
 8012da2:	e7a6      	b.n	8012cf2 <_svfiprintf_r+0xc6>
 8012da4:	2300      	movs	r3, #0
 8012da6:	3701      	adds	r7, #1
 8012da8:	9305      	str	r3, [sp, #20]
 8012daa:	4619      	mov	r1, r3
 8012dac:	250a      	movs	r5, #10
 8012dae:	4638      	mov	r0, r7
 8012db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012db4:	3a30      	subs	r2, #48	; 0x30
 8012db6:	2a09      	cmp	r2, #9
 8012db8:	d903      	bls.n	8012dc2 <_svfiprintf_r+0x196>
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d0c8      	beq.n	8012d50 <_svfiprintf_r+0x124>
 8012dbe:	9105      	str	r1, [sp, #20]
 8012dc0:	e7c6      	b.n	8012d50 <_svfiprintf_r+0x124>
 8012dc2:	fb05 2101 	mla	r1, r5, r1, r2
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	4607      	mov	r7, r0
 8012dca:	e7f0      	b.n	8012dae <_svfiprintf_r+0x182>
 8012dcc:	ab03      	add	r3, sp, #12
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	4622      	mov	r2, r4
 8012dd2:	4b11      	ldr	r3, [pc, #68]	; (8012e18 <_svfiprintf_r+0x1ec>)
 8012dd4:	a904      	add	r1, sp, #16
 8012dd6:	4640      	mov	r0, r8
 8012dd8:	f3af 8000 	nop.w
 8012ddc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012de0:	4681      	mov	r9, r0
 8012de2:	d1d6      	bne.n	8012d92 <_svfiprintf_r+0x166>
 8012de4:	89a3      	ldrh	r3, [r4, #12]
 8012de6:	065b      	lsls	r3, r3, #25
 8012de8:	f53f af35 	bmi.w	8012c56 <_svfiprintf_r+0x2a>
 8012dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dee:	b01d      	add	sp, #116	; 0x74
 8012df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df4:	ab03      	add	r3, sp, #12
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	4622      	mov	r2, r4
 8012dfa:	4b07      	ldr	r3, [pc, #28]	; (8012e18 <_svfiprintf_r+0x1ec>)
 8012dfc:	a904      	add	r1, sp, #16
 8012dfe:	4640      	mov	r0, r8
 8012e00:	f000 f882 	bl	8012f08 <_printf_i>
 8012e04:	e7ea      	b.n	8012ddc <_svfiprintf_r+0x1b0>
 8012e06:	bf00      	nop
 8012e08:	08015b2b 	.word	0x08015b2b
 8012e0c:	08015b31 	.word	0x08015b31
 8012e10:	08015b35 	.word	0x08015b35
 8012e14:	00000000 	.word	0x00000000
 8012e18:	08012b77 	.word	0x08012b77

08012e1c <_printf_common>:
 8012e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e20:	4691      	mov	r9, r2
 8012e22:	461f      	mov	r7, r3
 8012e24:	688a      	ldr	r2, [r1, #8]
 8012e26:	690b      	ldr	r3, [r1, #16]
 8012e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	bfb8      	it	lt
 8012e30:	4613      	movlt	r3, r2
 8012e32:	f8c9 3000 	str.w	r3, [r9]
 8012e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e3a:	4606      	mov	r6, r0
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	b112      	cbz	r2, 8012e46 <_printf_common+0x2a>
 8012e40:	3301      	adds	r3, #1
 8012e42:	f8c9 3000 	str.w	r3, [r9]
 8012e46:	6823      	ldr	r3, [r4, #0]
 8012e48:	0699      	lsls	r1, r3, #26
 8012e4a:	bf42      	ittt	mi
 8012e4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e50:	3302      	addmi	r3, #2
 8012e52:	f8c9 3000 	strmi.w	r3, [r9]
 8012e56:	6825      	ldr	r5, [r4, #0]
 8012e58:	f015 0506 	ands.w	r5, r5, #6
 8012e5c:	d107      	bne.n	8012e6e <_printf_common+0x52>
 8012e5e:	f104 0a19 	add.w	sl, r4, #25
 8012e62:	68e3      	ldr	r3, [r4, #12]
 8012e64:	f8d9 2000 	ldr.w	r2, [r9]
 8012e68:	1a9b      	subs	r3, r3, r2
 8012e6a:	42ab      	cmp	r3, r5
 8012e6c:	dc28      	bgt.n	8012ec0 <_printf_common+0xa4>
 8012e6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e72:	6822      	ldr	r2, [r4, #0]
 8012e74:	3300      	adds	r3, #0
 8012e76:	bf18      	it	ne
 8012e78:	2301      	movne	r3, #1
 8012e7a:	0692      	lsls	r2, r2, #26
 8012e7c:	d42d      	bmi.n	8012eda <_printf_common+0xbe>
 8012e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e82:	4639      	mov	r1, r7
 8012e84:	4630      	mov	r0, r6
 8012e86:	47c0      	blx	r8
 8012e88:	3001      	adds	r0, #1
 8012e8a:	d020      	beq.n	8012ece <_printf_common+0xb2>
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	68e5      	ldr	r5, [r4, #12]
 8012e90:	f8d9 2000 	ldr.w	r2, [r9]
 8012e94:	f003 0306 	and.w	r3, r3, #6
 8012e98:	2b04      	cmp	r3, #4
 8012e9a:	bf08      	it	eq
 8012e9c:	1aad      	subeq	r5, r5, r2
 8012e9e:	68a3      	ldr	r3, [r4, #8]
 8012ea0:	6922      	ldr	r2, [r4, #16]
 8012ea2:	bf0c      	ite	eq
 8012ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ea8:	2500      	movne	r5, #0
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	bfc4      	itt	gt
 8012eae:	1a9b      	subgt	r3, r3, r2
 8012eb0:	18ed      	addgt	r5, r5, r3
 8012eb2:	f04f 0900 	mov.w	r9, #0
 8012eb6:	341a      	adds	r4, #26
 8012eb8:	454d      	cmp	r5, r9
 8012eba:	d11a      	bne.n	8012ef2 <_printf_common+0xd6>
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	e008      	b.n	8012ed2 <_printf_common+0xb6>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	4652      	mov	r2, sl
 8012ec4:	4639      	mov	r1, r7
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	47c0      	blx	r8
 8012eca:	3001      	adds	r0, #1
 8012ecc:	d103      	bne.n	8012ed6 <_printf_common+0xba>
 8012ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ed6:	3501      	adds	r5, #1
 8012ed8:	e7c3      	b.n	8012e62 <_printf_common+0x46>
 8012eda:	18e1      	adds	r1, r4, r3
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	2030      	movs	r0, #48	; 0x30
 8012ee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ee4:	4422      	add	r2, r4
 8012ee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012eee:	3302      	adds	r3, #2
 8012ef0:	e7c5      	b.n	8012e7e <_printf_common+0x62>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	4630      	mov	r0, r6
 8012efa:	47c0      	blx	r8
 8012efc:	3001      	adds	r0, #1
 8012efe:	d0e6      	beq.n	8012ece <_printf_common+0xb2>
 8012f00:	f109 0901 	add.w	r9, r9, #1
 8012f04:	e7d8      	b.n	8012eb8 <_printf_common+0x9c>
	...

08012f08 <_printf_i>:
 8012f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012f10:	460c      	mov	r4, r1
 8012f12:	7e09      	ldrb	r1, [r1, #24]
 8012f14:	b085      	sub	sp, #20
 8012f16:	296e      	cmp	r1, #110	; 0x6e
 8012f18:	4617      	mov	r7, r2
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	4698      	mov	r8, r3
 8012f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f20:	f000 80b3 	beq.w	801308a <_printf_i+0x182>
 8012f24:	d822      	bhi.n	8012f6c <_printf_i+0x64>
 8012f26:	2963      	cmp	r1, #99	; 0x63
 8012f28:	d036      	beq.n	8012f98 <_printf_i+0x90>
 8012f2a:	d80a      	bhi.n	8012f42 <_printf_i+0x3a>
 8012f2c:	2900      	cmp	r1, #0
 8012f2e:	f000 80b9 	beq.w	80130a4 <_printf_i+0x19c>
 8012f32:	2958      	cmp	r1, #88	; 0x58
 8012f34:	f000 8083 	beq.w	801303e <_printf_i+0x136>
 8012f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012f40:	e032      	b.n	8012fa8 <_printf_i+0xa0>
 8012f42:	2964      	cmp	r1, #100	; 0x64
 8012f44:	d001      	beq.n	8012f4a <_printf_i+0x42>
 8012f46:	2969      	cmp	r1, #105	; 0x69
 8012f48:	d1f6      	bne.n	8012f38 <_printf_i+0x30>
 8012f4a:	6820      	ldr	r0, [r4, #0]
 8012f4c:	6813      	ldr	r3, [r2, #0]
 8012f4e:	0605      	lsls	r5, r0, #24
 8012f50:	f103 0104 	add.w	r1, r3, #4
 8012f54:	d52a      	bpl.n	8012fac <_printf_i+0xa4>
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	6011      	str	r1, [r2, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	da03      	bge.n	8012f66 <_printf_i+0x5e>
 8012f5e:	222d      	movs	r2, #45	; 0x2d
 8012f60:	425b      	negs	r3, r3
 8012f62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012f66:	486f      	ldr	r0, [pc, #444]	; (8013124 <_printf_i+0x21c>)
 8012f68:	220a      	movs	r2, #10
 8012f6a:	e039      	b.n	8012fe0 <_printf_i+0xd8>
 8012f6c:	2973      	cmp	r1, #115	; 0x73
 8012f6e:	f000 809d 	beq.w	80130ac <_printf_i+0x1a4>
 8012f72:	d808      	bhi.n	8012f86 <_printf_i+0x7e>
 8012f74:	296f      	cmp	r1, #111	; 0x6f
 8012f76:	d020      	beq.n	8012fba <_printf_i+0xb2>
 8012f78:	2970      	cmp	r1, #112	; 0x70
 8012f7a:	d1dd      	bne.n	8012f38 <_printf_i+0x30>
 8012f7c:	6823      	ldr	r3, [r4, #0]
 8012f7e:	f043 0320 	orr.w	r3, r3, #32
 8012f82:	6023      	str	r3, [r4, #0]
 8012f84:	e003      	b.n	8012f8e <_printf_i+0x86>
 8012f86:	2975      	cmp	r1, #117	; 0x75
 8012f88:	d017      	beq.n	8012fba <_printf_i+0xb2>
 8012f8a:	2978      	cmp	r1, #120	; 0x78
 8012f8c:	d1d4      	bne.n	8012f38 <_printf_i+0x30>
 8012f8e:	2378      	movs	r3, #120	; 0x78
 8012f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f94:	4864      	ldr	r0, [pc, #400]	; (8013128 <_printf_i+0x220>)
 8012f96:	e055      	b.n	8013044 <_printf_i+0x13c>
 8012f98:	6813      	ldr	r3, [r2, #0]
 8012f9a:	1d19      	adds	r1, r3, #4
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	6011      	str	r1, [r2, #0]
 8012fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fa8:	2301      	movs	r3, #1
 8012faa:	e08c      	b.n	80130c6 <_printf_i+0x1be>
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	6011      	str	r1, [r2, #0]
 8012fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fb4:	bf18      	it	ne
 8012fb6:	b21b      	sxthne	r3, r3
 8012fb8:	e7cf      	b.n	8012f5a <_printf_i+0x52>
 8012fba:	6813      	ldr	r3, [r2, #0]
 8012fbc:	6825      	ldr	r5, [r4, #0]
 8012fbe:	1d18      	adds	r0, r3, #4
 8012fc0:	6010      	str	r0, [r2, #0]
 8012fc2:	0628      	lsls	r0, r5, #24
 8012fc4:	d501      	bpl.n	8012fca <_printf_i+0xc2>
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	e002      	b.n	8012fd0 <_printf_i+0xc8>
 8012fca:	0668      	lsls	r0, r5, #25
 8012fcc:	d5fb      	bpl.n	8012fc6 <_printf_i+0xbe>
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	4854      	ldr	r0, [pc, #336]	; (8013124 <_printf_i+0x21c>)
 8012fd2:	296f      	cmp	r1, #111	; 0x6f
 8012fd4:	bf14      	ite	ne
 8012fd6:	220a      	movne	r2, #10
 8012fd8:	2208      	moveq	r2, #8
 8012fda:	2100      	movs	r1, #0
 8012fdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fe0:	6865      	ldr	r5, [r4, #4]
 8012fe2:	60a5      	str	r5, [r4, #8]
 8012fe4:	2d00      	cmp	r5, #0
 8012fe6:	f2c0 8095 	blt.w	8013114 <_printf_i+0x20c>
 8012fea:	6821      	ldr	r1, [r4, #0]
 8012fec:	f021 0104 	bic.w	r1, r1, #4
 8012ff0:	6021      	str	r1, [r4, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d13d      	bne.n	8013072 <_printf_i+0x16a>
 8012ff6:	2d00      	cmp	r5, #0
 8012ff8:	f040 808e 	bne.w	8013118 <_printf_i+0x210>
 8012ffc:	4665      	mov	r5, ip
 8012ffe:	2a08      	cmp	r2, #8
 8013000:	d10b      	bne.n	801301a <_printf_i+0x112>
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	07db      	lsls	r3, r3, #31
 8013006:	d508      	bpl.n	801301a <_printf_i+0x112>
 8013008:	6923      	ldr	r3, [r4, #16]
 801300a:	6862      	ldr	r2, [r4, #4]
 801300c:	429a      	cmp	r2, r3
 801300e:	bfde      	ittt	le
 8013010:	2330      	movle	r3, #48	; 0x30
 8013012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013016:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801301a:	ebac 0305 	sub.w	r3, ip, r5
 801301e:	6123      	str	r3, [r4, #16]
 8013020:	f8cd 8000 	str.w	r8, [sp]
 8013024:	463b      	mov	r3, r7
 8013026:	aa03      	add	r2, sp, #12
 8013028:	4621      	mov	r1, r4
 801302a:	4630      	mov	r0, r6
 801302c:	f7ff fef6 	bl	8012e1c <_printf_common>
 8013030:	3001      	adds	r0, #1
 8013032:	d14d      	bne.n	80130d0 <_printf_i+0x1c8>
 8013034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013038:	b005      	add	sp, #20
 801303a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801303e:	4839      	ldr	r0, [pc, #228]	; (8013124 <_printf_i+0x21c>)
 8013040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013044:	6813      	ldr	r3, [r2, #0]
 8013046:	6821      	ldr	r1, [r4, #0]
 8013048:	1d1d      	adds	r5, r3, #4
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	6015      	str	r5, [r2, #0]
 801304e:	060a      	lsls	r2, r1, #24
 8013050:	d50b      	bpl.n	801306a <_printf_i+0x162>
 8013052:	07ca      	lsls	r2, r1, #31
 8013054:	bf44      	itt	mi
 8013056:	f041 0120 	orrmi.w	r1, r1, #32
 801305a:	6021      	strmi	r1, [r4, #0]
 801305c:	b91b      	cbnz	r3, 8013066 <_printf_i+0x15e>
 801305e:	6822      	ldr	r2, [r4, #0]
 8013060:	f022 0220 	bic.w	r2, r2, #32
 8013064:	6022      	str	r2, [r4, #0]
 8013066:	2210      	movs	r2, #16
 8013068:	e7b7      	b.n	8012fda <_printf_i+0xd2>
 801306a:	064d      	lsls	r5, r1, #25
 801306c:	bf48      	it	mi
 801306e:	b29b      	uxthmi	r3, r3
 8013070:	e7ef      	b.n	8013052 <_printf_i+0x14a>
 8013072:	4665      	mov	r5, ip
 8013074:	fbb3 f1f2 	udiv	r1, r3, r2
 8013078:	fb02 3311 	mls	r3, r2, r1, r3
 801307c:	5cc3      	ldrb	r3, [r0, r3]
 801307e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013082:	460b      	mov	r3, r1
 8013084:	2900      	cmp	r1, #0
 8013086:	d1f5      	bne.n	8013074 <_printf_i+0x16c>
 8013088:	e7b9      	b.n	8012ffe <_printf_i+0xf6>
 801308a:	6813      	ldr	r3, [r2, #0]
 801308c:	6825      	ldr	r5, [r4, #0]
 801308e:	6961      	ldr	r1, [r4, #20]
 8013090:	1d18      	adds	r0, r3, #4
 8013092:	6010      	str	r0, [r2, #0]
 8013094:	0628      	lsls	r0, r5, #24
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	d501      	bpl.n	801309e <_printf_i+0x196>
 801309a:	6019      	str	r1, [r3, #0]
 801309c:	e002      	b.n	80130a4 <_printf_i+0x19c>
 801309e:	066a      	lsls	r2, r5, #25
 80130a0:	d5fb      	bpl.n	801309a <_printf_i+0x192>
 80130a2:	8019      	strh	r1, [r3, #0]
 80130a4:	2300      	movs	r3, #0
 80130a6:	6123      	str	r3, [r4, #16]
 80130a8:	4665      	mov	r5, ip
 80130aa:	e7b9      	b.n	8013020 <_printf_i+0x118>
 80130ac:	6813      	ldr	r3, [r2, #0]
 80130ae:	1d19      	adds	r1, r3, #4
 80130b0:	6011      	str	r1, [r2, #0]
 80130b2:	681d      	ldr	r5, [r3, #0]
 80130b4:	6862      	ldr	r2, [r4, #4]
 80130b6:	2100      	movs	r1, #0
 80130b8:	4628      	mov	r0, r5
 80130ba:	f7ed f8e9 	bl	8000290 <memchr>
 80130be:	b108      	cbz	r0, 80130c4 <_printf_i+0x1bc>
 80130c0:	1b40      	subs	r0, r0, r5
 80130c2:	6060      	str	r0, [r4, #4]
 80130c4:	6863      	ldr	r3, [r4, #4]
 80130c6:	6123      	str	r3, [r4, #16]
 80130c8:	2300      	movs	r3, #0
 80130ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130ce:	e7a7      	b.n	8013020 <_printf_i+0x118>
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	462a      	mov	r2, r5
 80130d4:	4639      	mov	r1, r7
 80130d6:	4630      	mov	r0, r6
 80130d8:	47c0      	blx	r8
 80130da:	3001      	adds	r0, #1
 80130dc:	d0aa      	beq.n	8013034 <_printf_i+0x12c>
 80130de:	6823      	ldr	r3, [r4, #0]
 80130e0:	079b      	lsls	r3, r3, #30
 80130e2:	d413      	bmi.n	801310c <_printf_i+0x204>
 80130e4:	68e0      	ldr	r0, [r4, #12]
 80130e6:	9b03      	ldr	r3, [sp, #12]
 80130e8:	4298      	cmp	r0, r3
 80130ea:	bfb8      	it	lt
 80130ec:	4618      	movlt	r0, r3
 80130ee:	e7a3      	b.n	8013038 <_printf_i+0x130>
 80130f0:	2301      	movs	r3, #1
 80130f2:	464a      	mov	r2, r9
 80130f4:	4639      	mov	r1, r7
 80130f6:	4630      	mov	r0, r6
 80130f8:	47c0      	blx	r8
 80130fa:	3001      	adds	r0, #1
 80130fc:	d09a      	beq.n	8013034 <_printf_i+0x12c>
 80130fe:	3501      	adds	r5, #1
 8013100:	68e3      	ldr	r3, [r4, #12]
 8013102:	9a03      	ldr	r2, [sp, #12]
 8013104:	1a9b      	subs	r3, r3, r2
 8013106:	42ab      	cmp	r3, r5
 8013108:	dcf2      	bgt.n	80130f0 <_printf_i+0x1e8>
 801310a:	e7eb      	b.n	80130e4 <_printf_i+0x1dc>
 801310c:	2500      	movs	r5, #0
 801310e:	f104 0919 	add.w	r9, r4, #25
 8013112:	e7f5      	b.n	8013100 <_printf_i+0x1f8>
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1ac      	bne.n	8013072 <_printf_i+0x16a>
 8013118:	7803      	ldrb	r3, [r0, #0]
 801311a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801311e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013122:	e76c      	b.n	8012ffe <_printf_i+0xf6>
 8013124:	08015b3c 	.word	0x08015b3c
 8013128:	08015b4d 	.word	0x08015b4d

0801312c <memmove>:
 801312c:	4288      	cmp	r0, r1
 801312e:	b510      	push	{r4, lr}
 8013130:	eb01 0302 	add.w	r3, r1, r2
 8013134:	d807      	bhi.n	8013146 <memmove+0x1a>
 8013136:	1e42      	subs	r2, r0, #1
 8013138:	4299      	cmp	r1, r3
 801313a:	d00a      	beq.n	8013152 <memmove+0x26>
 801313c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013140:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013144:	e7f8      	b.n	8013138 <memmove+0xc>
 8013146:	4283      	cmp	r3, r0
 8013148:	d9f5      	bls.n	8013136 <memmove+0xa>
 801314a:	1881      	adds	r1, r0, r2
 801314c:	1ad2      	subs	r2, r2, r3
 801314e:	42d3      	cmn	r3, r2
 8013150:	d100      	bne.n	8013154 <memmove+0x28>
 8013152:	bd10      	pop	{r4, pc}
 8013154:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013158:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801315c:	e7f7      	b.n	801314e <memmove+0x22>

0801315e <_realloc_r>:
 801315e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013160:	4607      	mov	r7, r0
 8013162:	4614      	mov	r4, r2
 8013164:	460e      	mov	r6, r1
 8013166:	b921      	cbnz	r1, 8013172 <_realloc_r+0x14>
 8013168:	4611      	mov	r1, r2
 801316a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801316e:	f7ff bc1b 	b.w	80129a8 <_malloc_r>
 8013172:	b922      	cbnz	r2, 801317e <_realloc_r+0x20>
 8013174:	f7ff fbca 	bl	801290c <_free_r>
 8013178:	4625      	mov	r5, r4
 801317a:	4628      	mov	r0, r5
 801317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801317e:	f000 f814 	bl	80131aa <_malloc_usable_size_r>
 8013182:	42a0      	cmp	r0, r4
 8013184:	d20f      	bcs.n	80131a6 <_realloc_r+0x48>
 8013186:	4621      	mov	r1, r4
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff fc0d 	bl	80129a8 <_malloc_r>
 801318e:	4605      	mov	r5, r0
 8013190:	2800      	cmp	r0, #0
 8013192:	d0f2      	beq.n	801317a <_realloc_r+0x1c>
 8013194:	4631      	mov	r1, r6
 8013196:	4622      	mov	r2, r4
 8013198:	f7ff fba4 	bl	80128e4 <memcpy>
 801319c:	4631      	mov	r1, r6
 801319e:	4638      	mov	r0, r7
 80131a0:	f7ff fbb4 	bl	801290c <_free_r>
 80131a4:	e7e9      	b.n	801317a <_realloc_r+0x1c>
 80131a6:	4635      	mov	r5, r6
 80131a8:	e7e7      	b.n	801317a <_realloc_r+0x1c>

080131aa <_malloc_usable_size_r>:
 80131aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131ae:	1f18      	subs	r0, r3, #4
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	bfbc      	itt	lt
 80131b4:	580b      	ldrlt	r3, [r1, r0]
 80131b6:	18c0      	addlt	r0, r0, r3
 80131b8:	4770      	bx	lr
	...

080131bc <log10>:
 80131bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131be:	ed2d 8b02 	vpush	{d8}
 80131c2:	b08b      	sub	sp, #44	; 0x2c
 80131c4:	ec55 4b10 	vmov	r4, r5, d0
 80131c8:	f000 f8ca 	bl	8013360 <__ieee754_log10>
 80131cc:	4b36      	ldr	r3, [pc, #216]	; (80132a8 <log10+0xec>)
 80131ce:	eeb0 8a40 	vmov.f32	s16, s0
 80131d2:	eef0 8a60 	vmov.f32	s17, s1
 80131d6:	f993 6000 	ldrsb.w	r6, [r3]
 80131da:	1c73      	adds	r3, r6, #1
 80131dc:	d05c      	beq.n	8013298 <log10+0xdc>
 80131de:	4622      	mov	r2, r4
 80131e0:	462b      	mov	r3, r5
 80131e2:	4620      	mov	r0, r4
 80131e4:	4629      	mov	r1, r5
 80131e6:	f7ed fcf9 	bl	8000bdc <__aeabi_dcmpun>
 80131ea:	4607      	mov	r7, r0
 80131ec:	2800      	cmp	r0, #0
 80131ee:	d153      	bne.n	8013298 <log10+0xdc>
 80131f0:	2200      	movs	r2, #0
 80131f2:	2300      	movs	r3, #0
 80131f4:	4620      	mov	r0, r4
 80131f6:	4629      	mov	r1, r5
 80131f8:	f7ed fcd2 	bl	8000ba0 <__aeabi_dcmple>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	d04b      	beq.n	8013298 <log10+0xdc>
 8013200:	4b2a      	ldr	r3, [pc, #168]	; (80132ac <log10+0xf0>)
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	9708      	str	r7, [sp, #32]
 8013206:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801320a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801320e:	b9a6      	cbnz	r6, 801323a <log10+0x7e>
 8013210:	4b27      	ldr	r3, [pc, #156]	; (80132b0 <log10+0xf4>)
 8013212:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801321a:	4620      	mov	r0, r4
 801321c:	2200      	movs	r2, #0
 801321e:	2300      	movs	r3, #0
 8013220:	4629      	mov	r1, r5
 8013222:	f7ed fca9 	bl	8000b78 <__aeabi_dcmpeq>
 8013226:	bb40      	cbnz	r0, 801327a <log10+0xbe>
 8013228:	2301      	movs	r3, #1
 801322a:	2e02      	cmp	r6, #2
 801322c:	9300      	str	r3, [sp, #0]
 801322e:	d119      	bne.n	8013264 <log10+0xa8>
 8013230:	f7ff fafe 	bl	8012830 <__errno>
 8013234:	2321      	movs	r3, #33	; 0x21
 8013236:	6003      	str	r3, [r0, #0]
 8013238:	e019      	b.n	801326e <log10+0xb2>
 801323a:	4b1e      	ldr	r3, [pc, #120]	; (80132b4 <log10+0xf8>)
 801323c:	2200      	movs	r2, #0
 801323e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013242:	4620      	mov	r0, r4
 8013244:	2200      	movs	r2, #0
 8013246:	2300      	movs	r3, #0
 8013248:	4629      	mov	r1, r5
 801324a:	f7ed fc95 	bl	8000b78 <__aeabi_dcmpeq>
 801324e:	2800      	cmp	r0, #0
 8013250:	d0ea      	beq.n	8013228 <log10+0x6c>
 8013252:	2302      	movs	r3, #2
 8013254:	429e      	cmp	r6, r3
 8013256:	9300      	str	r3, [sp, #0]
 8013258:	d111      	bne.n	801327e <log10+0xc2>
 801325a:	f7ff fae9 	bl	8012830 <__errno>
 801325e:	2322      	movs	r3, #34	; 0x22
 8013260:	6003      	str	r3, [r0, #0]
 8013262:	e011      	b.n	8013288 <log10+0xcc>
 8013264:	4668      	mov	r0, sp
 8013266:	f000 f908 	bl	801347a <matherr>
 801326a:	2800      	cmp	r0, #0
 801326c:	d0e0      	beq.n	8013230 <log10+0x74>
 801326e:	4812      	ldr	r0, [pc, #72]	; (80132b8 <log10+0xfc>)
 8013270:	f000 f906 	bl	8013480 <nan>
 8013274:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013278:	e006      	b.n	8013288 <log10+0xcc>
 801327a:	2302      	movs	r3, #2
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	4668      	mov	r0, sp
 8013280:	f000 f8fb 	bl	801347a <matherr>
 8013284:	2800      	cmp	r0, #0
 8013286:	d0e8      	beq.n	801325a <log10+0x9e>
 8013288:	9b08      	ldr	r3, [sp, #32]
 801328a:	b11b      	cbz	r3, 8013294 <log10+0xd8>
 801328c:	f7ff fad0 	bl	8012830 <__errno>
 8013290:	9b08      	ldr	r3, [sp, #32]
 8013292:	6003      	str	r3, [r0, #0]
 8013294:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013298:	eeb0 0a48 	vmov.f32	s0, s16
 801329c:	eef0 0a68 	vmov.f32	s1, s17
 80132a0:	b00b      	add	sp, #44	; 0x2c
 80132a2:	ecbd 8b02 	vpop	{d8}
 80132a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132a8:	20000260 	.word	0x20000260
 80132ac:	08015b5e 	.word	0x08015b5e
 80132b0:	c7efffff 	.word	0xc7efffff
 80132b4:	fff00000 	.word	0xfff00000
 80132b8:	08015b30 	.word	0x08015b30

080132bc <sqrtf>:
 80132bc:	b510      	push	{r4, lr}
 80132be:	ed2d 8b02 	vpush	{d8}
 80132c2:	b08a      	sub	sp, #40	; 0x28
 80132c4:	eeb0 8a40 	vmov.f32	s16, s0
 80132c8:	f000 f8d4 	bl	8013474 <__ieee754_sqrtf>
 80132cc:	4b21      	ldr	r3, [pc, #132]	; (8013354 <sqrtf+0x98>)
 80132ce:	f993 4000 	ldrsb.w	r4, [r3]
 80132d2:	1c63      	adds	r3, r4, #1
 80132d4:	d02c      	beq.n	8013330 <sqrtf+0x74>
 80132d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80132da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132de:	d627      	bvs.n	8013330 <sqrtf+0x74>
 80132e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80132e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e8:	d522      	bpl.n	8013330 <sqrtf+0x74>
 80132ea:	2301      	movs	r3, #1
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	4b1a      	ldr	r3, [pc, #104]	; (8013358 <sqrtf+0x9c>)
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	ee18 0a10 	vmov	r0, s16
 80132f6:	2300      	movs	r3, #0
 80132f8:	9308      	str	r3, [sp, #32]
 80132fa:	f7ed f97d 	bl	80005f8 <__aeabi_f2d>
 80132fe:	2200      	movs	r2, #0
 8013300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013308:	2300      	movs	r3, #0
 801330a:	b9ac      	cbnz	r4, 8013338 <sqrtf+0x7c>
 801330c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013310:	4668      	mov	r0, sp
 8013312:	f000 f8b2 	bl	801347a <matherr>
 8013316:	b1b8      	cbz	r0, 8013348 <sqrtf+0x8c>
 8013318:	9b08      	ldr	r3, [sp, #32]
 801331a:	b11b      	cbz	r3, 8013324 <sqrtf+0x68>
 801331c:	f7ff fa88 	bl	8012830 <__errno>
 8013320:	9b08      	ldr	r3, [sp, #32]
 8013322:	6003      	str	r3, [r0, #0]
 8013324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013328:	f7ed fc6e 	bl	8000c08 <__aeabi_d2f>
 801332c:	ee00 0a10 	vmov	s0, r0
 8013330:	b00a      	add	sp, #40	; 0x28
 8013332:	ecbd 8b02 	vpop	{d8}
 8013336:	bd10      	pop	{r4, pc}
 8013338:	4610      	mov	r0, r2
 801333a:	4619      	mov	r1, r3
 801333c:	f7ed fade 	bl	80008fc <__aeabi_ddiv>
 8013340:	2c02      	cmp	r4, #2
 8013342:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013346:	d1e3      	bne.n	8013310 <sqrtf+0x54>
 8013348:	f7ff fa72 	bl	8012830 <__errno>
 801334c:	2321      	movs	r3, #33	; 0x21
 801334e:	6003      	str	r3, [r0, #0]
 8013350:	e7e2      	b.n	8013318 <sqrtf+0x5c>
 8013352:	bf00      	nop
 8013354:	20000260 	.word	0x20000260
 8013358:	08015b64 	.word	0x08015b64
 801335c:	00000000 	.word	0x00000000

08013360 <__ieee754_log10>:
 8013360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013364:	ec55 4b10 	vmov	r4, r5, d0
 8013368:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801336c:	462b      	mov	r3, r5
 801336e:	da2f      	bge.n	80133d0 <__ieee754_log10+0x70>
 8013370:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8013374:	4322      	orrs	r2, r4
 8013376:	d10a      	bne.n	801338e <__ieee754_log10+0x2e>
 8013378:	493b      	ldr	r1, [pc, #236]	; (8013468 <__ieee754_log10+0x108>)
 801337a:	2200      	movs	r2, #0
 801337c:	2300      	movs	r3, #0
 801337e:	2000      	movs	r0, #0
 8013380:	f7ed fabc 	bl	80008fc <__aeabi_ddiv>
 8013384:	ec41 0b10 	vmov	d0, r0, r1
 8013388:	b003      	add	sp, #12
 801338a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801338e:	2d00      	cmp	r5, #0
 8013390:	da08      	bge.n	80133a4 <__ieee754_log10+0x44>
 8013392:	ee10 2a10 	vmov	r2, s0
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f7ec ffcd 	bl	8000338 <__aeabi_dsub>
 801339e:	2200      	movs	r2, #0
 80133a0:	2300      	movs	r3, #0
 80133a2:	e7ed      	b.n	8013380 <__ieee754_log10+0x20>
 80133a4:	2200      	movs	r2, #0
 80133a6:	4b31      	ldr	r3, [pc, #196]	; (801346c <__ieee754_log10+0x10c>)
 80133a8:	4629      	mov	r1, r5
 80133aa:	ee10 0a10 	vmov	r0, s0
 80133ae:	f7ed f97b 	bl	80006a8 <__aeabi_dmul>
 80133b2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80133b6:	4604      	mov	r4, r0
 80133b8:	460d      	mov	r5, r1
 80133ba:	460b      	mov	r3, r1
 80133bc:	492c      	ldr	r1, [pc, #176]	; (8013470 <__ieee754_log10+0x110>)
 80133be:	428b      	cmp	r3, r1
 80133c0:	dd08      	ble.n	80133d4 <__ieee754_log10+0x74>
 80133c2:	4622      	mov	r2, r4
 80133c4:	462b      	mov	r3, r5
 80133c6:	4620      	mov	r0, r4
 80133c8:	4629      	mov	r1, r5
 80133ca:	f7ec ffb7 	bl	800033c <__adddf3>
 80133ce:	e7d9      	b.n	8013384 <__ieee754_log10+0x24>
 80133d0:	2200      	movs	r2, #0
 80133d2:	e7f3      	b.n	80133bc <__ieee754_log10+0x5c>
 80133d4:	1518      	asrs	r0, r3, #20
 80133d6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80133da:	4410      	add	r0, r2
 80133dc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80133e0:	4448      	add	r0, r9
 80133e2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80133e6:	f7ed f8f5 	bl	80005d4 <__aeabi_i2d>
 80133ea:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80133ee:	3303      	adds	r3, #3
 80133f0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80133f4:	ec45 4b10 	vmov	d0, r4, r5
 80133f8:	4606      	mov	r6, r0
 80133fa:	460f      	mov	r7, r1
 80133fc:	f000 f848 	bl	8013490 <__ieee754_log>
 8013400:	a313      	add	r3, pc, #76	; (adr r3, 8013450 <__ieee754_log10+0xf0>)
 8013402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013406:	4630      	mov	r0, r6
 8013408:	4639      	mov	r1, r7
 801340a:	ed8d 0b00 	vstr	d0, [sp]
 801340e:	f7ed f94b 	bl	80006a8 <__aeabi_dmul>
 8013412:	ed9d 0b00 	vldr	d0, [sp]
 8013416:	4604      	mov	r4, r0
 8013418:	460d      	mov	r5, r1
 801341a:	a30f      	add	r3, pc, #60	; (adr r3, 8013458 <__ieee754_log10+0xf8>)
 801341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013420:	ec51 0b10 	vmov	r0, r1, d0
 8013424:	f7ed f940 	bl	80006a8 <__aeabi_dmul>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4620      	mov	r0, r4
 801342e:	4629      	mov	r1, r5
 8013430:	f7ec ff84 	bl	800033c <__adddf3>
 8013434:	a30a      	add	r3, pc, #40	; (adr r3, 8013460 <__ieee754_log10+0x100>)
 8013436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343a:	4604      	mov	r4, r0
 801343c:	460d      	mov	r5, r1
 801343e:	4630      	mov	r0, r6
 8013440:	4639      	mov	r1, r7
 8013442:	f7ed f931 	bl	80006a8 <__aeabi_dmul>
 8013446:	4602      	mov	r2, r0
 8013448:	460b      	mov	r3, r1
 801344a:	4620      	mov	r0, r4
 801344c:	4629      	mov	r1, r5
 801344e:	e7bc      	b.n	80133ca <__ieee754_log10+0x6a>
 8013450:	11f12b36 	.word	0x11f12b36
 8013454:	3d59fef3 	.word	0x3d59fef3
 8013458:	1526e50e 	.word	0x1526e50e
 801345c:	3fdbcb7b 	.word	0x3fdbcb7b
 8013460:	509f6000 	.word	0x509f6000
 8013464:	3fd34413 	.word	0x3fd34413
 8013468:	c3500000 	.word	0xc3500000
 801346c:	43500000 	.word	0x43500000
 8013470:	7fefffff 	.word	0x7fefffff

08013474 <__ieee754_sqrtf>:
 8013474:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013478:	4770      	bx	lr

0801347a <matherr>:
 801347a:	2000      	movs	r0, #0
 801347c:	4770      	bx	lr
	...

08013480 <nan>:
 8013480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013488 <nan+0x8>
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	00000000 	.word	0x00000000
 801348c:	7ff80000 	.word	0x7ff80000

08013490 <__ieee754_log>:
 8013490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013494:	ec51 0b10 	vmov	r0, r1, d0
 8013498:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801349c:	b087      	sub	sp, #28
 801349e:	460d      	mov	r5, r1
 80134a0:	da27      	bge.n	80134f2 <__ieee754_log+0x62>
 80134a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80134a6:	4303      	orrs	r3, r0
 80134a8:	ee10 2a10 	vmov	r2, s0
 80134ac:	d10a      	bne.n	80134c4 <__ieee754_log+0x34>
 80134ae:	49cc      	ldr	r1, [pc, #816]	; (80137e0 <__ieee754_log+0x350>)
 80134b0:	2200      	movs	r2, #0
 80134b2:	2300      	movs	r3, #0
 80134b4:	2000      	movs	r0, #0
 80134b6:	f7ed fa21 	bl	80008fc <__aeabi_ddiv>
 80134ba:	ec41 0b10 	vmov	d0, r0, r1
 80134be:	b007      	add	sp, #28
 80134c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c4:	2900      	cmp	r1, #0
 80134c6:	da05      	bge.n	80134d4 <__ieee754_log+0x44>
 80134c8:	460b      	mov	r3, r1
 80134ca:	f7ec ff35 	bl	8000338 <__aeabi_dsub>
 80134ce:	2200      	movs	r2, #0
 80134d0:	2300      	movs	r3, #0
 80134d2:	e7f0      	b.n	80134b6 <__ieee754_log+0x26>
 80134d4:	4bc3      	ldr	r3, [pc, #780]	; (80137e4 <__ieee754_log+0x354>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	f7ed f8e6 	bl	80006a8 <__aeabi_dmul>
 80134dc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80134e0:	460d      	mov	r5, r1
 80134e2:	4ac1      	ldr	r2, [pc, #772]	; (80137e8 <__ieee754_log+0x358>)
 80134e4:	4295      	cmp	r5, r2
 80134e6:	dd06      	ble.n	80134f6 <__ieee754_log+0x66>
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	f7ec ff26 	bl	800033c <__adddf3>
 80134f0:	e7e3      	b.n	80134ba <__ieee754_log+0x2a>
 80134f2:	2300      	movs	r3, #0
 80134f4:	e7f5      	b.n	80134e2 <__ieee754_log+0x52>
 80134f6:	152c      	asrs	r4, r5, #20
 80134f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80134fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013500:	441c      	add	r4, r3
 8013502:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013506:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801350e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013512:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013516:	ea42 0105 	orr.w	r1, r2, r5
 801351a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801351e:	2200      	movs	r2, #0
 8013520:	4bb2      	ldr	r3, [pc, #712]	; (80137ec <__ieee754_log+0x35c>)
 8013522:	f7ec ff09 	bl	8000338 <__aeabi_dsub>
 8013526:	1cab      	adds	r3, r5, #2
 8013528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801352c:	2b02      	cmp	r3, #2
 801352e:	4682      	mov	sl, r0
 8013530:	468b      	mov	fp, r1
 8013532:	f04f 0200 	mov.w	r2, #0
 8013536:	dc53      	bgt.n	80135e0 <__ieee754_log+0x150>
 8013538:	2300      	movs	r3, #0
 801353a:	f7ed fb1d 	bl	8000b78 <__aeabi_dcmpeq>
 801353e:	b1d0      	cbz	r0, 8013576 <__ieee754_log+0xe6>
 8013540:	2c00      	cmp	r4, #0
 8013542:	f000 8120 	beq.w	8013786 <__ieee754_log+0x2f6>
 8013546:	4620      	mov	r0, r4
 8013548:	f7ed f844 	bl	80005d4 <__aeabi_i2d>
 801354c:	a390      	add	r3, pc, #576	; (adr r3, 8013790 <__ieee754_log+0x300>)
 801354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013552:	4606      	mov	r6, r0
 8013554:	460f      	mov	r7, r1
 8013556:	f7ed f8a7 	bl	80006a8 <__aeabi_dmul>
 801355a:	a38f      	add	r3, pc, #572	; (adr r3, 8013798 <__ieee754_log+0x308>)
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	4604      	mov	r4, r0
 8013562:	460d      	mov	r5, r1
 8013564:	4630      	mov	r0, r6
 8013566:	4639      	mov	r1, r7
 8013568:	f7ed f89e 	bl	80006a8 <__aeabi_dmul>
 801356c:	4602      	mov	r2, r0
 801356e:	460b      	mov	r3, r1
 8013570:	4620      	mov	r0, r4
 8013572:	4629      	mov	r1, r5
 8013574:	e7ba      	b.n	80134ec <__ieee754_log+0x5c>
 8013576:	a38a      	add	r3, pc, #552	; (adr r3, 80137a0 <__ieee754_log+0x310>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	4650      	mov	r0, sl
 801357e:	4659      	mov	r1, fp
 8013580:	f7ed f892 	bl	80006a8 <__aeabi_dmul>
 8013584:	4602      	mov	r2, r0
 8013586:	460b      	mov	r3, r1
 8013588:	2000      	movs	r0, #0
 801358a:	4999      	ldr	r1, [pc, #612]	; (80137f0 <__ieee754_log+0x360>)
 801358c:	f7ec fed4 	bl	8000338 <__aeabi_dsub>
 8013590:	4652      	mov	r2, sl
 8013592:	4606      	mov	r6, r0
 8013594:	460f      	mov	r7, r1
 8013596:	465b      	mov	r3, fp
 8013598:	4650      	mov	r0, sl
 801359a:	4659      	mov	r1, fp
 801359c:	f7ed f884 	bl	80006a8 <__aeabi_dmul>
 80135a0:	4602      	mov	r2, r0
 80135a2:	460b      	mov	r3, r1
 80135a4:	4630      	mov	r0, r6
 80135a6:	4639      	mov	r1, r7
 80135a8:	f7ed f87e 	bl	80006a8 <__aeabi_dmul>
 80135ac:	4606      	mov	r6, r0
 80135ae:	460f      	mov	r7, r1
 80135b0:	b914      	cbnz	r4, 80135b8 <__ieee754_log+0x128>
 80135b2:	4632      	mov	r2, r6
 80135b4:	463b      	mov	r3, r7
 80135b6:	e0a0      	b.n	80136fa <__ieee754_log+0x26a>
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7ed f80b 	bl	80005d4 <__aeabi_i2d>
 80135be:	a374      	add	r3, pc, #464	; (adr r3, 8013790 <__ieee754_log+0x300>)
 80135c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c4:	4680      	mov	r8, r0
 80135c6:	4689      	mov	r9, r1
 80135c8:	f7ed f86e 	bl	80006a8 <__aeabi_dmul>
 80135cc:	a372      	add	r3, pc, #456	; (adr r3, 8013798 <__ieee754_log+0x308>)
 80135ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d2:	4604      	mov	r4, r0
 80135d4:	460d      	mov	r5, r1
 80135d6:	4640      	mov	r0, r8
 80135d8:	4649      	mov	r1, r9
 80135da:	f7ed f865 	bl	80006a8 <__aeabi_dmul>
 80135de:	e0a5      	b.n	801372c <__ieee754_log+0x29c>
 80135e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80135e4:	f7ec feaa 	bl	800033c <__adddf3>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4650      	mov	r0, sl
 80135ee:	4659      	mov	r1, fp
 80135f0:	f7ed f984 	bl	80008fc <__aeabi_ddiv>
 80135f4:	e9cd 0100 	strd	r0, r1, [sp]
 80135f8:	4620      	mov	r0, r4
 80135fa:	f7ec ffeb 	bl	80005d4 <__aeabi_i2d>
 80135fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013606:	4610      	mov	r0, r2
 8013608:	4619      	mov	r1, r3
 801360a:	f7ed f84d 	bl	80006a8 <__aeabi_dmul>
 801360e:	4602      	mov	r2, r0
 8013610:	460b      	mov	r3, r1
 8013612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013616:	f7ed f847 	bl	80006a8 <__aeabi_dmul>
 801361a:	a363      	add	r3, pc, #396	; (adr r3, 80137a8 <__ieee754_log+0x318>)
 801361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013620:	4680      	mov	r8, r0
 8013622:	4689      	mov	r9, r1
 8013624:	f7ed f840 	bl	80006a8 <__aeabi_dmul>
 8013628:	a361      	add	r3, pc, #388	; (adr r3, 80137b0 <__ieee754_log+0x320>)
 801362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362e:	f7ec fe85 	bl	800033c <__adddf3>
 8013632:	4642      	mov	r2, r8
 8013634:	464b      	mov	r3, r9
 8013636:	f7ed f837 	bl	80006a8 <__aeabi_dmul>
 801363a:	a35f      	add	r3, pc, #380	; (adr r3, 80137b8 <__ieee754_log+0x328>)
 801363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013640:	f7ec fe7c 	bl	800033c <__adddf3>
 8013644:	4642      	mov	r2, r8
 8013646:	464b      	mov	r3, r9
 8013648:	f7ed f82e 	bl	80006a8 <__aeabi_dmul>
 801364c:	a35c      	add	r3, pc, #368	; (adr r3, 80137c0 <__ieee754_log+0x330>)
 801364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013652:	f7ec fe73 	bl	800033c <__adddf3>
 8013656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801365a:	f7ed f825 	bl	80006a8 <__aeabi_dmul>
 801365e:	a35a      	add	r3, pc, #360	; (adr r3, 80137c8 <__ieee754_log+0x338>)
 8013660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013668:	4640      	mov	r0, r8
 801366a:	4649      	mov	r1, r9
 801366c:	f7ed f81c 	bl	80006a8 <__aeabi_dmul>
 8013670:	a357      	add	r3, pc, #348	; (adr r3, 80137d0 <__ieee754_log+0x340>)
 8013672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013676:	f7ec fe61 	bl	800033c <__adddf3>
 801367a:	4642      	mov	r2, r8
 801367c:	464b      	mov	r3, r9
 801367e:	f7ed f813 	bl	80006a8 <__aeabi_dmul>
 8013682:	a355      	add	r3, pc, #340	; (adr r3, 80137d8 <__ieee754_log+0x348>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	f7ec fe58 	bl	800033c <__adddf3>
 801368c:	4642      	mov	r2, r8
 801368e:	464b      	mov	r3, r9
 8013690:	f7ed f80a 	bl	80006a8 <__aeabi_dmul>
 8013694:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80136a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136a4:	f7ec fe4a 	bl	800033c <__adddf3>
 80136a8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80136ac:	3551      	adds	r5, #81	; 0x51
 80136ae:	4335      	orrs	r5, r6
 80136b0:	2d00      	cmp	r5, #0
 80136b2:	4680      	mov	r8, r0
 80136b4:	4689      	mov	r9, r1
 80136b6:	dd48      	ble.n	801374a <__ieee754_log+0x2ba>
 80136b8:	2200      	movs	r2, #0
 80136ba:	4b4d      	ldr	r3, [pc, #308]	; (80137f0 <__ieee754_log+0x360>)
 80136bc:	4650      	mov	r0, sl
 80136be:	4659      	mov	r1, fp
 80136c0:	f7ec fff2 	bl	80006a8 <__aeabi_dmul>
 80136c4:	4652      	mov	r2, sl
 80136c6:	465b      	mov	r3, fp
 80136c8:	f7ec ffee 	bl	80006a8 <__aeabi_dmul>
 80136cc:	4602      	mov	r2, r0
 80136ce:	460b      	mov	r3, r1
 80136d0:	4606      	mov	r6, r0
 80136d2:	460f      	mov	r7, r1
 80136d4:	4640      	mov	r0, r8
 80136d6:	4649      	mov	r1, r9
 80136d8:	f7ec fe30 	bl	800033c <__adddf3>
 80136dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136e0:	f7ec ffe2 	bl	80006a8 <__aeabi_dmul>
 80136e4:	4680      	mov	r8, r0
 80136e6:	4689      	mov	r9, r1
 80136e8:	b964      	cbnz	r4, 8013704 <__ieee754_log+0x274>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ec fe21 	bl	8000338 <__aeabi_dsub>
 80136f6:	4602      	mov	r2, r0
 80136f8:	460b      	mov	r3, r1
 80136fa:	4650      	mov	r0, sl
 80136fc:	4659      	mov	r1, fp
 80136fe:	f7ec fe1b 	bl	8000338 <__aeabi_dsub>
 8013702:	e6da      	b.n	80134ba <__ieee754_log+0x2a>
 8013704:	a322      	add	r3, pc, #136	; (adr r3, 8013790 <__ieee754_log+0x300>)
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801370e:	f7ec ffcb 	bl	80006a8 <__aeabi_dmul>
 8013712:	a321      	add	r3, pc, #132	; (adr r3, 8013798 <__ieee754_log+0x308>)
 8013714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013718:	4604      	mov	r4, r0
 801371a:	460d      	mov	r5, r1
 801371c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013720:	f7ec ffc2 	bl	80006a8 <__aeabi_dmul>
 8013724:	4642      	mov	r2, r8
 8013726:	464b      	mov	r3, r9
 8013728:	f7ec fe08 	bl	800033c <__adddf3>
 801372c:	4602      	mov	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	4630      	mov	r0, r6
 8013732:	4639      	mov	r1, r7
 8013734:	f7ec fe00 	bl	8000338 <__aeabi_dsub>
 8013738:	4652      	mov	r2, sl
 801373a:	465b      	mov	r3, fp
 801373c:	f7ec fdfc 	bl	8000338 <__aeabi_dsub>
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	4620      	mov	r0, r4
 8013746:	4629      	mov	r1, r5
 8013748:	e7d9      	b.n	80136fe <__ieee754_log+0x26e>
 801374a:	4602      	mov	r2, r0
 801374c:	460b      	mov	r3, r1
 801374e:	4650      	mov	r0, sl
 8013750:	4659      	mov	r1, fp
 8013752:	f7ec fdf1 	bl	8000338 <__aeabi_dsub>
 8013756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801375a:	f7ec ffa5 	bl	80006a8 <__aeabi_dmul>
 801375e:	4606      	mov	r6, r0
 8013760:	460f      	mov	r7, r1
 8013762:	2c00      	cmp	r4, #0
 8013764:	f43f af25 	beq.w	80135b2 <__ieee754_log+0x122>
 8013768:	a309      	add	r3, pc, #36	; (adr r3, 8013790 <__ieee754_log+0x300>)
 801376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013772:	f7ec ff99 	bl	80006a8 <__aeabi_dmul>
 8013776:	a308      	add	r3, pc, #32	; (adr r3, 8013798 <__ieee754_log+0x308>)
 8013778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377c:	4604      	mov	r4, r0
 801377e:	460d      	mov	r5, r1
 8013780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013784:	e729      	b.n	80135da <__ieee754_log+0x14a>
 8013786:	2000      	movs	r0, #0
 8013788:	2100      	movs	r1, #0
 801378a:	e696      	b.n	80134ba <__ieee754_log+0x2a>
 801378c:	f3af 8000 	nop.w
 8013790:	fee00000 	.word	0xfee00000
 8013794:	3fe62e42 	.word	0x3fe62e42
 8013798:	35793c76 	.word	0x35793c76
 801379c:	3dea39ef 	.word	0x3dea39ef
 80137a0:	55555555 	.word	0x55555555
 80137a4:	3fd55555 	.word	0x3fd55555
 80137a8:	df3e5244 	.word	0xdf3e5244
 80137ac:	3fc2f112 	.word	0x3fc2f112
 80137b0:	96cb03de 	.word	0x96cb03de
 80137b4:	3fc74664 	.word	0x3fc74664
 80137b8:	94229359 	.word	0x94229359
 80137bc:	3fd24924 	.word	0x3fd24924
 80137c0:	55555593 	.word	0x55555593
 80137c4:	3fe55555 	.word	0x3fe55555
 80137c8:	d078c69f 	.word	0xd078c69f
 80137cc:	3fc39a09 	.word	0x3fc39a09
 80137d0:	1d8e78af 	.word	0x1d8e78af
 80137d4:	3fcc71c5 	.word	0x3fcc71c5
 80137d8:	9997fa04 	.word	0x9997fa04
 80137dc:	3fd99999 	.word	0x3fd99999
 80137e0:	c3500000 	.word	0xc3500000
 80137e4:	43500000 	.word	0x43500000
 80137e8:	7fefffff 	.word	0x7fefffff
 80137ec:	3ff00000 	.word	0x3ff00000
 80137f0:	3fe00000 	.word	0x3fe00000

080137f4 <_init>:
 80137f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f6:	bf00      	nop
 80137f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137fa:	bc08      	pop	{r3}
 80137fc:	469e      	mov	lr, r3
 80137fe:	4770      	bx	lr

08013800 <_fini>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	bf00      	nop
 8013804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013806:	bc08      	pop	{r3}
 8013808:	469e      	mov	lr, r3
 801380a:	4770      	bx	lr
